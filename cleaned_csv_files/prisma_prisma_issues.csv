issue_id,issue_number,issue_title,issue_body,comment_id,comment_body
2687046542,25714,Possible memory leak using driver adapters with cloudflare D1,"### Bug description

Around the 16th november we started to get errors when making prisma calls in our production prisma/cloudflare workers/d1 setup.

<img width=""1793"" alt=""image"" src=""https://github.com/user-attachments/assets/d71c7419-e8e3-4129-a062-c5a6197e2800"">

The errors consisted of either:

""memory access out of bounds""
or
""Invalid typed array length: undefined""

We had made no recent deployments nor had our load profile changed, this was pretty out of the blue so might suggest there was a change made on the cloudflare side.

At the moment, our workaround when we start getting these errors is to redeploy the same code base, and this (usually) seems to trigger some sort of worker restart and clears the problem for a short period.

We have been going backwards and forwards with their support but it's fairly slow going, and their current response is:

>Our Workers team confirmed this is coming from the Prisma library you're using.
>They seem to be using WASM, and it's causing these memory access violations.
>You should be able to see this locally too with an up-to-date Wrangler.
>We'd recommend reaching out to the Prisma team and reporting the issue to them. It would be best to provide a reproduction case to them if you can as well.

I think we can reproduce some sort of memory leak locally, and a reproduction case is available [here](https://github.com/tellisnz/prisma-d1-example) - but it is fairly trivial and basically a reproduction of instructions from [cloudflare](https://developers.cloudflare.com/d1/tutorials/d1-and-prisma-orm/) / [prisma](https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1).

If you run it, and start making requests against it, e.g. with

`while true; do curl http://localhost:8787 ; done`

and take memory snapshots every now and again, you see typed array usage increasing rapidly

<img width=""779"" alt=""image"" src=""https://github.com/user-attachments/assets/2a5cd659-3e15-4988-8ef2-f4c0f79e0b81"">

and can inspect:

<img width=""2050"" alt=""image"" src=""https://github.com/user-attachments/assets/0cb2b449-f925-4645-bbf8-1e6129d6921b"">


### How to reproduce

1. Clone https://github.com/tellisnz/prisma-d1-example and `npm i`
2. Create your own demo db i.e. `npx wrangler d1 create prisma-demo-db` (although not sure if completely necessary if just attempting to run locally) - but if using remote change database_id in wranger.toml 
4. Run `npx wrangler d1 migrations apply prisma-demo-db --local`
5. Run `npx prisma generate`
6. Run `npm run dev`
7. Press `d` to open dev tools.
8. Make requests to http://localhost:8787 and observe memory usage in dev tools.

### Expected behavior

There should be no memory leak and memory usage should stay fairly constant.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

```ts
import { PrismaClient } from ""@prisma/client"";
import { PrismaD1 } from ""@prisma/adapter-d1"";

export interface Env {
	DB: D1Database;
}

export default {
	async fetch(request, env, ctx): Promise<Response> {
		const adapter = new PrismaD1(env.DB);
		const prisma = new PrismaClient({ adapter, log: [ ""info"", ""query"", ""warn"", ""error"" ] });
		// const users = await prisma.user.upsert({
		// 	create: {
		// 		email: 'test@test.com',
		// 		name: 'test'
		// 	},
		// 	update: {
		// 		email: 'test@test.com',
		// 		name: 'test'
		// 	},
		// 	where: {
		// 		email: 'test@test.com'
		// 	}
		// });
		// const users = await prisma.user.create({ data: { name: Math.random().toString(), email: Math.random().toString() }})
		const users = await prisma.user.findMany({ where: { name: 'test'}});
		const result = JSON.stringify(users);
		return new Response(result);
	},
} satisfies ExportedHandler<Env>;
```


### Environment & setup

- OS: macOS
- Database: SQLite / Cloudflare D1
- Node.js version: v22.11.0

### Prisma Version

```
prisma                  : 5.22.0
@prisma/client          : 5.22.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.11.0
Query Engine (Node-API) : libquery-engine 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
Default Engines Hash    : 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Studio                  : 0.503.0
Preview Features        : driverAdapters

```
",,
2685557462,25711,Filter conditions and operators StartWith ingore the DOT .,"### Bug description

StartWith  on prisma filter ingore "" . "" dot in the string value when pass to prisma

```
const findPorts = await prisma.port.findMany({
  where: {
    portNumber: {
      startsWith: ""1."",
    },
  },
});
// should return port that starts with 1. only
// but it also returns 11. 12. 13. because it ignores the dot and prisma get it as ""1"" not ""1.""
```

### How to reproduce

```
enerator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model Port {
  id       String   @id @default(auto()) @map(""_id"") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  portNumber String
}

```



```
import { PrismaClient } from ""@prisma/client"";
const prisma = new PrismaClient();

const createPort = async () => {
  const ports = [...Array(14)].map((_, i) => {
    return i + 1;
  });

  const slots = [...Array(14)].map((_, i) => {
    const slot = i + 1 < 10 ? `0${i + 1}` : i + 1;
    return slot;
  });

  const portData = ports
    .map((port) => {
      return slots.map((slot) => {
        return `${port}.${slot}`;  //you can change dot to other symbol like / or - it will work just fine
      });
    })
    .flat();

  const createPorts = await prisma.port.createMany({
    data: portData.map((port) => {
      return {
        portNumber: port,
      };
    }),
  });

  return createPorts;
};

await createPort();

const findPorts = await prisma.port.findMany({
  where: {
    portNumber: {
      startsWith: ""1."", //you can change dot to other symbol like / or - it will work just fine
    },
  },
});

// should return port that starts with 1.
// but it also returns 11. 12. 13. because it ignores the dot
console.log(findPorts);

```


### Expected behavior

should not ignore . 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

    ""prisma"": ""^5.22.0""
    ""bun"":1.1.31
    


### Prisma Version

```
prisma                  : 4.13.0
@prisma/client          : 5.22.0
Current platform        : windows
Query Engine (Node-API) : libquery-engine 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a (at C:\Users\Lenovo\AppData\Roaming\npm\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node)
Migration Engine        : migration-engine-cli 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a (at C:\Users\Lenovo\AppData\Roaming\npm\node_modules\prisma\node_modules\@prisma\engines\migration-engine-windows.exe)
Format Wasm             : @prisma/prisma-fmt-wasm 4.13.0-50.1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
Default Engines Hash    : 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
Studio                  : 0.484.0
```
",,
2683809708,25707,Search Field Object Builder,"## Problem
so many times when i have a lot of fields that i want to Seach for a string value like name or email i end up with chain of OR object to check if the value in this field or not and return it 

## Suggested solution
```
/**
   * Build a dynamic search object for a Prisma table.
   * @param tableName - The name of the Prisma model/table.
   * @param searchString - The string to search for.
   * @param excludeFields - Optional array of fields to exclude from the search.
   *                         Connected (relation) fields are excluded by default.
   * @returns {Promise<any>} - The dynamic search object.
   */
  async buildSearchObject(
    tableName: keyof PrismaClient,
    searchString: string,
    excludeFields?: string[],
  ): Promise<any | undefined> {
    try {
      if (!searchString) {
        return undefined;
      }
      const model = Prisma.dmmf.datamodel.models.find(
        (model) => model.name === tableName,
      );

      if (!model) {
        throw new Error(
          `Model '${tableName.toString()}' does not exist in Prisma schema.`,
        );
      }

      const fields = model.fields
        .filter((field) => {
          return field.kind !== 'object' && field.type === 'String';
        })
        .map((field) => field.name);

      const filteredFields = excludeFields
        ? fields.filter((field) => !excludeFields.includes(field))
        : fields;

      const orConditions = filteredFields.map((field) => ({
        [field]: { contains: searchString },
      }));

      return {
        OR: orConditions,
      };
    } catch (error) {
      console.error('Error building search object:', error);
      throw error;
    }
  }
```
a function like this where its take the model i`m searching in what the value i search for as second arg and the if there is any fields that i don't want to look for

",,
2683475554,25705,Random PrismaClientUnknownRequestError Occurring After Driver Update with Cloudflare Workers + MongoDB Atlas,"### Bug description

Starting November 12th, we began experiencing a random and recurring issue where 10-15% of our database queries fail with the following error:

```
PrismaClientUnknownRequestError: 
Invalid prisma.level.findFirst() invocation:

Operation 'findFirst' for model 'level' does not match any query.
```

Or:

```
PrismaClientUnknownRequestError: 
Invalid prisma.rewards.findMany() invocation:

Operation 'findMany' for model 'rewards' does not match any query.
```

And so on...

This issue happens intermittently and impacts various models across our collections. No changes were made to the system or database schemas, except for a driver update to the latest Prisma version shortly before the issue started.

We are using Cloudflare Workers with MongoDB Atlas, and the problem has persisted since the driver update.

### How to reproduce

Unfortunately, the issue is random and not easily reproducible. However, it consistently impacts approximately 10-15% of the calls made to our database.

### Expected behavior

All database queries should execute without throwing random PrismaClientUnknownRequestError exceptions.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

enum QuestStatusEnum {
  DRAFT
  ARCHIVED
  COMING_SOON
  LIVE
}

enum ProgressionTypeEnum {
  quest
  task
}

enum UserCreditTypeEnum {
  quest
  task
  referral
}

enum UserLootDropEntriesType {
  level
  category
}

type QuestsEarn {
  credits Int?
  xp      Int
}

type QuestsTasks {
  id     String
  name   String
  earn   QuestsTasksEarn
  status QuestStatusEnum
}

type QuestsTasksEarn {
  credits Int?
  xp      Int
}

type UsersCredits {
  total    Float?
  referral Float?
}

model campaigns {
  id          String   @id @default(auto()) @map(""_id"") @db.ObjectId
  key         String
  isActive    Boolean
  categoryIds String[]
}

model categories {
  id                  String                @id @default(auto()) @map(""_id"") @db.ObjectId
  key                 String
  name                String
  isActive            Boolean
  userLootDropEntries userLootDropEntries[]
}

model quests {
  id          String          @id @default(auto()) @map(""_id"") @db.ObjectId
  name        String
  categoryId  String
  earn        QuestsEarn
  status      QuestStatusEnum
  tasks       QuestsTasks[]
  progression progression[]
  level       level?          @relation(fields: [levelId], references: [id])
  levelId     String?         @db.ObjectId

  @@index([categoryId], map: ""categoryId_1"")
}

type rewardsIntegrationConstraints {
  maxUnitDistributionLimit Int?
}

model transactionHistory {
  id          String  @id @default(auto()) @map(""_id"") @db.ObjectId
  type        String
  userId      String
  taskId      String?
  questId     String?
  categoryId  String?
  campaignId  String?
  rewardId    String?
  lootDropId  String?
  value       Int
  description String
  createdAt   String

  @@index([userId], map: ""userId_1"")
}

model users {
  id                  String                @id @default(auto()) @map(""_id"") @db.ObjectId
  legacyUserId        String
  xp                  Int
  credits             UsersCredits?
  progression         progression[]
  userLootDropEntries userLootDropEntries[]

  @@index([xp], map: ""xp_1"")
}

model progression {
  id        String              @id @default(auto()) @map(""_id"") @db.ObjectId
  xp        Int
  userId    String              @db.ObjectId
  users     users               @relation(fields: [userId], references: [id])
  questId   String              @db.ObjectId
  quests    quests              @relation(fields: [questId], references: [id])
  taskId    String?
  type      ProgressionTypeEnum
  active    Boolean
  createdAt DateTime            @db.Date

  @@index([xp], map: ""xp_1"")
  @@index([userId], map: ""userId_1"")
  @@index([taskId], map: ""taskId_1"")
  @@index([questId], map: ""questId_1"")
  @@index([type], map: ""type_1"")
}

model userCredit {
  id             String             @id @default(auto()) @map(""_id"") @db.ObjectId
  userId         String
  referredUserId String?
  questId        String?
  taskId         String?
  amount         Float
  type           UserCreditTypeEnum
  active         Boolean
  createdAt      String

  @@index([userId], map: ""userId_1"")
  @@index([referredUserId], map: ""referredUserId_1"")
  @@index([type], map: ""type_1"")
}

model userReferral {
  id             String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId         String
  referrerUserId String
  active         Boolean
  createdAt      String
  acceptedAt     String

  @@index([userId], map: ""userId_1"")
  @@index([referrerUserId], map: ""referrerUserId_1"")
}

model level {
  id                  String                @id @default(auto()) @map(""_id"") @db.ObjectId
  name                String
  level               Int
  minimumXp           Int
  createdAt           DateTime              @db.Date
  updatedAt           DateTime              @db.Date
  quests              quests[]
  userLootDropEntries userLootDropEntries[]
}

model rewards {
  id                  String  @id @default(auto()) @map(""_id"") @db.ObjectId
  title               String
  campaignId          String?
  categoryId          String?
  questId             String?
  taskId              String?
  lootDropId          String?
  level               Int?
  rewardIntegrationId String
  units               Int
  active              Boolean
}

model rewardsIntegration {
  id               String                         @id @default(auto()) @map(""_id"") @db.ObjectId
  constraints      rewardsIntegrationConstraints?
  distributedCount Int
  active           Boolean
}

model rewardsRedeemed {
  id                  String   @id @default(auto()) @map(""_id"") @db.ObjectId
  rewardId            String
  rewardIntegrationId String
  userId              String
  campaignId          String?
  categoryId          String?
  questId             String?
  taskId              String?
  lootDropId          String?
  level               Int?
  units               Int
  redeemed            Boolean
  acquiredAt          String
  active              Boolean?
}

model lootDrops {
  id                    String                @id @default(auto()) @map(""_id"") @db.ObjectId
  name                  String
  startTime             String
  endTime               String
  categoriesIds         String[]
  multiplierPerLevel    Int
  multiplierPerCategory Int
  userLootDropEntries   userLootDropEntries[]
}

model userLootDrop {
  id          String @id @default(auto()) @map(""_id"") @db.ObjectId
  userId      String
  lootDropId  String
  consentedAt String
  multiplier  Int
}

model userLootDropEntries {
  id         String                  @id @default(auto()) @map(""_id"") @db.ObjectId
  users      users                   @relation(fields: [userId], references: [id])
  userId     String                  @db.ObjectId
  lootDrops  lootDrops               @relation(fields: [lootDropId], references: [id])
  lootDropId String                  @db.ObjectId
  level      level?                  @relation(fields: [levelId], references: [id])
  levelId    String?                 @db.ObjectId
  categories categories?             @relation(fields: [categoryId], references: [id])
  categoryId String?                 @db.ObjectId
  multiplier Int
  type       UserLootDropEntriesType
  active     Boolean
  acquiredAt DateTime                @db.Date
}
```

```ts
      /**
       * Set the Prisma client
       * @param params.connectionString The connection string / url string.
       * @returns The Prisma client.
       */
      const set = (params: { connectionString: string }) => {
        const { connectionString } = params;
      
        // Create the Prisma client
        return new PrismaClient({
          datasources: {
            db: {
              url: connectionString,
            },
          },
        }).$extends(withAccelerate());
      };

    // Check if there are rewards attached to the category
    const rewards = await repo.rewards.findMany({
      where: {
        campaignId: campaign.id,
        active: true,
      },
    });
    if (!rewards.length) return;
    
    // Get the user level based on the XP.
    const level = await repo.level.findFirst({
      select: {
        id: true,
        level: true,
      },
      where: {
        minimumXp: {
          lte: user.xp,
        },
      },
      orderBy: {
        level: 'desc',
      },
    });
    if (!level) throw new Error('User does not have a level');    
```


### Environment & setup

Prisma Version: 5.22.0
Node.js Version: >= v20.0.0
Deployment Environment: Cloudflare Workers
Database: MongoDB Atlas


### Prisma Version

```
10.8.2
```
",,
2681831795,25704,`@prisma/extension-optimize` can't run in react-native dev,"error info:

```
The package at ""node_modules\@opentelemetry\context-async-hooks\build\src\AsyncHooksContextManager.js"" attempted to import the Node standard library module ""async_hooks"".
It failed because the native React runtime does not include the Node standard library.
Learn more: https://docs.expo.dev/workflow/using-libraries/#using-third-party-libraries
```

it seems `@prisma/extension-optimize` relys on this node.js package which is not supported in react-native dev environment.
",,
2678381700,25696,Prisma detects schema drift related to the crdb_internal_region enum + Error: P1001: Can't reach database server at `cluster-url.cloud`:`26257`,"### Bug description

I'm experiencing an issue when running npx prisma migrate dev against a CockroachDB multi-region cluster. The migration fails with the following error:

Error: P1001: Can't reach database server at `cluster-url.cloud`:`26257`
Additionally, Prisma detects schema drift related to the crdb_internal_region enum:

Drift detected: Your database schema is not in sync with your migration history.

[-] Removed enums
  - crdb_internal_region

? We need to reset the CockroachDB database ""defaultdb"" at ""your-cluster-url.cloud:26257""

This issue started occurring around November 8th, 2024. Prior to this, migrations were working correctly. The problem seems to be related to the introduction of the crdb_internal_region enum in CockroachDB's multi-region clusters, which causes Prisma to detect schema drift and fail the migration.

Additional context

CockroachDB support identified that the crdb_internal_region enum is causing schema drift during migrations because it's present in the multi-region cluster's schema but not expected by Prisma.
Attempts to ignore crdb_internal_region using @@ignore directives were unsuccessful; Prisma still tries to modify or drop the enum, causing the migration to fail.
Possible workarounds like creating a custom shadow database without the crdb_internal_region enum or migrating to a single-region cluster are not ideal solutions.
Related GitHub Issue: [Prisma Issue #11127](https://github.com/prisma/prisma/issues/11127)
Questions

Is there a way to configure Prisma to properly handle the crdb_internal_region enum during migrations with CockroachDB multi-region clusters?
Are there any known workarounds or updates planned to address compatibility issues between Prisma migrations and CockroachDB's multi-region clusters?
Would you recommend migrating to a single-region cluster to avoid this issue, or is there an alternative solution within Prisma's configuration?
Thank you for your assistance. Any guidance on this matter would be greatly appreciated

<img width=""779"" alt=""crdb_internal_region_shot"" src=""https://github.com/user-attachments/assets/6896f16e-5922-4e71-afb5-eb16a2779c48"">
<img width=""1049"" alt=""first_and_second_run"" src=""https://github.com/user-attachments/assets/93585e48-6fdf-4ef6-b16d-9a82f3801958"">
<img width=""872"" alt=""fourth_run"" src=""https://github.com/user-attachments/assets/db482191-dc1d-487a-9b91-ee4b19f75f65"">
<img width=""731"" alt=""migration_file"" src=""https://github.com/user-attachments/assets/7278ab8a-4fe6-4f7a-bdca-30a5050ac48b"">
<img width=""1053"" alt=""third_run"" src=""https://github.com/user-attachments/assets/634d36f9-2fa8-4bba-8706-2b7261496e92"">


### How to reproduce

Set up a CockroachDB multi-region cluster on CockroachDB Cloud.

Initialize a Prisma project and connect it to the CockroachDB cluster using the provided connection string in your .env file.

Run a migration using the command:

npx prisma migrate dev --name test_migration
Observe the error related to P1001 and schema drift involving crdb_internal_region.

### Expected behavior

Expected behavior

The migration should run successfully without errors, updating the database schema as defined in the Prisma schema, even when using a multi-region CockroachDB cluster. Prisma should handle the crdb_internal_region enum appropriately during migrations.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

Node.js version: v18.17.1
Database: CockroachDB (multi-region cluster on CockroachDB Cloud)
Operating System: mac os
Database client: Prisma Client JS

### Prisma Version

```
""prisma"": ""^5.9.1""
""@prisma/client"": ""^5.16.1"",
```
",,
2677618474,25695,multiSchema previewFeatures breaks migrate diff command,"### Bug description

When using the `multiSchema` in `previewFeatures` option, the `migrate diff` command is not functioning as expected. This issue causes the migration diff process to produce incorrect results.

### How to reproduce

1. Enable multiSchema previewFeatures in the configuration.
1. Run the migrate diff command.
1. Observe the output and compare it with the expected migration changes.


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema"", ""prismaSchemaFolder""]
  binaryTargets   = [""native""]
}

datasource db {
  provider   = ""postgresql""
  url        = env(""DATABASE_URL"")
  directUrl  = env(""DATABASE_DIRECT_URL"")
}
```


### Environment & setup

- OS: macOS 15
- Database: PostgreSQL v16
- Node.js version: v20


### Prisma Version

```
prisma                         : 5.22.0
@prisma/client           : 5.22.0
```
",,
2672652139,25677,"Cannot Create - Error about ""m"" being present in uuid when it is not","### Discussed in https://github.com/prisma/prisma/discussions/25668

<div type='discussions-op-text'>

<sup>Originally posted by **OriGummy** November 19, 2024</sup>
### Question

I create a row with some valid uuid, and get error:
```'Error creating UUID, invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found `m` at 2```
I added no ""m"" character and printing seems valid.

Full Logs:
```
{
  venueId: 'da0e9a82-f222-4029-9a6f-d15ea210b7d3',
  userId: 'd542b2cb-dc28-4fa9-b104-362b0e4e3ba4'
}
PrismaClientKnownRequestError: 
Invalid `prisma.attendee.create()` invocation in
/home/origummy/src/chremp-back/src/app/routes/menu/getVenueMenu.controller.ts:24:46

  21 let menu: MenuModel | null = null;
  22 if (!attendee) { // Not even attending
  23   console.log({venueId, userId})
→ 24   let attendee = await prisma.attendee.create(
Inconsistent column data: Error creating UUID, invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found `m` at 2
    at $n.handleRequestError (/home/origummy/src/chremp-back/node_modules/@prisma/client/runtime/library.js:121:7315)
    at $n.handleAndLogRequestError (/home/origummy/src/chremp-back/node_modules/@prisma/client/runtime/library.js:121:6623)
    at $n.request (/home/origummy/src/chremp-back/node_modules/@prisma/client/runtime/library.js:121:6307)
    at async l (/home/origummy/src/chremp-back/node_modules/@prisma/client/runtime/library.js:130:9633)
    at <anonymous> (/home/origummy/src/chremp-back/src/app/routes/menu/getVenueMenu.controller.ts:24:24) {
  code: 'P2023',
  clientVersion: '5.22.0',
  meta: {
    modelName: 'Attendee',
    message: 'Error creating UUID, invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found `m` at 2'
  }
}
```


I tried deleting the ""migrations"" folder, tried reinstalling prisma, tried regenerating client. Nope. What could be the problem?

Thanks for reading this.

### How to reproduce (optional)

_No response_

### Expected behavior (optional)

_No response_

### Information about Prisma Schema, Client Queries and Environment (optional)

```prisma
model Venue {
  id       String   @id @db.Uuid @default(cuid())
  title    String
  bio      String?
  location String
  time     BigInt

  attendees    Attendee[]
}

model Attendee {
  id                    String   @id @db.Uuid @default(cuid())
  venue                 Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId               String   @db.Uuid
  user                  Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @db.Uuid
}

model Profile {
  id         String   @id @db.Uuid @default(cuid())
  first_name String   @default(""unknown"")
  last_name  String?
  phone      String

  attendees  Attendee[]
}
```

```ts
console.log({venueId, userId}) // Notice output is correct in the attached before logs
let attendee = await prisma.attendee.create({
  data: {
    venueId,
    userId,
  },
});
```

- OS: Ubuntu
- Database: PostgreSQL (SupaBase
- Node.js version: v20.11.0

```
prisma                  : 5.22.0
@prisma/client          : 5.22.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
Default Engines Hash    : 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Studio                  : 0.503.0
Preview Features        : views
```</div>",,
2672050631,25672,`cross-spawn` dependency vulnerable to CVE-2024-21538,"### Bug description

`@prisma/generator-helper` and `@prisma/internals` currently depends on `cross-spawn: 7.0.3` which is vulnerable to [CVE-2024-21538|https://github.com/advisories/GHSA-3xgq-45jj-v275].

### How to reproduce

In a project that includes the dependencies:

* `@tsed/prisma`
* `@prisma/generator-helper`
* `@prisma/internals`

run `npm audit --omit=dev`.

You will see the following:

```
cross-spawn  <7.0.5
Severity: high
Regular Expression Denial of Service (ReDoS) in cross-spawn - https://github.com/advisories/GHSA-3xgq-45jj-v275
No fix available
node_modules/cross-spawn
  node_modules/@prisma/generator-helper
      Depends on vulnerable versions of @prisma/generator-helper
      Depends on vulnerable versions of @prisma/internals
      node_modules/@tsed/prisma
```

### Expected behavior

`npm audit` should return without finding vulnerabilities in `cross-spawn`.

### Prisma information

N/A

### Environment & setup

- OS: `Windows`
- Database: `MariaDB`
- Node.js version: `v20.11.1`

### Prisma Version

```
5.9.1
```
",,
2665409399,25662,Promise.all() returns null with findUnique(),"### Bug description

Same issue as before posted in #18096 and #4438. After testing, the type `Float` seems to be the culprit when using `findUnique()`. If I replace it `rank` with an `Int`, it works.

### How to reproduce

Calling this returns `null` for both results even though the rows exist.
```typescript
    const results = await Promise.all([
        prisma.z.findUnique({
          where: {
            fk_y_rank_version: {
              fk_y: someUuid,
              rank: 1,
            },
          },
        }),
        prisma.z.findUnique({
          where: {
            fk_y_rank_version: {
              fk_y: someUuid,
              rank: 1,
            },
          },
        }),
      ])

// results: [null, null]
```


### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""views""]
  binaryTargets   = [""native"", ""debian-openssl-3.0.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_CONNECTION_STRING"")
}

model Y {
  uuid String @id @default(dbgenerated(""gen_random_uuid()""))
  z Z[]
  @@map(""Y"")
}

model Z {
  uuid                   String          @id @default(dbgenerated(""gen_random_uuid()""))
  y                Y         @relation(fields: [fk_y], references: [uuid], onDelete: Cascade)
  rank                   Float

  fk_y String  @map(""y"") @db.Uuid

  @@unique([fk_y, rank])
  @@map(""Z"")
}
```

### Environment & setup

Node v20.10.0

### Prisma Version

```
prisma                  : 5.22.0
@prisma/client          : 5.22.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at ..\..\node_modules\.pnpm\@prisma+engines@5.22.0\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at ..\..\node_modules\.pnpm\@prisma+engines@5.22.0\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
Default Engines Hash    : 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Studio                  : 0.503.0
Preview Features        : views
```
",,
2665287760,25661,"add record in prisma studio is not creating a new ""Post"" collection in mongodb database","### Bug description

Type: undefined
Message: 
Invalid `p=e.match(jAt)?.[1]??"""",g=e.match(BAt)?.[1]??null,v=e.match(UAt)?.[1]??null,{getPrismaClient:x,PrismaClientKnownRequestError:E,PrismaClientRustPanicError:D,PrismaClientInitializationError:P,PrismaClientValidationError:R}=require(`${u.prismaClient}/runtime/${c}`),k=e,F=(0,Mj.createHash)(""sha256"").update()` invocation in
D:\VsCode\Web Dev Projects\Nextjs Blog\node_modules\prisma\build\index.js:1935:10404

  1932       }
  1933     }
  1934   }
→ 1935 `}});return Xe.resourceList(a.workspaces)}};var CAe=require(""@prisma/engines"");var iDe=require(""buffer"");function sDe(e,r,n,i){Object.defineProperty(e,r,{get:n,set:i,enumerable:!0,configurable:!0})}var aDe={};sDe(aDe,""serializeRPCMessage"",()=>tq);sDe(aDe,""deserializeRPCMessage"",()=>rq);var Z5=""PrismaBigInt::"",eq=""PrismaBytes::"";function tq(e){return JSON.stringify(e,(r,n)=>typeof n==""bigint""?Z5+n:n?.type===""Buffer""&&Array.isArray(n?.data)?eq+iDe.Buffer.from(n.data).toString(""base64""):n)}function rq(e){return JSON.parse(e,(r,n)=>typeof n==""string""&&n.startsWith(Z5)?BigInt(n.substr(Z5.length)):typeof n==""string""&&n.startsWith(eq)?n.substr(eq.length):n)}var yAe=B(dDe()),bT=B(sAe()),bAe=B(require(""http"")),xAe=B(cAe()),wAe=require(""zlib"");var To=require(""path"");var Mj=require(""crypto""),hAe=B(kj());function Lj(e,r,n,i){Object.defineProperty(e,r,{get:n,set:i,enumerable:!0,configurable:!0})}var mAe=globalThis,Fj={},yT={},Dp=mAe.parcelRequire1308;Dp==null&&(Dp=function(e){if(e in Fj)return Fj[e].exports;if(e in yT){var r=yT[e];delete yT[e];var n={id:e,exports:{}};return Fj[e]=n,r.call(n.exports,n,n.exports),n.exports}var i=new Error(""Cannot find module '""+e+""'"");throw i.code=""MODULE_NOT_FOUND"",i},Dp.register=function(r,n){yT[r]=n},mAe.parcelRequire1308=Dp);var gAe=Dp.register;gAe(""9lTzd"",function(module,exports){Lj(module.exports,""guessEnginePaths"",()=>guessEnginePaths),Lj(module.exports,""guessPrismaClientPath"",()=>guessPrismaClientPath);var $5COlq=Dp(""5COlq"");async function guessEnginePaths({forceBinary,forceLibrary,resolveOverrides}){let queryEngineName,queryEngineType;if(forceLibrary?(queryEngineName=await(0,$5COlq.prismaEngineName)(""query-engine"",""library""),queryEngineType=""library""):forceBinary?(queryEngineName=await(0,$5COlq.prismaEngineName)(""query-engine"",""binary""),queryEngineType=""binary""):(queryEngineName=void 0,queryEngineType=void 0),!queryEngineName||!queryEngineType)return{queryEngine:void 0};let queryEnginePath;if(resolveOverrides["".prisma/client""])queryEnginePath=(0,To.resolve)(resolveOverrides["".prisma/client""],`../${queryEngineName}`);else if(resolveOverrides[""@prisma/engines""])queryEnginePath=(0,To.resolve)(resolveOverrides[""@prisma/engines""],`../../${queryEngineName}`);else{let atPrismaEnginesPath;try{atPrismaEnginesPath=eval(""require.resolve('@prisma/engines')"")}catch(e){throw new Error(""Unable to resolve Prisma engine paths. This is a bug."")}queryEnginePath=(0,To.resolve)(atPrismaEnginesPath`../../${queryEngineName}`)}return{queryEngine:{type:queryEngineType,path:queryEnginePath}}}function guessPrismaClientPath({resolveOverrides}){let prismaClientPath=resolveOverrides[""@prisma/client""]||eval(""require.resolve('@prisma/client')"");return(0,To.resolve)(prismaClientPath,""../"")}});gAe(""5COlq"",function(e,r){Lj(e.exports,""prismaEngineName"",()=>n);async function n(i,a){let o=await Hr(),c=o===""windows""?"".exe"":"""";if(a===""library"")return qa(o,""fs"");if(a===""binary"")return`${i}-${o}${c}`;throw new Error(`Unknown engine type: ${a}`)}});function qAt(e){return{models:$j(e.models),enums:$j(e.enums),types:$j(e.types)}}function $j(e){let r={};for(let{name:n,...i}of e)r[n]=i;return r}var sx=(0,hAe.debug)(""prisma:studio-pcw""),jAt=/^\s*datasource\s+([^\s]+)\s*{/m,BAt=/url *= *env\(""(.*)""\)/,UAt=/url *= *""(.*)""/;async function GAt({schema:e,schemaPath:r,dmmf:n,datasourceProvider:i,previewFeatures:a,datasources:o,engineType:c,paths:u,directUrl:l,versions:f}){let p=e.match(jAt)?.[1]??"""",g=e.match(BAt)?.[1]??null,v=e.match(UAt)?.[1]??null,{getPrismaClient:x,PrismaClientKnownRequestError:E,PrismaClientRustPanicError:D,PrismaClientInitializationError:P,PrismaClientValidationError:R}=require(`${u.prismaClient}/runtime/${c}`),k=e,F=(0,Mj.createHash)(""sha256"").update({
         data: {
           slug: ""1"",
           title: ""1"",
           desc: ""1"",
           img: null,
           views: 0,
           cat: {
             connect: {
       ?       id?: String,
       ?       slug?: String,
       ?       AND?: CategoryWhereInput | CategoryWhereInput[],
       ?       OR?: CategoryWhereInput[],
       ?       NOT?: CategoryWhereInput | CategoryWhereInput[],
       ?       title?: StringFilter | String,
       ?       img?: StringNullableFilter | String | Null,
       ?       Posts?: PostListRelationFilter
             }
           },
           user: {
             connect: {}
           },
           comments: {}
         },
         select: {
           id: true,
           createdAt: true,
           slug: true,
           title: true,
           desc: true,
           img: true,
           views: true,
           catSlug: true,
           cat: true,
           userEmail: true,
           user: true,
           comments: true
         }
       })

Argument `connect` of type CategoryWhereUniqueInput needs at least one of `id` or `slug` arguments. Available options are marked with ?.

Code: undefined

Query:
[object Object]






> npx prisma generate
Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Error: 
EPERM: operation not permitted, unlink 'D:\VsCode\Web Dev Projects\Nextjs Blog\node_modules\.prisma\client\query_engine-windows.dll.node'

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

I want to add a few ""Post"" to my MongoDB database. but when I try to do it with prisma studio it shows this error. but if I try to add a new category, it adds a new category to my MongoDB collection.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}


model User {
  id            String          @id @default(auto()) @map(""_id"") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Post Post[]
  Comment Comment[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map(""_id"") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map(""_id"") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map(""_id"")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Category {
  id String @id @default(cuid()) @map(""_id"")
  slug String @unique
  title String
  img String?
  Posts Post[]
}


model Post {
  id String @id @default(cuid()) @map(""_id"")
  createdAt DateTime @default(now())
  slug String @unique
  title String
  desc String
  img String?
  views Int @default(0)
  catSlug String
  cat Category @relation(fields: [catSlug], references: [slug])
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  comments Comment[]
}

model Comment {
  id String @id @default(cuid()) @map(""_id"")
  createdAt DateTime @default(now())
  desc String
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  postSlug String
  post Post @relation(fields: [postSlug], references: [slug])
}
```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows
- Database: MongoDB 
- Node.js version: v20.14.0


### Prisma Version

```

```
Environment variables loaded from .env
prisma                  : 5.22.0
@prisma/client          : 5.21.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
Default Engines Hash    : 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Studio                  : 0.503.0",,
2664922808,25660,Package subpath './runtime/library.js' is not defined,"
Hi! Installed dependencies for Prisma
`""@prisma/client"": ""^5.22.0"",
""prisma"": ""^5.22.0""`
Created a small structure of files .prisma and successfully performed file generation operation using the command
`pnpm prisma generate`
Tables were also successfully created in the database itself using the command
`pnpm prisma db push`
Successfully built the server
`pnpm run build`
But when starting the server I get the following error

`[INFO] Loading NodeJS packages...
[ERROR] ""server"" package loading failed, exception stack:
Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './runtime/library.js' is not defined by ""exports"" in D:\frontend\RAGEMP\server-files\node_modules\.pnpm\@prisma+client@5.22.0_prisma@5.22.0\node_modules\@prisma\client\package.json at throwExportsNotFound (internal/modules/esm/resolve.js:285:9) at packageExportsResolve (internal/modules/esm/ resolve.js:491:3) at resolveExports (internal/modules/cjs/loader.js:450:36) at Function.Module._findPath (internal/modules/cjs/loader.js:490:31) at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:27) at Function.Module._load (internal/modules/cjs/loader.js:743:27)
at Module.require (internal/modules/cjs/loader.js:965:19)
at require (internal/modules/cjs/helpers.js:88:18)
at Object.<anonymous> (D:\frontend\RAGEMP\server-files\node_modules\.pnpm\@prisma+client@5.22.0_prisma@5.22.0\node_modules\.prisma\client\index.js:26:5)
at Module._compile (internal/modules/cjs/loader.js:1076:30)`

at the same time, any other libraries and dependencies that I installed in the project via pnpm install .... work on the server and there are no errors

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2664361258,25659,typedSql and Prisma Optimize extension errors,"### Bug description

It seems like the typedSql preview feature is not compatible with Prisma Optimize client extensions. Here is the error stack trace:

```
│ TypeError: Cannot read properties of undefined (reading 'map')
│     at El (/projects/prisma_optimize_tutorial/node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/@prisma/client/runtime/library.js:114:431)
│     at jt (projects/prisma_optimize_tutorial/node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/@prisma/client/runtime/library.js:114:376)
│     at /projects/prisma_optimize_tutorial/node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/@prisma/client/runtime/library.js:121:399
│     at Proxy._executeRequest (/projects/prisma_optimize_tutorial/node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/@prisma/client/runtime/library.js:130:10
│ 111)
│     at /projects/prisma_optimize_tutorial/node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/@prisma/client/runtime/library.js:31:9618
│     at i (/projects/prisma_optimize_tutorial/node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/@prisma/client/runtime/library.js:121:1016)
│     at PrismaPromise.then (/projects/prisma_optimize_tutorial/node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/@prisma/client/runtime/library.js:121:1091)
│     at process.processTicksAndRejections (node:internal/process/task_queues:105:5) {
│   clientVersion: '5.22.0'
│ }
```

Probably related to: https://github.com/prisma/prisma/issues/25481

### How to reproduce

1. Enabled the tracing preview feature.
2. Enabled the typedSql preview feature.
3. Attempt to run $queryRawTyped

```sql
-- prisma/sql/getTodoCount.sql
SELECT COUNT(*) as count FROM ""Todo"";
```

```node
import { getTodoCount } from ""@prisma/client/sql"";
const todoCount = await prisma.$queryRawTyped(getTodoCount())
```

It crashes only with the $extends, without it the client works fine.



### Expected behavior

Be able to see queryRawTyped in Prisma Optimize  dashbaord

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""typedSql"", ""tracing""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  isCompleted Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v22.11.0 (lts)


### Prisma Version

```
5.22.0
```
",,
2661309479,25650,Compute libssl path from LD_LIBRARY_PATH,"## Problem

We use the `almalinux:macro` docker image, which does not contain `libssl.so.3` by default. So we use the environment variable `LD_LIBRARY_PATH=/opt/lib` to specify the dynamic library path. Other programs work well, but prisma seems to only look for libssl from a few fixed paths, such as `/lib64`, `/usr/lib64`, `/lib`. 

https://github.com/prisma/prisma/issues/20905#issuecomment-2476370127

## Suggested solution

If the `LD_LIBRARY_PATH` environment variable exists in the system, `node_modules/prisma/libquery_engine-rhel-openssl-3.0.x.so.node` will automatically search for libssl from the specified path, so we only need to modify the `get-platform` package to prioritize searching from `LD_LIBRARY_PATH`. A simple way to change this is to modify the `getos` method:

https://github.com/prisma/prisma/blob/5.22.0/packages/get-platform/src/getPlatform.ts#L73

```javascript
  const libsslSpecificPaths = computeLibSSLSpecificPaths({ arch, archFromUname, familyDistro: distroInfo.familyDistro })
  if (typeof process.env.LD_LIBRARY_PATH === ""string"") {
    libsslSpecificPaths.unshift(...process.env.LD_LIBRARY_PATH.split(':'))
  }
  const { libssl } = await getSSLVersion(libsslSpecificPaths)
```

## Alternatives

1. Provide detailed debug information like `ldconfig` and `openssl version -v`, and may need to refactor `getSSLVersion`
2. Provide an environment variable such as `PRISMA_LIB_PATH` to allow users to specify the path of the dynamic library

## Additional context

I tried using `linux-static-x64` but prisma seems to automatically add `native` binaryTargets for me and download `rhel-openssl-3.0.x`, I'm not sure if this is expected.

When I use `linux-static-x64` and manually specify `PRISMA_QUERY_ENGINE_BINARY=node_modules/.prisma/client/query-engine-linux-static-x64`, it works. But prisma still outputs the warning message, which is confusing.

```
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""linux-static-x64""]
  engineType    = ""binary""
}
```

```
bash-5.1$ ls node_modules/.prisma/client/
default.d.ts  edge.d.ts         index.d.ts                                  package.json                     schema.prisma
default.js    edge.js           index.js                                    query-engine-linux-static-x64    wasm.d.ts
deno          index-browser.js  libquery_engine-rhel-openssl-3.0.x.so.node  query-engine-rhel-openssl-3.0.x  wasm.js
```

The following is the debug information of `get-platform`

```
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""rhel"",
  ""familyDistro"": ""rhel"",
  ""originalDistro"": ""almalinux""
} +173ms
prisma:get-platform Trying platform-specific paths for ""rhel"" +0ms
prisma:get-platform Falling back to ""ldconfig"" and other generic paths +1ms
prisma:get-platform Couldn't find any version of libssl or OpenSSL in the system +9ms
prisma:warn Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to ""openssl-1.1.x"".
```",,
2659616026,25645,"RelationJoins feature causing normal queries to fail, unable to run normal queries at scale without relationJoins preview feature","### Bug description

We use Prisma as part of our Nest.js backend, which is containerized with Docker and deployed to AWS. 

We've recently been running into issues where Prisma fails to autochunk queries properly (as outlined in issues like #21648). In that discussion, it was recommended to give the relationJoins preview feature a go, and it seemed that for some users, this was successful. However, enabling this feature has actually broken nearly every Prisma query in our backend. For example, 

this code

```
//note: in this case, segmentId is undefined

		const subscriptionIds = await this.getSubscriptionIdsToHub({
			hubId,
			segmentId,
		});
		
		const subscribers = await this.prisma.hubSubscriber.findMany({
			where: {
				id: { in: subscriptionIds.map(({ id }) => id) },
			},
		});
```

where subscriptionIds is gathered from 

```
		return await this.prisma.hubSubscriber.findMany({
			take,
			skip: page !== undefined && take ? take * page : undefined,
			orderBy: sortOptions,
			where: whereConditions,
			select: {
				id: true,
			},
		});
```

throws the following error when relationJoins is enabled

```
PrismaClientKnownRequestError: 
Invalid `prisma.hubSubscriber.findMany()` invocation:

Query parameter limit exceeded error: Joined queries cannot be split into multiple queries..
    at Ln.handleRequestError (/app/node_modules/@prisma/client/runtime/library.js:121:7753)
    at Ln.handleAndLogRequestError (/app/node_modules/@prisma/client/runtime/library.js:121:7061)
    at Ln.request (/app/node_modules/@prisma/client/runtime/library.js:121:6745)
    at async l (/app/node_modules/@prisma/client/runtime/library.js:130:9633)
    at async SubscriptionService.getTotalHubSubscribers (/app/src/subscription/subscription.service.ts:275:23)
    at async <anonymous> (/app/node_modules/@opentelemetry/instrumentation-nestjs-core/src/instrumentation.ts:221:16)
```
    
 

### How to reproduce

Create a table called HubSubscriber with a foreign key to a another table, Hub

Create a record in the Hub table, assume it has id A

Create 1,000 records in the HubSubscriber table with a foreign key to the hub record with id A

Run a findMany on that HubSubscriber table where { hubId: A } 

### Expected behavior

We expect the query to return successfully, as it does when this preview feature is not enabled

### Prisma information


```ts
generator client {
  provider = ""prisma-client-js""
}

generator json {
  provider  = ""prisma-json-types-generator""
  namespace = ""PrismaJson""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model HubSubscriber {
  id                    String                 @id @default(uuid()) @db.Uuid
  hubId                 String                 @db.Uuid
  userId                String                 @db.Uuid
  importBatchId         Int?                   @db.Integer()
  createdAt             DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime               @updatedAt @db.Timestamptz(6)
  lastMessageDate       DateTime?              @db.Timestamptz(6)
  isUnsubscribed        Boolean                @default(false)
  hub                   Hub                    @relation(fields: [hubId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  smsMarketingCampaigns SmsMarketingCampaign[]
  importBatch           ImportBatch?           @relation(fields: [importBatchId], references: [id], onDelete: Cascade)
}
```


### Environment & setup

- OS: Amazon Linux
- Database: PostgreSQL
- Node.js version: node:22-alpine


### Prisma Version

```
""prisma"": ""^5.18.0"",
```
",,
2659071825,25643,"`query` extensions: let extension to handle $allSucessfulOperations (commited transactions and no-transactions operations only, excluding rolled-back)","## Problem

Currently, we dont have a way to ""watch"" for only ""sucessful"" operations... 
We have an [logging example](https://github.com/prisma/prisma-client-extensions/blob/main/query-logging/script.ts) that logs all operations. But its also logs rollback'd operations.

I've 2 use cases for this: 

1. Storing Audit
2. Watching for real ""real-time"" values at client level

## Suggested solution

```ts
const prisma = new PrismaClient().$extends({
  query: {
    $allModels: {
      // Exclude all rollback'd operations
      async $allSucessfulOperations({ operation, model, args, query }) {
        const start = performance.now();
        const result = await query(args);
        const end = performance.now();
        const time = end - start;
        console.log(
          util.inspect(
            { model, operation, args, time },
            { showHidden: false, depth: null, colors: true }
          )
        );
        return result;
      },
    },
  },
});
```

## Alternatives

I've noticed that there's a [unofficial](https://github.com/prisma/prisma/issues/20789) way to check if the operation is under a transaction. But there is no way to globally watch the [status of this transaction](https://github.com/prisma/prisma/issues/11920) (""commit"" or ""rollback"") not even [extending client $transactions](https://www.prisma.io/docs/orm/prisma-client/client-extensions/client).

So, i think enabling an option to listen to `onCommit` or `onRollback` can be an alternative here
",,
2657318969,25639,"Decimal Precision loss in relational records if ""relationJoins"" is enabled","### Bug description

Data with Decimal type in a record is rounded unexpectedly when it is loaded as a relational record via ""include"" in a query.

### How to reproduce

- Doing a query for data model A including a relational record from model B which has a Decimal field;
- Doing a query to the record of model B directly
- Expected: the decimal field on model B's record should be the same in both queries
- Actual: the decimal field from the indirect query (using ""include"") is rounded off unexpectedly.
- This happens whether ""relationJoins"" is used or not.

### Expected behavior

Expected Output:

```
indirect 42670021827970642226975
direct 42670021827970642226975
```

Actual Output: 
Output:

```
indirect 42670021827970650000000
direct 42670021827970642226975
```

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Foo {
 id   String   @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
 bars Bar[]
}

model Bar {
  id     String    @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  fooId  String    @map(""foo_id"") @db.Uuid
  amount Decimal   @db.Decimal(36, 0)

  foo Foo @relation(fields: [fooId], references: [id], onDelete: Cascade)
}
```

```ts
import { Prisma, PrismaClient } from ""@prisma/client"";
import Decimal from ""decimal.js"";

Prisma.Decimal.set({ toExpPos: 36, precision: 36 });
Decimal.set({ toExpPos: 36, precision: 36 });

const client = new PrismaClient();

await client.foo.create({
  data: {
    id: ""e510a38a-e278-4d90-bad7-c101f2292483"",
    bars: {
      create: {
        id: ""6003d5b1-812c-442f-898f-a5ef2209c861"",
        amount: new Decimal(""42670021827970642226975""),
      },
    },
  },
});

const foo = await client.foo.findUnique({
  // relationLoadStrategy: ""join"",
  where: { id: ""e510a38a-e278-4d90-bad7-c101f2292483"" },
  include: {
    bars: true,
  },
});

const bar = await client.bar.findUnique({
  where: { id: ""6003d5b1-812c-442f-898f-a5ef2209c861"" },
});

console.log(""indirect"", foo?.bars[0]?.amount);
console.log(""direct"", bar?.amount);
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 20.17.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/.pnpm/@prisma+engines@5.20.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/.pnpm/@prisma+engines@5.20.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Preview Features        : relationJoins
```
",,
2649691877,25628,called `Option::unwrap()` on a `None` value,"### Bug description

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic

### How to reproduce

1. relationMode    = ""prisma""
2. **missing data**(one record of  profile table ,userId data does not exist in user table)

see prisma information

### Expected behavior

return null data(only set user to null ,then profile data should be return)    `recommand`
 **or**    
 throw error and describe corresponding information(eg: missing relation data

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  relationMode    = ""prisma""
  previewFeatures = [""relationJoins""]
}
model User {
  id      Int      @id @default(autoincrement())
  name    String?
  profile Profile?
}
model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}
```
```sql
insert into user （id,name) values (2,'Jack')
# this is important step for  reproduce (reference column `userId`=1 not exist in user table)
insert into profile（id,bio,userId) values (1,'test',1)
```

```ts
// Add your code using Prisma Client
const data = await prisma.profile.findFirst({
  include: {
    user: true,
  },
})
```


### Environment & setup

- OS:  Windows
- Database: PostgreSQL
- Node.js version: 18.20.4

### Prisma Version

```
prisma                  : 5.22.0  
@prisma/client          : 5.22.0  
Computed binaryTarget   : windows 
Operating System        : win32   
Architecture            : x64     
Node.js                 : v18.20.4
Query Engine (Node-API) : libquery-engine 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Schema Engine           : schema-engine-cli 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Schema Wasm             : @prisma/prisma-schema-wasm 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
Default Engines Hash    : 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Studio                  : 0.503.0
Preview Features        : relationJoins, prismaSchemaFolder
```
",,
2649628029,25627,pg_vector on prisma hosted DB,"### Bug description

I was trying to enable vector extension for an AI use case


Error: P3006

Migration `20241111150800_init` failed to apply cleanly to the shadow database. 
Error:
ERROR: extension ""vector"" is not available
DETAIL: Could not open extension control file ""/usr/local/share/postgresql/extension/vector.control"": No such file or directory.
HINT: The extension must first be installed on the system where PostgreSQL is running.
   0: sql_schema_connector::validate_migrations
           with namespaces=None
             at schema-engine/connectors/sql-schema-connector/src/lib.rs:335
   1: schema_core::state::DevDiagnostic
             at schema-engine/core/src/state.rs:276

 ELIFECYCLE  Command failed with exit code 1.

### How to reproduce

-- CreateExtension
CREATE EXTENSION IF NOT EXISTS ""vector"";


OR 

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters"", ""fullTextSearch"", ""prismaSchemaFolder"", ""postgresqlExtensions""]
}

datasource db {
  provider   = ""postgresql""
  url        = env(""DATABASE_URL"")
  directUrl  = env(""DATABASE_URL_SESSION"")
  extensions = [vector]
}

### Expected behavior

this works on supabase & local

### Prisma information

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters"", ""fullTextSearch"", ""prismaSchemaFolder"", ""postgresqlExtensions""]
}

datasource db {
  provider   = ""postgresql""
  url        = env(""DATABASE_URL"")
  directUrl  = env(""DATABASE_URL_SESSION"")
  extensions = [vector]
}

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2648603934,25621,Missing type inference when include is defined from external variable,"### Bug description

Hi Prisma team, my team has been upgrading our prisma client to v5 from v4 and are facing a bunch of type errors related to adding include variables in our queries.

When defining the include directly into the query, the type works, but when we use a variable for code deduplication, it fails the type validation.

This used to work when we were on version `4.16.2`

### How to reproduce

Working code:
```ts
let eventReply = await prisma.eventReply.create({
  data,
  include: {
    event: { include: { speakers: true } }
  },
});

const speaker = eventReply.event.speakers;
```

Bug code:
```ts
const includeFields: Prisma.EventReplyInclude = {
  event: { include: { speakers: true } },
};

let eventReply = await prisma.eventReply.create({
  data,
  include: includeFields,
});

// Throws TS Error
// TS2339: Property speakers does not exist on type
const speakers = eventReply.event.speakers;
```

### Expected behavior

Speakers should exist on eventReply.event even when we use the external include variable. This is important as we reuse the include variable across the service to maintain consistency of the return type whenever we deal with eventReplies (or any other model).

### Prisma information

Relevant Schema:
```prisma
model EventReply {
  ...other fields
  eventId   Int
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Event {
  ...other fields
  speakers     EventSpeaker[]
  replies      EventReply[]
}

model EventSpeaker {
  ...other fields
  events   Event[]
}
```


### Environment & setup

- OS: linux
- Database: PostgreSQL
- Node.js version: v18.16.0


### Prisma Version

```
prisma                  : 5.22.0
@prisma/client          : 5.22.0
Computed binaryTarget   : linux-musl-arm64-openssl-1.1.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v18.16.0
Query Engine (Node-API) : libquery-engine 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/libquery_engine-linux-musl-arm64-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/schema-engine-linux-musl-arm64-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
Default Engines Hash    : 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Studio                  : 0.503.0
Preview Features        : fullTextSearch
```",,
2647024662,25618,"$queryRaw should report an error when SQL format is not as expected, rather than exhibiting strange behavior.","### Bug description

I encountered an issue while using `$queryRaw` with a SQL query like the following:

```typescript
const dataList = await prisma.$queryRaw<DemoTable[]>`
SELECT
       id              AS ""id"",
       name            AS ""name""
FROM demo_table
WHERE detail ILIKE '%${keywords}%';`;
```

Prisma consistently returns the same result, regardless of changes to the `keywords` variable.

Initially, I thought it might be a caching issue, but I later discovered a note in the documentation stating that this kind of usage is not permitted:

> Template variables cannot be used inside SQL string literals. For example, the following query would not work:
>
> — [Raw queries | Prisma Documentation](https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/raw-queries)

I think that if Prisma encounters an SQL query that is not formatted as expected, it should report a warning or error, rather than exhibiting unexpected behavior (like returning the same result regardless of input).

### How to reproduce

This issue is mentioned in the documentation, though it should be easy for maintainers to reproduce. By the way, the database I am using is PostgreSQL 15.6.

### Expected behavior

_No response_

### Prisma information

see above

### Environment & setup

see above

### Prisma Version

```
prisma v5.22.0
@prisma/client v5.22.0
```",,
2646469079,25617,Consider using a type prettifier for large type unions,"## Problem

Complex Prisma models will generate complex, union types that are hard to read.

## Suggested solution

A simple type prettifier can solve this type of inconvenience.

Type prettifier example:

```typescript
type Prettify<T extends Record<PropertyKey, unknown>> = {
  [K in keyof T]: T[K];
} & unknown;
```

## Alternatives

Refactoring the way Prisma model CRUD arguments are computed at the type level (not sure how this happens, but huge props to the guys that worked on them!).

## Additional context

Before:

![image](https://github.com/user-attachments/assets/6cf8a3b0-e438-4a62-bf0b-b82c88694aa1)

After:

![image](https://github.com/user-attachments/assets/2394c6f2-2d12-4803-af3a-e2f7f116e9aa)",,
2645598772,25612,[Optimization] Skip join on foreign keys,"## Problem

Given the following schema:
```prisma
model User {
  id      Int      @id @default(autoincrement())
  profile Profile?
}

model Profile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}
```

These two calls:
```typescript
const res1 = prisma.profile.findMany({
  where: {
    userId: 1
  }
})

const res2 = prisma.profile.findMany({
  where: {
    user: { id: 1 }
  }
})
```

Produce the following queries:
```sql
-- Query 1
SELECT * FROM Profile WHERE userId = 1

-- Query 2
SELECT * FROM Profile LEFT JOIN User ON User.id = Profile.userId WHERE User.id = 1
```

There is a clear optimization that can be done when the `where` includes foreign keys, since the two calls request exactly the same data.

## Suggested solution

For each `where` clause, Prisma can check if the inner key is a foreign key available in the table we're querying, and switch with that at runtime to optimize the query.

In the given example, Prisma would generate `Query 1` in both cases.",,
2645587901,25611,Prisma cannot find the required `libssl` system library in your system. Please install openssl-3.0.x and try again.,"### Bug description

Running the prisma query causes this error - 

16 | `;throw new Error(u)}else if(r===""warn""){let u=`Conflict for env var${s.length>1?""s"":""""} ${s.map(c=>H(c)).join("", "")} in ${X(a)} and ${X(l)}
17 | Env vars from ${X(l)} overwrite the ones from ${X(a)}
18 |       `;console.warn(`${ke(""warn(prisma)"")} ${u}`)}}}}function es(e){if(nc(e)){ci(`Environment variables loaded from ${e}`);let t=pi.default.config({path:e,debug:process.env.DOTENV_CONFIG_DEBUG?!0:void 0});return{dotenvResult:Xo(t),message:Oe(`Environment variables loaded from ${ht.default.relative(process.cwd(),e)}`),path:e}}else ci(`Environment variables not found at ${e}`);return null}function ts(e,t){return e&&t&&ht.default.resolve(e)===ht.default.resolve(t)}function nc(e){return!!(e&&Kr.default.existsSync(e))}var rs=""library"";function Kt(e){let t=ic();return t||(e?.config.engineType===""library""?""library"":e?.config.engineType===""binary""?""binary"":rs)}function ic(){let e=process.env.PRISMA_CLIENT_ENGINE_TYPE;return e===""library""?""library"":e===""binary""?""binary"":void 0}var Je;(t=>{let e;(E=>(E.findUnique=""findUnique"",E.findUniqueOrThrow=""findUniqueOrThrow"",E.findFirst=""findFirst"",E.findFirstOrThrow=""findFirstOrThrow"",E.findMany=""findMany"",E.create=""create"",E.createMany=""createMany"",E.createManyAndReturn=""crea
19 | ${(0,ls.default)(ac(n),2)}
20 | }`}};function sc(e){let t;if(e.length>0){let r=e.find(n=>n.fromEnvVar!==null);r?t=`env(""${r.fromEnvVar}"")`:t=e.map(n=>n.native?""native"":n.value)}else t=void 0;return t}function ac(e){let t=Object.keys(e).reduce((r,n)=>Math.max(r,n.length),0);return Object.entries(e).map(([r,n])=>`${r.padEnd(t)} = ${lc(n)}`).join(`
21 | `)}function lc(e){return JSON.parse(JSON.stringify(e,(t,r)=>Array.isArray(r)?`[${r.map(n=>JSON.stringify(n)).join("", "")}]`:JSON.stringify(r)))}var Zt={};Vt(Zt,{error:()=>pc,info:()=>cc,log:()=>uc,query:()=>dc,should:()=>us,tags:()=>Yt,warn:()=>hi});var Yt={error:ce(""prisma:error""),warn:ke(""prisma:warn""),info:De(""prisma:info""),query:rt(""prisma:query"")},us={warn:()=>!process.env.PRISMA_DISABLE_WARNINGS};function uc(...e){console.log(...e)}function hi(e,...t){us.warn()&&console.warn(`${Yt.warn} ${e}`,...t)}function cc(e,...t){console.info(`${Yt.info} ${e}`,...t)}function pc(e,...t){console.error(`${Yt.error} ${e}`,...t)}function dc(e,...t){console.log(`${Yt.query} ${e}`,...t)}function zr(e,t){if(!e)throw new Error(`${t}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`)}function Fe(e,t){throw new Error(t)}function bi(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var Ei=(e,t)=>e.reduce((r,n)=>(r[t(n)]=n,r),{});function yt(e,t){let r={};for
 
PrismaClientInitializationError: Unable to require(`/app/node_modules/.prisma/client/libquery_engine-debian-openssl-3.0.x.so.node`).
Prisma cannot find the required `libssl` system library in your system. Please install openssl-3.0.x and try again.
 
Details: libssl.so.3: cannot open shared object file: No such file or directory
      at new PrismaClientInitializationError (/app/node_modules/@prisma/client/runtime/library.js:21:1872)
      at /app/node_modules/@prisma/client/runtime/library.js:110:10243

### How to reproduce

Deploy any Prisma app to railway.app

### Expected behavior

This error wasn't expected because openssl is already installed on my image container

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String        @id @default(cuid())
  clerkId   String        @unique
  email     String        @unique
  username  String?       @unique
  image_url String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isPremium Boolean @default(false)
  chats     ChatHistory[] 
   pdfs        Pdf[]
}

```

```ts
import { PrismaClient } from ""@prisma/client"";

export const prisma = new PrismaClient();
```


### Environment & setup

- OS: Linux
- Database: Sqlite
- Node.js version: 20


### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2644055726,25607,prismaSchemaFolder don't work properly,"### Discussed in https://github.com/prisma/prisma/discussions/25606

<div type='discussions-op-text'>

<sup>Originally posted by **poyrazhancilar** November  8, 2024</sup>
### Question

I am trying to use multiple Prisma files with Prisma, and I have reviewed everything, including Prisma's own documentation. However, whenever I run npx prisma generate, I get the following error:

```bash
> npx prisma generate
Environment variables loaded from .env
Prisma schema loaded from src/prisma/schema/schema.prisma
Error: 
You don't have any models defined in your schema.prisma, so nothing will be generated.
You can define a model like this:

model User {
  id    String  @id @default(auto()) @map(""_id"") @db.ObjectId
  email String  @unique
  name  String?
}

More information in our documentation:
https://pris.ly/d/prisma-schema
```

File & Folder 
<img width=""294"" alt=""Screenshot 2024-11-08 at 15 51 27"" src=""https://github.com/user-attachments/assets/8ac9740b-43e0-4db8-ac36-0022a53dec5f"">

Structure:

schema.prisma:
```prisma
datasource db_main {
  provider = ""mongodb""
  url      = env(""MONGODB_URI"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""prismaSchemaFolder""]
}
```

contact.prisma
```prisma
datasource db_contact {
  provider = ""mongodb""
  url      = env(""MONGODB_URI"")
}

model ContactRequest {
  id          String  @id @default(cuid()) @map(""_id"")
  email       String
  message String?

  @@map(""contact_requests"")
}
```

Why am I getting this error? I have checked the things in the documentation and other sources, but I am still experiencing this issue. I would appreciate it if you could help, thank you.

### How to reproduce (optional)

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior (optional)

_No response_

### Information about Prisma Schema, Client Queries and Environment (optional)

<!-- Paste your Prisma schema below. Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

<!-- Paste your Prisma Client queries below. -->
```ts
// Add any relevant Prisma Client queries here
```

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->

- Run `prisma -v` to see your Prisma version and paste it
</div>",,
2643821903,25605,Upsert very slow when object large,"### Bug description

![image](https://github.com/user-attachments/assets/32bdc17c-d63c-4973-bcce-249e950cafa7)
I use prisma to upsert data, but i see there was a huge amount of time before connecting not knowing what to do
![image](https://github.com/user-attachments/assets/6fe2a2cd-284c-4985-a0de-41ba0a783fd4)


### How to reproduce

  async process(apiScope: LegacyIngestionAccessScope): Promise<Observation> {
    this.auth(apiScope);

    const existingObservation = this.event.body.id
      ? await prisma.observation.findFirst({
          select: {
            // do not select I/O to spare our db
            input: false,
            output: false,

            id: true,
            traceId: true,
            projectId: true,
            type: true,
            startTime: true,
            endTime: true,
            name: true,
            metadata: true,
            parentObservationId: true,
            level: true,
            statusMessage: true,
            version: true,
            createdAt: true,
            updatedAt: true,
            model: true,
            internalModelId: true,
            modelParameters: true,
            promptTokens: true,
            completionTokens: true,
            totalTokens: true,
            unit: true,
            inputCost: true,
            outputCost: true,
            totalCost: true,
            calculatedInputCost: true,
            calculatedOutputCost: true,
            calculatedTotalCost: true,
            completionStartTime: true,
            promptId: true,
            internalModel: true,
          },
          where: { id: this.event.body.id, projectId: apiScope.projectId },
        })
      : null;

    if (
      existingObservation &&
      existingObservation.projectId !== apiScope.projectId
    ) {
      throw new ForbiddenError(
        `Access denied for observation creation ${existingObservation.projectId} `
      );
    }

    const obs = await this.convertToObservation(apiScope, existingObservation);

    // Do not use nested upserts or multiple where conditions as this should be a single native database upsert
    // https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upserts
    return await prisma.observation.upsert({
      where: {
        id: obs.id,
      },
      create: obs.create,
      update: obs.update,
    });
  }

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

Node-20

### Prisma Version

```
5.17.0
```
",,
2641689546,25603,prisma generate command hangs on linux but runs fine on macOS m1,"### Bug description

`prisma generate` command hangs with output

```
Environment variables loaded from .env
Prisma schema loaded from apps/api/prisma/schema.prisma
```

`DEBUG=* prisma generate` outputs
```
...
prisma:GeneratorProcess child exited with code null on signal SIGILL +16ms
```
and also hangs.

Excluding all other generators and leaving only client runs, but then the app throws error because @prisma/client does not export anything.

Work fine on MacOS m1 but fails on ubuntu debian x86_64 and also fails on docker that is run on the same linux machine.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

Expected to work.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

generator json {
  provider = ""prisma-json-types-generator""
}

datasource db {
  provider          = ""postgresql""
  url               = env(""POSTGRES_PRISMA_URL"")
  shadowDatabaseUrl = env(""POSTGRES_URL_NON_POOLING"")
}

model User {
  id Int @id @default(autoincrement())
  email String?
}
```



### Environment & setup

- OS: Debian, x86_64
- Database: PostgreSQL
- Node.js version: 18, 21


### Prisma Version

```
5.15.0, 5.22.0
```
",,
2640781331,25601,[Typescript Error on extensions]: This is likely not portable. A type annotation is necessary.,"### Bug description

When PrismaClient is extended with .$extends and withAccelerate is used in it, a typescript error is received when the declaration:true mode is turned on because the /dist/cjs(or esm)/extension file is not exported on @prisma/extension-accelerate

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. use -> `import { withAccelerate } from ""@prisma/extension-accelerate""`
2. use -> `const acceleratedDb = new PrismaClient().$extends(withAccelerate())`
3. See error: The inferred type of acceleratedDb cannot be named without a reference to .../@prisma/extension-accelerate . This is likely not portable. A type annotation is necessary.

### Expected behavior

The .$extends(withAccelerate()) method should be used in the tsconfig file when the ""declaration: true"" mode is on, this is important for commonly used packages and distributed as libraries

**! on @prisma/extension-accelerate dist/cjs(or esm)/extension file should be exported in package.json**

### Prisma Version

```
""@prisma/client"": ^5.21.1
""@prisma/extension-accelerate"": ^1.2.1
prisma: ^5.21.1
```
",,
2640157410,25598,prisma generate results in error with empty 'reason:',"### Bug description

When trying to run `npx prisma init` or `npx prisma generate` I get stuck on the step 'Downloading Prisma engines for Node-API for windows'. The download get's stuck at 0% and after a while the following error appears:

```
$> npx prisma generate    
$> Downloading Prisma engines for Node-API for windows [                    ] 0%Error: request to https://binaries.prisma.sh/all_commits/bf0e5e8a04cada8225617067eaa03d041e2bba36/windows/query_engine.dll.node.sha256 failed, reason:
$> 
```
(There is no text after 'reason:')

### How to reproduce

1. Run `npx prisma generate`
2. See error

### Expected behavior

_No response_

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""prismaSchemaFolder""]
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DB_URL"")
}
```

### Environment & setup

- OS: Windows
- Database: SQL Server
- Node.js version: v20.11.1

### Prisma Version

```

```",,
2638792845,25597,Usage of adapter-pg causes ENOENT error,"### Bug description

When switching to using `@prisma/adapter-pg` we are getting a ENOENT error. Reverting to not using the adapter does not experience this error.

If we have multiple schemas (we have the following previews enabled `[""multiSchema"", ""tracing"", ""omitApi"", ""prismaSchemaFolder"", ""views"", ""metrics"", ""nativeDistinct"", ""driverAdapters""]` could the Postgres adapter not work?

Error:
```
PrismaClientKnownRequestError: 
Invalid `prisma.event.findUnique()` invocation in
/Users/adamjuhasz/Repos/frontend-monorepo/Vanadium/src/api/@middleware.ts:58:41

  55   };
  56 }
  57 
→ 58 const existing = await prisma.event.findUnique(
No such file or directory
 code: ""ENOENT""

      at new PrismaClientKnownRequestError (/Users/adamjuhasz/Repos/frontend-monorepo/Vanadium/node_modules/@prisma/client/runtime/library.js:21:1414)
      at handleRequestError (/Users/adamjuhasz/Repos/frontend-monorepo/Vanadium/node_modules/@prisma/client/runtime/library.js:121:7315)
      at handleAndLogRequestError (/Users/adamjuhasz/Repos/frontend-monorepo/Vanadium/node_modules/@prisma/client/runtime/library.js:121:6623)
      at /Users/adamjuhasz/Repos/frontend-monorepo/Vanadium/node_modules/@prisma/client/runtime/library.js:121:6307
```

Setup:
```
const databaseUrl = process.env.DATABASE_URL;

const pool = new Pool({
  connectionString: databaseUrl,
  min: 10,
  max: 100,
  idleTimeoutMillis: milliseconds({ seconds: 10 }),
  allowExitOnIdle: true,
});

const adapter = new PrismaPg(pool);

export const prismaWithoutPagination = 
      new PrismaClient({
        adapter: adapter,
        log: [""info""],
      });
```

### How to reproduce

1. Enable multi schema
2. Enable database adapters
3. switch from Prisma's pool to native pool

### Expected behavior

_No response_

### Prisma information

```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema"", ""tracing"", ""omitApi"", ""prismaSchemaFolder"", ""views"", ""metrics"", ""nativeDistinct"", ""driverAdapters""]
  binaryTargets   = [""native"", ""debian-openssl-3.0.x""]
}

datasource db {
  // provider gets swapped for `""cockroachdb""` in the dockerfile
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  // If you add a schema here also add it to `../../scripts/drop-schemas.sql`
  schemas  = [""equivalent_securities_list"", ""idempotency"", ""service_team"", ""advisor_group"", ""entity"", ""person"", ""sharing"", ""identity"", ""investment"", ""constant"", ""account"", ""person_group"", ""security_master"", ""portfolio_manager"", ""vanadium"", ""farther_security_registrar"", ""financial_planning"", ""portfolio_storage"", ""proposal_manager"", ""proposal"", ""reporting_account""]
}

model Event {
  eventId        String   @id @default(uuid()) @map(""event_id"")
  idempotencyKey String   @unique @map(""idempotency_key"")
  action         String
  userId         String?  @map(""user_id"")
  createdAt      DateTime @default(now()) @map(""created_at"")

  @@unique([eventId])
  @@map(""event"")
  @@schema(""idempotency"")
}
```

### Environment & setup

- OS: macOS
- Database: CockroachDB
- Node.js version: 21


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.22.0
@prisma/client          : 5.22.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.0
Query Engine (Node-API) : libquery-engine 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 605197351a3c8bdd595af2d2a9bc3025bca48ea2 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
Default Engines Hash    : 605197351a3c8bdd595af2d2a9bc3025bca48ea2
Studio                  : 0.503.0
Preview Features        : driverAdapters, metrics, multiSchema, nativeDistinct, tracing, views, prismaSchemaFolder, omitApi
```
",,
2636839660,25593,[FEATURE REQUEST] I want to specify a name (from package json) in generated prisma client,"## Problem

In my schema this is how I set up the generator client

``` prisma
generator client {
    provider      = ""prisma-client-js""
    output        = ""./generated""
    binaryTargets = [""native"", ""debian-openssl-1.1.x""]
}
```

That generated client will be like this:
``` json
{
  ""name"": ""prisma-client-6e21b497b721cb1e475c9236d88789e6209fa8998a9e57b84ab7a818b96c097e"",
  ""main"": ""index.js"",
  ""types"": ""index.d.ts"",
  ""browser"": ""index-browser.js"",
  ""exports"": {
    ""./package.json"": ""./package.json"",
    ""."": {
      ""require"": {
        ""node"": ""./index.js"",
        ""edge-light"": ""./wasm.js"",
        ""workerd"": ""./wasm.js"",
        ""worker"": ""./wasm.js"",
        ""browser"": ""./index-browser.js"",
        ""default"": ""./index.js""
      },
      ""import"": {
        ""node"": ""./index.js"",
      ....
```

Be note that I used this generated package to be a npm package in my another package. I am using Mono Repo here with docker. So basically I have `api` bun project now when I want to use the prisma generated client. I import that using this :
``` json
""@emerald/prisma"": ""file:../database-worker/generated/"",
```

So basically the name from prisma generated client's package.json I manually replace that into `@emerald/prisma`. 

The problem is that when I want to generate the prisma schema inside of docker container something like this:
``` bash
docker exec -it emerald_database_worker bun prisma migrate dev --name threadTeamRef --skip-generate
```

The package json of that generated client could be randomly like `prisma-client-[randomId]`



## Suggested solution
I want an automatically replacing that random generated client name from package json
The solution could be like this:

``` prisma
generator client {
    provider      = ""prisma-client-js""
    output        = ""./generated""
    name           = ""@emerald/prisma""
    binaryTargets = [""native"", ""debian-openssl-1.1.x""]
}
```

So the generated output of that prisma within package.json will be like this then

``` json
{
  ""name"": ""@emerald/prisma"", // not the ""prisma-client-[randomId]
  ""main"": ""index.js"",
  ""types"": ""index.d.ts"",
  ""browser"": ""index-browser.js"",
      ....
```


## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->
",,
2632481839,25570,Automatic batching doesn't work inside interactive transaction,"### Bug description

I've encountered an issue where automatic batching (as described [here](https://www.prisma.io/docs/orm/prisma-client/queries/query-optimization-performance) ) in interactive transactions doesn't work as expected. This is a major issue for me as I'm running a graphQL server and processing each request inside a transaction so I can apply PostgreSQL RLS policies.
If I use the fluent API to query a single relationship, the batching happens as expected, but if I try to query more than one relationship, the batching doesn't happen.


 

### How to reproduce

I'm using a simple schema where there is a `User` model with two relationships `Post` and `Hat`:

```
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model User {
  id             String           @id
  createdAt      DateTime         @default(now())
  email          String           @unique
  name           String?
  posts          Post[]
  hat            Hat?
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Hat {
  id     Int     @id @default(autoincrement())
  style  String?
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}
```

If I run the following script, the batching doesn't occur:
```js
const { PrismaClient } = require(""@prisma/client"");
const client = new PrismaClient();

const run = async () => {
    const ids = ['1', '2', '3', '4', '5'];
    const results = await client.$transaction(async (tx) => {
        return Promise.all([
            ...ids.map((id) => tx.user.findUniqueOrThrow({ where: { id } }).posts()),
            ...ids.map((id) => tx.user.findUniqueOrThrow({ where: { id } }).hat()),
        ]);
    })

    console.log(results);
};

run();
```

Note that if I remove the query for `hat` the batching works as expected.


### Expected behavior

I'd expect the batching to work regardless of how many relationships are qeuried.

### Prisma information

See reproduction above.

### Environment & setup

- OS: macOS Sonoma 14.6.1
- Database: PostgreSQL 11/14
- Node.js version: v20.11.0


### Prisma Version

```
prisma                  : 5.1.0
@prisma/client          : 5.11.0
Current platform        : darwin-arm64
Query Engine (Node-API) : libquery-engine a9b7003df90aa623086e4d6f4e43c72468e6339b (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli a9b7003df90aa623086e4d6f4e43c72468e6339b (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.1.0-28.a9b7003df90aa623086e4d6f4e43c72468e6339b
Default Engines Hash    : a9b7003df90aa623086e4d6f4e43c72468e6339b
Studio                  : 0.492.0
```",,
2630857345,25563,Model and field inference in TypedSql queries,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
Say I have this model `schema.prisma` file:
```
model User {
  id        BigInt   @id @default(autoincrement())
  displayId String   @default(dbgenerated(""gen_random_uuid()"")) @map(""display_id"") @db.Uuid
  name      String   @map(""name"")
  createdAt DateTime @default(now()) @map(""created_at"") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map(""updated_at"")

  @@map(""users"")
}
```
If I write this `TypedSQL` query (assume the file is named `getUserById.sql`):
```
-- @param {String} $1:userId

SELECT * FROM users WHERE id = $1;
```
The generated type will look like this:
```
import * as $runtime from ""../runtime/library""

/**
 * @param userId
 */
export const getUserById: (userId: string) => $runtime.TypedSql<getUserById.Parameters, getUserById.Result>

export namespace getUserById {
  export type Parameters = [userId: string]
  export type Result = {
    id: bigint
    display_id: string
    name: string
    created_at: Date
    updated_at: Date
  }
}
```
The attribute names don't conform to the ones I defined in the model, even though Prisma knows how to translate them based on the mapping on the schema file.

This prevents me from taking advantage of the mapping to write TypedSql. If I want to return a mapped model exactly I need to list all attributes and do manual aliasing _e.g._ `display_id as ""displayId""`

## Suggested solution
When `*` is used on the query, infer if the returned type can be directly mapped to a Prisma model and create an appropriately mapped `Result` type

<!-- A clear and concise description of what you want to happen. -->

## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->
Any sort of syntax that indicates that you want the `Result` type to have the mapped attribute names, and not column names.

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->
",,
2627391342,25549,@prisma/extension-accelerate pollutes any typescript project it is used in with browser globals,"### Bug description

The @prisma/extension-accelerate package contains several files with instances of `/// <reference lib=""dom"" />`

This causes browser globals to be included in all projects using the package, meaning that TypeScript will no longer catch invalid uses of `window`, `document` and so forth in server-only projects.

If I edit the package to remove these comments then the library typings continue to work in my project, can they be removed?

### How to reproduce

1. Start from any prisma project without browser typings e.g. https://github.com/prisma/prisma-examples/tree/latest/orm/rest-koa
2. Add a `console.log(window)`, note that it produces an error
3. install `@prisma/extension-accelerate`
4. Add line `import { withAccelerate } from '@prisma/extension-accelerate'`
5. Use extensoin: `new PrismaClient().$extends(withAccelerate())`
6. Observe that `console.log(window)` no longer produces a type error

### Expected behavior

No global types added to project

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- Typescript: 5.6.3
- Any OS / DB

### Prisma Version

```
prisma: 5.21.1
@prisma/extension-accelerate: 1.2.1
```
",,
2627034510,25548,"[D1] Could not convert value ""true"" of the field `required` to type `Boolean`","### Bug description

D1 seemingly returns boolean values as ""true"" and ""false"" and Prisma doesn't seem to be able to parse them.

This also happens in the opposite direction, if prisma tries to query for a boolean value D1 returns like it can't find it 

### How to reproduce

- Create a prisma schema in a cloudflare d1/db project
- Insert some values
- Query them with `findMany`

### Expected behavior

Prisma to parse the strings (I know D1 really shouldn't do this) as booleans 

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  userId String @id @map(""user_id"")

  emailAddress String? @map(""email_address"")

  discordId       String? @map(""discord_id"")
  discordUsername String? @map(""discord_username"")
  discordRoles    String? @map(""discord_roles"")

  twitterId       String? @map(""twitter_id"")
  twitterUsername String? @map(""twitter_username"")

  walletAddress String? @unique @map(""wallet_address"")
  idCardTokenId String? @unique @map(""id_card_token_id"")
  scrollTokenId String? @unique @map(""scroll_token_id"")

  shadowBanned Boolean @default(false) @map(""shadow_banned"")

  answers Answer[]

  createdAt DateTime @default(now()) @map(""created_at"")
  updatedAt DateTime @updatedAt @map(""updated_at"")

  @@map(""user"")
}

model Riddle {
  riddleId String  @id @default(uuid()) @map(""riddle_id"")
  content  String
  answer   String?
  points   Int

  required Boolean @default(false) @map(""required"")

  answers Answer[]

  @@map(""riddle"")
}

model Answer {
  answerId Int @id @default(autoincrement()) @map(""answer_id"")

  userId   String @map(""user_id"")
  riddleId String @map(""riddle_id"")
  points   Int?

  user   User   @relation(fields: [userId], references: [userId])
  riddle Riddle @relation(fields: [riddleId], references: [riddleId])

  createdAt DateTime @default(now()) @map(""created_at"")
  updatedAt DateTime @updatedAt @map(""updated_at"")

  @@unique([userId, riddleId])
  @@index([createdAt])
  @@index([userId, riddleId])
  @@map(""answer"")
}
```

```ts
const user = await db.user.findFirst({
    include: {
      answers: {
        include: {
          riddle: true,
        },
      },
    },
    where: {
      userId,
    },
  });
 
```


### Environment & setup

- OS: macOS, cloudflare worked
- Database: Sqlite/D1
- Node.js version: v20.15.1 / Latest workerd

### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.15.1
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
Preview Features        : driverAdapters
```
",,
2624937413,25544,Using a `null` with the `in:` operator if a `where` clause throws a runtime error,"### Bug description

When using the `in:` operator in the where clause of a query, the runtime throws an error if a `null` is in the list of values, even if `null` is an acceptable value for the field.

Thanks!

### How to reproduce

If I try to run:

```
db.doc.findMany({
  where: {
    projectId: 1,
           docCollectionId: { in: [ null, 1 ] }
    },
})
```

I get a runtime error: 
``` Argument `in`: Invalid value provided. Expected ListIntFieldRefInput or Null, provided (Null, Int).```

Note that typescript does **not** throw an error.  A null should be a valid value as the the `docCollectionId` field is optional.


### Expected behavior

The query should return all records with null and 1 in the `docCollectionId` field.

### Prisma information

```
model Doc {
  id              Int            @id @default(autoincrement())
  project         Project        @relation(fields: [projectId], references: [id])
  projectId       Int
  docCollection   DocCollection? @relation(fields: [docCollectionId], references: [id], onDelete: Restrict)
  docCollectionId Int?
  ...
}

model DocCollection {
  id           Int         @id @default(autoincrement())
  ...
}
```

### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: 20.17.0


### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
```
",,
2624550711,25543,The introductory script for Prisma Postgres does not work,"### Bug description

`npx prisma migrate dev --name init`
gives the following 

`Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""accelerate.prisma-data.net""

Oops, an unexpected error occurred!
Error in Schema engine.
Reason: [/Users/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ws_stream_tungstenite-0.14.0/src/tung_websocket.rs:540:13] internal error: entered unreachable code: protocol error from tungstenite on send is a bug in ws_stream_tungstenite, please report at http://github.com/najamelan/ws_stream_tungstenite/issues. The error from tungstenite is Sending after closing is not allowed`

### How to reproduce

Run `npx try-prisma@latest --template databases/prisma-postgres --name hello-prisma --install npm`
Set the .env
Then run the above and it will not work.

### Expected behavior

I expected the database to be created

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS MacOS 15.0.1
- Database PostgreSQL via Prisma Postgres
- Node v20.9.0

### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.9.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2621768328,25536,called `Option::unwrap()` on a `None` value,"### Bug description

When trying to use .findMany() with a specific relation included, prisma query engine throws the following:

```
Invalid `client.franchisee_product_rate.findMany()` invocation in
/home/jhlfrfufyfn/dev/abf/management-app-node.js/src/campaign-products/campaign-products.service.ts:915:43

  912 await this._checkAccessToProducts([productId], requestingUser, client);
  913 this.logger.debug(`productId: ${productId}`);
  914 this.logger.debug(`dbFromOrigin: ${dbFromOrigin}`);
→ 915 return client.franchisee_product_rate.findMany(
called `Option::unwrap()` on a `None` value

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
```
If I remove the ""include"" parameter from the findMany() function, it works as it should.


### How to reproduce

I haven't tried to strip the example to the bare minimum yet, but part of the prisma schema and failing .findMany() function is provided. 


### Expected behavior

I expected the .findMany() function to work, and to return a list of franchisee_product_rate's with joined station_has_vehicle_group's

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
model franchisee_product_rate {
  id                           String      @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  station_has_vehicle_group_id String      @db.Uuid
 // some other unrelated fields
  station_has_vehicle_group station_has_vehicle_group   @relation(fields: [station_has_vehicle_group_id], references: [id])
}


model station_has_vehicle_group {
  id                              String        @unique @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  is_deleted                      Boolean       @default(false)
// some other unrelated fields
  franchisee_product_rate                    franchisee_product_rate[]

  @@id([id, is_deleted])
}
```

```ts
// Add your code using Prisma Client
return client.franchisee_product_rate.findMany({
      where: {
        franchisee_product_id: productId,
      },
      include: {
        station_has_vehicle_group: true,
      }
    });
```


### Environment & setup

- OS: Ubuntu 22.04
- Database: PostgreSQL
- Node.js version: 20.5.1


### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.5.1
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2621182071,25534,"""OR"" filter generates ""AND 1=0"" when fields are undefined","### Bug description

When performing an ""OR"" filter passing the values ​​as undefined, Prisma generates a query with ""AND 1=0"" which always results in false and does not search for any records. according to the [documentation](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/null-and-undefined) from 5.20 passing undefined would cause the filter not to be included in the generated query

### How to reproduce

execute a findmany containing the ""OR"" filter where each of the filter fields is undefined

### Expected behavior

ignore the OR filter since all fields are undefined

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model table1 {
  id        Int @id @default(autoincrement())
  table2_id Int
  table3_id Int

  table2 table2 @relation(fields: [table2_id], references: [id])
  table3 table3 @relation(fields: [table3_id], references: [id])
}

model table2 {
  id    Int    @id @default(autoincrement())
  value String

  tample1 table1[]
}

model table3 {
  id    Int    @id @default(autoincrement())
  value String

  tample1 table1[]
}
```

```ts
import { PrismaClient } from ""@prisma/client"";
const prisma = new PrismaClient();

(async() => {
    const list = await prisma.table1.findMany({
        where: {
            OR: [
                {
                    table2: {
                        value: undefined
                    }
                },
                {
                    table3: {
                        value: undefined
                    }
                }
            ]
        }
    });

    console.log(list);
    /*
        returns: []
        expected: [ { id: 1, table2_id: 1, table3_id: 1 } ]
        generated query: SELECT `main`.`table1`.`id`, `main`.`table1`.`table2_id`, `main`.`table1`.`table3_id` FROM `main`.`table1` WHERE 1=0 LIMIT ? OFFSET ?
    */
})();
```


### Environment & setup

- OS: Debian
- Database: PostgreSQL & SQLite
- Node.js version: v18.20.4


### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.20.4
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2620800830,25528,Unable to generate Prisma client in Nuxt,"### Bug description

I use Nuxt Module for Prisma.

After running the Prisma CLI, it generates the prisma schema file and database migrations folder normally. however, it stays at the step of generating the prisma client.

<img width=""1548"" alt=""image"" src=""https://github.com/user-attachments/assets/1758f587-c765-47a6-9ce7-c5a3d9a81df2"">

### How to reproduce

1. Create a Nuxt project
2. Run 'bun i'
3. Run 'bun nuxi@latest module add @prisma/nuxt'


### Expected behavior

It should work as shown in the official documentation.

### Prisma information

Not yet generated, or consistent with official documentation.

### Environment & setup

- OS: MacOS Sequoia 15.0.1
- Database: Not connected yet, probably using its own SQLite
- Bun version: 1.1.33


### Prisma Version

Not yet successfully installed
",,
2619744578,25527,2:15 delay when Prisma generate is used after upgrade from ^5.6.0 to ^5.21.1,"### Bug description

I upgraded and now, in the cloud whenever I deploy I get these logs:
```
Oct 28 22:45:36 web: > prisma generate --no-hints
Oct 28 22:45:37 web: Prisma schema loaded from prisma/schema.prisma
Oct 28 22:47:52 web: ✔ Installed the @prisma/client and prisma packages in your project
Oct 28 22:48:00 web: ✔ Generated Prisma Client (v5.21.1) to ./node_modules/@prisma/client in 1.36s
```
See the 2:15 delay between line 2 and 3. It's unusable, happens on every deploy. Note that I have the `tracing` previewFeature!

### How to reproduce

For me, it was simply upgrade and then deploy to the cloud.

### Expected behavior

The deploy takes ~15s as it used to. If I reload the server without deploying, it's fast. Maybe some cache is being busted (like the binary download?)

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  binaryTargets   = [""native""]
  previewFeatures = [""tracing""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

```ts
import { PrismaClient } from '@prisma/client'
...

const TIMEOUT_SECONDS = 8
const POOL_SIZE = 100

const db = new PrismaClient({
  log: [{ level: 'query', emit: 'event' }],
  errorFormat: 'colorless',
  datasources: { db: { url: `${env.DATABASE_URL}?connection_limit=${POOL_SIZE}&pool_timeout=${TIMEOUT_SECONDS}` } },
})

db.$use(error)
db.$use(ids)
db.$use(softDelete)

export default db
```


### Environment & setup

- OS: Node.js 18 running on 64bit Amazon Linux 2/5.8.6 on AWS ElasticBeanstalk
- Database: PostgreSQL 13 
- Node.js version: ^18.18.0


### Prisma Version

This is in the cloud:
```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : linux-arm64-openssl-1.0.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v18.18.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-linux-arm64-openssl-1.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-linux-arm64-openssl-1.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
Preview Features        : tracing
```
This is locally (works fine)
```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.18.2
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
Preview Features        : tracing
```
",,
2618853302,25525,"Logging of failed transactions with serializable isolation, P2034","### Bug description

Prisma logs messages about deadlocked transactions along with throwing same exception.
I use retry transactions extension and do retry transactions. But on every retry prisma logs message with suggestion to retry.

Part of the messages explain whats going on. Other part is difficult to be related to deadlocks based on logged message.

### How to reproduce

Use Postgres, have db transaction isolation level set to serializable (`ALTER DATABASE <db name> SET DEFAULT_TRANSACTION_ISOLATION TO 'serializable'`).

Code below is used for retrying failed transactions (based on [this ext](https://github.com/prisma/prisma-client-extensions/tree/main/retry-transactions)).

Prisma logging configured as event based.

```
function RetryTransactionsExtension(options?: Partial<IBackOffOptions>) {
  return Prisma.defineExtension((prisma) =>
    prisma.$extends({
      client: {
        async $transaction(...args: any) {
          const retry = (e: any, attemptNumber: number) => {
            if(e.code === ""P2034"") {
              log.debug(`RetryTransactionsExtension extension: e.code === ""P2034"". going to retry. this is attempt N${attemptNumber}. exception=[${JSON.stringify(e)}]`);
              return true;
            } else {
              return false;
            }
          };
          return await backOff(prisma.$transaction(...args), {
            retry,
            ...options,
          });
        },
      } as { $transaction: typeof prisma[""$transaction""] },
    })
  );
}

const prismaMain = new PrismaClient({
  log: [{
    level: 'error',
    emit: 'event',
  },],
});

prismaMain.$on('error', (e: Prisma.LogEvent) => {
	log.error(`Prisma log OnError: event=[${JSON.stringify(e)}]`);
});

const prismaExtended = prismaMain.$extends(
  RetryTransactionsExtension({
    jitter: ""full"",
    numOfAttempts: 5,
  })
);

// run conflicting transactions with prismaExtended
// ...
```



Get such log entries

One (""informative"") form

```
Prisma log OnError: event=[{""message"":""\nInvalid `prisma.participants.create()` invocation:\n\n\nTransaction failed due to a write conflict or a deadlock. Please retry your transaction"",""target"":""participants.create"",""timestamp"":""2024-10-25T15:16:46.107Z""}]

RetryTransactions extension: e.code === \""P2034\"". going to retry. this is attempt N1. exception=[{\""name\"":\""PrismaClientKnownRequestError\"",\""code\"":\""P2034\"",\""clientVersion\"":\""5.21.1\"",\""meta\"":{\""modelName\"":\""participants\""}}]

```
Another (""non-informative"") form
(Seems related: [21357](https://github.com/prisma/prisma/issues/21357))

```
Prisma log OnError: event=[{""timestamp"":""2024-10-25T15:16:46.108Z"",""message"":""[cm2ovkw7e0051105bxhpkex2n] no details about closed transaction"",""target"":""query_core::interactive_transactions::actor_manager""}]

RetryTransactions extension: e.code === \""P2034\"". going to retry. this is attempt N1. exception=[{\""name\"":\""PrismaClientKnownRequestError\"",\""code\"":\""P2034\"",\""clientVersion\"":\""5.21.1\"",\""meta\"":{}}]
```

Please note that prisma message ""no details about closed transaction"" is always apeears near its retry log entry. I suppose it could take this form because of transaction locked during raw query execution, but I am not sure.

### Expected behavior

Prisma throws an exception when transaction is deadlocked. User supposed to catch it and react.
No logs about it.
If its not possible or something wrong with my code, then second presented ""non-informative"" form should be changed to form like first log message. With info about reason of transaction failure.

Current workaround is to filter these log entries using string comparsion inside onError prisma log handler. Not desired, can mask some errors not related to deadlocks.

```
prismaMain.$on('error', (e: Prisma.LogEvent) => {
  if(
      e.message.includes('Transaction failed due to a write conflict or a deadlock. Please retry your transaction')
      || (e.message.includes('no details about closed transaction') && e.target.includes('interactive_transactions'))
  ){
    return;
  }
  log.error(`Prisma log OnError: event=[${JSON.stringify(e)}]`);
});
```

### Prisma information

-

### Environment & setup

- OS: macOS 14.5
- Database: PostgreSQL 16.2
- Node.js version: v22.10.0 
- Docker: v24.0.6

### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : linux-musl-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.10.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2617951895,25523,Using the method of defining parameters first and then passing them into the function makes it impossible to use extended fields.,"### Bug description

I might be doing some business before the query, so I want to define an object before passing it into the function, but the input type I exported doesn't support extended fields.



### How to reproduce

1. Expand the client result field
2. Use definitions to export types and pass in function
3. Get ` error TS2353: Object literal may only specify known properties, and 'xx' does not exist in type 'xxxSelect<DefaultArgs>'.`

### Expected behavior

I hope to get some examples of this.

### Prisma information

```prisma
model User {
    id           Int     @id @default(autoincrement())
    nickname     String? @db.VarChar(30)
    email        String? @db.VarChar(50)
    password     String  @default("""") @db.VarChar(64)
    salt         String  @default("""") @db.VarChar(32)
    roles        String? @default(""|ROLE_USER|"") @db.VarChar(255)

    @@map(""user"")
}

```

```ts
import { Prisma, PrismaClient } from '@prisma/client';

const prisma = new PrismaClient().$extends({
  result: {
    user: {
      rolesArr: {
        needs: { roles: true },
        compute(user) {
          return user.roles.split('|').filter(item => item !== '');
        },
      },
    },
  },
});

async function main() {
  const options: Prisma.UserFindFirstArgs = {
    select: {
      rolesArr: true,// error TS2353: Object literal may only specify known properties, and 'rolesArr' does not exist in type 'UserSelect<DefaultArgs>'.
    },
  };
  const user = await prisma.user.findFirst(options);
  console.log(user);
  // but, This one can be used
  const user = await prisma.user.findFirst({
    select: {
      rolesArr: true,
    },
  });
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async e => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });

```


### Environment & setup

- OS: mac OS Sequoia 15.0.1
- Nodejs v20.14.0
- npm 10.7.0

### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/.pnpm/@prisma+engines@5.20.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/.pnpm/@prisma+engines@5.20.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Preview Features        : prismaSchemaFolder, strictUndefinedChecks
```
",,
2616875707,25521,Cannot find libssl error when querying database locally,"### Bug description

I get the following error when going through the getting started guide. i have openssl 3.4 in zorin os. (based on ubuntu) I don't have openssl 1.1.x 

i've tried adding the environment variable here as well https://www.prisma.io/docs/orm/reference/environment-variables-reference#cli-binary-targets but no luck.

```
╰─➤  npx tsx prisma/index.ts
PrismaClientInitializationError: 
Invalid `prisma.user.findMany()` invocation in
/home/peter/Code/lingo-tools-api/prisma/index.ts:8:40

  5 export async function main() {
  6   try {
  7     // ... you will write your Prisma Client queries here
→ 8     const allUsers = await prisma.user.findMany(
Unable to require(`/node_modules/.prisma/client/libquery_engine-debian-openssl-1.1.x.so.node`).
Prisma cannot find the required `libssl` system library in your system. Please install openssl-1.1.x and try again.

Details: libssl.so.1.1: cannot open shared object file: No such file or directory
    at Mn.handleRequestError (/node_modules/@prisma/client/runtime/library.js:121:8053)
    clientVersion: '5.21.1',
  errorCode: undefined
}
```

when i run npx prisma --version i get the followign

```
Environment variables loaded from .env
Error: Unable to require(`/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node`).
Prisma cannot find the required `libssl` system library in your system. Please install openssl-1.1.x and try again.

Details: libssl.so.1.1: cannot open shared object file: No such file or directory
    at pne (/node_modules/prisma/build/index.js:284:116)
    at uWe (//node_modules/prisma/build/index.js:284:269)
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.9.0
Query Engine (Node-API) : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```

### How to reproduce

1. getting started guide on zorinOS

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}
```

```ts
// Add your code using Prisma Client
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient();

export async function main() {
  try {
    // ... you will write your Prisma Client queries here
    const allUsers = await prisma.user.findMany();
    console.log(""finding users"");
    console.log(allUsers);

    await prisma.$disconnect();
  } catch (error) {
    console.error(error);
    await prisma.$disconnect();
    process.exit(1);
  }
}
main();

```


### Environment & setup

- OS: ZorinOs (debian)
- Database: PostgreSQL
- Node.js version: 22.9.0


### Prisma Version

```
5.21.1
```
",,
2615881875,25517,Mandatory one to one relationship,"### Bug description

I want each user to have a location, and when deleting the user, the location should also be deleted from the database.

Error msg:

Error parsing attribute ""@relation"": The relation field `location` on Model `User` is required. This is not valid because it's not possible to enforce this constraint on the database level. Please change the field type from `Location` to `Location?` to fix this.

### How to reproduce

```
model User {
  id         String    @id @default(uuid())
  name       String
  location   Location
  @@map(""users"")
}

model Location {
  id        String  @id @default(uuid())
  address   String  @db.VarChar(255)
  city      String  @db.VarChar(100)
  state     String? @db.VarChar(100)
  zipcode   String? @db.VarChar(10)
  country   String  @db.VarChar(100)
  latitude  Decimal @db.Decimal(9, 6)
  longitude Decimal @db.Decimal(9, 6)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique

  @@map(""locations"")
}
```

### Expected behavior

_No response_

### Prisma information

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id         String    @id @default(uuid())
  name       String
  location   Location
  @@map(""users"")
}

model Location {
  id        String  @id @default(uuid())
  address   String  @db.VarChar(255)
  city      String  @db.VarChar(100)
  state     String? @db.VarChar(100)
  zipcode   String? @db.VarChar(10)
  country   String  @db.VarChar(100)
  latitude  Decimal @db.Decimal(9, 6)
  longitude Decimal @db.Decimal(9, 6)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique

  @@map(""locations"")
}
```

### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.17.0

### Prisma Version

```
5.21.1
```
",,
2614922742,25512,prisma generate --sql does not read env vars in AWS,"### Bug description

Today we introduced raw SQL queries in our codebase, requiring us to run `prisma generate --sql` instead of `prisma generate`. Locally it builds normally. In AWS, it errors out with `prisma generate --sql`:

```
#14 25.81 > ef-plugins-app@0.0.2 postinstall /app
--
4921 | #14 25.81 > prisma generate --sql
4922 | #14 25.81
4923 | #14 26.62 Prisma schema loaded from prisma/schema.prisma
4924 | #14 26.66 Error: Prisma schema validation - (get-config wasm)
4925 | #14 26.66 Error code: P1012
4926 | #14 26.66 error: Environment variable not found: DATABASE_URL.
4927 | #14 26.66   -->  prisma/schema.prisma:17
4928 | #14 26.66    \|
4929 | #14 26.66 16 \|   // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
4930 | #14 26.66 17 \|   url      = env(""DATABASE_URL"")
4931 | #14 26.66    \|
4932 | #14 26.66
4933 | #14 26.66 Validation Error Count: 1
4934 | #14 26.66 [Context: getConfig]
```

When I omit `--sql`, it passes that build step but fails on the type checking later on, because we rely on the generated types.

### How to reproduce

<!--
1. Use prisma generate on build in AWS
2. Build goes past the postinstall prisma generate where it needs the env var DATABASE_URL
3. Use prisma general --sql on build in AWS
4. See error above
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  binaryTargets   = [""native"", ""linux-musl-openssl-3.0.x""]
  previewFeatures = [""typedSql""]
}

datasource db {
  // provider = ""postgresql""
  provider = ""postgresql""
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env(""DATABASE_URL"")
}

generator zod {
  provider = ""zod-prisma-types""
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String           @unique
  emailVerified       DateTime?
  image               String?
  accepted            Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
  roles               Role[]           @default([])
  entities            String[]         @default([])
  jobFamilies         String[]         @default([])
  jobClusters         String[]         @default([])
  jobFunctions        String[]         @default([])
  // Relationships
  accounts            Account[]
  sessions            Session[]
}
```


### Environment & setup

- OS: Linux
- Database: Postgres
- Node.js version: V20.16.0


### Prisma Version

```
5.21.1
```
",,
2613400405,25507,TypeSql MySQL: data types of YEAR MONTH DAY functions,"### Bug description

I am writing a query in mysql using YEAR, MONTH, DAY functions, but the type that prisma generates seems wrong.

`prisma/sql/countUserByYear.sql`
```sql
SELECT
  YEAR(createdAt) AS `year`,
  COUNT(*) AS `count`
FROM
  User
GROUP BY
  `year`
```

Generated TypeScript

```typescript
export type Result = {
    year: number | null
    count: bigint
  }
```

Data after query (typeof year is `string`)

```typescript
countByYear: [ { year: '2023', count: 2n } ]
```


### How to reproduce

1. `npx prisma init --datasource-provider mysql --preview-feature typedSql`
2. create schema and sql file
3. `npx prisma migrate dev`
4. `npx prisma generate --sql`
5. use the `main.mjs` below

### Expected behavior

YEAR(createdAt) generated type being `number | null` but data after query is `string` --> must/should be `number`
MONTH(createdAt) generated type being `bigint | null`, data after query is `bigint` --> should be `number`
DAY(createdAt) generated type being `bigint | null`, data after query is `bigint` --> should be `number`

### Prisma information

`prisma/schema.prisma`
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""typedSql""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
}
```

`main.mjs`
```ts
import { PrismaClient } from ""@prisma/client""
import { countUserByDay, countUserByMonth, countUserByYear } from '@prisma/client/sql'

const prisma = new PrismaClient()

await prisma.user.create(
  {
    data: {
      name: ""John Doe"",
      createdAt: new Date(2023, 5, Math.random() * 30),
    },
  })

const countByDay = await prisma.$queryRawTyped(countUserByDay())
const countByMonth = await prisma.$queryRawTyped(countUserByMonth())
const countByYear = await prisma.$queryRawTyped(countUserByYear())

console.log({ countByDay, countByMonth, countByYear });
```


### Environment & setup

- OS: macOS 15
- Database: MySQL
- Node.js version: v22.10.0

### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v22.10.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../Library/Caches/pnpm/dlx/b4kwuke4fcm2ppufregi7l7yfi/192c2877e9b-9446/node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../Library/Caches/pnpm/dlx/b4kwuke4fcm2ppufregi7l7yfi/192c2877e9b-9446/node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
Preview Features        : typedSql
```
",,
2611859483,25501,TypeError: 'ownKeys' on proxy: trap result did not include '$use' when using $transaction on extended client.,"### Bug description

Hi there,

When attempting to use Prisma's `$transaction` method on an extended client, I'm encountering an error related to the proxy trap not including '$use'. This occurs when trying to log the transaction object inside the transaction callback.

Here is the error that I get:

```bash
Error in $transaction: TypeError: 'ownKeys' on proxy: trap result did not include '$use'
    at Reflect.ownKeys (<anonymous>)
    at Object.ownKeys (/Users/-/Workspace/prisma-test/node_modules/@prisma/client/runtime/library.js:21:8250)
    at i.<computed> (/Users/-/Workspace/prisma-test/node_modules/@prisma/client/runtime/library.js:21:8734)
    at formatValue (node:internal/util/inspect:806:19)
    at inspect (node:internal/util/inspect:365:10)
    at formatWithOptionsInternal (node:internal/util/inspect:2304:40)
    at formatWithOptions (node:internal/util/inspect:2166:10)
    at console.value (node:internal/console/constructor:349:14)
    at console.log (node:internal/console/constructor:386:61)
    at file:///Users/-/Workspace/prisma-test/index.js:10:15
```

### How to reproduce

1. Create a new Node.js project
2. Install @prisma/client
3. Create an `index.js` file with the following content:

```js
import { PrismaClient } from '@prisma/client';

async function testTransaction() {
  console.log('Before $transaction');
  const client = new PrismaClient();

  try {
    await client.$extends({}).$transaction(async (tx) => {
      console.log('Inside transaction');
      console.log(tx)
    });
    console.log('After $transaction');
  } catch (error) {
    console.error('Error in $transaction:', error);
  } finally {
    await client.$disconnect();
  }
}

testTransaction()
  .then(() => console.log('Test completed'))
  .catch((error) => console.error('Unhandled error:', error));
```

4. Run the script with `node index.js`

### Expected behavior

The transaction should execute successfully, and the `tx` object should be logged without errors.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

```ts
const client = new PrismaClient();
 await client.$extends({}).$transaction(async (tx) => {
      console.log('Inside transaction');
      console.log(tx)
    });
```


### Environment & setup

- OS: MacOs, Sonoma 14.5
- Database: PostgreSQL16
- Node.js version: v22.2.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.2.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2610079204,25493,Improve `PGlite` support by running Prisma Client in the browser,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

With PGlite working pretty well with the Prisma client now (https://github.com/electrovir/pglite-prisma-demo), I want to run an in-browser Prisma client instance that uses an in-browser memory-only PGlite instance.

At this point in time, this doesn't throw any errors:

```typescript
import {PGlite} from '@electric-sql/pglite';
import {PrismaClient} from '@prisma/client';
import {PrismaPGlite} from 'pglite-prisma-adapter';


const pglite = new PGlite();
await pglite.exec(/* <init-sql-here> */);

const prismaClient = new PrismaClient({
    adapter: new PrismaPGlite(pglite),
});
```

However, when I try to access anything within the client it either hangs forever or prints the ""PrismaClient is unable to run in this browser environment"" error message.

## Suggested solution

<!-- A clear and concise description of what you want to happen. -->

Support running Prisma client in a browser environment when using a PGlite driver.",,
2607583809,25487,Can't use prisma in nextjs turborepo,"### Bug description

When using prisma in a Turborepo I get this error when using it in a standard turborepo starter: 
```
Package @prisma/client (serverComponentsExtenalPackages or default list) can't be external
The request @prisma/client matches serverComponentsExtenalPackages (or the default list), but it can't be external:
The request could not be resolved by Node.js from the project directory.
Packages that should be external need to be installed in the project directory, so they can be resolved from the output files.
Try to install the package into the project directory.
```
### How to reproduce


1. Follow this guide: https://turbo.build/repo/docs/guides/tools/prisma
2. Add the prisma client to the web package / site
4. See error



### Expected behavior

It should work!

### Prisma information

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  schemas  = [""public"", ""storage""]
}


### Environment & setup

- OS: mac apple silicon
- Database: Postgres
- Node.js version: v22.8.0


### Prisma Version

```
""dependencies"": {
		""@prisma/client"": ""^5.21.1""
	},
	""devDependencies"": {
		""prisma"": ""^5.21.1""
	}
```
",,
2606955217,25485,Remove requirement for @prisma/client to be installed,"## Problem

We have multiple prisma clients so we exclusively use the [custom output path feature](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#using-a-custom-output-path). That means that for us we don't _need_ to have the `@prisma/client` package installed, but it's required currently.

## Suggested solution

Remove the requirement for it to be installed. I'm not sure if it's any more than adding some way of disabling the following line, or if it's more involved. I'll investigate more at some point, just not sure when I can yet unfortunately.

https://github.com/prisma/prisma/blob/8e14920742f1aa11bd201c073b31ec7cd9d03d3a/packages/internals/src/get-generators/generatorResolvers/prisma-client-js/prismaClientResolver.ts#L84

## Alternatives

We're currently just keeping the `@prisma/client` package installed.

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->
",,
2606708536,25484,Built-in dataloader that batches `findUnique` queries fails on uppercase UUID values,"### Bug description

We have a table in our Postgres DB with a [UUID column](https://www.postgresql.org/docs/16/datatype-uuid.html), like this:

```prisma
model UploadedImage {
  clientID String? @unique @map(""client_id"") @db.Uuid
  // + other fields
}
```

And we query it by that UUID like this (`DB` is our Prisma client):

```ts
async function getByClientID(clientID: string) {
  return await DB.uploadedImage.findUnique({
    where: { clientID },
  });
}
```

If we make multiple queries in a single tick, like this:

```ts
async function getAllByClientID(clientIDs: string[]) {
  return await Promise.all(clientIDs.map(getByClientID);
}
```

We can see the calls getting batched into a single DB query using [Prisma's built-in dataloader](https://www.prisma.io/docs/orm/prisma-client/queries/query-optimization-performance#solving-n1-in-graphql-with-findunique-and-prisma-clients-dataloader).

This works correctly when we pass only one UUID value — regardless of case (which is correct since UUIDs are case-insensitive in Postgres):

```
> await getAllByClientID(['B54E6D56-8134-4E01-8450-91B0080BA4BC'])
[
  {
    clientID: 'b54e6d56-8134-4e01-8450-91b0080ba4bc', // the value is returned in lowercase
    // ...
  }
]
```

But incorrectly returns all `null`s if we pass multiple UUID values _in uppercase_:

```
> await getAllByClientID(['B54E6D56-8134-4E01-8450-91B0080BA4BC', '2576212F-FF76-4B52-934B-FA639C7BDF45'])
[ null, null ]
```

Fortunately, there's a workaround possible, which is to explicitly lowercase UUID values first:

```ts
async function getByClientID(clientID: string) {
  return await DB.uploadedImage.findUnique({
    where: { clientID: clientID.toLowerCase() },
  });
}
```

But this was an extremely surprising and difficult bug to find and debug in our production codebase and app.

### How to reproduce

See above.

### Expected behavior

_No response_

### Prisma information

See above.

### Environment & setup

- OS: Mac OS 14.6.1
- Database: PostgreSQL
- Node.js version: 22.9.0


### Prisma Version

```
prisma                  : 5.16.2
@prisma/client          : 5.16.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.9.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../node_modules/.pnpm/@prisma+engines@5.16.2/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../node_modules/.pnpm/@prisma+engines@5.16.2/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
```
",,
2605552280,25481,typedSql and $allOperations extension errors,"### Bug description

It seems like the `typedSql` preview feature is not compatible with `$allOperations` client extensions. Here is the error stack trace:

```
TypeError: undefined is not an object (evaluating 'e.map')
      at hl (../node_modules/@prisma/client/runtime/library.js:114:15432)
  at $t (../node_modules/@prisma/client/runtime/library.js:114:15379)
      at ../node_modules/@prisma/client/runtime/library.js:121:408
      at ../node_modules/@prisma/client/runtime/library.js:130:10110
      at _executeRequest (../node_modules/@prisma/client/runtime/library.js:130:9962)
      at ../node_modules/@prisma/client/runtime/library.js:30:5137
      at i (../node_modules/@prisma/client/runtime/library.js:121:1025)
      at then (../node_modules/@prisma/client/runtime/library.js:121:1100)
      at then (../node_modules/@prisma/client/runtime/library.js:121:1100)
      at processTicksAndRejections (:61:76)
```

### How to reproduce

1. Enabled the `typedSql` preview feature.
2. Extend the Prisma client like this:

```ts
const prisma = new PrismaClient().$extends({
  query: {
    $allOperations({ args, query, operation, model }: any) {
      console.log({ args, query, operation, model });
      return query(args);
    }
  }
})
```

3. Attempt to run `$queryRawTyped`

```sql
-- prisma/sql/getTodoCount.sql
SELECT COUNT(*) as count FROM ""todos""
```

```ts
import { getTodoCount } from ""@prisma/client/sql"";
const todoCount = await prisma.$queryRawTyped(getTodoCount())
```

The extension outputs the following

```
{
  args: {},
  query: [Function: query],
  operation: ""$queryRawTyped"",
  model: undefined
}
```

It crashes only with the `$extends`, without it the client works fine.

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""typedSql"", ""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      =  env(""SOURCE_DB_URI"")
}

model Todo {
  @@map(""todos"")

  id          Int      @id @default(autoincrement())
  task        String   @db.VarChar(255)
  isCompleted Boolean  @default(false)
  authorId    Int?
}
```

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
5.20.0
```
",,
2605126099,25479,Result extension custom field is not resolved when requested as a relation on other models,"### Bug description

I'm not sure if this is expected behaviour or a bug, but I couldn't see anything in the docs about it.

I've added a custom field using the [result client extension](https://www.prisma.io/docs/orm/prisma-client/client-extensions/result).

This works fine when querying directly on the model itself - `prisma.item.findMany` - but when I query it as a relation on another model - `prisma.booking.findUnique().items()` - it doesn't work.

### How to reproduce

```js
require('dotenv').config()

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient().$extends({
  result: {
    item: {
      priceInDollars: {
        needs: { priceInCents: true },
        compute(item) {
          return item.priceInCents / 100
        }
      }
    }
  }
})

const run = async () => {
  await prisma.booking.deleteMany()
  await prisma.item.deleteMany()

  const booking = await prisma.booking.create({ data: {} })
  
  const item = await prisma.item.create({
    data: {
      bookingId: booking.id,
      priceInCents: 1000
    } 
  })

  const items1 = await prisma.item.findMany({
    where: { bookingId: booking.id }
  })

  console.log(items1) // has priceInDollars

  const items2 = await prisma.booking.findUnique({
    where: { id: booking.id }
  }).items()

  console.log(items2) // missing priceInDollars
}

run()
```

### Expected behavior

I'd expect the custom field to be resolved everywhere I resolve an `item` using the prisma client.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""prismaSchemaFolder""]
}

model Booking {
  id    String @id @default(cuid())
  items Item[]
}

model Item {
  id           String   @id @default(cuid())
  booking      Booking @relation(fields: [bookingId], references: [id])
  bookingId    String
  priceInCents Int
}
```

### Environment & setup

- OS: macOS 14.6.1
- Database: PostgreSQL 15.8
- Node.js version: 20.17.0


### Prisma Version

```
5.21.1
```
",,
2604915233,25478,Bug: `prisma version --json` should suppress `dotenv` message,"### Bug description

I want to use prisma version information, so I tried to do `prisma version --json | jq ... `, but I get the following message from dotenv, so I get an error.

```
Environment variables loaded from .env
```

This is because printMessage is fixed to true.

https://github.com/prisma/prisma/blob/8e14920742f1aa11bd201c073b31ec7cd9d03d3a/packages/cli/src/Version.ts#L66


### How to reproduce

1. install & make .env file
1. exec `pnpm exec prisma version --json`
2. shown `Environment variables loaded from .env` message.

### Expected behavior

Dont show `Environment variables loaded from .env` message (or opt-outable)

```shell-session
$ pnpm exec prisma version --json
{
  ""prisma"": ""5.21.1"",
  ""@prisma/client"": ""5.21.1"",
  ""computed-binarytarget"": ""debian-openssl-3.0.x"",
...
```

### Prisma information

empty: This is not related to schema

### Environment & setup

- OS: Arch Linux
- Database: PostgreSQL
- Node.js version: v18/v20


### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2604826147,25477,"Useless migration when @default(dbgenerated(""CURRENT_TIMESTAMP""))","### Bug description

Using  `@default(dbgenerated(""CURRENT_TIMESTAMP""))` couses that prisma can't stop generating migration like
```sql
-- AlterTable
ALTER TABLE ""user"" ALTER COLUMN ""created_at"" SET DEFAULT CURRENT_TIMESTAMP;
```

After applying it prisma generates this migration again and again when run `npx prisma migrate dev`.

### How to reproduce

`mkdir test`
`cd test`
`npm i prisma`
`npx prisma init`
fill `.env` with your credentials
fill schema
`npx prisma migrate dev`
`npx prisma migrate dev`
`npx prisma migrate dev`
...

### Expected behavior

_No response_

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model user {
  id Int @id @default(autoincrement())
  name String

  created_at DateTime @default(dbgenerated(""CURRENT_TIMESTAMP""))
}
```


### Environment & setup

- OS: Windows, Ubuntu
- Database: PostgreSQL
- Node.js version: v18.17.1, v20.13


### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.13.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.17.1
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```",,
2603024322,25475,Transaction rollback failed when using extension,"### Bug description

When throwing an error in the middle of the transaction, I expect no rows has been deleted from the database. 
But they are.
It seems the extension is related to the issue.

### How to reproduce

PrismaManager
```
import { PrismaClient } from '@prisma/client';
import environnementManager from '../helper/EnvironnementManager';
class PrismaManager {
  private prismaPool = new Map<string, PrismaClient>();

  public getPrisma(envCode: string, login?: string | null): PrismaClient {
    if (!this.prismaPool.has(envCode)) {
      this.prismaPool.set(envCode, new PrismaClient({
        datasources: {
          db: {
            url: environnementManager.getUrlFromEnvCode(envCode)
          }
        },
        log: [/*'query', 'info',*/ 'warn', 'error'],
      }) as PrismaClient);
    }

    const prisma = this.prismaPool.get(envCode)!;
    return prisma.$extends({
      query: {
        $allModels: {
          async $allOperations({ args, query }) {
            const [, result] = await prisma.$transaction([
              prisma.$executeRaw`SELECT set_config('sara.sessionuser', ${login}, true)`,
              query(args),
            ]);
            return result;
          },
        },
      },
    }) as PrismaClient;
  }
}

let prismaManager: PrismaManager;

if (process.env.NODE_ENV === 'production') {
  prismaManager = new PrismaManager();
}
else {
  if (!(global as any).singletonPrismaManager) {
    (global as any).singletonPrismaManager = new PrismaManager();
  }
  prismaManager = (global as any).singletonPrismaManager;
}
export default prismaManager;
```
Client using the PrismaManager

```
import prisma from ""../query/PrismaManager"";

  public async upsertAlerteur(alerteur: AlerteurAggregate) {
    const auditLogin = await getAuditLogin();

    await prisma.getPrisma(""REF"", auditLogin).$transaction(async (tx) => {

      await tx.dictionnaire.deleteMany({
        where: { id_alerteur: alerteur.id },
      });
```
The above deletion should not be commited due to the Error below
```

      if (alerteur.dictionnaire.length === 2 && alerteur.dictionnaire[1].code === ""ko"") {
        throw new Error('Throw an error to test transaction rollback');
      }

      await tx.alerteur_mail.deleteMany({
        where: { id_alerteur: alerteur.id },
      });

      await tx.alerteur.upsert({
        where: { id: alerteur.id },
        update: {
          ...alerteur,
          dictionnaire: {
            upsert: alerteur.dictionnaire.map(dico => {
              return {
                where: { id: dico.id },
                create: createPureDictionnaire(dico),
                update: createPureDictionnaire(dico)
              }
            })
          },
          alerteur_mail: {
            upsert: alerteur.alerteur_mail.map(mail => {
              return {
                where: { id: mail.id },
                create: createPureAlerteurMail(mail),
                update: createPureAlerteurMail(mail)
              }
            })
          }
        },
        create: {
          ...alerteur,
          dictionnaire: {
            create: alerteur.dictionnaire.map(dico => {
              return createPureDictionnaire(dico)
            })
          },
          alerteur_mail: {
            create: alerteur.alerteur_mail.map(mail => {
              return createPureAlerteurMail(mail)
            })
          }
        }
      });
    });
  }

```



### Expected behavior

The rows of 'Dictionnaire' deleted just before the Error should be still in the table after the transaction

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
model alerteur {
  id                String         @id(map: ""alerteur_pk"") @db.Uuid
  code              String         @db.VarChar(50)
  libelle           String         @db.VarChar(50)
  description       String         @db.VarChar(300)
  domaine           String?         @db.VarChar(300)
  categorie         String         @db.VarChar(50)
  frequence         String         @db.VarChar(50)
  requete           String         @db.Text
  validite          Boolean        @default(false)
  invalidite_statut String?        @db.VarChar(100)
  actif             Boolean        @default(false)
  alerteur_mail     alerteur_mail[]
  dictionnaire      dictionnaire[]
}

model dictionnaire {
  id          String   @id(map: ""dictionnaire_pk"") @db.Uuid
  id_alerteur String   @db.Uuid
  code        String   @db.VarChar(50)
  libelle     String   @db.VarChar(50)
  description String?
  action      String?
  alerteur    alerteur @relation(fields: [id_alerteur], references: [id], onDelete: NoAction, onUpdate: NoAction, map: ""dictionnaire_alerteur_fk"")

  @@unique([id_alerteur, code], map: ""dictionnaire_unique"")
}
model alerteur_mail {
  id                 String    @id(map: ""aleteur_mail_pk"") @db.Uuid
  id_alerteur        String    @db.Uuid
  execution_type     String    @db.VarChar(10)
  frequence          String?   @db.VarChar(50)
  titre              String
  entete             String?
  pied               String?
  destinataire       String?
  actif              Boolean   @default(false)
  date_dernier_envoi DateTime? @db.Timestamptz(6)
  nouveau_uniquement Boolean   @default(false)
  commun             Boolean   @default(true)
  par_responsable    Boolean   @default(false)
  par_groupe         Boolean   @default(false)
  groupe_complet     Boolean   @default(false)
  database_infos     Boolean   @default(false)
  mode_test          Boolean   @default(true)
  alerteur           alerteur  @relation(fields: [id_alerteur], references: [id], onDelete: NoAction, onUpdate: NoAction, map: ""alerteur_mail_alerteur_fk"")

  @@unique([id_alerteur, execution_type], map: ""alerteur_mail_un"")
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: 21.7.1


### Prisma Version

```
5.20.0
```
",,
2602720671,25474,Issue with Prisma Query Engine Panic: Unable to Export JSON File Due to VRAM Error in Local Environment,"### Bug description

I encountered an issue where I cannot export a conversation history JSON file due to a Prisma Query Engine panic in a local environment setup. The error appears to be related to VRAM allocation for my NVIDIA GPU, possibly connected to Faraday, which I’m using in this setup.

The following message appears in the console:Invalid Vt.modelLayerSamples.upsert() invocation in C:\Users\kenny\AppData\Local\faraday\app-0.30.0\resources\app.asar\dist\server\main.js:1144:63297
...
This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

When trying to export a JSON file in my local setup, Prisma crashes due to an invalid invocation of Vt.modelLayerSamples.upsert() during a process involving GPU VRAM allocation. The application (Faraday) attempts to read the GPU’s free and total VRAM but encounters an issue, specifically with fetching accurate VRAM values for NVIDIA GPUs. This results in a Prisma panic, making the operation non-recoverable.

### Prisma information

This issue occurred within an application using Prisma in conjunction with a local environment (Windows) involving VRAM allocation for an NVIDIA GPU (RTX 3070). It involves a large conversation history, which might contribute to the problem. Below is a snippet of the log error I received:Invalid `Vt.modelLayerSamples.upsert()` invocation...
...
This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.




### Environment & setup

OS: Windows 10
Processor: Intel i7-11800
GPU: NVIDIA RTX 3070
RAM: 16 GB
Prisma Client: Using Prisma for a local project
Application: Faraday (app-0.30.0)
Other tools: Powershell (used by Faraday to fetch VRAM information), Vulkan



### Prisma Version

```

```
I don't know what version of Prisma it is; I'm using Backyard AI version:v0.30.0
",,
2600570635,25472,Error: PrismaClient is not configured to run in Edge Runtime (...),"### Bug description

Middleware does not work, but when the middleware does nothing it does work, for example:


```ts
const middleware = (req) =>
{
  console.log('middleware', req.nextUrl.pathname)
}

export default middleware

```

Output:

```sh
 GET / 200 in 216ms
middleware /_next/static/css/app/layout.css
middleware /_next/static/chunks/webpack.js
middleware /_next/static/chunks/main-app.js
middleware /_next/static/chunks/app-pages-internals.js
```

When extending auth, extending auth I never receive correct information because the middleware does not pass any value in req.auth.

```ts
import { authOptions} from '@/auth'
import NextAuth from 'next-auth'

const { auth } = NextAuth(authOptions)
 
export default auth((req) =>
{
  console.log('auth middleware', req.auth)
})
```

```sh
[auth][error] JWTSessionError: Read more at https://errors.authjs.dev#jwtsessionerror
[auth][cause]: JWEInvalid: Invalid Compact JWE
    at compactDecrypt (webpack-internal:///(middleware)/./node_modules/.pnpm/jose@5.9.4/node_modules/jose/dist/browser/jwe/compact/decrypt.js:20:15)
    at jwtDecrypt (webpack-internal:///(middleware)/./node_modules/.pnpm/jose@5.9.4/node_modules/jose/dist/browser/jwt/decrypt.js:12:100)
    at Object.decode (webpack-internal:///(middleware)/./node_modules/.pnpm/@auth+core@0.37.2/node_modules/@auth/core/jwt.js:81:79)
    at Module.session (webpack-internal:///(middleware)/./node_modules/.pnpm/@auth+core@0.37.2/node_modules/@auth/core/lib/actions/session.js:23:39)
    at AuthInternal (webpack-internal:///(middleware)/./node_modules/.pnpm/@auth+core@0.37.2/node_modules/@auth/core/lib/index.js:51:77)
    at async Auth (webpack-internal:///(middleware)/./node_modules/.pnpm/@auth+core@0.37.2/node_modules/@auth/core/index.js:130:34)
    at async handleAuth (webpack-internal:///(middleware)/./node_modules/.pnpm/next-auth@5.0.0-beta.25_next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1__react@18.3.1/node_modules/next-auth/lib/index.js:137:29)
    at async adapter (webpack-internal:///(middleware)/./node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/adapter.js:178:16)
    at async /home/jdi/Desktop/@aldytaken/meca-store/node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/web/sandbox/sandbox.js:110:22
    at async runWithTaggedErrors (/home/jdi/Desktop/@aldytaken/meca-store/node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/web/sandbox/sandbox.js:107:9)
[auth][details]: {}
auth middleware null
prisma:client Prisma Client call: +193ms
prisma:client prisma.session.findUnique({
  where: {
    sessionToken: ""4410481e-d59e-4053-9b27-193769d3e042""
  },
  include: {
    user: true
  }
}) +1ms
prisma:client Generated request: +0ms
prisma:client {
  ""modelName"": ""Session"",
  ""action"": ""findUnique"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""sessionToken"": ""4410481e-d59e-4053-9b27-193769d3e042""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true,
      ""user"": {
        ""arguments"": {},
        ""selection"": {
          ""$composites"": true,
          ""$scalars"": true
        }
      }
    }
  }
}
 +1ms
prisma:client:libraryEngine sending request, this.libraryStarted: true +0ms
 GET / 200 in 208ms
auth middleware null
auth middleware null
auth middleware null
auth middleware null
auth middleware null
 GET / 200 in 40ms
auth middleware null
auth middleware null
auth middleware null
auth middleware null
```

When I try to use the middlewares from auth.ts:

```ts
export { auth as middleware } from '@/auth'
```

```sh
[auth][details]: {}
[auth][error] AdapterError: Read more at https://errors.authjs.dev#adaptererror
[auth][cause]: Error: PrismaClient is not configured to run in Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware). In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
```



`auth.ts`

```ts
import NextAuth, { NextAuthConfig } from 'next-auth'
import { PrismaAdapter } from '@auth/prisma-adapter'
import Google from 'next-auth/providers/google'
import { Provider } from 'next-auth/providers'
import { prisma } from '@/prisma'

const providers: Provider[] =
[
  Google
]

const callbacks: NextAuthConfig['callbacks'] =
{
  async signIn({ profile }): Promise<boolean>
  {
    if (profile?.email?.endsWith('@gmail.com'))
      return true

    return false
  },
}

export const authOptions: NextAuthConfig =
{
  providers: providers,
  callbacks: callbacks
}

const _authOptions: NextAuthConfig =
{
  adapter: PrismaAdapter(prisma),
  ...authOptions
}

export const { handlers, signIn, signOut, auth } = NextAuth(_authOptions)
```

### How to reproduce

Have the middleware active and load a page.

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model User {
  id            String          @id @default(auto()) @map(""_id"") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String @default(""user"")
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map(""_id"") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map(""_id"") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
```

```ts
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient }

export const prisma = globalForPrisma.prisma || new PrismaClient()

if (process.env.NODE_ENV === 'development')
  globalForPrisma.prisma = prisma

```


### Environment & setup

- OS: Linux arch 6.11.3-arch1-1
- Database: MongoDB
- Node.js version: v22.9.0


### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.9.0
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2599140405,25468,The table `(not available)` does not exist in the current database,"### Bug description

When I try to update the `User` table and the `Setting` table has a row with `accountId` `NULL` I encounter the following error: `The table (not available) does not exist in the current database`:

```ts
// this codes lead to ""The table (not available) does not exist in the current database"" error
await prisma.user.update({
    where: { id: 1 },
    data: {
        userSetting: {
            upsert: {
                where: { accountId: 1 },
                create: {},
                update: {}
            }
        }
    }
});
```

The error:
```
prisma:query BEGIN
prisma:query SELECT ""public"".""User"".""id"", ""public"".""User"".""userSettingId"" FROM ""public"".""User"" WHERE (""public"".""User"".""id"" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT ""public"".""Setting"".""id"" FROM ""public"".""Setting"" WHERE (""public"".""Setting"".""accountId"" = $1 AND ""public"".""Setting"".""id"" IN ($2)) OFFSET $3
prisma:query INSERT INTO ""public"".""Setting"" DEFAULT VALUES RETURNING ""public"".""Setting"".""id""
prisma:query UPDATE ""public"".""User"" SET ""userSettingId"" = $1 WHERE (""public"".""User"".""id"" IN ($2) AND ""public"".""Setting"".""accountId"" = $3)
prisma:query ROLLBACK

PrismaClientKnownRequestError: 
Invalid `prisma.user.update()` invocation in
/Users/user/Documents/Projects/test-project/src/main.ts:7:23

  4 async function bootstrap() {
  5     const prisma = new PrismaClient();
  6 
→ 7     await prisma.user.update(
The table `(not available)` does not exist in the current database.
    at Mn.handleRequestError (/Users/user/Documents/Projects/test-project/node_modules/@prisma/client/runtime/library.js:121:7753)
    at Mn.handleAndLogRequestError (/Users/user/Documents/Projects/test-project/node_modules/@prisma/client/runtime/library.js:121:7061)
    at Mn.request (/Users/user/Documents/Projects/test-project/node_modules/@prisma/client/runtime/library.js:121:6745)
    at async l (/Users/user/Documents/Projects/test-project/node_modules/@prisma/client/runtime/library.js:130:9633)
    at async bootstrap (/Users/user/Documents/Projects/test-project/src/main.ts:7:5) {
  code: 'P2021',
  clientVersion: '5.21.1',
  meta: { modelName: 'User', table: '(not available)' }
}
```

i.e. Prisma adds `""public"".""Setting"".""accountId""` in where clause to the update statement if there is a row with `NULL` `accountId` in the `Setting` table. But If manually change `accountId` to `1` in the `Setting` table  the error doesn't happen.

I created a repository with a minimal reproducible example. Check it in **How to reproduce** section

### How to reproduce

Check the repo. It contains a minimal reproducible example.

https://github.com/zfeed/prisma-bug-2024-10-19


### Expected behavior

The update should be succesful

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Account {
  id       Int       @id @default(autoincrement())
  settings Setting[]
}

model Setting {
  id        Int  @id @default(autoincrement())
  // foreign keys
  accountId Int?

  account Account? @relation(fields: [accountId], references: [id])
  user    User[]   @relation(""userSetting"")
}

model User {
  id            Int      @id @default(autoincrement())
  userSettingId Int?
  userSetting   Setting? @relation(""userSetting"", fields: [userSettingId], references: [id])
}



```

```ts
// Add your code using Prisma Client
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

await prisma.user.update({
    where: { id: 1 },
    data: {
        userSetting: {
            upsert: {
                where: { accountId: 1 },
                create: {},
                update: {}
            }
        }
    }
});

```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v18.20.2


### Prisma Version

```
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.20.2
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2598685330,25464,Prisma can't get environment variables from .env.local,"### Bug description

Prisma can't find any any env variable when I'm using .env.local instead of .env

I read the docs and use dotenv-cli, nothing working. I have a test script, so I'm 100% dotenv-cli works fine. It's a Prisma problem. I'm also using pnpm. Not sure if it can affect.

<img width=""920"" alt=""image"" src=""https://github.com/user-attachments/assets/39f97a51-f109-4841-885e-c1515b06ef3f"">
<img width=""914"" alt=""image"" src=""https://github.com/user-attachments/assets/065f089f-eece-499a-b748-827248337bd9"">


### How to reproduce

1. Install prisma in nextjs project
2. Wanted to setup postgres db on vercel
3. Added this in package.json scripts: ""vercel-build"": ""dotenv -e .env.local -- prisma generate && prisma migrate deploy && next build"",
4. pnpm run vercel-build
5. Get error (fi I just have a .env file it works, .env.local doesn't)


### Expected behavior

Expected behavior: prisma be able to get env variables from .env.local.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  // Uses connection pooling
  url = env(""POSTGRES_PRISMA_URL"")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env(""POSTGRES_URL_NON_POOLING"")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS (apple sillicon m1)
- Database: PostgreSQL (vercel db)
- Node.js version: v20.11.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.21.1
@prisma/client          : 5.21.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../Library/Caches/pnpm/dlx/b4kwuke4fcm2ppufregi7l7yfi/1929f2106b1-fa2f/node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli bf0e5e8a04cada8225617067eaa03d041e2bba36 (at ../../Library/Caches/pnpm/dlx/b4kwuke4fcm2ppufregi7l7yfi/1929f2106b1-fa2f/node_modules/.pnpm/@prisma+engines@5.21.1/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.21.1-1.bf0e5e8a04cada8225617067eaa03d041e2bba36
Default Engines Hash    : bf0e5e8a04cada8225617067eaa03d041e2bba36
Studio                  : 0.503.0
```
",,
2598246834,25463,prisma init error (node v 23),"### Bug description

$ npx prisma init
(node:10452) ExperimentalWarning: Support for loading ES Module in require() is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
Error: (0 , DSe.isError) is not a function

but is working version 21 

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
    ""prisma"": ""^5.21.1"",
```
",,
2596087452,25450,"""The ""path"" argument must be of type string. Received undefined"" after upgrading to 5.21.1","### Bug description

Was going to give Optimize a test, but upgrading to 5.21.1 keeps causing the error below when running `prisma generate`

Can I use optimize on Prisma `5.17.0`?

```
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Error: 
The ""path"" argument must be of type string. Received undefined
```

I've reference the previous issues [6372](https://github.com/prisma/prisma/issues/6372) and [6770](https://github.com/prisma/prisma/issues/6770) already.

I'm using `5.21.1` for both `prisma` and `prisma/client` (without the carat) and I've tried wiping my `pnpm-lock.yaml` + `node_modules` folding and reinstalling. No dice. I didn't have this issue with `5.17.0`. I've also tried it on `node 18`, same result.



### How to reproduce

```
dependancies:
    ""nuxt"": ""^3.13.2"",
    ""prisma"": ""5.21.1""
    ""@prisma/extension-accelerate"": ""^1.2.1"",
    ""@prisma/extension-optimize"": ""^1.0.1"",
devDependancies:
    ""prisma"": ""5.21.1"",
```
    

### Expected behavior

For the `prisma generate` command to not cause errors

### Prisma information


```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing"", ""multiSchema""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_DATABASE_URL"")
  schemas   = [""public""]
}

model account {
  id         String     @id @db.Uuid
  email      String?
  provider   String?
  avatar_url String?
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  first_name String?
  full_name  String?
  last_name  String?
  updated_at DateTime   @default(now()) @db.Timestamptz(6)
  comment    comment[]
  feedback   feedback[]
  upvotes    upvote[]

  @@schema(""public"")
}

model comment {
  id             String   @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  content        String
  creator_name   String?
  creator_avatar String?
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  creator_id     String?  @db.Uuid
  feedback_id    String   @db.Uuid
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  creator        account? @relation(fields: [creator_id], references: [id], onDelete: Restrict)
  feedback       feedback @relation(fields: [feedback_id], references: [id])

  @@schema(""public"")
}

model company {
  id                 String    @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  name               String
  logo               String?   @unique
  slug               String    @unique
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  owner_id           String    @db.Uuid
  updated_at         DateTime  @default(now()) @db.Timestamptz(6)
  stripe_customer_id String?
  subscription       String?
  subscription_id    String?   @unique
  members            member[]
  products           product[]

  @@schema(""public"")
}

model member {
  id         String   @db.Uuid
  role       role
  email      String?
  avatar_url String?
  company_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  full_name  String?
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  company    company  @relation(fields: [company_id], references: [id])

  @@id([id, company_id])
  @@schema(""public"")
}

model product {
  id            String       @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  logo          String?      @unique
  name          String
  description   String
  subdomain     String       @unique
  company_id    String       @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime     @default(now()) @db.Timestamptz(6)
  website       String?
  colors        Json?
  anon_settings Json         @default(""{}"")
  widget_key    String       @unique
  icon          String?      @unique
  roadmap_order Json?
  feedback      feedback[]
  company       company      @relation(fields: [company_id], references: [id])
  tags          tag[]        @relation(""ProductTags"")
  status_tags   status_tag[] @relation(""StatusTags"")

  @@schema(""public"")
}

model feedback {
  id                 String               @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  title              String
  description        String
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  creator_id         String               @db.Uuid
  product_id         String               @db.Uuid
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  status             String               @default(""notstarted"")
  would_pay          Boolean?
  FeedbackStatusTags FeedbackStatusTags[]
  comments           comment[]
  creator            account              @relation(fields: [creator_id], references: [id], map: ""feedback_creator_id_fkey"")
  product            product              @relation(fields: [product_id], references: [id], map: ""feedback_product_id_fkey"")
  upvotes            upvote[]
  tags               tag[]                @relation(""FeedbackTags"")

  @@schema(""public"")
}

model upvote {
  id          String   @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  feedback_id String   @db.Uuid
  upvoter_id  String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  feedback    feedback @relation(fields: [feedback_id], references: [id])
  upvoter     account  @relation(fields: [upvoter_id], references: [id])

  @@unique([feedback_id, upvoter_id])
  @@schema(""public"")
}

model tag {
  type     tagType    @default(standard)
  id       String     @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  name     String
  value    String     @unique
  public   Boolean
  order    Int?       @db.SmallInt
  feedback feedback[] @relation(""FeedbackTags"")
  products product[]  @relation(""ProductTags"")

  @@schema(""public"")
}

model status_tag {
  id                 String               @id(map: ""status_pkey"") @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  name               String?
  value              String?
  public             Boolean?
  starting_order     Int?                 @db.SmallInt
  type               tagType?
  color              String?
  FeedbackStatusTags FeedbackStatusTags[]
  product            product[]            @relation(""StatusTags"")

  @@schema(""public"")
}

model stripe_customers {
  company_id         String   @id(map: ""stripeCustomers_pkey"")
  stripe_customer_id String?
  created_at         DateTime @default(now()) @db.Timestamptz(6)

  @@schema(""public"")
}

model FeedbackStatusTags {
  A          String     @db.Uuid
  B          String     @db.Uuid
  status_tag status_tag @relation(fields: [A], references: [id], onDelete: Cascade, map: ""_FeedbacktatusTags_A_fkey"")
  feedback   feedback   @relation(fields: [B], references: [id], onDelete: Cascade, map: ""_FeedbacktatusTags_B_fkey"")

  @@unique([A, B], map: ""_FeedbacktatusTags_AB_unique"")
  @@index([B], map: ""_FeedbacktatusTags_B_index"")
  @@map(""_FeedbackStatusTags"")
  @@schema(""public"")
}

enum tagType {
  standard
  custom

  @@schema(""public"")
}

enum role {
  owner
  admin
  member

  @@schema(""public"")
}

```

```ts
import { PrismaClient } from '@prisma/client'
import { withOptimize } from '@prisma/extension-optimize'
import { withAccelerate } from '@prisma/extension-accelerate'
const config = useRuntimeConfig()

const prisma = new PrismaClient()
  .$extends(withAccelerate())
  .$extends(
    withOptimize({ apiKey: config.private.PRISMA_OPTIMIZE_API_KEY as string })
  )

export default function usePrisma() {
  return { prisma }
}

```


### Environment & setup

- OS: Mac Ventura 13.6
- Database: Supabase
- Node.js version: `21.0.0` / `18`


### Prisma Version

```
dependancies:
    ""prisma"": ""5.21.1""
    ""@prisma/extension-accelerate"": ""^1.2.1"",
    ""@prisma/extension-optimize"": ""^1.0.1"",
devDependancies:
    ""prisma"": ""5.21.1"",
```",,
2588682342,25436,Incorrect OpenTelemetry span reported by Prisma,"### Bug description

While working on our OpenTelemetry instrumentation in debug mode we discovered some weird spans coming from Prisma instrumentation. These spans bypass sampler (they are being reported even when sampling rate is 0) and contain suspicious `parentId` of `'0000000000000000'`. Here is the span in debug logs from OpenTelemetry:

```

items to be sent [
  Span {
    attributes: { 'db.type': 'postgres' },
    links: [],
    events: [],
    _droppedAttributesCount: 0,
    _droppedEventsCount: 0,
    _droppedLinksCount: 0,
    status: { code: 0 },
    endTime: [ 1728995578, 143755000 ],
    _ended: true,
    _duration: [ 0, 8209000 ],
    name: 'prisma:engine:connection',
    _spanContext: {
      traceId: '4c6b47d1a6e5484db6e6706a6aaa0bbb',
      spanId: '4e7ed755d9abcf3b',
      traceFlags: 1
    },
    parentSpanId: '0000000000000000',
    kind: 0,
    _performanceStartTime: 3653.858667,
    _performanceOffset: -0.341552734375,
    _startTimeProvided: true,
    startTime: [ 1728995578, 135546000 ],
    resource: Resource {
      _attributes: [Object],
      asyncAttributesPending: false,
      _syncAttributes: [Object],
      _asyncAttributesPromise: undefined
    },
    instrumentationLibrary: { name: 'prisma', version: undefined, schemaUrl: undefined },
    _spanLimits: {
      attributeValueLengthLimit: Infinity,
      attributeCountLimit: 128,
      linkCountLimit: 128,
      eventCountLimit: 128,
      attributePerEventCountLimit: 128,
      attributePerLinkCountLimit: 128
    },
    _attributeValueLengthLimit: Infinity,
    _spanProcessor: MultiSpanProcessor { _spanProcessors: [Array] }
  }
]
```

### How to reproduce

1. Set up OpenTelemetry instrumentation with sampling rate 0 (use only Prisma instrumentation for cleaner logs)
2. Enable debug logs
```
import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';
// For troubleshooting, set the log level to DiagLogLevel.DEBUG
diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);
```
3. Trigger `prisma:engine:connection` span: I cannot pin point exactly when these spans are being generated but a bunch of DB operations should trigger it

### Expected behavior

You should not see any spans being generated when sample rate is 0.

### Prisma information

OpenTelemetry config:

```
    const asyncHooksContextManager = new AsyncHooksContextManager();
    asyncHooksContextManager.enable();
    if (!api.context.setGlobalContextManager(asyncHooksContextManager)) {
        throw new Error('Could not set global context manager');
    }
    const tracerProvider = new NodeTracerProvider({
        resource: resource,
        sampler: new AlwaysOffSampler(),
    });
       registerInstrumentations({
        tracerProvider: tracerProvider,
        instrumentations: [
          new PrismaInstrumentation()
        ],
    });
    const processor = new BatchSpanProcessor(config.exporter);
    tracerProvider.addSpanProcessor(processor);
    tracerProvider.register({
        contextManager: asyncHooksContextManager,
    });
    api.trace.setGlobalTracerProvider(tracerProvider);
```

### Environment & setup

- OS: macOS 14.6.1
- Database: PostgreSQL
- Node.js version: v22.9.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.9.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at ../../node_modules/.pnpm/@prisma+engines@5.20.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at ../../node_modules/.pnpm/@prisma+engines@5.20.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Preview Features        : tracing
```
",,
2588181094,25433,PRISMA_ENGINES_MIRROR and BINARY_DOWNLOAD_VERSION env variables don't work when npm install,"### Bug description

- `PRISMA_ENGINES_MIRROR` and `BINARY_DOWNLOAD_VERSION` env variables don't work when npm install.
- Related issue: https://github.com/prisma/prisma/discussions/13270

### How to reproduce

- set env variables in `.env`:

```
PRISMA_ENGINES_MIRROR=""https://oceanbase-prisma-builds.s3.ap-southeast-1.amazonaws.com""
BINARY_DOWNLOAD_VERSION=""96fa66f2f130d66795d9f79dd431c678a9c7104e""
```
- reinstall deps and view log `rm -rf node_modules && DEBUG=""prisma:*"" npm i --foreground-scripts`:

```bash
> prisma@5.20.0 preinstall
> node scripts/preinstall-entry.js


> @prisma/client@5.20.0 postinstall
> node scripts/postinstall.js

prisma:engines binaries to download libquery-engine, schema-engine +869ms
prisma:fetch-engine:download file xxx/node_modules/@prisma/engines/schema-engine-darwin does not exist and must be downloaded +7ms
prisma:fetch-engine:download file xxx/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node does not exist and must be downloaded +0ms
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/06fc58a368dc7be9fbbbe894adf8d445d208c284/darwin/libquery_engine.dylib.node.gz will be downloaded to xxx/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node +2ms
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/06fc58a368dc7be9fbbbe894adf8d445d208c284/darwin/schema-engine.gz will be downloaded to xxx/node_modules/@prisma/engines/schema-engine-darwin +0ms
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/06fc58a368dc7be9fbbbe894adf8d445d208c284/darwin/libquery_engine.dylib.node.gz to xxx/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node ... +1ms
> Downloading Prisma engines for Node-API for darwin [                    ] 0%prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/06fc58a368dc7be9fbbbe894adf8d445d208c284/darwin/schema-engine.gz to xxx/node_modules/@prisma/engines/schema-engine-darwin ... +90ms
prisma:loadEnv project root found at xxx/package.json +5826ms
prisma:getSchema prismaConfig {
  ""packagePath"": ""xxx/package.json""
} +2ms
prisma:tryLoadEnv Environment variables loaded from xxx/.env +0ms
Environment variables loaded from .env
prisma:getSchema prismaConfig {
  ""packagePath"": ""xxx/package.json""
} +5ms
prisma:getSchema Checking existence of xxx/schema.prisma +1ms
prisma:getSchema Reading schema from single file xxx/schema.prisma +0ms
prisma:getSchema Checking existence of xxx/prisma/schema.prisma +0ms
prisma:getSchema Reading schema from single file xxx/prisma/schema.prisma +0ms
prisma:getSchema Reading schema from multiple files xxx/prisma/schema +3ms
Prisma schema loaded from prisma/schema.prisma
prisma:getConfig Using getConfig Wasm +2ms
prisma:getConfig config data retrieved without errors in getConfig Wasm +19ms
prisma:getSchema Reading schema from single file xxx/prisma/schema.prisma +2ms
prisma:fetch-engine:download process.env.BINARY_DOWNLOAD_VERSION is set to ""96fa66f2f130d66795d9f79dd431c678a9c7104e"" +1ms
prisma:fetch-engine:download file xxx/node_modules/prisma/libquery_engine-darwin.dylib.node does not exist and must be downloaded +2ms
prisma:fetch-engine:download https://oceanbase-prisma-builds.s3.ap-southeast-1.amazonaws.com/all_commits/96fa66f2f130d66795d9f79dd431c678a9c7104e/darwin/libquery_engine.dylib.node.gz will be downloaded to xxx/node_modules/prisma/libquery_engine-darwin.dylib.node +3ms
prisma:fetch-engine:download Downloading https://oceanbase-prisma-builds.s3.ap-southeast-1.amazonaws.com/all_commits/96fa66f2f130d66795d9f79dd431c678a9c7104e/darwin/libquery_engine.dylib.node.gz to xxx/node_modules/prisma/libquery_engine-darwin.dylib.node ... +1ms
prisma:getConfig Using getConfig Wasm +34143ms
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
prisma:getDMMF Using getDmmf Wasm +0ms
prisma:getDMMF Using given datamodel +1ms
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +32ms
prisma:generator prismaCLIDir xxx/node_modules/prisma +6ms
prisma:generator prismaClientDir xxx/node_modules/@prisma/client +0ms
prisma:generator baseDir xxx/prisma +0ms
prisma:generator typescriptPath xxx/node_modules/typescript +3ms
prisma:GeneratorProcess prisma:client:generator requiredEngine: libqueryEngine +26ms +138ms
prisma:mergeSchemas Using mergeSchemas Wasm +1ms
prisma:loadEnv project root found at xxx/node_modules/@prisma/client/package.json +3ms
prisma:getSchema prismaConfig {
  ""packagePath"": ""xxx/package.json""
} +2ms
prisma:getGenerators neededVersions {
  ""06fc58a368dc7be9fbbbe894adf8d445d208c284"": {
    ""engines"": [
      ""libqueryEngine""
    ],
    ""binaryTargets"": [
      {
        ""fromEnvVar"": null,
        ""value"": ""darwin"",
        ""native"": true
      }
    ]
  }
} +1ms
prisma:fetch-engine:download process.env.BINARY_DOWNLOAD_VERSION is set to ""96fa66f2f130d66795d9f79dd431c678a9c7104e"" +0ms
prisma:getGenerators {
  ""generatorBinaryPaths"": {
    ""libqueryEngine"": {
      ""darwin"": ""xxx/node_modules/prisma/libquery_engine-darwin.dylib.node""
    }
  }
} +110ms
prisma:tryLoadEnv Environment variables not found at null +8ms
prisma:tryLoadEnv Environment variables loaded from xxx/.env +0ms
prisma:cli:bin Execution time for executing ""await cli.parse(commandArray)"": 39551.220044 ms +116ms

✔ Generated Prisma Client (v5.20.0) to ./node_modules/@prisma/client in 93ms

Start by importing your Prisma Client (See: http://pris.ly/d/importing-client)

Tip: Easily identify and fix slow SQL queries in your app. Optimize helps you enhance your visibility: https://pris.ly/--optimize

prisma:GeneratorProcess child exited with code null on signal SIGTERM +5ms
prisma:getSchema prismaConfig {
  ""packagePath"": ""xxx/package.json""
} +1ms
prisma:getSchema Checking existence of xxx/schema.prisma +0ms
prisma:getSchema Reading schema from single file xxx/schema.prisma +0ms
prisma:getSchema prismaConfig {
  ""packagePath"": ""xxx/package.json""
} +0ms
prisma:getSchema Checking existence of xxx/schema.prisma +0ms
prisma:getSchema Reading schema from single file xxx/schema.prisma +0ms
prisma:getSchema Checking existence of xxx/prisma/schema.prisma +0ms
prisma:getSchema Reading schema from single file xxx/prisma/schema.prisma +0ms
prisma:getSchema Checking existence of xxx/prisma/schema.prisma +1ms
prisma:getSchema Reading schema from single file xxx/prisma/schema.prisma +0ms
prisma:getSchema Reading schema from multiple files xxx/prisma/schema +1ms
prisma:getSchema Reading schema from multiple files xxx/prisma/schema +0ms
prisma:getConfig Using getConfig Wasm +0ms
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 8.311571000005642 ms +0ms
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for ""await checkpoint.check(data)"": 32.38349900000321 ms +33ms

> @prisma/engines@5.20.0 postinstall
> node scripts/postinstall.js


added 28 packages in 44s
```

### Expected behavior

> Self-hosted binary url: https://oceanbase-prisma-builds.s3.ap-southeast-1.amazonaws.com/all_commits/96fa66f2f130d66795d9f79dd431c678a9c7104e/darwin/libquery_engine.dylib.node.gz
- Prisma binary download url should be `https://oceanbase-prisma-builds.s3.ap-southeast-1.amazonaws.com` instead of `https://binaries.prisma.sh`.
- Prisma binary download version should be `96fa66f2f130d66795d9f79dd431c678a9c7104e` instead of `06fc58a368dc7be9fbbbe894adf8d445d208c284`.

### Prisma information

- `npx prisma debug` can load correct env:

```bash
...
For downloading engines
- PRISMA_ENGINES_MIRROR: `https://oceanbase-prisma-builds.s3.ap-southeast-1.amazonaws.com`
- PRISMA_BINARIES_MIRROR (deprecated):
- PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING:
- BINARY_DOWNLOAD_VERSION: `96fa66f2f130d66795d9f79dd431c678a9c7104e`
...
```

### Environment & setup

- OS: macOS
- Database: MySQL
- Node.js version: v21.6.2


### Prisma Version

```
- prisma: 5.20.0
- @prisma/client: 5.20.0
```
",,
2583367770,25418,Prisma client's `.$connect()` does not throw any error when database is not reachable on startup,"### Bug description

I've encountered this issue in previous projects, but taught it was resolved in newer versions of Prisma. However, in my current project (using the latest Prisma version), I'm still facing the following:

When I connect to the database at application startup using Prisma Client's `.$connect()` method, no error is thrown if the database is unreachable (either due to an incorrect host, port or the db is just down). The client simply proceeds without reporting the connection failure.

To detect the issue, I have to test manually by initiating an empty transaction or a database query, which is when the error is actually thrown.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. Set up Prisma with an incorrect database host or port.
2. Call `PrismaClient.$connect()` during app startup.
3. Observe that no error is thrown until a query is made or a transaction is started.

### Expected behavior

The prisma client's `.$connect()` should throw an error if the database is not reachable

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
Schema file:
```prisma
generator client {
  provider = ""prisma-client-js""
  output   = ""./generated/client""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

App code:
```typescript
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: configs.getOrThrow(""DATABASE_URL"") // mongodb://172.xx.xxx.x:27017/<db>?replicaSet=replicaSet1&directConnection=true
    }
  }
});

prisma.$connect()
// program continues without any error

// test connection by initiating a transaction since `.$connect()` doesn't throw any error when database is unreachable
prisma.$transaction(async (_) => { })
```


### Environment & setup

- OS:  Windows
- Database: MongoDB
- Node.js version: v22.2.0


### Prisma Version

from `package.json`:
```json
  ""dependencies"": {
    ""@prisma/client"": ""^5.20.0""
  },
  ""devDependencies"": {
    ""prisma"": ""^5.20.0""
  }
```
",,
2582603305,25416,View in schema ignores @@map,"### Bug description

Hello,

I have created a view with the use of introspection but when I query that view, I get the error message below. It seems to ignore the @@map attribute of the view but it could be I am doing something wrong? Appreciate your input.

The table `public.EmployeeView` does not exist in the current database.
    at Ln.handleRequestError (/Users/edwinhaver/Documents/devprojects/ims/node_modules/@prisma/client/runtime/library.js:121:7753)
    at Ln.handleAndLogRequestError (/Users/edwinhaver/Documents/devprojects/ims/node_modules/@prisma/client/runtime/library.js:121:7061)
    at Ln.request (/Users/edwinhaver/Documents/devprojects/ims/node_modules/@prisma/client/runtime/library.js:121:6745)
    at async l (/Users/edwinhaver/Documents/devprojects/ims/node_modules/@prisma/client/runtime/library.js:130:9633) {
  code: 'P2021',
  clientVersion: '5.19.1',
  meta: { modelName: 'EmployeeView', table: 'public.EmployeeView' }

Prisma schema:
```
view EmployeeView {
  id              Int    @unique
  first_name      String @db.VarChar(50)
  last_name       String @db.VarChar(50)
  email           String @db.VarChar(255)
  mobile          String @db.VarChar(15)
  designation     String @db.VarChar(100)
  department_id   Int
  department_name String @db.VarChar(100)

  @@map(""employee_view"")
}
```

Query code:
```
prisma.employeeView.findMany()
```

Note I am using NextJs.

### How to reproduce

1) Create view in database
2) Use npx prisma db pull for introspection of the view
3) Create API in Node or NextJs
4) Run API

### Expected behavior

It should use the @@map attribute to construct the SQL query.

### Prisma information

```
view EmployeeView {
  id              Int    @unique
  first_name      String @db.VarChar(50)
  last_name       String @db.VarChar(50)
  email           String @db.VarChar(255)
  mobile          String @db.VarChar(15)
  designation     String @db.VarChar(100)
  department_id   Int
  department_name String @db.VarChar(100)

  @@map(""employee_view"")
}
```

```
prisma.employeeView.findMany()
```

### Environment & setup

- OS: macOs
- Database: PostgreSQL
- Node.js version: v20.17.0


### Prisma Version

5.19.1",,
2580458994,25412,Prisma accidently deleted all database tables while I push my prisma schema after I changed a field on a table,"### Bug description

I changed one field on the Company Table from the String! @db.Uuid to the String @db.Uuid
After that, I tried to push updated schema to the production and I thought only all data in changed table will be deleted.
But the Prisma asked me that Prisma need to reset all table schemas.
I didn't expect about it, and deleted all my production data. (I recover data from the backup, but over 1k people need to repeat whole day work)
Maybe this is the problem what I did mistake, but I want to know why Prisma tried to delete all table data.

![image](https://github.com/user-attachments/assets/362d4e98-744a-4b46-8b82-8ae652e818bf)


### How to reproduce

1. Create a table and add a foreign key to the another table.
```
model meetings {
  id                  String          @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  summary             String
  description         String?
  member              String          @db.Uuid
  attendees           String[]
  company_id          String?
  company             crm_companies?   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project_ids         String[]
  task_ids            Int[]
  status              String
  meeting_time        DateTime?       @default(now()) @db.Timestamptz(6)
  duration            Int?
  meeting_notes       meeting_notes[]
  otter_meeting_notes String[]
  profile             profiles        @relation(fields: [member], references: [id], onDelete: Cascade, onUpdate: NoAction)
  times               times[]

  @@schema(""public"")
}
```
2. Change the company_id field to the String
```
  company_id          String
  company             crm_companies   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
```

3. Please do `npx prisma db push` and you can see the Prisma will ask to delete all database data


### Expected behavior

Need to delete all data of specific table

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider        = ""prisma-client-js""
  output          = ""../src/prisma/client""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
  schemas   = [""hubspot"", ""insights"", ""public"", ""setup_tables""]
}

model crm_companies {
  id                             String                   @id(map: ""companies_pkey"") @default(dbgenerated(""nanoid(5)""))
  name                           String
  code                           String?                  @unique(map: ""companies_code_key"")
  type                           String
  status                         String
  strategist                     String?                  @db.Uuid
  project_manager                String?                  @db.Uuid
  clickup_folder_id              String?
  connectwise_company_identifier String?
  airtable_record_id             String?
  hubspot_company_id             String?
  tax_code                       String?
  billing_terms                  String?
  phone_numbers                  Json?
  websites                       Json?
  linkedin_profile_url           String?
  facebook_page_url              String?
  x_profile_url                  String?
  billing_currency               String?
  addresses                      Json?
  invoice_delivery_option        String?
  profilesId                     String?                  @db.Uuid
  xero_contact_id                String?
  is_import                      Boolean                  @default(false)
  yourls_url                     String?
  yourls_signature_token         String?
  dropbox_intake_link            String?
  email_to_use_for_new_accounts  String?
  pixels                         pixels[]
  agreements                     agreements[]
  avatars                        avatars[]
  block_hours                    block_hours[]
  profiles                       profiles?                @relation(fields: [profilesId], references: [id])
  profile_project_manager        profiles?                @relation(""project_manager_profile"", fields: [project_manager], references: [id], onUpdate: NoAction, map: ""public_companies_project_manager_fkey"")
  profile_strategist             profiles?                @relation(""strategist_profile"", fields: [strategist], references: [id], onUpdate: NoAction, map: ""public_companies_strategist_fkey"")
  crm_emails                     crm_emails[]
  crm_roles                      crm_roles[]
  funnels                        funnels[]
  ideas                          ideas[]
  kb_posts                       kb_posts[]
  performances                   performances[]
  projects                       projects[]
  tasks                          tasks[]
  times                          times[]
  watchers                       crm_companies_watchers[]
  meetings                       meetings[]

  @@schema(""public"")
}

model meetings {
  id                  String          @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  summary             String
  description         String?
  member              String          @db.Uuid
  attendees           String[]
  company_id          String
  company             crm_companies   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project_ids         String[]
  task_ids            Int[]
  status              String
  meeting_time        DateTime?       @default(now()) @db.Timestamptz(6)
  duration            Int?
  meeting_notes       meeting_notes[]
  otter_meeting_notes String[]
  profile             profiles        @relation(fields: [member], references: [id], onDelete: Cascade, onUpdate: NoAction)
  times               times[]

  @@schema(""public"")
}




```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> Windows
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> Supabase PostgreSQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> Node.js v22.04


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.16.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at ..\..\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at ..\..\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Preview Features        : multiSchema
```
",,
2579419895,25409,EXTRACT SQL function returns Prisma.Decimal instead of number in queryRawTyped with SQL file,"### Bug description

When using the SQL `EXTRACT` function in a raw query stored in a separate SQL file and executed with Prisma's `queryRawTyped`, the return type is incorrectly inferred as `Prisma.Decimal` instead of `number`. This causes type errors when trying to use the extracted values as numbers in TypeScript.

### How to reproduce

1. Create a Prisma schema with a model that has a date field.
2. Create a separate SQL file with a query using the `EXTRACT` function on the date field.
3. Use Prisma's `queryRawTyped` to execute the query from the SQL file.
4. Observe that the extracted values are typed as `Prisma.Decimal` instead of `number`.

### Expected behavior

The `EXTRACT` function should return a `number` type when used in raw SQL queries executed with `queryRawTyped`, as it does in standard SQL.

### Prisma information

```prisma
// Simplified schema.prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model OrderEntryView {
  id           String   @id @default(uuid())
  issuedAt     DateTime
  totalOrdered Decimal
  // ... other fields
}
```

```sql
-- prisma/sql/getOrdersByQuarter.sql
SELECT 
  EXTRACT(YEAR FROM ""issuedAt"") AS ""year"", 
  EXTRACT(QUARTER FROM ""issuedAt"") AS ""quarter"", 
  SUM(""totalOrdered"") AS ""totalOrdered""
FROM ""OrderEntryView""
WHERE ""organizationId"" = $1 
  -- ... (additional WHERE clauses)
GROUP BY ""year"", ""quarter""
ORDER BY ""year"" ASC, ""quarter"" ASC;
```

Utilizing this data as `Prisma.Decimal` will throw errors.

```ts
// TypeScript code using Prisma Client
import { PrismaClient, Prisma } from '@prisma/client';
import { getOrdersByQuarter } from '@prisma/client/sql';

const prisma = new PrismaClient();

// Type 
interface QuarterlyOrdersQueryResult {
  year: Prisma.Decimal | null;
  quarter: Prisma.Decimal | null;
  totalOrdered: Prisma.Decimal | null;
}

// No type error
async function getQuarterlyOrders(organizationId: string): Promise<QuarterlyOrdersQueryResult[]> {
  return prisma.$queryRawTyped(
    getOrdersByQuarter(organizationId, /* other parameters */)
  );
}

const results = await getQuarterlyOrders('org-id');
const multipliedYears = results.map(r => r.year.toNumber() * 2); // Unexpected error occurs due to wrong type
```

Forcing the type to `number` will work as intended.

```ts
// TypeScript code using Prisma Client
import { PrismaClient, Prisma } from '@prisma/client';
import { getOrdersByQuarter } from '@prisma/client/sql';

const prisma = new PrismaClient();

// Type 
interface QuarterlyOrdersQueryResult {
  year: number | null;
  quarter: number | null;
  totalOrdered: Prisma.Decimal | null;
}

// Type Error: Types of property 'year' are incompatible.
// Type 'Decimal | null' is not assignable to type 'number | null'.
async function getQuarterlyOrders(organizationId: string): Promise<QuarterlyOrdersQueryResult[]> {
  return prisma.$queryRawTyped(
    getOrdersByQuarter(organizationId, /* other parameters */)
  );
}

const results = await getQuarterlyOrders('org-id');
const multipliedYears = results.map(r => r.year * 2); // Type error thrown, but works as intended when casted to number
```

### Environment & setup

- OS: MacOS Sequoia 15.1
- Database: PostgreSQL
- Node.js version: v22.9.0

### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.9.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Preview Features        : fullTextSearch, views, typedSql
```
",,
2576485472,25404,"SQL Injection bug - D1 adaptor throws ""Conversion failed: expected a datetime string in column"" when string column contains any ISO date","### Bug description

The D1 adaptor attempts to find a valid ISO date in any 'string' db column (see https://github.com/prisma/prisma/blob/7aae7ec2146f03c58a639f69dfe48f093e1e8250/packages/adapter-d1/src/conversion.ts#L56) . If it doest, it attempts to convert it to a date format. The regex does not check to see if the ISO date is the only data in the column.

If a string column contains any ISO date along with other string data, any create or find will throw the following error:

Invalid `prisma.chat.create()` invocation: Inconsistent column data: Conversion failed: expected a datetime string in column

Note that this is potentially a serious issue as ISO dates are not sanitized by SQL libraries. If any user generated string contains a valid ISO date, e.g. 2024-10-09T16:05:08.547Z anywhere, it will cause this error to occur. 

### How to reproduce


```import { PrismaClient } from '@prisma/client'
import { PrismaD1 } from '@prisma/adapter-d1'

export default {
  async fetch(request, env, ctx) {
    // Setup Prisma Client with the adapter
    const adapter = new PrismaD1(env.MY_DB)
    const prisma = new PrismaClient({ adapter })

    const messages = ""This is user input, 2024-10-09T16:05:08.547Z""

    // Execute a Prisma Client query
    const chat = await prisma.chat.create({
      data: {
       messages : JSON.stringify(messages),
      },
    })

    // Return result
    return new Response(usersCount)
  },
}
```

### Expected behavior

Data is written to database

But instead, fatal error is thrown - Invalid `prisma.chat.create()` invocation: Inconsistent column data: Conversion failed: expected a datetime string in column

### Prisma information

```// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Chat {
  id          String    @id @default(cuid())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  messages    String?
}
```

### Environment & setup

- OS: macOS, cloudflare 
- Database: Cloudflare D1 
- Node.js version: v22.9.0


### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.9.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Preview Features        : driverAdapters
```
",,
2575819279,25400,Can't migrate seeds,"### Bug description

I'm just trying to create my db with prisma to postgressql but getting this weird error

Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""localhost:5432""

Error: ERROR: Syntax error in place ""WITH"" 
   0: schema_core::state::DevDiagnostic
             at schema-engine\core\src\state.rs:276

### How to reproduce

npx prisma migrate dev --name init

### Expected behavior

migrating seeds

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Users {
  userId String @id
  name   String
  email  String
}

model Products {
  productId     String      @id
  name          String
  price         Float
  rating        Float?
  stockQuantity Int
  Sales         Sales[]
  Purchases     Purchases[]
}

model Sales {
  saleId      String   @id
  productId   String
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
```

```ts
// Add your code using Prisma Client
```
```
`import` { PrismaClient } from ""@prisma/client"";
import fs from ""fs"";
import path from ""path"";
const prisma = new PrismaClient();

async function deleteAllData(orderedFileNames: string[]) {
  const modelNames = orderedFileNames.map((fileName) => {
    const modelName = path.basename(fileName, path.extname(fileName));
    return modelName.charAt(0).toUpperCase() + modelName.slice(1);
  });

  for (const modelName of modelNames) {
    const model: any = prisma[modelName as keyof typeof prisma];
    if (model) {
      await model.deleteMany({});
      console.log(`Cleared data from ${modelName}`);
    } else {
      console.error(
        `Model ${modelName} not found. Please ensure the model name is correctly specified.`
      );
    }
  }
}

async function main() {
  const dataDirectory = path.join(__dirname, ""seedData"");

  const orderedFileNames = [
    ""products.json"",
    ""expenseSummary.json"",
    ""sales.json"",
    ""salesSummary.json"",
    ""purchases.json"",
    ""purchaseSummary.json"",
    ""users.json"",
    ""expenses.json"",
    ""expenseByCategory.json"",
  ];

  await deleteAllData(orderedFileNames);

  for (const fileName of orderedFileNames) {
    const filePath = path.join(dataDirectory, fileName);
    const jsonData = JSON.parse(fs.readFileSync(filePath, ""utf-8""));
    const modelName = path.basename(fileName, path.extname(fileName));
    const model: any = prisma[modelName as keyof typeof prisma];

    if (!model) {
      console.error(`No Prisma model matches the file name: ${fileName}`);
      continue;
    }

    for (const data of jsonData) {
      await model.create({
        data,
      });
    }

    console.log(`Seeded ${modelName} with data from ${fileName}`);
  }
}

main()
  .catch((e) => {
    console.error(e);
  })
  .finally(async () => {
    await prisma.$disconnect();
  `});`
```


### Environment & setup

- OS:Windows
- Database: PostgreSQL
- Node.js version: v20.17.0 


### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
```",,
2574635392,25397,Expected parent IDs to be set when ordering by parent ID.,"### Bug description

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 

    at _n.handleRequestError (/Users/muhfikri/Documents/HSD/bmt-api-new-revamp/src/prisma/client/runtime/library.js:6783:40)
    at _n.handleAndLogRequestError (/Users/muhfikri/Documents/HSD/bmt-api-new-revamp/src/prisma/client/runtime/library.js:6734:18)
    at _n.request (/Users/muhfikri/Documents/HSD/bmt-api-new-revamp/src/prisma/client/runtime/library.js:6714:18)
    at l (/Users/muhfikri/Documents/HSD/bmt-api-new-revamp/src/prisma/client/runtime/library.js:7336:25)
    at Object.getPPOB (/Users/muhfikri/Documents/HSD/bmt-api-new-revamp/src/app/ppob/ppob.repository.ts:106:12)
    at async Promise.all (index 0)
    at Object.getPPOB (/Users/muhfikri/Documents/HSD/bmt-api-new-revamp/src/app/ppob/ppob.service.ts:138:36)
    at getPPOB (/Users/muhfikri/Documents/HSD/bmt-api-new-revamp/src/app/ppob/ppob.controller.ts:87:20) {
  clientVersion: '5.18.0'
}

### How to reproduce

<!--
1. running query prisma
2. get internal server error
3. See error
-->


### Expected behavior

normal when running query

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
5.17.0
```
",,
2572776538,25393,"FATAL: Authentication error, reason: ""Invalid format for user or db_name""","### Bug description

Hey :)

I have this error:

```dotenv -e .env.local npx prisma migrate dev

Prisma schema loaded from src/prisma/schema.prisma
Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""aws-0-eu-west-3.pooler.supabase.com:5432""

Error: FATAL: Authentication error, reason: ""Invalid format for user or db_name""
   0: schema_core::state::DevDiagnostic
             at schema-engine/core/src/state.rs:276
```

This is my .env.local:

```
NODE_ENV=""development"" 

DATABASE_URL=""postgresql://postgres.jobaiwpgsttytymjmgep:[ALPHA_NUMERIC]@aws-0-eu-west-3.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1""
DIRECT_URL=""postgresql://postgres.jobaiwpgsttytymjmgep:[ALPHA_NUMERIC]@aws-0-eu-west-3.pooler.supabase.com:5432/postgres""
```

I have found only this SOF post:

https://stackoverflow.com/questions/78993399/prisma-supabase-invalid-format-for-user-or-db-name-after-initial-migration

But I don't want to change my database location...

Any ideas ?

### Prisma information

```
generator client {
    provider = ""prisma-client-js""
}

generator dbml {
    provider = ""prisma-dbml-generator""
}

datasource db {
    provider  = ""postgresql""
    url       = env(""DATABASE_URL"")
    directUrl = env(""DIRECT_URL"")
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}
```

### Environment & setup

- OS: Ubuntu
- Database: Supabase
- Node.js version: v20.12.2


### Prisma Version

```
""prisma"": ""^5.20.0"",
```
",,
2572714218,25392,Error: D1_ERROR: NOT NULL constraint failed: Link.userId: SQLITE_CONSTRAINT,"### Bug description

I am using @prisma/adapter-d1 to create a data entry, and this table has a foreign key relationship. I added ""?"" to the corresponding relationship in schema.prisma to make it nullable, but it keeps prompting ""D1_ERROR: FOREIGN KEY constraint failed: SQLITE_CONSTRAINT""

![image](https://github.com/user-attachments/assets/7f595272-420c-4d73-a133-ff8a3c184126)


### How to reproduce

Create a data

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

model User {
  id        String   @id @default(cuid()) 
  email     String   @unique 
  password  String 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  links     Link[] 
}

model Link {
  id          String   @id @default(cuid()) 
  userId      String? 
  originalUrl String 
  shortUrl    String   @unique 
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
  user        User?     @relation(fields: [userId], references: [id]) 
  visits      Visit[] 
}

model Visit {
  id        String   @id @default(cuid())
  linkId    String 
  ipAddress String 
  country   String 
  createdAt DateTime @default(now()) 
  link      Link     @relation(fields: [linkId], references: [id]) 
}

```

```ts
 const params = {
                originalUrl,
                shortUrl: short,
            };

            const link = await prisma.link.create({
                data: params,
            });
```


### Environment & setup

- OS: Windows
- Database: SQLite
- Node.js version: 20.14.0


### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at ..\..\node_modules\.pnpm\@prisma+engines@5.20.0\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at ..\..\node_modules\.pnpm\@prisma+engines@5.20.0\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Preview Features        : driverAdapters
```
",,
2572170556,25390,prisma with vitest failing randomly in CI,"### Bug description

This is a cross-post from https://github.com/vitest-dev/vitest/issues/6635. I can't really tell if it's an issue with prisma or vitest. The folks over there couldn't really help me, so I'll give it another shot here.

We are currently migrating our test-suite from jest to vitest. Everything runs smoothly locally, but on CI (Gitlab ci with k8s runner in our k8s cluster) the tests fail randomly every second or third run. 

We have almost 1000 test across 115 test files, when it fails it's 1 or 2 random testfiles having one of the following errors:

```
Error: Cannot find module '.prisma/client/default'
Require stack:
- /xxx/node_modules/@prisma/client/default.js
```
or 
```
⎯⎯⎯⎯⎯⎯ Unhandled Errors ⎯⎯⎯⎯⎯⎯
Vitest caught 1 unhandled error during the test run.
This might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.
⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯
PrismaClientInitializationError: Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".
This is likely caused by tooling that has not copied ""libquery_engine-debian-openssl-3.0.x.so.node"" to the deployment folder.
Ensure that you ran `prisma generate` and that ""libquery_engine-debian-openssl-3.0.x.so.node"" has been copied to ""node_modules/.prisma/client"".
We would appreciate if you could take the time to share some information with us.
Please help us by answering a few questions: https://pris.ly/engine-not-found-tooling-investigation
The following locations have been searched:
  /builds/xxx/node_modules/.prisma/client
  /builds/xxx/node_modules/@prisma/client
  /tmp/prisma-engines
  /builds/xxx/prisma
```

The files it can't find are in the node_modules folder. 

We are already running with `--pool=forks` and tried different settings in regards to poolOptions, but still the same behaviour. 
We did also compare the modules dump of a failed and successful run (which was exactly the same). 
We did switch to query engine type to binary, which seemed to work a little better, but not really solving the issue


Any ideas how to solve that? 






### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

### System Info

```shell
System:
    OS: Linux 5.10 Debian GNU/Linux 12 (bookworm) 12 (bookworm)
    CPU: (8) x64 Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz
    Memory: 28.55 GB / 30.99 GB
    Container: Yes
    Shell: 5.2.15 - /bin/bash
  Binaries:
    Node: 22.9.0 - /usr/bin/node
    Yarn: 1.22.22 - /usr/bin/yarn
    npm: 10.8.2 - /usr/bin/npm
  npmPackages:
    @vitest/coverage-istanbul: ^2.1.1 => 2.1.1 
    vitest: ^2.1.1 => 2.1.1
    @prisma/client: ^5.20.0 => 5.20.0
```

### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
```
",,
2567707963,25376,Loose coupled Relations,"## Problem

We are using prisma as our ORM and would like to have a way to define that a relation is client only, so that the relation is not considdered within prisma migrate

## Suggested solution

An additional decorator within or after the @relation decorator to make this relation client side only

## Alternatives

Currently we do a like 2 step fetch here, which can be optimized.

## Additional context

This would be a huge benefit for query posibilities,because some of the tables may have like possible joins to other tables, which may or may not be valid.
F.Ex. a Amazon-Listings Table with an SKU and  Warehouse Table with an SKU. We dont want to couple those, because Listings can or cannot be part of any warehouse.


Thank you all.",,
2566969690,25371,Memory leak with RSS on concurrent query's with a larger dataset.,"### Bug description

My stack i am using NodeJS 20.17 + NestJS 10.4 + Prisma v5.20

The problem is a high usage of RSS in comparison to the heap. I noticed this problem in our AWS environment (we are using ECS) first, the problem happens on our service application, where we have multiple services running that reads and writes to the DB from our app. The service started crashing and then started becoming more frequent (i scaled the service all the way upto 32 gb ram and the crashes become less frequent but still happen)

I also did a profiling of the app on my local and here is the RSS usage of the app.
<img width=""1675"" alt=""image"" src=""https://github.com/user-attachments/assets/6a9ff548-66b2-4de6-9e58-8e1eeeaed610"">

The only way i was able to reproduce this was to get the dataset size from our prod env and then have it run locally on my workstation ( it even crashed my workstation once). You need to have certain amount of data being queried frequently  that causes this leak.

Something in the driver is going wrong with async or concurrent requests (i even tried the new experimental feature with pg driver to see if it fixed the issue in my case but it did not) which i believe is the primary cause. At first i though it might be a node.js container issue with alpine/bookworm/bullseye but the only thing those change is the system garbage collection that manages RSS but something on the system in being retained that could be problematic as i was able to reproduce it on my system (ubuntu desktop) too.

Would like to here from anyone having similar issues or problems.
Few relevant issues i found :
https://github.com/prisma/prisma/issues/23881
https://github.com/prisma/prisma/issues/23661

### How to reproduce

This is a little problematic, as there are no direct steps to do so.
The only thing i can think of is using a similar desing pattern as we have:
1. NestJS CronJob (run multiple cron jobs in parallel) ->
2. Let each cron job (we make sure that no single cron of the same type is running in parallel, so they can only run if the previous job is finished) query a table with linked tables of size at least 50k-100k data points, you don't need all the data just subset lets say last 10k data points (or 1 day worth of data)
3. Process that data.
4. Add data back to other tables with the processed data.

### Expected behavior

Usually the RSS should go high then clear out, but the RSS stays extremely persistent and usually causes the system to crash. From my understanding the RSS is not being cleared as the NodeJS process is not responsible to clear it but the system core is responsible for clearing it, but something is making this exists in memory that blocks it from being cleared immediately after use.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client

```
---- Happy to share this more in a private setting with maintainers of the repo if you would like.

### Environment & setup

- OS: Prod runs in AWS ECS (node:20.17.0-bullseye) and local i have an Ubuntu 24.04 version.
- Database: We use Aurora Postgress 15.4 on our main environments and Postgress Docker on local (v15).
- Node.js version: 20.17 LTS


### Prisma Version

My Local Build:
```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
Done in 1.00s.
```
",,
2564063092,25361,prisma Error,"### Bug description

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}


datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model User {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  telegramId Int     @unique
  username   String?
  firstName  String?
  lastName   String?
  points     Int     @default(0)
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2562609183,25354,Prisma Client import error in Vercel deployment,"### Bug description

I'm experiencing an issue where my FastAPI application, which uses Prisma Client for database operations, fails to import the Prisma Client module during deployment on Vercel. Locally, the application works fine, but on Vercel, I'm getting the following error:


`[ERROR] Runtime.ImportModuleError: Unable to import module 'vc__handler__python': No module named 'prisma.client'`


### How to reproduce

1. Clone the repository: git clone https://github.com/undrstnd-labs/ai-api.git
2. Install the dependencies: pip install -r requirements.txt
3. Generate the Prisma Client: prisma generate
4. Run the application: uvicorn api.index:app --reload
5. Observe the error when accessing the application on Vercel.
![image](https://github.com/user-attachments/assets/44db5884-a1de-4b64-abcc-9b6815491b7a)


### Expected behavior

The application should import the Prisma Client module and run without errors.

### Prisma information


```ts
generator client {
  recursive_type_depth = 5
  interface            = ""asyncio""
  output               = ""prisma/client""
  provider             = ""prisma-client-py""
}

datasource db {
  provider  = ""postgresql""
  directUrl = env(""DIRECT_URL"")
  url       = env(""DATABASE_URL"")
}

enum RequestStatus {
  SUCCESS
  FAILED
  PENDING
}

enum UserType {
  ORGANIZATION
  DEVELOPER
  ADMIN
}

model Waitlist {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())

  @@map(name: ""waitlist"")
}

model Account {
  userId String

  type              String
  provider          String
  providerAccountId String

  refresh_token String?
  access_token  String?
  expires_at    Int?

  token_type String?
  scope      String?
  id_token   String?

  session_state String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map(name: ""accounts"")
}

model Session {
  sessionToken String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expires   DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map(name: ""sessions"")
}

model User {
  id String @id @default(cuid())

  username String?
  phone    String?  @unique
  email    String   @unique
  type     UserType @default(DEVELOPER)
  image    String   @default(""https://dev.undrstnd-labs.com/placeholder.svg"")

  fundings      Funding?
  verified      Boolean   @default(false)
  emailVerified DateTime? @map(""email_verified"")

  usages    Usage[]
  requests  Request[]
  accounts  Account[]
  sessions  Session[]
  apiTokens APIToken[]
  resources Resource[]

  Authenticator Authenticator[]

  deletedAt DateTime? @map(name: ""deleted_at"")
  createdAt DateTime  @default(now()) @map(name: ""created_at"")
  updatedAt DateTime  @default(now()) @map(name: ""updated_at"")

  @@map(name: ""users"")
}

model VerificationToken {
  token String @unique

  identifier String
  expires    DateTime

  passCode        String?
  verificationUrl String?

  @@id([identifier, token])
  @@map(name: ""verification_tokens"")
}

model Authenticator {
  credentialID String @unique

  providerAccountId    String
  credentialPublicKey  String
  credentialDeviceType String
  transports           String?

  counter            Int
  credentialBackedUp Boolean

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map(name: ""authenticators"")
}

model Funding {
  id String @id @default(cuid())

  amount   Float
  currency String

  createdAt DateTime @default(now()) @map(name: ""created_at"")
  updatedAt DateTime @default(now()) @map(name: ""updated_at"")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: ""fundings"")
}

model APIToken {
  id String @id @default(cuid())

  tokenGr String
  tokenCr String
  tokenSm String

  name     String?
  verified Boolean? @default(false)

  requests Request[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  deletedAt DateTime? @map(name: ""deleted_at"")
  createdAt DateTime  @default(now()) @map(name: ""created_at"")
  updatedAt DateTime  @default(now()) @map(name: ""updated_at"")

  @@map(name: ""api_tokens"")
}

model Request {
  id     String        @id @default(cuid())
  status RequestStatus @default(PENDING)

  parameters Json
  request    Json
  response   String
  endpoint   String

  usage Usage?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  apiTokenId String?
  apiToken   APIToken? @relation(fields: [apiTokenId], references: [id], onDelete: Cascade)

  resourceTokenId String?
  // REMOVED: resourceToken   Resource? @relation(fields: [resourceTokenId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: ""created_at"")
  updatedAt DateTime @default(now()) @map(name: ""updated_at"")

  @@map(name: ""requests"")
}

model Usage {
  id String @id @default(cuid())

  tokensUsed Int
  cost       Float

  requestId String?  @unique
  request   Request? @relation(fields: [requestId], references: [id], onDelete: SetNull)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  deletedAt DateTime? @map(name: ""deleted_at"")
  createdAt DateTime  @default(now()) @map(name: ""created_at"")
  updatedAt DateTime  @default(now()) @map(name: ""updated_at"")

  @@map(name: ""usages"")
}

model Resource {
  id String @id @default(cuid())

  name        String
  description String?

  size   Int
  handle String
  type   String
  url    String

  //REMOVED: request Request[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  deletedAt DateTime? @map(name: ""deleted_at"")
  createdAt DateTime  @default(now()) @map(name: ""created_at"")
  updatedAt DateTime  @default(now()) @map(name: ""updated_at"")

  @@map(name: ""resources"")
}

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: PostgreSQL
- Node.js version: I'm using Python & FastAPI


### Prisma Version

```
prisma                : 5.17.0
@prisma/client        : Not found
Computed binaryTarget : debian-openssl-3.0.x
Operating System      : linux
Architecture          : x64
Node.js               : v18.20.4
Query Engine (Binary) : query-engine 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at ../../.cache/prisma-python/binaries/5.17.0/393aa359c9ad4a4bb28630fb5613f9c281cde053/node_modules/@prisma/engines/query-engine-debian-openssl-3.0.x)
Schema Engine         : schema-engine-cli 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at ../../.cache/prisma-python/binaries/5.17.0/393aa359c9ad4a4bb28630fb5613f9c281cde053/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm           : @prisma/prisma-schema-wasm 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
Default Engines Hash  : 393aa359c9ad4a4bb28630fb5613f9c281cde053
Studio                : 0.502.0

```
",,
2560387898,25337,Allow support for custom metadata in Prisma query client extensions,"## Problem

See #6882, #18966, #21010, and #20907. Right now, there is no built-in typesafe way of passing custom data to a client extension. The workaround that I am currently using involves passing a `meta` object in the query data, consuming it with a middleware function, and removing it before executing the query, eg:
```typescript
async function middleware(params: { [key: string]: any }, next: Function) {
      let meta;
      let user;
      if (params.args?.meta) {
        meta = params.args?.meta;
        user = meta?.user || null;
      }
      
      delete params.args?.meta;
      
      // ... runs permission check on user data ...
      
      next(params);
}
prismaClient.$use(middleware);

// somewhere else
prismaClient.myDataModel.findFirst({ where: { id: 1 }, meta: { user }); // only works when not using typescript
```
This is definitely not a great solution since it's not typesafe and Prisma middleware is being deprecated, but it's the only way we've been able to make things work. The workarounds that I've seen to pass custom data with Client Extensions are either using globals (obviously not ideal), or adding [helper functions](https://github.com/prisma/prisma/issues/6882#issuecomment-1703106201), which also isn't typesafe, feels even more hacky than what we're already using, and would require a refactor that we'd end up having to undo when/if this feature is ever added.

## Suggested solution

I would like Prisma to support passing custom data to client extensions, which could be consumed in `query` extensions, eg:
```typescript
const newClient = prismaClient.$extends({
    model: {
        myDataModel: {
          async $allOperations({ operation, args, query, meta }) {
              // ... do things with custom data ...
          }
       }
    }
});

newClient.myDataModel.findFirst({ where: { id: 1 }, meta: { user });
```
I really like how granular and flexible client extensions are and would love to switch to using them for our project, but this is the one roadblock that's keeping our team from refactoring our backend to use them.  
",,
2559239276,25333,"Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).","### Bug description

i can't use a PrismaClient to fetch my data 

### How to reproduce

Just when i try to get a data everything about code ill proved 

![image](https://github.com/user-attachments/assets/a85e6f7f-33d9-4717-90fa-5c27d4ad24fe)


![image](https://github.com/user-attachments/assets/aa30d4f8-54fd-45a5-ae2f-d207af6ebd40)



### Expected behavior

fetch a data then show it 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""MONGODB_URI"")
}

model prods {
  id           String   @id @map(""_id"") @default(auto()) @db.ObjectId
  data         Json?    // Optional Json field for any structured data
  verification Json?    // Optional Json field to avoid errors with null
  guild        String  // Include guild as it's used in the query
  lang Json?
  message Json?
  changesguild Json?
  changeschannels Json?
  cm Json?
  purne Json?
  rol_perms Json?
  roles Json?
  bots Json?
  links Json?
  ban Json?
  kick Json?
  ch_del Json?
  ch_cre Json?
  rol_cre Json?
  rol_del Json?
  moderation Json?
  whitelist Json?
  rolesadd Json?
  lastlogs Json?
  warns Json?
  joins Json?
  leaves Json?
  messages Json?
}

model Message { 
  id      String @id @map(""_id"") @default(auto()) @db.ObjectId
  message String // The message field must not be missing or nullable
}
```

```ts
import { PrismaClient } from '@prisma/client';

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;
```

DataContext

```js
const DataContext = createContext<any>(null);
async function GetSettings(guildId:any) {
  const data = await prisma.prods.findMany({
    where: {
      guild: guildId
    }
  })
const data = await GetSettings(serverId)
}
```

```
### Environment & setup

- OS: <Window> and next.js v14
- Database: <MongoDB>
- Node.js version: <v20.17.0>


### Prisma Version

```
```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
```


![image](https://github.com/user-attachments/assets/c42cfc7b-241b-45f9-b99e-bc7bc9a606b9)
",,
2558877849,25332,Client not being generated in AWS/Lambda/Docker,"### Bug description

So we have a distributed system that we have a package that we will call: mydatabasepackage.
This package has the prisma configuration and all migrations.

When we try to import this in a dockerfile to publish on lambda, it works with some AWS accounts but other AWS accounts asks to generate the client again.

We create this docker image on a pipeline and publish to AWS ECR as a lambda, the client is generated during a GitHub pipeline and the command does run sucessfully. However when the lambda is actually ran it complains to have no client and asks to generate.

This is the dockerfile in question:

```
# Stage 1: Build the application
FROM node:20 AS builder

# Install pnpm
RUN npm install -g pnpm

# Set the working directory
WORKDIR /app

# Install OpenSSL
RUN  apt-get install -y openssl

# Copy package.json and pnpm-lock.yaml
COPY package.json pnpm-lock.yaml ./


# Set the environment variable for the authentication token
ARG NODE_AUTH_TOKEN
ENV NODE_AUTH_TOKEN=${NODE_AUTH_TOKEN}


# Configure pnpm to use the custom registry and authentication token
RUN pnpm config set '//EXCLUDED FOR PRIVACY/api/npm/nn-npm/:_authToken' ""${NODE_AUTH_TOKEN}""
&& \
    pnpm config set registry https://EXCLUDED FOR PRIVACY//api/npm/nn-npm/

# Install dependencies using pnpm
RUN pnpm install

# Copy the rest of the application code
COPY . .

RUN pnpm add -D prisma

#Generate the Prisma CLI
RUN pnpm exec prisma generate --schema=./node_modules/dfado/prisma/schema.prisma


# Build the TypeScript code
RUN pnpm run build

# Stage 2: Create the final image
FROM public.ecr.aws/lambda/nodejs:20

#Install PNPM
RUN npm install -g pnpm

# Set the environment variable for the authentication token
ARG NODE_AUTH_TOKEN
ENV NODE_AUTH_TOKEN=${NODE_AUTH_TOKEN}

# Configure pnpm to use the custom registry and authentication token
RUN pnpm config set '//EXCLUDED FOR PRIVACY/api/npm/nn-npm/:_authToken' ""${NODE_AUTH_TOKEN}""
&& \
    pnpm config set registry https://EXCLUDED FOR PRIVACY/artifactory/api/npm/nn-npm/


# Set the working directory
WORKDIR /var/task

RUN  dnf install -y openssl

# Copy the built application from the builder stage
COPY --from=builder /app/ ./

ENV PRISMA_CLI_BINARY_TARGETS=rhel-openssl-3.0.x

#Install Prisma
RUN pnpm add -D prisma

#Generate the Prisma CLI
RUN pnpm exec prisma generate --schema=./node_modules/mydatabasepackage/prisma/schema.prisma

# Set the environment variable for the handler
ARG HANDLER_NAME
ENV HANDLER_NAME=${HANDLER_NAME}

# Create a wrapper.js file
RUN printf '%s\n' \
    ""const handler = require('./' + process.env.HANDLER_NAME).handler;"" \
    ""exports.handler = async (event, context) => {"" \
    ""  return handler(event, context);"" \
    ""};"" > ${LAMBDA_TASK_ROOT}/wrapper.js

RUN cat ${LAMBDA_TASK_ROOT}/wrapper.js

# Set the wrapper.js as the Lambda handler

CMD [""wrapper.handler""]

```

The code we run on the lambda is fairly simple: it just gets DATABASE_URL from secrets and creates a instance of prisma client:

```
import {
  SecretsManagerClient,
  GetSecretValueCommand,
} from ""@aws-sdk/client-secrets-manager"";
import { PrismaClient } from ""@prisma/client"";
let prisma: PrismaClient;

export async function getPrismaClient() {
  // Retrieve the secret name from environment variables
  const secretName = process.env.SECRET_NAME!;


  if (!secretName) {
    return new PrismaClient();
  }

  const url = await getDatabaseUrl(secretName);

  //Set it for migrations
  process.env.DATABASE_URL = url;

  //Create the client
  try {
    prisma = new PrismaClient({
      datasources: {
        db: {
          url,
        },
      },
      log: [""info"", ""warn"", ""error""],
    });
  } catch (error) {
    console.log(error);
  }
  return prisma;
}
```



### How to reproduce

You can run this dockerfile and publish the app as an AWS lambda container and just run some node js code

### Expected behavior

Client should be generated and once the URL is set prisma client should exist, instead the prisma client instance in the code is not generated.

### Prisma information

The prisma schema here is not relevant since the problem is the generation of the client during the execution of the lambda.

On the repository that has the schema it generates and runs with no issue, so we know the schema is correct.

### Environment & setup

- OS:  Its inside a Container running node:20 (i think thats ubuntu/debian behind the scenes?)
- Database:  Postgres
- Node.js version:  20


### Prisma Version

```
5.20.0 / 5.17.0
```
We tried both versions",,
2556229078,25326,dev.db-journal file is always created and always present but it should be a temporary file and not created by default,"### Bug description

dev.db-journal is always created and always present.

I read that this file is a rollback journal file and should only be present **temporary** during a **transaction**.

https://www.sqlite.org/tempfiles.html#rollback_journals
https://www.sqlite.org/atomiccommit.html

### How to reproduce

Follow this https://www.prisma.io/docs/getting-started/quickstart and see at step https://www.prisma.io/docs/getting-started/quickstart#3-run-a-migration-to-create-your-database-tables-with-prisma-migrate the dev.db-journal is created.

Follow this https://github.com/prisma/prisma-examples/tree/latest/typescript/sveltekit and see that the **dev.db-journal** is created.

This did not happen in the past.

Something must be triggering to always create the **dev.db-journal** file regardless of if there is an transaction going on.


### Expected behavior

Do not create the dev.db-journal file.

### Prisma information

""prisma"": ""^5.20.0""
""@prisma/client"": ""5.20.0""

### Environment & setup

- OS: Linux
- Database: SQLite
- Node.js version: v20.17.0


### Prisma Version

""prisma"": ""^5.20.0""
""@prisma/client"": ""5.20.0""
",,
2554279939,25322,called `Option::unwrap()` on a `None` value,"Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v20.0.0            | 
| OS              | darwin-arm64       |
| Prisma Client   | 5.16.2             |
| Query Engine    | 34ace0eb2704183d2c05b60b52fba5c43c13f303|
| Database        | mongodb            |

thread 'tokio-runtime-worker' panicked at query-engine/core/src/interpreter/query_interpreters/nested_read.rs:229:50:
called `Option::unwrap()` on a `None` value
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
PrismaClientRustPanicError: 
Invalid `prisma.user.findUnique()` invocation:

called `Option::unwrap()` on a `None` value

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

I dont understand what happened, because I didnt change anything.

My schema: 


datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""linux-musl""]
}

model User {
  id              String   @id @default(auto()) @map(""_id"") @db.ObjectId
  tg_id           String   @unique
  tg_username     String?
  full_name       String
  language_code   String
  balance         String   @default(""0"")
  deposited       String   @default(""0"")
  withdrawed      String   @default(""0"")
  receivedForRefs String   @default(""0"")
  banned          Boolean  @default(false)
  currencyCode    String
  inviterId       String?
  activatedPromos String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  balanceActions BalanceAction[]
  bonuses        UserBonus[]
  tickets        Ticket[]
  minesSessions  MinesSession[]
  inviter        User?           @relation(name: ""UserToReferrals"", fields: [inviterId], references: [tg_id], onDelete: NoAction, onUpdate: NoAction)
  referrals      User[]          @relation(name: ""UserToReferrals"")
  currency       Currency        @relation(fields: [currencyCode], references: [code])
}

model Currency {
  id                    String   @id @default(auto()) @map(""_id"") @db.ObjectId
  addressFormat         String
  code                  String   @unique
  course                String?
  displayFormat         String
  icon                  String
  isFiat                Boolean
  minBetAmount          String   @default(""0.01"")
  maxBetAmount          String   @default(""100"")
  minWithdrawAmount     String
  name                  String
  network               String
  precision             Int
  topBanks              String?
  valuePresets          String[]
  withMemo              Boolean  @default(false)
  withdrawCommissionUsd String
  withdrawAllowed       Boolean
  updatedCourse         DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  users          User[]
  balanceActions BalanceAction[]
  minesSessions  MinesSession[]
}

model BalanceAction {
  id           String              @id @default(auto()) @map(""_id"") @db.ObjectId
  wallet       String?             @unique
  amount       String
  userTgId     String
  currencyCode String
  type         BalanceActionType
  status       BalanceActionStatus @default(PENDING)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  user     User     @relation(fields: [userTgId], references: [tg_id], onDelete: Cascade)
  currency Currency @relation(fields: [currencyCode], references: [code], onDelete: Cascade)
}

enum BalanceActionType {
  TOPUP
  WITHDRAW
}

enum BalanceActionStatus {
  CANCELED
  TIMEOUT
  PENDING
  RECEIVED
  SENT
}

model Bonus {
  id           String   @id @default(auto()) @map(""_id"") @db.ObjectId
  title        String
  title_ru     String
  text         String
  text_ru      String
  minAmountUsd Int
  bonusPercent Int
  image        String
  addOnSignup  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userBonuses UserBonus[]
  promos      Promo[]
}

model UserBonus {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  userId    String
  bonusId   String   @db.ObjectId
  claimed   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [tg_id], onDelete: Cascade)
  bonus Bonus @relation(fields: [bonusId], references: [id], onDelete: Cascade)
}

model Promo {
  id          String   @id @default(auto()) @map(""_id"") @db.ObjectId
  bonusId     String   @db.ObjectId
  value       String   @unique
  activations Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bonus Bonus @relation(fields: [bonusId], references: [id], onDelete: Cascade)
}

model MinesSession {
  id           String   @id @default(auto()) @map(""_id"") @db.ObjectId
  userTgId     String
  isFinished   Boolean  @default(false)
  currencyCode String
  isWin        Boolean?
  betAmount    String
  coeff        String?
  minesCount   Int
  openedCells  Int[]
  minesCells   Int[]
  winAmount    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User     @relation(fields: [userTgId], references: [tg_id], onDelete: Cascade)
  currency Currency @relation(fields: [currencyCode], references: [code], onDelete: Cascade)
}

model Ticket {
  id          String      @id @default(auto()) @map(""_id"") @db.ObjectId
  userId      String
  openedCells Json[]
  color       TicketColor
  winAmount   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [tg_id], onDelete: Cascade)
}

enum TicketColor {
  green
  red
  yellow
}

model Banner {
  id            String        @id @default(auto()) @map(""_id"") @db.ObjectId
  image         String
  title         String
  title_ru      String
  subtitle      String?
  subtitle_ru   String?
  actionType    BannerAction?
  actionText    String?
  actionText_ru String?
  actionUrl     String?
  endTime       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum BannerAction {
  INTERNAL
  EXTERNAL
}

My usecase:

	const prismaUser = await prisma.user.findUnique({
			where: { tg_id: request.query.tg_id },
			include: {
				currency: request.query.currency,
				balanceActions: request.query.balanceActions
					? { include: { currency: true }, orderBy: { createdAt: ""desc"" } }
					: false,
				bonuses: {
					include: {
						bonus: {
							select: {
								minAmountUsd: true,
								bonusPercent: true,
							},
						},
					},
				},
			},
		});",,
2554262061,25321,Take 1 should return an object or undefined,"There are cases when using nested relations, that I would need to get the latest data. If I use take 1, we know that there will only be one result or undefined for that relationship. As a result, I suggest that if we use take 1 (which is pretty easy to detect in typescript) to output not an array, but an object or undefined.",,
2553930085,25319,Error with custom query logging in NextJS 14,"### Bug description

I was following this guide for setting up a prisma instance with NextJS: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices

I wanted to add custom query logging, so I wrote this event registration:
```tsx
prisma.$on('query', (e: any) => {
  console.log(`Query: ${e.query}`);
  console.log(`Duration: ${e.duration}ms`);
});
```
However whenever I load any pages I get this error: `Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).`

**When I remove the event registration block, the errors stop. The event handler WORKS (I see my logs in my terminal output), however the nextjs page render fails.** Contrary to the error message, I do not have any queries in any client components.

![image](https://github.com/user-attachments/assets/af7aa99e-b7b7-44d1-aeb7-61ab558894ae)


### How to reproduce

```tsx
import { PrismaClient } from '@prisma/client';

const prismaClientSingleton = () => new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
  ],
});

declare const globalThis: {
  prismaGlobal: ReturnType<typeof prismaClientSingleton>;
} & typeof global;

const prisma = globalThis.prismaGlobal ?? prismaClientSingleton();

prisma.$on('query', (e: any) => {
  console.log(`Query: ${e.query}`);
  console.log(`Duration: ${e.duration}ms`);
});

export default prisma;

if (process.env.NODE_ENV !== 'production') {
  globalThis.prismaGlobal = prisma;
}
```

Execute a prisma query from a server component:
```tsx
'use server';

// ...
import { getSceneInfo } from 'lib/scene';

export default async function MediaPage({ params }: Readonly<{ params: { sceneId: string } }>) {
  const sceneIdInt = parseInt(params.sceneId, 10);
  const sceneInfo = await getSceneInfo(sceneIdInt);
  if (!sceneInfo) {
    return notFound();
  }

  return (
    <SceneBody sceneInfo={sceneInfo} />
  );
}
```

`lib/scene.ts`:
```ts
import prisma from 'db';

// ...

export async function getSceneInfo(sceneId: number) {
  return prisma.scene.findUnique({
    where: { sceneId },
    select: SceneSelectQuery
  };
}
```

### Expected behavior

I get logs in the console and the page render doesn't error out

### Prisma information

N/A

### Environment & setup

- OS: Debian
- Database: Postgres
- Node.js version: 21


### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : linux-arm64-openssl-3.0.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v21.7.3
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-linux-arm64-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-linux-arm64-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
```
",,
2550063132,25290,createManyAndReturn fails with @ignore fields (field must be a known scalar or virtual),"### Bug description

`createManyAndReturn` fails on models with `@ignore`d columns. 

The query engine panics with the following error: `field must be a known scalar or virtual`.

### How to reproduce

A minimal reproduction example is available at https://github.com/benjamintd/prisma-panic-repro/tree/main. 

- Initialize a prisma schema with a model with at least one `@ignore` field. 
- Perform a `createManyAndReturn` operation on this model. 

### Expected behavior

- The elements are successfully created and returned. 


### Prisma information

Included in the reproduction. 

```
""prisma"": ""^5.20.0"",
""@prisma/client"": ""^5.20.0""
```

```schema.prisma
generator client {
  provider = ""prisma-client-js""
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  ignored   String?   @ignore
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```


### Environment & setup

Tested both on MacOS and Linux machines. 

### Prisma Version

```
prisma                  : 5.20.0
@prisma/client          : 5.20.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.8.0
Query Engine (Node-API) : libquery-engine 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 06fc58a368dc7be9fbbbe894adf8d445d208c284 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-12.06fc58a368dc7be9fbbbe894adf8d445d208c284
Default Engines Hash    : 06fc58a368dc7be9fbbbe894adf8d445d208c284
Studio                  : 0.502.0
```",,
2549001324,25288,update() .data property type is not verified when multiple columns are updated at once,"### Bug description

I came across a runtime error after dropping a column without Typescript compilation error.
I forgot to change code and remove the column from the update, but TS should not compile with invalid column name ""email"".
So I dig further and it turned out my TS acts strangely given different update input.
I think it's easiest to understand it by looking at VS Code screenshot with 2 different cases:
<img width=""692"" alt=""Screenshot 2024-09-25 at 21 46 44"" src=""https://github.com/user-attachments/assets/e36c356e-964c-462d-8a2c-cd810911b236"">
so you can see first update doesn't compile and it's underscored for ""data"" property of the update function. That's expected.
What's not expected is the 2nd update where there are is legal ""display_name"" but also ""email"" or ""anythingReally"" that just demonstrates that TS accepts anything there... 

### How to reproduce

run entity .update() with multiple data properties - 1 legal and 1 that doesn't exist

### Expected behavior

TS shouldnt compile and throw error on type mismatch

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```
// ...
model users {
  user_id Int @id @default(autoincrement())

  stripe_customer_id String? @db.VarChar(100)

  email String?  @db.VarChar(200) @unique

  spotify_user_id String? @db.VarChar(100) @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())

  spotify_user spotify_users?
}

model spotify_users {
  spotify_user_id String @id @db.VarChar(100)
  profile_payload Json @default(""{}"")
  latest_token Json
  display_name String @default("""")

  discoveries discoveries[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())

  user users @relation(fields: [spotify_user_id], references: [spotify_user_id])

}

//...

```ts
    const updateThatsCorrectlyNotCompiling = {
        email: ""THIS_COLUMN_IS_GONE_FROM_SCHEMA""
    };
    const id = {
        spotify_user_id: profile.id,
    };

    prisma.spotify_users.update({
        data: updateThatsCorrectlyNotCompiling,
        where: id,
    });

    const updateThatsINCORRECTLYCompiling = {
        display_name: profile.display_name,
        email: ""THIS_COLUMN_IS_GONE_FROM_SCHEMA"",
        anythingReally: ""WTF"",
    };

    prisma.spotify_users.update({
        data: updateThatsINCORRECTLYCompiling, //WHY NO TS ERROR HERE????
        where: id,
    });
``````


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v22.8.0
- Typescript version: 5.6.2


### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v22.8.0
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
```
",,
2548602862,25286,Optimize - `Critical dependency: the request of a dependency is an expression`,"### Bug description

a warning is printed in console when starting a nextjs project with `@prisma/extension-optimize`

```
../node_modules/.pnpm/@opentelemetry+instrumentation@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/src/platform/node/instrumentation.js
Critical dependency: the request of a dependency is an expression

Import trace for requested module:
../node_modules/.pnpm/@opentelemetry+instrumentation@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/src/platform/node/instrumentation.js
../node_modules/.pnpm/@opentelemetry+instrumentation@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/src/platform/node/index.js
../node_modules/.pnpm/@opentelemetry+instrumentation@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/src/platform/index.js
../node_modules/.pnpm/@opentelemetry+instrumentation@0.51.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/src/index.js
../node_modules/.pnpm/@prisma+extension-optimize@1.0.1_@prisma+client@5.20.0_prisma@5.19.1_/node_modules/@prisma/extension-optimize/dist/index.js
```

### How to reproduce

- start a nextjs project
- add prisma `prisma.$extends(withOptimize({ apiKey: process.env.PRISMA_OPTIMIZE_API_KEY!, })`

### Expected behavior

_No response_

### Prisma information
```
datasource db {
  provider = ""postgresql""
  url      = env(""POSTGRESQL_URI"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing"", ""metrics""]
}
```

```
import { PrismaClient } from ""@prisma/client"";
import { withOptimize } from ""@prisma/extension-optimize"";

const getPrismaClient = () => {
  const prisma = new PrismaClient();

  return prisma.$extends(
    withOptimize({
      apiKey: process.env.PRISMA_OPTIMIZE_API_KEY!,
    })
  ) as PrismaClient;
};


// @ts-ignore
export const prisma = global.prisma || getPrismaClient();
if (process.env.NODE_ENV !== ""production"") {
  // @ts-ignore
  global.prisma = prisma;
}
```

### Environment & setup

- OS: macOS
- PostgreSQL
- Node.js version: v20.14.0


### Prisma Version

```
""@prisma/client"": ""^5.20.0"",
""@prisma/extension-optimize"": ""^1.0.1""
```
",,
2548150280,25279,"`prisma generate watch` exits on schema validation error, but only on first run ","### Bug description

`prisma generate --watch` exits on schema validation error, but only on first run

### How to reproduce

1. Create invalid schema, like write `bug` on schema file top level
2. Run `prisma generate --watch`
3. Get `Error: Prisma schema validation`
4. `prisma generate --watch` process exits


### Expected behavior

`prisma generate --watch` does not exit on schema validation error, even on first run

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

bug

model User {
  id  String  @id @default(cuid())
}
```


### Environment & setup

- OS: Debian Bookworm
- Database: PostgreSQL 16
- Node.js version: 20.17.0


### Prisma Version

```
Prisma version: 5.20.0
```
",,
2546015754,25273,@prisma/adapter-neon ignores schema in the connection string,"### Bug description

When you specify a schema on the postgresql connection string, neon-adapter ignores it and queries public schema.



### How to reproduce

1. Specify a schema in your postgresql connection string that's not public
```env
DATABASE_URL=""postgres://[user]:[password]@[host]:6543/postgres?schema=mySchema&pgbouncer=true&connection_limit=1""
```

2. Create PrismaClient using neonadapter
```ts
import { Pool } from '@neondatabase/serverless';
import { PrismaNeon } from '@prisma/adapter-neon';
import { PrismaClient } from '@prisma/client';

const neon = new Pool({
  connectionString: process.env.DATABASE_URL,
});
const adapter = new PrismaNeon(neon);
const prisma = new PrismaClient({ adapter });
```

3. See that any request made via this prisma client is being made to public schema
```ts
// Assuming you have user table in your prisma schema
// this request will look for public.User table instead of mySchema.User
prisma.user.findMany()
```

Specifying the schema while initializing PrismaNeon adapter works however it shouldn't default to public schema if connection string specifies one.
```ts
const adapter = new PrismaNeon(neon, { schema: 'mySchema' });
```

### Expected behavior

If postgresql connection string contains schema information, PrismaClient should use that schema instead of defaulting to public.

### Prisma information

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}

// just an example table, tables are not really related to the issue
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```



### Environment & setup

OS: macOS
Database: PostgreSQL (supabase)
Node.js version: v20.12.2
Project: Next.js 14

### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.12.2
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/.pnpm/@prisma+engines@5.19.1/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/.pnpm/@prisma+engines@5.19.1/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
Preview Features        : driverAdapters
```
",,
2545754108,25272,Changing column to be nullable doesn't seem to have effect,"### Bug description

Hi, I'm having an issue changing my database model - in my schema, the `Talent` table is like this, where `name` is not nullable. 
 
```
model Talent {
id            String @id() @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
name      String   @db.VarChar(250)
}
```

Now I need to split the name into `firstName` and `surname`, so I did this 

 
```
id                       String @id() @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
firstName         String?   @db.VarChar(250)
surname           String?   @db.VarChar(250)
```
 
but now any attempt to `prisma.talent.update()` would fail with this.
 
```
Invalid `prisma.talent.update()` invocation:

Null constraint violation on the fields: (`name`)
```

So at first I'd tried to remove the `name` altogether, but then due to the error, I tried to just make it nullable 

```
id                       String @id() @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
name                String?   @db.VarChar(250)
firstName         String?   @db.VarChar(250)
surname           String?   @db.VarChar(250)
```

sadly neither worked.
 
Manually removing the `NOT NULL` from the `name` in the initial migration (and re-running the migrations) solves this - a bit hacky tho - really don't understand where the constraint attached to the legacy name should persist.

I double checked any reference to the old field name, removed it from the dtos, the schema has been regenerated etc. Even code completion on Webstorm does not recognise `name` as a part of Talent anymore - still tho this error would happen.

Any idea?


### How to reproduce

<!--
1. create a schema with a non-null field
2. change it to nullable, or remove the field altogether
3.  check you are able to update/create entities in the DB without that field being necessary
-->


### Expected behavior

The `name` should not be seen/expected anymore, or at least it should not be a mandatory field.

### Prisma information

// my latest schema

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
  binaryTargets   = [""native"", ""debian-openssl-1.1.x""]
}

generator nestjsDto {
  provider                        = ""prisma-generator-nestjs-dto""
  output                          = ""./gen""
  outputToNestJsResourceStructure = ""true""
  entitySuffix                    = ""Model""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  schemas  = [""public""]
}


model Talent {
  id String @id() @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid

  firstName   String? @db.VarChar(250)
  surname     String? @db.VarChar(250)
 @@schema(""public"")
}

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.17.0
- NestJS backend

### Prisma Version

```
-> npx prisma -v
Environment variables loaded from .env
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/prisma/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/prisma/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
Preview Features        : multiSchema

```
",,
2544943474,25268,TypedSQL query with UNION generating a type with all fields NULLABLE ,"### Bug description

It seems that when creating a query and using the UNION keyword, the return sets all values to NULLABLE

### How to reproduce

<details>
  <summary>SQL Query</summary>

```sql
-- @param {String} $1:search Text to search

SELECT table1.id
FROM ""Table1"" table1
WHERE table1.id = $1

UNION

SELECT table2.id
FROM ""Table2"" table2
WHERE table2.id = $1
```
</details>

run prisma generate and generate TypeSQL queries
```ps
prisma generate
prisma generate --sql
```

Generated definition file:
```ts
import * as $runtime from ""@prisma/client/runtime/library""

/**
 * @param search Text to search
 */
export const unionQuery: (search: string) => $runtime.TypedSql<unionQuery.Parameters, unionQuery.Result>

export namespace unionQuery {
  export type Parameters = [search: string]
  export type Result = {
    id: string | null
  }
}
```
The result type had `id` of type `string | null`

If we do the same query without `UNION` keyword, `id` is of type `string` expected

<details>
  <summary>SQL Query (no UNION)</summary>

```sql
-- @param {String} $1:search Text to search

SELECT table1.id
FROM ""Table1"" table1
WHERE table1.id = $1
```
</details>

Generated definition file:
```ts
import * as $runtime from ""@prisma/client/runtime/library""

/**
 * @param search Text to search
 */
export const unionQuery: (search: string) => $runtime.TypedSql<unionQuery.Parameters, unionQuery.Result>

export namespace unionQuery {
  export type Parameters = [search: string]
  export type Result = {
    id: string
  }
}
```

### Expected behavior

The generated definition file should have `id` of type `string` and not `string | null`
```ts
import * as $runtime from ""@prisma/client/runtime/library""

/**
 * @param search Text to search
 */
export const unionQuery: (search: string) => $runtime.TypedSql<unionQuery.Parameters, unionQuery.Result>

export namespace unionQuery {
  export type Parameters = [search: string]
  export type Result = {
    id: string
  }
}
```


### Prisma information

```prisma
// PRISMA DATABASE SCHEMA
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""typedSql""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""POSTGRESQL_URL"")
}

model Table1 {
  id  String @id @default(cuid())
  foo String @default(""bar"")
}

model Table2 {
  id  String @id @default(cuid())
  foo String @default(""bar"")
}
```
```sql
-- TypeSQL QUERY
-- @param {String} $1:search Text to search

SELECT table1.id
FROM ""Table1"" table1
WHERE table1.id = $1

UNION

SELECT table2.id
FROM ""Table2"" table2
WHERE table2.id = $1
```

```ts
// CODE USED TO TEST TYPE
import { PrismaClient } from ""@prisma/client"";
import { unionQuery } from ""@prisma/client/sql"";


export const prismaClient = new PrismaClient();

export const getDataUnionQuery = async(search: string): Promise<string[]> => {
  const result = await prismaClient.$queryRawTyped(unionQuery(search));

  return result.map(value => value.id); // Type error because ID is of type `string | null`
};
```


### Environment & setup

Operating System
```
Edition                : Windows 10 Professional
Version                : 22H2
Installed              : 09/15/2022
Operating system build : 19045.4894
Experience             : Windows Feature Experience Pack 1000.19060.1000.0
```

PostgreSQL
```
PostgreSQL 16.4 (Debian 16.4-1.pgdg120+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit
```

NodeJS
```
v20.13.1
```

### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.13.1
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules\.pnpm\@prisma+engines@5.19.1\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules\.pnpm\@prisma+engines@5.19.1\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
Preview Features        : prismaSchemaFolder, typedSql
```",,
2541207333,25259,ESM (.mjs) modules of TypedSQL client use CommonJS imports when generating to a non-default location,"### Bug description

When generating the prisma client with --sql flag to a non-default location, the generated <queryName>.mjs files use CommonJS import syntax which is invalid ESM code.

### How to reproduce

1. Setup prisma client w/ at least 1 SQL query in the ""sql"" folder and output the generated client to a non-default location. In this example, the 1 sql query file will be `./prisma/sql/getFeed.sql`
```
generator client {
  ...
  output          = ""client""
  previewFeatures = [""typedSql""]
}
```
2. Generate the client with sql flag `npx prisma generate --sql`
3. Inspect the generated ESM module for the SQL query at `./prisma/client/sql/getFeed.mjs`. Note that the import statement at the top uses CJS import syntax and is missing the `.js` extension from the runtime library module.
```
import { makeTypedQueryFactory as $mkFactory } from ""../runtime/library""
export const getFeed = /*#__PURE__*/ $mkFactory(""<EXAMPLE>"")
```


### Expected behavior

The ESM version of the generated client uses a CJS import making it invalid code. Currently this is generated at `./prisma/client/sql/getFeed.sql`:
```
import { makeTypedQueryFactory as $mkFactory } from ""../runtime/library""
```
Instead, I expect this to be generated with "".js"" extension:
```
import { makeTypedQueryFactory as $mkFactory } from ""../runtime/library.js""
```

### Prisma information

```
generator client {
  ...
  output          = ""client""
  previewFeatures = [""typedSql""]
}
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 18


### Prisma Version

```
5.19.1
```
",,
2540199102,25254,Running ALTER TYPE ... ADD VALUE ... with prisma on cockroachDB causes prisma migrate dev/deploy to hang indefinitely,"### Bug description

Generating a custom migration file with the following migration leads to the prisma migration engine hanging indefinitely (with cockroachDB):
`
-- AlterEnum
ALTER TYPE ""QuestionType"" ADD VALUE 'BINARY';
`

When running the migration in dev mode, debug produces the following:
`prisma:schemaEngine:stderr {""timestamp"":""2024-09-21T11:10:32.091287Z"",""level"":""INFO"",""fields"":{""message"":""Starting schema engine RPC server"",""git_hash"":""b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b""},""target"":""schema_engine""} +3ms`

Seems like the lack of a clear error message is similar to #24975 , where the actual error message faced by the engine is being obfuscated. Because of this, I can't verify the exact error produced when running the migration. 



### How to reproduce

Generate a migration file using npx prisma migrate dev --create-only after adding an additional value to an enum in the schema.prisma

Prisma generates the migration file with the following: ALTER TYPE ""QuestionType"" ADD VALUE 'BINARY'; (since the BINARY option was added to the QuestionType enum)

Running npx prisma migrate dev (or deploy) causes the migration engine to hang with the ""Starting schema engine RPC server"" error message

Inside the _prisma_migrations table in the db, the migration 20240919110944_add_yes_no_question containing the ALTER TYPE statement has a finished_at of NULL and an applied_steps_count of 0. The rolled_back_at and logs are both NULL:

### Expected behavior

ALTER TYPE ""QuestionType"" ADD VALUE 'BINARY' should add the BINARY value to the QuestionType enum without the migration failing  

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma

model Item {
  id                   String       @id @default(cuid())
  name                 String
  itemType         QuestionType
}

enum QuestionType {
  QUANTITY
  PHOTO
  BINARY // recently added to the enum, which resulted in the failed migration
}
```


### Environment & setup

- OS: macOS
- Database: CockroachDB, using cockroachdb/cockroach:latest (v24.2.0)
- Node.js version: v20.2.0


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.2.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
Preview Features        : fullTextSearch
```
",,
2539810753,25253,Consider not requiring '@prisma/engines' and other packages when running CLI commands,"## Problem

When one installs Prisma, then runs `init`, and then `migrate`, the Prisma CLI has already figured out the engines needed, and everything goes smoothly. But, if one were to remove / disgard the `node_modules/@prisma` runtime package and run another `migrate deploy` or similar, the CLI command fails with: 

`Error: Cannot find module '@prisma/engines'`

This is confusing. The early migration ran fine, but this one does not. 

This might seem esoteric, but it is not. Many people have databases behind private networks and the Prisma CLI needs to run in a VPC, for instance in a lambda. It does not make sense to upload both the CLI library _AND_ the runtime library, just to run migrations, especially when both duplicate engine files, so you end up with a much larger artifact.

Is there something I am missing here? If not, then this is my feature request. :) 

## Suggested solution

Skip loading packages under `@prisma` (such as `engines` or `debug` or `engine-version`) if the CLI can detect inlined engine files. 
",,
2537322506,25248,Unable to use prisma in cloudflare workers(serverless),"### Bug description

So when i try to run prisma in my Hono app (since cloudfare workers have their own runtime) 
It gave me this error when i try to run a query on my database. And says  i have to use Either Prisma Accelerate or Driver Adapters
```
Error: PrismaClient is not configured to run in Cloudflare Workers. In order to run Prisma Client on edge runtime, either:

  - Use Prisma Accelerate: https://pris.ly/d/accelerate
  - Use Driver Adapters: https://pris.ly/d/driver-adapters
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
schema.prisma
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
model Users{
  id Int @id @default(autoincrement())
  username String 
  email String @unique
  password String 
}
model Posts {
  id Int @id @default( autoincrement())
  title String
  body String
}
```

```ts
import { Hono } from ""hono"";
import { userSchema } from ""../types"";
import { PrismaClient } from ""@prisma/client"";
const prisma = new PrismaClient();
const userRouter = new Hono();
userRouter.post(""/signup"", async (c) => {
  const body = await c.req.json();
  const parsePayload = userSchema.safeParse(body);
  if (!parsePayload.success) {
    return c.text(""wrong input"");
  }

  await prisma.users.create({
    data: {
      username: body.username,
      email: body.email,
      password: body.password,
    },
  });
  return c.json({ msg: ""Successfull"" });
});
export default userRouter;
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> Ubuntu
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> PostgreSQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->hono - 4.6.2


### Prisma Version

```
5.19.1
```
",,
2535760277,25246,"node opentelemetry parent span not respected in prisma.$on('query', ...)","### Bug description

when I use automatic prisma instrumentation as described here:
https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/opentelemetry-tracing
it works for prisma internal spans (see attached)
<img width=""626"" alt=""Screenshot 2024-09-19 at 10 01 00"" src=""https://github.com/user-attachments/assets/f8056b63-08be-46df-a9bf-d5eb2aef8a58"">
however when I try to attach custom spans in prisma.$on('query', ...) event handler it lands in root without a parent span:
<img width=""1355"" alt=""Screenshot 2024-09-19 at 10 04 41"" src=""https://github.com/user-attachments/assets/3523d30a-b91f-4844-8d85-eb03e86c4dde"">
Code in Javascript that I use for that:

```js
import { createRequire } from 'module';
import { logger } from './logger.js';
const require = createRequire(import.meta.url);
const { PrismaClient } = require('@prisma/client');
const PrismaClientType = PrismaClient;
const prisma = new PrismaClientType({
    log: [
        {
            emit: 'event',
            level: 'query',
        },
        {
            emit: 'stdout',
            level: 'error',
        },
        {
            emit: 'stdout',
            level: 'info',
        },
        {
            emit: 'stdout',
            level: 'warn',
        },
    ],
});
prisma.$on('query', (e) => {
    logger('debug', ""SQL query"", {
        query: e.query,
        params: e.params,
        duration: e.duration
    });
});
export default prisma;
//# sourceMappingURL=prismaInit.js.map
````

logger.js logic:
```js
import { context, trace } from ""@opentelemetry/api"";
export const tracer = trace.getTracer(""kukauni-tracer"");
const createLogger = (serviceName) => {
    return (level, message, metadata) => {
        // Serialize metadata if it exists
        const serializedMetadata = metadata ? JSON.stringify(metadata, Object.getOwnPropertyNames(metadata)) : undefined;
        // Fallback to console
        console[level](message, serializedMetadata);
        const logEvent = (span) => {
            span.addEvent(level, {
                message,
                metadata: serializedMetadata,
                service: serviceName
            });
        };
        const span = trace.getActiveSpan();
        if (span) {
            logEvent(span);
        }
        else {
            const newSpan = tracer.startSpan('log');
            context.with(trace.setSpan(context.active(), newSpan), () => {
                logEvent(newSpan);
                newSpan.end();
            });
        }
    };
};
````

### How to reproduce

1. wire up $on method for query
2. run query
3. check opentelemetry logs

### Expected behavior

event registered in parent span

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""tracing""]

}
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v22.8.0


### Prisma Version

```
10.8.2
```
",,
2535020618,25245,Setting include relation to `undefined` returns all relations instead of none,"### Bug description

Previous to v5.16.0, when I would run a query like this:

```ts
const usersWithPosts = await prisma.user.findMany({
    include: {
      posts: undefined,
    },
  })
```

I would get `User` records without related `Post` records.

Since v5.16.0, the above example now returns `User` records with all related `Post` records (as if I had set `posts: true`).

### How to reproduce

1. Follow the [Quickstart guide](https://www.prisma.io/docs/getting-started/quickstart).
2. Change the final version of `script.ts` to select all users with `posts: undefined` (instead of `posts: true`).
3. Execute the script -- note that related user posts **are** included.
4. Downgrade the Prisma client: `npm i @prisma/client@5.15.1`
5. Execute the script again -- note that related user posts **are not** included.

### Expected behavior

I have reviewed the releases, issues, and discussion and can't seem to find anything indicating this is an expected change. But, I have had trouble figuring out exactly what to search for.

I am expecting `include: { posts: undefined }` to cause the results to not include any related posts.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}
```

```ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // After adding a test user and some related posts:
  const usersWithPosts = await prisma.user.findMany({
    include: {
      posts: undefined,
    },
  })
  console.dir(usersWithPosts, { depth: null })
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })
```


### Environment & setup

- OS: macOS
- Database: SQLite, PostgreSQL
- Node.js version: v20.11.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
```
",,
2532642478,25241,"@prisma/client@5.19.1 has no exported member ""PrismaClient""","### Bug description

![Screen Shot 2024-09-17 at 11 46 37 PM](https://github.com/user-attachments/assets/7e1a595f-346f-4725-92dc-a6fc0ff20ef9)


### How to reproduce


1. Go to package.json
2. Change @prisma/client from 5.19.1 to 5.19.0
3. Run '....'
4. See error (NO ERROR)


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
import { PrismaClient } from ""@prisma/client"";

declare global {
  var prisma: PrismaClient | undefined;
}

export const db = globalThis.prisma || new PrismaClient();

if (process.env.NODE_ENV !== ""production"") globalThis.prisma = db;
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
5.19.1
```
",,
2531325178,25238,"Oops, an unexpected error occurred! Error in Schema engine. Reason:  ...src\walkers\column.rs:74:61] called `Option::unwrap()` on a `None` value","### Bug description

When I try to run `npx prisma migrate dev` the error occurs.

`Oops, an unexpected error occurred! Error in Schema engine. Reason: [D:\a\prisma-engines\prisma-engines\schema-engine\sql-schema-describer\src\walkers\column.rs:74:61] called `Option::unwrap()` on a `None` value`

### How to reproduce

n/as


### Expected behavior

It should migrate the changes in the schema to the db.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider      = ""prisma-client-js""
  output        = ""./generated/client""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

datasource db {
  provider          = ""postgresql""
  url               = env(""DATABASE_URL_HEROKU"")
  shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
}

model Divecentre {
  id        String @id
  number    Int
  name      String
  location  String
  type      String
  latitude  Float
  longitude Float
}

model Divesite {
  id       String @id
  name     String
  region   String
  lat      String
  lng      String
  ocean    String
  location String
  test     String
}
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.15.1
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
```
",,
2529578085,25235,"Relation referencee `String @id @default(dbgenerated(""uuidv7()"")) @db.Uuid` make relations crash","### Bug description

Hello!

I have the following schema.prisma.

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id String @id @default(dbgenerated(""uuidv7()"")) @db.Uuid

  tokens UserToken[]

  @@map(""user"")
}

model UserToken {
  token String @id @default(dbgenerated(""uuidv7()"")) @db.Uuid

  userId String @map(""user_id"") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  @@map(""user_token"")
}
```

I have the following seed:

```ts
import {PrismaClient} from '@prisma/client';

const prisma = new PrismaClient();

await prisma.user.create({
  data: {
    tokens: {create: {token: 'devtoken'}},
  },
});
```

The seed make prisma crash with the following error:

```
Inconsistent column data: Error creating UUID, invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found `v` at 3

meta: {
    modelName: 'User',
    message: 'Error creating UUID, invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found `v` at 3'
  }
```

This error comes from `@db.Uuid`.
**If I remove `@db.Uuid` (just a `String`), it works as expected!**

**NOTE**

The following is the SQL definition of the uuidv7 function. I prefer to use it rather than prisma `uuid(7)` because it is a native default of the database. And we use many sql raw queries.

```sql
CREATE FUNCTION uuidv7() RETURNS uuid
AS $$
  -- Replace the first 48 bits of a uuidv4 with the current
  -- number of milliseconds since 1970-01-01 UTC
  -- and set the ""ver"" field to 7 by setting additional bits
  select encode(
    set_bit(
      set_bit(
        overlay(uuid_send(gen_random_uuid()) placing
	  substring(int8send((extract(epoch from clock_timestamp())*1000)::bigint) from 3)
	  from 1 for 6),
	52, 1),
      53, 1), 'hex')::uuid;
$$ LANGUAGE sql volatile;

COMMENT ON FUNCTION uuidv7() IS
'Generate a uuid-v7 value with a 48-bit timestamp (millisecond precision) and 74 bits of randomness';
```

Example of a generated UUID from the function: `0191fce1-69a5-78b7-84b6-faeb2d33a564`. I validated it succesfully [here](https://uuid7.com).

### Environment & setup

- OS: MacOS
- Database: PostgreSQL 16
- Node.js version: 22


### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.8.0
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
```",,
2529354187,25234,SessionTokenError & PrismaClient is not configured to run in Vercel Edge Functions or Edge Middleware,"### Bug description

PrismaClient fails to initialize in an Edge Runtime environment (Next.js middleware) despite using the recommended configuration with driver adapters and Neon's pooled connections. The error persists even after following the official documentation for Edge compatibility.

### How to reproduce

1. Set up a Next.js project with Prisma and NextAuth.
2. Configure Prisma for Edge compatibility in schema.prisma

```prisma
generator client {
  provider        = ""prisma-client-js""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}
```
3. Set up Prisma client in prisma.ts:

```ts
import { PrismaClient } from ""@prisma/client"";

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;
```

4. Configure NextAuth to use PrismaAdapter in an Edge environment.
5. Set up Next.js middleware to use NextAuth.
6. Run the application and attempt to access a route that triggers the middleware.



### Expected behavior

Prisma Client should initialize successfully in the Edge Runtime environment, allowing the middleware to function properly with database access.
Actual behavior
The application throws a PrismaClientValidationError with the message:

```
PrismaClient failed to initialize because it wasn't configured to run in this environment (Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)).
In order to run Prisma Client in an edge runtime, you will need to configure one of the following options:
- Enable Driver Adapters: https://pris.ly/d/driver-adapters
- Enable Accelerate: https://pris.ly/d/accelerate
```

### Prisma information

## Schema

```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
```

## Prisma Initialisation

```prisma.ts```
```ts
import { PrismaClient } from ""@prisma/client"";

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;
```

### Environment & setup

- Next.js version: 14.2.11
- Node.js version: [Please provide]
- Operating System: [Please provide]
- Deployment environment: Vercel (Edge Runtime)
- Database: PostgreSQL (Neon with pooled connections)

### Prisma Version

```
prisma                  : 5.9.1
@prisma/client          : 5.12.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at ../../../../../opt/homebrew/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at ../../../../../opt/homebrew/lib/node_modules/prisma/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
```
",,
2529001715,25233,Error: Could not parse schema engine response: SyntaxError: Unexpected token '/',"### Bug description

 I am encountering an issue when running npx prisma migrate dev --name init. The error message indicates a problem with parsing the schema engine response due to an unexpected token.

### How to reproduce

Create a Prisma schema file (schema.prisma) with the following content:

prisma

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id              Int             @id @default(autoincrement())
  fullname        String
  avatarUrl       String?
  email           String          @unique
  password        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  chatrooms       Chatroom[]      @relation(""ChatroomUsers"")
  messages        Message[]
  ChatroomUsers   ChatroomUsers[]
}

model Chatroom {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         User[]          @relation(""ChatroomUsers"")
  messages      Message[]
  ChatroomUsers ChatroomUsers[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  imageUrl   String?
  userId     Int
  chatroomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
}

model ChatroomUsers {
  chatroomId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)

  @@id([chatroomId, userId])
}

Run npx prisma migrate dev --name init command.
Observe the error message.

### Expected behavior

The migration command should execute successfully and create the necessary migrations for the Prisma schema.

### Prisma information

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id              Int             @id @default(autoincrement())
  fullname        String
  avatarUrl       String?
  email           String          @unique
  password        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  chatrooms       Chatroom[]      @relation(""ChatroomUsers"")
  messages        Message[]
  ChatroomUsers   ChatroomUsers[]
}

model Chatroom {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         User[]          @relation(""ChatroomUsers"")
  messages      Message[]
  ChatroomUsers ChatroomUsers[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  imageUrl   String?
  userId     Int
  chatroomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
}

model ChatroomUsers {
  chatroomId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)

  @@id([chatroomId, userId])
}


### Environment & setup

- OS: UBUNTU 22
- Database: PostgreSQL
- Node.js version: 20.17.0


### Prisma Version

```5.19.1

```
",,
2526949273,25229,Getting error when i try to Insert when single table have multiple foreign key in same filed,"### Bug description
```
PrismaClientKnownRequestError: 
Invalid `prisma.admin.create()` invocation in
/Users/sunny/Documents/sites/express-mysql-api-server/dist/src/seeders/setup.js:76:57

  73     }
  74 });
  75 await Promise.all(this.defaultAdmins.map(async (admin)=>{
→ 76     const createdAdmin = await prisma.admin.create(
Foreign key constraint failed on the field: `modelId`
    at Ln.handleRequestError (/Users/sunny/Documents/sites/express-mysql-api-server/node_modules/@prisma/client/runtime/library.js:121:7753)
    at Ln.handleAndLogRequestError (/Users/sunny/Documents/sites/express-mysql-api-server/node_modules/@prisma/client/runtime/library.js:121:7061)
    at Ln.request (/Users/sunny/Documents/sites/express-mysql-api-server/node_modules/@prisma/client/runtime/library.js:121:6745)
    at async l (/Users/sunny/Documents/sites/express-mysql-api-server/node_modules/@prisma/client/runtime/library.js:130:9633)
    at async /Users/sunny/Documents/sites/express-mysql-api-server/dist/src/seeders/setup.js:76:38
    at async Promise.all (index 0)
    at async /Users/sunny/Documents/sites/express-mysql-api-server/dist/src/seeders/setup.js:75:13
    at async Proxy._transactionWithCallback (/Users/sunny/Documents/sites/express-mysql-api-server/node_modules/@prisma/client/runtime/library.js:130:8000)
    at async Setup.init (/Users/sunny/Documents/sites/express-mysql-api-server/dist/src/seeders/setup.js:60:9) {
  code: 'P2003',
  clientVersion: '5.19.1',
  meta: { modelName: 'Admin', field_name: 'modelId' }
}
```

### How to reproduce

```
import { Admin, Permission, PrismaClient, Role, ModelHasRole } from ""@prisma/client"";

class Setup {
  private prisma = new PrismaClient();
  private defaultPassword = '12345678';
  private timestamp = new Date();

  public defaultRoles: Omit<Role, ""id"">[] = [
    {
      name: 'admin',
      type: 'admin',
      status: 1,
      isSystem: 1,
      createdAt: this.timestamp,
      updatedAt: this.timestamp,
    },
  ];

  private rolesForAdmin = ['admin'];

  public defaultPermissions: Permission[] = [];

  public defaultAdmins: Omit<Admin, ""id"">[] = [
    {
      email: ""admin@gmail.com"",
      name: ""Admin"",
      password: this.defaultPassword,
      status: 1,
      isSystem: 1,
      createdAt: this.timestamp,
      updatedAt: this.timestamp,
    },
  ];

  async init() {
    await Promise.all([
      this.insertRoles(),
      this.insertAdmins(),
      this.insertPermissions(),
    ]);
    await this.assignRoleToAdmin();
  }

  private async insertRoles() {
    await this.prisma.role.createMany({
      data: this.defaultRoles,
      skipDuplicates: true, // Avoid creating duplicates
    });
  }

  private async insertPermissions() {
    if (this.defaultPermissions.length > 0) {
      await this.prisma.permission.createMany({
        data: this.defaultPermissions,
        skipDuplicates: true,
      });
    }
  }

  private async insertAdmins() {
    await this.prisma.admin.createMany({
      data: this.defaultAdmins,
      skipDuplicates: true,
    });
  }

  private async assignRoleToAdmin() {
    const [admins, roles] = await Promise.all([
      this.prisma.admin.findMany({
        where: {
          email: { in: this.defaultAdmins.map(user => user.email) },
        },
        select: { id: true },
      }),
      this.prisma.role.findMany({
        where: {
          name: { in: this.rolesForAdmin },
        },
        select: { id: true },
      }),
    ]);

    if (admins.length && roles.length) {
      const modelHasRole: Omit<ModelHasRole, ""id"">[] = admins.flatMap(admin =>
        roles.map(role => ({
          roleId: role.id,
          modelType: 'admin',
          modelId: admin.id,
          createdAt: this.timestamp,
          updatedAt: this.timestamp,
        }))
      );

      await this.prisma.modelHasRole.createMany({
        data: modelHasRole,
      });
    }
  }
}

new Setup().init();

```

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phoneNo   String
  password  String
  status    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modelHasRoles ModelHasRole[] @relation(""userRoles"")

  @@map(""users"")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  status    Int      @default(1)
  isSystem  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modelHasRoles ModelHasRole[] @relation(""adminRoles"")

  @@map(""admins"")
}

enum UserType {
  admin
  user
}


model ModelHasRole {
  id        String   @id @default(cuid())
  roleId    String
  modelId   String
  modelType UserType @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?  @relation(""userRoles"", fields: [modelId], references: [id], onDelete: Cascade, map: ""user"")
  admin Admin? @relation(""adminRoles"", fields: [modelId], references: [id], onDelete: Cascade, map: ""admin"")

  @@map(""model_has_roles"")
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS,Windows
- Database: Mysql
- Node.js version: v20.16.0


### Prisma Version

```
^5.19.1
```
",,
2526827803,25226,NOT filters with nested nullable relations behave differently for 1:1 and 1:many relations,"### Bug description

(I'm filing this as a bug report, but it's really somewhere between that and a clarifying question, as I couldn't find much clarity on the expected behavior here).

The behavior of `NOT: { /* <nested conditions> */ }` filters in where clauses is unclear to me when nullable fields are contained in the negated `<nested conditions>` clause, and appears to be inconsistent between 1:1 and 1:many relations. To me, the behavior here is unintuitive and seems specific to the SQL queries Prisma chooses to generate (not predictable based alone on an understanding of SQL NULL semantics).

The complete repro is in a linked repo, but here's the idea. Suppose I have a 1:many parent / child relation with the following Prisma schema:
```prisma
model Parent {
  id       String  @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  children Child[]
}

model Child {
  id       String  @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  name     String?
  parentId String  @unique @db.Uuid
  parent   Parent  @relation(fields: [parentId], references: [id])
}
```
Note that `Child.name` is nullable, and despite being 1:many at the level of the Prisma client, `Child.parentId` is unique. Now I want to query parents without a child named `Bob`. Here is one way to accomplish this:
```ts
const result = await prisma.parent.findMany({
    where: {
        NOT: {
            children: {
                some: {
                    name: ""Bob"",
                },
            },
        },
    },
});
```
In this case the query is a bit more verbose than necessary, but it's a toy example. This query will return all rows for which `Child.name` is `NULL` and all rows for which `Child.name` is not `NULL` and is not equal to `Bob`.

Now consider another Prisma schema which generates an identical DB schema.
```prisma
model Parent {
  id    String @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  child Child?
}

model Child {
  id       String  @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  name     String?
  parentId String  @unique @db.Uuid
  parent   Parent  @relation(fields: [parentId], references: [id])
}
```
And a query which appears to be the closest analogue to the above:
```ts
const result = await prisma.parent.findMany({
    where: {
        NOT: {
            child: {
                name: ""Bob"",
            },
        },
    },
});
```
Unlike the 1:many case above, this query will NOT return any rows for which `Child.name` is `NULL`; it will only return all rows for which `Child.name` is not `NULL` and is not equal to `Bob`.

Looking at the generated SQL queries sheds light:

In the 1:many case, the generated sql query is:
```sql
SELECT
	""public"".""Parent"".""id""
FROM
	""public"".""Parent""
WHERE (NOT(""public"".""Parent"".""id"")
	IN(
		SELECT
			""t1"".""parentId"" FROM ""public"".""Child"" AS ""t1""
		WHERE (""t1"".""name"" = 'Bob'
			AND ""t1"".""parentId"" IS NOT NULL)))
OFFSET 0
```

In the 1:1 case, the generated sql query is:
```sql
SELECT
	""public"".""Parent"".""id""
FROM
	""public"".""Parent""
	LEFT JOIN ""public"".""Child"" AS ""j1"" ON (""j1"".""parentId"") = (""public"".""Parent"".""id"")
WHERE (NOT(""j1"".""name"" = 'Bob'
		AND(""j1"".""id"" IS NOT NULL)))
OFFSET 0
```

In the former case, the `NOT` operation is applied to an `IN` operation on `Parent.id` and a subquery (which returns a set of `Parent.id` values). In the latter case, the `NOT` operation is applied directly to the clause being tested on the child (ie `j1"".""name"" = 'Bob'`). In this case, the SQL semantics around NULL and negation / inequality come into play, and thus the rows with `Child.name = NULL` are excluded from the `WHERE` condition.

Ok -- given the SQL queries, the semantics make sense. But here's the thing: without the SQL queries, I don't think it's possible to predict the semantics. The two schemas I presented are identical at the database level. Prisma could've generated the first SQL query (the one with the subquery, where rows with NULL name are returned) in the latter 1:1 case, because a (nullable) 1:1 schema is a special case of a general 1:many schema. If Prisma had implemented 1:1 relation traversal with subqueries instead of left joins, it's entirely possible the latter query would include null rows, and I feel like this would be just as defendable. Without an understanding of Prisma internals, how could I predict that the `some` query should include null rows but the direct 1:1 relation traversal shouldn't?

Maybe we resolve this specific case by just agreeing that negating a `some` condition includes null rows, while negating a direct equality doesn't. But this is a toy example -- what about filters which could traverse multiple 1:1 and 1:many relations? Given such a filter `X`, how can I reason in general about the set of rows returned by `{ NOT: X }`? While the SQL semantics around `NULL` are pretty unintuitive, they are based on a predictable three-valued logic system. Do Prisma filters have a similar algebra that can be used to reason about filter composition in some general manner? If so, are the exact semantics documented somewhere? I couldn't find anything.

### How to reproduce

Repro here: https://github.com/LukeZeller/prisma-negation-repro/
This repo contains two independent node projects in folders `one-to-one` and `one-to-many`; each of these can be installed and initialized using the standard steps in the basic Prisma tutorial. The code for each is run with `npx ts-node index.ts`. Note that the migration file in each is identical despite the differences in the prisma schemas.

### Expected behavior

A consistent and documented logic for the behavior of all Prisma filters (including all one-to-many -- `some`, `every`, `none`) and nested relation filters under negation (`NOT`, `isNot`, `notIn`) which can be relied upon to build provably correct logic / composition in the presence of SQL `NULL` values in the database.

### Prisma information

See linked repo

### Environment & setup

- OS: MacOS Sonoma 14.1
- Database: PostgreSQL
- Node.js version: v20.15.1

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.15.1
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
Preview Features        : postgresqlExtensions
```
",,
2521429882,25212,"Postgres `db.Decimal(X, 0)` retrieved as floating point","### Bug description

I've run into an odd issue when retrieving large decimals with PostgresSQL. The expected behavior of `<field> Decimal db.Decimal(X, 0)` is to store the field as an integer with a length `X` and `0` decimal precision. For example `db.Decimal(39, 0)` should store a 128bit (16 byte) integer without precision loss.

This works fine for storing values, however upon retrieval they are instead floating point numbers (e.g. `4638449322890040259147289221431665` becomes `4.638449322890040259147289221431665e+33`.)

The correct values show up in pgAdmin:
![Screenshot 2024-09-12 155006](https://github.com/user-attachments/assets/15597c4e-84ea-4254-84ea-a01c9eded494)

However both in code and with Prisma Studio, an incorrect value is retrieved:
![Screenshot 2024-09-12 153132](https://github.com/user-attachments/assets/218307d6-a5f6-4422-a8df-4df9ade73203)

### How to reproduce

Run the code within the `Prisma information` section OR attempt to read a `db.Decimal(X, 0)` field in Prisma Studio.


### Expected behavior

JavaScript itself doesn't support such large numbers with the `number` primitive. However, I expect to be able to do the following: `const value = BigInt(prismaObject.txId.toString())`. Instead, I get the following error (due to `toString()` just stringifying the incorrect floating point value): `SyntaxError: Cannot convert 4.638449322890040259147289221431665e+33 to a BigInt`

It seems as if this is some kind of regression (possibly related to Decimal.js?), as the expected behavior has been [reported as working before.](https://github.com/prisma/prisma/issues/19860#issuecomment-1839662082)

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model Test {
  txId Decimal @id @db.Decimal(39, 0)
}
```

```ts
  await prisma.test.create({data: {txId: ""4638449322890040259147289221431665""}});
  await prisma.test.create({data: {txId: ""4638449360796155049277845621482705""}});
  await prisma.test.create({data: {txId: ""4638449365115847159809326047046303""}});
  await prisma.test.create({data: {txId: ""4638449370170574910641017211037647""}});

  const tests = await prisma.test.findMany();
  for (const test of tests) {
    console.log(test.txId.toString());
  }
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: 21.7.1


### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v21.7.1
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
```
",,
2518412829,25210,SQLite query times out after time N/A,"### Bug description

When running a large number of update operations >1500, the operation times out.
I'm using `Promise.all`, and the queries are being resolved quite quickly, but it still times out.

Here's the error:
```
16 | `;throw new Error(u)}else if(r===""warn""){let u=`Conflict for env var${s.length>1?""s"":""""} ${s.map(c=>H(c)).join("", "")} in ${X(a)} and ${X(l)}
17 | Env vars from ${X(l)} overwrite the ones from ${X(a)}
18 |       `;console.warn(`${Ie(""warn(prisma)"")} ${u}`)}}}}function zo(e){if(zu(e)){ai(`Environment variables loaded from ${e}`);let t=li.default.config({path:e,debug:process.env.DOTENV_CONFIG_DEBUG?!0:void 0});return{dotenvResult:Ko(t),message:Ae(`Environment variables loaded from ${gt.default.relative(process.cwd(),e)}`),path:e}}else ai(`Environment variables not found at ${e}`);return null}function Yo(e,t){return e&&t&&gt.default.resolve(e)===gt.default.resolve(t)}function zu(e){return!!(e&&Wr.default.existsSync(e))}var Zo=""library"";function Ht(e){let t=Yu();return t||(e?.config.engineType===""library""?""library"":e?.config.engineType===""binary""?""binary"":Zo)}function Yu(){let e=process.env.PRISMA_CLIENT_ENGINE_TYPE;return e===""library""?""library"":e===""binary""?""binary"":void 0}var Ge;(t=>{let e;(E=>(E.findUnique=""findUnique"",E.findUniqueOrThrow=""findUniqueOrThrow"",E.findFirst=""findFirst"",E.findFirstOrThrow=""findFirstOrThrow"",E.findMany=""findMany"",E.create=""create"",E.createMany=""createMany"",E.createManyAndReturn=""crea | ... truncated
19 | ${(0,is.default)(ec(n),2)}
20 | }`}};function Xu(e){let t;if(e.length>0){let r=e.find(n=>n.fromEnvVar!==null);r?t=`env(""${r.fromEnvVar}"")`:t=e.map(n=>n.native?""native"":n.value)}else t=void 0;return t}function ec(e){let t=Object.keys(e).reduce((r,n)=>Math.max(r,n.length),0);return Object.entries(e).map(([r,n])=>`${r.padEnd(t)} = ${tc(n)}`).join(`
21 | `)}function tc(e){return JSON.parse(JSON.stringify(e,(t,r)=>Array.isArray(r)?`[${r.map(n=>JSON.stringify(n)).join("", "")}]`:JSON.stringify(r)))}var Yt={};jt(Yt,{error:()=>ic,info:()=>nc,log:()=>rc,query:()=>oc,should:()=>os,tags:()=>zt,warn:()=>mi});var zt={error:ce(""prisma:error""),warn:Ie(""prisma:warn""),info:Oe(""prisma:info""),query:et(""prisma:query"")},os={warn:()=>!process.env.PRISMA_DISABLE_WARNINGS};function rc(...e){console.log(...e)}function mi(e,...t){os.warn()&&console.warn(`${zt.warn} ${e}`,...t)}function nc(e,...t){console.info(`${zt.info} ${e}`,...t)}function ic(e,...t){console.error(`${zt.error} ${e}`,...t)}function oc(e,...t){console.log(`${zt.query} ${e}`,...t)}function Hr(e,t){if(!e)throw new Error(`${t}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`)}function De(e,t){throw new Error(t)}function gi(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var hi=(e,t)=>e.reduce((r,n)=>(r[t(n)]=n,r),{});function ht(e,t){let r={};for | ... truncated

PrismaClientKnownRequestError:
Invalid `prisma.question.update()` invocation in
/home/aaravj/Desktop/Testing/Bun/Prisma/index.ts:35:31

  32
  33 await Promise.all(
  34     res.questions.map(async (question, index) => {
→ 35         await prisma.question.update(
Operations timed out after `N/A`. Context: The database failed to respond to a query within the configured timeout — see https://pris.ly/d/sqlite-connector for more details. Database: /home/aaravj/Desktop/Testing/Bun/Prisma/prisma/./dev.db
 code: ""P1008""

      at new PrismaClientKnownRequestError (/home/aaravj/Desktop/Testing/Bun/Prisma/node_modules/@prisma/client/runtime/library.js:21:1414)
      at handleRequestError (/home/aaravj/Desktop/Testing/Bun/Prisma/node_modules/@prisma/client/runtime/library.js:121:7753)
      at handleAndLogRequestError (/home/aaravj/Desktop/Testing/Bun/Prisma/node_modules/@prisma/client/runtime/library.js:121:7061)
      at /home/aaravj/Desktop/Testing/Bun/Prisma/node_modules/@prisma/client/runtime/library.js:121:6745

Bun v1.1.20 (Linux x64)
```

I have the code below, and it only seems to be erroring out when I keep the find operation, and if I use a static value, the query is able to execute correctly. I suspect that's just because static values resolve in under the timeout.


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

Use the code, schema, and json format I have provided. The code will timeout after time `M/A`


### Expected behavior

All queries should work and there should be no timeout for database operations, especially large ones.


### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

model Sample {
  id   Int    @id @default(autoincrement())
  name String @unique
  val  Int
}

model Test {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  // Question
  questions   Question[]
}

model Question {
  id       Int    @id @default(autoincrement())
  test     Test   @relation(fields: [testId], references: [id])
  testId   Int
  question String

  correctAnswerId Int
  answers         Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answer     String
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

export const prisma = new PrismaClient();

const data = (await import(""./database_1.json"")).default;

const res = await prisma.test.create({
    data: {
        name: ""Test 1"",
        questions: {
            create: data.map(question => ({
                question: question.question,
                answers: {
                    create: question.choices.map(choice => ({
                        answer: choice,
                    })),
                },
                correctAnswerId: 0,
            })),
        },
    },
    include: {
        questions: {
            include: {
                answers: true,
            },
        },
    },
});

await Promise.all(
    res.questions.map(async (question, index) => {
        await prisma.question.update({
            where: {
                id: question.id,
            },
            data: {
                correctAnswerId: question.answers.find(
                    answer => answer.answer === data[index].cor_choice[0]
                )?.id,
            },
        });
    })
);
```
The json file has 1600 values with the format:
```
{
    question: string;
    choices: string[];
    cor_choice: string[];
}[]
```


### Environment & setup

- OS: Linux DESKTOP-BNBDO4K 5.15.153.1-microsoft-standard-WSL2 #1 SMP Fri Mar 29 23:14:13 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
- Database: SQLite
- Bun version: 1.1.20


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.3.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at ../../../../../tmp/bunx-1000-prisma@latest/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at ../../../../../tmp/bunx-1000-prisma@latest/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```
",,
2518132754,25206,Error initializing PrismaClient on Windows Arm64,"### Bug description

I am able to generate prisma client
```
PS C:\Users\yan-yoga\Documents\codar\portal-tela\libs\migrations> npm run build

> tela-migrations@1.0.0 build
> npx prisma generate --schema=./src/prisma/schema.prisma && tsc

Prisma schema loaded from src\prisma\schema.prisma

✔ Generated Prisma Client (v5.19.1) to .\..\..\node_modules\@prisma\client in 84ms

Start by importing your Prisma Client (See: http://pris.ly/d/importing-client)
```

```
import { PrismaClient } from '@prisma/client'

export const prisma = new PrismaClient()

await prisma.execution.create(
  {
    data: {
      id: command.data.execution.id,
      source: command.data.execution.scraper.name
    }
  })
  ...
```

but i can't use the generated client, because the following error is thrown

```
PrismaClientInitializationError: Unable to require(`C:\Users\yan-yoga\Documents\codar\portal-tela\node_modules\.prisma\client\query_engine-windows.dll.node`).
The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements

Details: \\?\C:\Users\yan-yoga\Documents\codar\portal-tela\node_modules\.prisma\client\query_engine-windows.dll.node is not a valid Win32 application.       
\\?\C:\Users\yan-yoga\Documents\codar\portal-tela\node_modules\.prisma\client\query_engine-windows.dll.node
    at Object.loadLibrary (C:\Users\yan-yoga\Documents\codar\portal-tela\node_modules\@prisma\client\runtime\library.js:110:10219)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Cr.loadEngine (C:\Users\yan-yoga\Documents\codar\portal-tela\node_modules\@prisma\client\runtime\library.js:111:448)
    at async Cr.instantiateLibrary (C:\Users\yan-yoga\Documents\codar\portal-tela\node_modules\@prisma\client\runtime\library.js:110:12575) {
  clientVersion: '5.19.1',
  errorCode: undefined
}
```

### How to reproduce

use prisma on windows 11 arm

### Expected behavior

the query engine does not throw any error

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Execution {
  id           String       @id @db.Uuid
  insertedDate DateTime     @default(now()) @db.Timestamptz
  source       String?      @db.VarChar(64)
  read         Status       @default(Pending)
}

enum Status {
  Pending
  InProgress
  Completed
  CompletedWithDelay
  Flagged
  WatermarkDetected
  Delayed
  Duplicated
  MergedPending
  MergedCompleted
  MergedFlagged
}
```

```ts
import { PrismaClient } from '@prisma/client'

export const prisma = new PrismaClient()

await prisma.execution.create(
  {
    data: {
      id: command.data.execution.id,
      source: command.data.execution.scraper.name
    }
  })
  ...
```


### Environment & setup

- **OS:** Windows 11 Home, ARM64
- **Database:** PostgreSQL
- **Node.js version:** v20.17.0 (ARM64 binaries)
- **Device:** Lenovo Yoga Slim 7x Gen 9


### Prisma Version

```
PS C:\Users\yan-yoga\Documents\codar\portal-tela> prisma -v
Error: Unable to require(`C:\Users\yan-yoga\AppData\Roaming\npm\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node`).
The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements

Details: \\?\C:\Users\yan-yoga\AppData\Roaming\npm\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node is not a valid Win32 application.
\\?\C:\Users\yan-yoga\AppData\Roaming\npm\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node
    at pne (C:\Users\yan-yoga\AppData\Roaming\npm\node_modules\prisma\build\index.js:284:116)
    at lWe (C:\Users\yan-yoga\AppData\Roaming\npm\node_modules\prisma\build\index.js:284:269)
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : arm64
Node.js                 : v20.17.0
Query Engine (Node-API) : E_CANNOT_RESOLVE_VERSION (at ..\..\..\AppData\Roaming\npm\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at ..\..\..\AppData\Roaming\npm\node_modules\prisma\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
```",,
2515814141,25203,Prisma Studio: unable to properly handle nullable field from sqlite,"### Bug description

can't import nullable data from existing sqlite data proplerly


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

```
model thread {
  category            Int?
  updated_at          DateTime?             @updatedAt
 last_reply_at       DateTime?
  ...
}
```
this three fields contains null data, and the libraries throws exception if they are not commented.

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0

```
",,
2514824475,25201,Namespaces,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
Prisma generates all schema within client so you can access with `PrismaClient.users` and such. This is simple and useful in most cases, however in bigger projects or while making REST API's which may contain more than one service it might become a little insufficient. For example, if you were to need 2 User modals, you would have to prefix one/both with a name to not collide with each other. This creates a lot of entries inside PrismaClient which feels a bit overwhelming when you have a lot of modals

## Suggested solution

<!-- A clear and concise description of what you want to happen. -->
A namespaces feature would be awesome.
```prisma
model User {
    id: String @id @default(uuid())
    name: String
}

namespace License {
    model User {
        id: String @id @default(uuid())
        products: String[]
    }
}

namespace Bot {
    model User {
        id: String @id @default(uuid())
        serverId: Int
    }
}
```

You would be able to use these models with such usage:
```ts
prisma.user.findMany()
prisma.license.user.findMany()
prisma.bot.user.findMany()
```

## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->
Instead of having a `schema` folder, we could split it as namespaces instead. Anything in root prisma dir would be namespaceless and anything inside folder would be within that namespace with the name of directory.

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->

Possible sub-namespaces could be good addition.
Well, this is just an idea i thought it might suit to prisma.",,
2512837170,25194,Execute TypedSQL queries without Prisma Client,"## Problem

TypedSQL generates input and output types for arbitrary SQL, which is awesome. Currently it is only possible to execute TypedSQL queries through Prisma Client. If we made it possible to access the SQL string as well as the input and output types, it would be easy to use TypedSQL without importing the full Prisma Client. This would be great for users who prefer to use the native db drivers directly, and for constrained environments where importing the full Prisma Client is prohibitive.

## Suggested solution

```ts
import { getUsersWithPosts } from '@prisma/client/sql'
import pg from 'pg'
const { Client } = pg
const client = new Client()
await client.connect()

const res = (await client.query(getUsersWithPosts.sql, ['argument 1'] as getUsersWithPosts.input)) as getUsersWithPosts.output
```

For more robust type handling, users could add zod or whatever mechanism they are using in their app.

## Additional context

TypedSQL is a new feature that generates input and output types based on arbitrary SQL queries. Refer to the documentation here: https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/typedsql",,
2512733425,25193,PrismaClient thinks it's a browser environment when running test via jest,"### Bug description

When I try to write a Jest test that uses a real (not mocked) `PrismaClient`, I get this error:

```
  ● one

    PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `Node.js`).
    If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report

       5 |
       6 | beforeEach(async () => {
    >  7 |   await prisma.$executeRaw`DELETE FROM my_table`;
         |                ^
       8 | });
       9 |
      10 | test('one', async () => {

      at Object.get (node_modules/.pnpm/@prisma+client@5.11.0_prisma@5.11.0/node_modules/.prisma/client/index-browser.js:4005:15)
      at Object.$executeRaw (__tests__/integration/purchases/index.ts:7:16)
```

The code instantiates `PrismaClient` directly from the `@prisma/client` module, but it's unclear why Prisma thinks I'm running in a browser environment when I'm running this via Jest:

```
$ jest __tests__/integration/one.ts
```

### How to reproduce

Run this code:

```ts
import {PrismaClient} from '@prisma/client';

const prisma = new PrismaClient();

beforeEach(async () => {
  await prisma.$executeRaw`DELETE FROM my_table`;
});

test('one', async () => {
  expect(1).toEqual(1);
});
```

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: MySQL
- Node.js version: v18.18.2


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : linux-musl-arm64-openssl-3.0.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v18.18.2
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/libquery_engine-linux-musl-arm64-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/schema-engine-linux-musl-arm64-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : fullTextIndex, fullTextSearch
```
",,
2512363757,25192,Duplicate import from @prisma/client after prisma generate,"### Bug description

After running prisma generate command, the ts file generated under zod folder having duplicated import, which causes ""Duplicate identifier"" error.

### How to reproduce

1. Get the sample prisma file
2. Run ""npm prisma generate""
3. Go to ""zod"" folder
4. Open the generate ts file
5. See error

### Expected behavior

_No response_

### Prisma information

```prisma
enum AIModel {
  claude_3_5_sonnet_20240620
  claude_3_sonnet_20240229
  claude_3_haiku_20240307
  claude_3_opus_20240229
}

model Setting {
  id            Int      @id @default(1)
  reviewAIModel AIModel  @default(claude_3_5_sonnet_20240620)
  reviewPrompt  String   @default("""") @db.Text
  chatAIModel   AIModel  @default(claude_3_5_sonnet_20240620)
  chatPrompt    String   @default("""") @db.Text
  chatQuestions String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}
```

```ts
import * as z from ""zod""
import { AIModel, AIModel } from ""@prisma/client""

export const SettingModel = z.object({
  id: z.number().int(),
  reviewAIModel: z.nativeEnum(AIModel),
  reviewPrompt: z.string(),
  chatAIModel: z.nativeEnum(AIModel),
  chatPrompt: z.string(),
  chatQuestions: z.string().array(),
  createdAt: z.date(),
  updatedAt: z.date(),
})
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v21.5.0


### Prisma Version

```
prisma                  : 4.15.0
@prisma/client          : 4.15.0
Current platform        : darwin-arm64
Query Engine (Node-API) : libquery-engine 8fbc245156db7124f997f4cecdd8d1219e360944 (at node_modules/.pnpm/@prisma+engines@4.15.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Migration Engine        : migration-engine-cli 8fbc245156db7124f997f4cecdd8d1219e360944 (at node_modules/.pnpm/@prisma+engines@4.15.0/node_modules/@prisma/engines/migration-engine-darwin-arm64)
Format Wasm             : @prisma/prisma-fmt-wasm 4.15.0-28.8fbc245156db7124f997f4cecdd8d1219e360944
Default Engines Hash    : 8fbc245156db7124f997f4cecdd8d1219e360944
Studio                  : 0.484.0
```
",2337747030,"Hi @sisheng1998, you're referencing folders or files that are either not provided in this issue, or are not complete. Can you please share a minimal repository that reproduces the problem you're facing? Thank you.

Also, Prisma 4.15.0 is pretty old, can you try migrating to Prisma 5 (e.g., 5.19.1), try again, and report back with your results? Thank you."
2512363757,25192,Duplicate import from @prisma/client after prisma generate,"### Bug description

After running prisma generate command, the ts file generated under zod folder having duplicated import, which causes ""Duplicate identifier"" error.

### How to reproduce

1. Get the sample prisma file
2. Run ""npm prisma generate""
3. Go to ""zod"" folder
4. Open the generate ts file
5. See error

### Expected behavior

_No response_

### Prisma information

```prisma
enum AIModel {
  claude_3_5_sonnet_20240620
  claude_3_sonnet_20240229
  claude_3_haiku_20240307
  claude_3_opus_20240229
}

model Setting {
  id            Int      @id @default(1)
  reviewAIModel AIModel  @default(claude_3_5_sonnet_20240620)
  reviewPrompt  String   @default("""") @db.Text
  chatAIModel   AIModel  @default(claude_3_5_sonnet_20240620)
  chatPrompt    String   @default("""") @db.Text
  chatQuestions String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}
```

```ts
import * as z from ""zod""
import { AIModel, AIModel } from ""@prisma/client""

export const SettingModel = z.object({
  id: z.number().int(),
  reviewAIModel: z.nativeEnum(AIModel),
  reviewPrompt: z.string(),
  chatAIModel: z.nativeEnum(AIModel),
  chatPrompt: z.string(),
  chatQuestions: z.string().array(),
  createdAt: z.date(),
  updatedAt: z.date(),
})
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v21.5.0


### Prisma Version

```
prisma                  : 4.15.0
@prisma/client          : 4.15.0
Current platform        : darwin-arm64
Query Engine (Node-API) : libquery-engine 8fbc245156db7124f997f4cecdd8d1219e360944 (at node_modules/.pnpm/@prisma+engines@4.15.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Migration Engine        : migration-engine-cli 8fbc245156db7124f997f4cecdd8d1219e360944 (at node_modules/.pnpm/@prisma+engines@4.15.0/node_modules/@prisma/engines/migration-engine-darwin-arm64)
Format Wasm             : @prisma/prisma-fmt-wasm 4.15.0-28.8fbc245156db7124f997f4cecdd8d1219e360944
Default Engines Hash    : 8fbc245156db7124f997f4cecdd8d1219e360944
Studio                  : 0.484.0
```
",2337777639,"Hi, when I try to create a minimal repository, I found out the issue is caused by the [zod-prisma](https://github.com/CarterGrimmeisen/zod-prisma/issues/169) package, not prisma or @prisma/client issue, sorry!"
2512363757,25192,Duplicate import from @prisma/client after prisma generate,"### Bug description

After running prisma generate command, the ts file generated under zod folder having duplicated import, which causes ""Duplicate identifier"" error.

### How to reproduce

1. Get the sample prisma file
2. Run ""npm prisma generate""
3. Go to ""zod"" folder
4. Open the generate ts file
5. See error

### Expected behavior

_No response_

### Prisma information

```prisma
enum AIModel {
  claude_3_5_sonnet_20240620
  claude_3_sonnet_20240229
  claude_3_haiku_20240307
  claude_3_opus_20240229
}

model Setting {
  id            Int      @id @default(1)
  reviewAIModel AIModel  @default(claude_3_5_sonnet_20240620)
  reviewPrompt  String   @default("""") @db.Text
  chatAIModel   AIModel  @default(claude_3_5_sonnet_20240620)
  chatPrompt    String   @default("""") @db.Text
  chatQuestions String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}
```

```ts
import * as z from ""zod""
import { AIModel, AIModel } from ""@prisma/client""

export const SettingModel = z.object({
  id: z.number().int(),
  reviewAIModel: z.nativeEnum(AIModel),
  reviewPrompt: z.string(),
  chatAIModel: z.nativeEnum(AIModel),
  chatPrompt: z.string(),
  chatQuestions: z.string().array(),
  createdAt: z.date(),
  updatedAt: z.date(),
})
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v21.5.0


### Prisma Version

```
prisma                  : 4.15.0
@prisma/client          : 4.15.0
Current platform        : darwin-arm64
Query Engine (Node-API) : libquery-engine 8fbc245156db7124f997f4cecdd8d1219e360944 (at node_modules/.pnpm/@prisma+engines@4.15.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Migration Engine        : migration-engine-cli 8fbc245156db7124f997f4cecdd8d1219e360944 (at node_modules/.pnpm/@prisma+engines@4.15.0/node_modules/@prisma/engines/migration-engine-darwin-arm64)
Format Wasm             : @prisma/prisma-fmt-wasm 4.15.0-28.8fbc245156db7124f997f4cecdd8d1219e360944
Default Engines Hash    : 8fbc245156db7124f997f4cecdd8d1219e360944
Studio                  : 0.484.0
```
",2338047700,Thanks for reporting back here! I will thus close this as it's not a Prisma issue.
2512054468,25191,prisma Type error not assignable to type 'void | Response'.,,,
2511220516,25187,Strange issue: relationLoadStrategy: 'join' errors out when used with 'redis' npm package: PANIC: called `Option::unwrap()` on a `None` value,"### Bug description

The bug is basically when I use 
```TS
await redisClient.get('anything-here')
```
before
```TS
const user = await prismaClient.user.findUnique({
  where: {
    id: 'user-id-here',
    x: false
  },
  select: {
    x: true,
    y: true,
    anotherTable: {
      select: {
        x: true,
        y: true,
        anotherTable1: {
          select: {
            x: true
          }
        }
      }
    }
  },
  relationLoadStrategy: 'join'
})
```

I get the following error

```txt
PrismaClientKnownRequestError: 
Invalid `prismaClient.user.findUnique()` invocation in
file.ts:26:42

  25 
→ 26 const user = await prismaClient.user.findUnique(
PANIC: called `Option::unwrap()` on a `None` value
```

And the strange part is 
- If I remove `await` from the redisClient get call it works fine
- Or if I remove the whole redisClient call it works fine
- Or if I remove `relationLoadStrategy: 'join'` it works fine
- Or if I add `await new Promise((resolve) => setTimeout(resolve, 100))` after the redis call, it works fine.

Is `prisma` internally in some way clashing with the `redis` npm package while quering?

Maybe prisma and redis use or depend on some same thing in someway while quering, which is making this race condition? IDK.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

Simple reproduction I guess would be:
- setup node ts express server with `redis` and `prisma`
- add middleware `app.use(someMiddleware())` , in that:
  - use `await redisClient.get('any key works')`
  - call `prismaClient.table.findUnique()` with `relationLoadStrategy: 'join'`
- add some dummy routes maybe.

This should be it!



### Expected behavior

Expected behavour is error should not happen like how it works without `relationLoadStrategy: 'join'`

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins"", ""omitApi""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
// fields here
}
```

```ts

const someMiddleware =
  () =>
  async (req: Request, res: Response, next: NextFunction) => {
    // basic validation code ...

    await redisClient.get('key')

    const user = await prismaClient.user.findUnique({
      where: {
        id: 'user-id-here',
        x: false
      },
      select: {
        x: true,
        y: true,
        anotherTable: {
          select: {
            x: true,
            y: true,
            anotherTable1: {
              select: {
                x: true
              }
            }
          }
        }
      },
      relationLoadStrategy: 'join'
    })
  }

```


### Environment & setup

- OS: macOS Sonoma 14.6.1 <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: PostgreSQL<!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: 20.13.1 <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
^5.19.1
```
",2337766194,"Hi @IamAfnanSk, let's break this reproduction setup down to 3 alternative steps. Can you please:

1. Remove `redisClient.get(...)` from Prisma's middleware and replace it with any other `Promise` value? The `redis` npm package is completely separated from `@prisma/client`, and connects to a different datasource, so there shouldn't be any race condition there.

2. Can you get rid of `prisma.user.findUnique(..)`? What if you just run:
    ```typescript
    const someMiddleware =
      () =>
      async (req: Request, res: Response, next: NextFunction) => {
        // basic validation code ...
    
        await redisClient.get('key')
      }
    ```
    Would that yield any error?

3. What if you call Prisma without any `redisClient.get(...)` call and without `relationLoadStrategy: 'join'`?

I would gently ask you to provide this reproduction with a repository you can share with us, to speed up investigation and potentially the solution to this issue. Thanks!"
2511220516,25187,Strange issue: relationLoadStrategy: 'join' errors out when used with 'redis' npm package: PANIC: called `Option::unwrap()` on a `None` value,"### Bug description

The bug is basically when I use 
```TS
await redisClient.get('anything-here')
```
before
```TS
const user = await prismaClient.user.findUnique({
  where: {
    id: 'user-id-here',
    x: false
  },
  select: {
    x: true,
    y: true,
    anotherTable: {
      select: {
        x: true,
        y: true,
        anotherTable1: {
          select: {
            x: true
          }
        }
      }
    }
  },
  relationLoadStrategy: 'join'
})
```

I get the following error

```txt
PrismaClientKnownRequestError: 
Invalid `prismaClient.user.findUnique()` invocation in
file.ts:26:42

  25 
→ 26 const user = await prismaClient.user.findUnique(
PANIC: called `Option::unwrap()` on a `None` value
```

And the strange part is 
- If I remove `await` from the redisClient get call it works fine
- Or if I remove the whole redisClient call it works fine
- Or if I remove `relationLoadStrategy: 'join'` it works fine
- Or if I add `await new Promise((resolve) => setTimeout(resolve, 100))` after the redis call, it works fine.

Is `prisma` internally in some way clashing with the `redis` npm package while quering?

Maybe prisma and redis use or depend on some same thing in someway while quering, which is making this race condition? IDK.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

Simple reproduction I guess would be:
- setup node ts express server with `redis` and `prisma`
- add middleware `app.use(someMiddleware())` , in that:
  - use `await redisClient.get('any key works')`
  - call `prismaClient.table.findUnique()` with `relationLoadStrategy: 'join'`
- add some dummy routes maybe.

This should be it!



### Expected behavior

Expected behavour is error should not happen like how it works without `relationLoadStrategy: 'join'`

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins"", ""omitApi""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
// fields here
}
```

```ts

const someMiddleware =
  () =>
  async (req: Request, res: Response, next: NextFunction) => {
    // basic validation code ...

    await redisClient.get('key')

    const user = await prismaClient.user.findUnique({
      where: {
        id: 'user-id-here',
        x: false
      },
      select: {
        x: true,
        y: true,
        anotherTable: {
          select: {
            x: true,
            y: true,
            anotherTable1: {
              select: {
                x: true
              }
            }
          }
        }
      },
      relationLoadStrategy: 'join'
    })
  }

```


### Environment & setup

- OS: macOS Sonoma 14.6.1 <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: PostgreSQL<!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: 20.13.1 <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
^5.19.1
```
",2351625067,"Hi @jkomyno, I just found some easy reproduction steps though.

1. Yeah makes sense, I replaced with another `new Promise` of `setTimeout` and it worked for some reason. But this does not matter I feel.
2. No, if I get rid of `prisma.user.findUnique()` it works, the problem seems to be with `prisma`.
3. This works fine!

And the thing I noticed is if we just make the `prisma.user.findUnique()` run multiple times at the same time, we get the error! for e.g something like 
```
await Promise.all([prisma.user.findUnique(),prisma.user.findUnique(),prisma.user.findUnique()])
```
will reproduce the error, make sure you pass the `relationLoadStrategy: 'join'`.

Sorry, I am unable to create a new simple reproduction repo yet, will try to do that too."
2511220516,25187,Strange issue: relationLoadStrategy: 'join' errors out when used with 'redis' npm package: PANIC: called `Option::unwrap()` on a `None` value,"### Bug description

The bug is basically when I use 
```TS
await redisClient.get('anything-here')
```
before
```TS
const user = await prismaClient.user.findUnique({
  where: {
    id: 'user-id-here',
    x: false
  },
  select: {
    x: true,
    y: true,
    anotherTable: {
      select: {
        x: true,
        y: true,
        anotherTable1: {
          select: {
            x: true
          }
        }
      }
    }
  },
  relationLoadStrategy: 'join'
})
```

I get the following error

```txt
PrismaClientKnownRequestError: 
Invalid `prismaClient.user.findUnique()` invocation in
file.ts:26:42

  25 
→ 26 const user = await prismaClient.user.findUnique(
PANIC: called `Option::unwrap()` on a `None` value
```

And the strange part is 
- If I remove `await` from the redisClient get call it works fine
- Or if I remove the whole redisClient call it works fine
- Or if I remove `relationLoadStrategy: 'join'` it works fine
- Or if I add `await new Promise((resolve) => setTimeout(resolve, 100))` after the redis call, it works fine.

Is `prisma` internally in some way clashing with the `redis` npm package while quering?

Maybe prisma and redis use or depend on some same thing in someway while quering, which is making this race condition? IDK.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

Simple reproduction I guess would be:
- setup node ts express server with `redis` and `prisma`
- add middleware `app.use(someMiddleware())` , in that:
  - use `await redisClient.get('any key works')`
  - call `prismaClient.table.findUnique()` with `relationLoadStrategy: 'join'`
- add some dummy routes maybe.

This should be it!



### Expected behavior

Expected behavour is error should not happen like how it works without `relationLoadStrategy: 'join'`

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins"", ""omitApi""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
// fields here
}
```

```ts

const someMiddleware =
  () =>
  async (req: Request, res: Response, next: NextFunction) => {
    // basic validation code ...

    await redisClient.get('key')

    const user = await prismaClient.user.findUnique({
      where: {
        id: 'user-id-here',
        x: false
      },
      select: {
        x: true,
        y: true,
        anotherTable: {
          select: {
            x: true,
            y: true,
            anotherTable1: {
              select: {
                x: true
              }
            }
          }
        }
      },
      relationLoadStrategy: 'join'
    })
  }

```


### Environment & setup

- OS: macOS Sonoma 14.6.1 <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: PostgreSQL<!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: 20.13.1 <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
^5.19.1
```
",2414318407,"Hi @IamAfnanSk.
Just checking in, were you able to provide the repository for reproduction?
Thank you!"
2511109011,25185,Option to generate types that require a where clause to enforce tenant isolation,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
I'm working on a multi-tenant application. I've gone down the route of writing a client extension that automatically filters models by `tenantId`, however, while this works for reads, create operations require `tenantId` in the type for its payload. This means I can't really encapsulate the handling of `tenantId`s completely.

## Suggested solution

<!-- A clear and concise description of what you want to happen. -->
I would like a way to tell prisma when it's generating its types, that all models must include a where clause and a column (`tenantId` in my case), that way it's consistent across my CRUD operations.
",2335990523,I was able to achieve this by just writing my own generator that rewrote the types generated by the prisma client with the behavior I needed.
2507292291,25173,Add type safety to the `PrismaClientKnownRequestError` code through const and type,"## Problem

Now days if you want to handle with the error codes in `PrismaClientKnownRequestError` you have to enter the code string manually.


## Suggested solution

 I have a suggestion to create a `KnownRequestErrorCodes` const and `KnownRequestErrorCodes` type (That infer itself from the object).
And then you can just use `KnownRequestErrorCodes.NotFoundError` and its much more easy and readable. 

(Example only)
<img width=""867"" alt=""Screenshot 2024-09-05 at 12 39 01"" src=""https://github.com/user-attachments/assets/6524b705-6af1-4f32-b3d1-f3606cf25f74"">

## Alternatives

Its possible to create the enum as a `json` file and there generate from it the TypeScript enum and the Rust enum from the same single source of truth.

## Additional context

I want that solution for a switch in my backend and i will be more then happy to hack it.",,
2506515427,25168,TypedSql not considering COALESCE in query output,"### Bug description

The following query, when used with `typedSql` produces invalid type output

```sql
select COALESCE(sum(order_price), 0) as total from stock_entries where company_id = $1
```

The output
```ts
/**
 * @param text
 */
export const theQuery: (text: string) => $runtime.TypedSql<calculateIncome.Parameters, calculateIncome.Result>

export namespace theQuery{
  export type Parameters = [text: string]
  export type Result = {
    total: bigint | null
  }
}

```

### How to reproduce

1. Enable `typedSql`
2. Crate the mentioned query
3. Run prisma generate
4. The output type from the typed query for the output field is `bigint | null`

### Expected behavior

Expected the field return to be `bigint`, or `bigint | number` if it makes sense, but not to be typed with `null`, since `COALESCE` ""protected"" if from returning `null`

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
Removed some irrelevant parts to make it short
```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""relationJoins"", ""prismaSchemaFolder"", ""typedSql""]
}

generator dbml {
  provider = ""prisma-dbml-generator""
}

datasource db {
  provider = ""postgresql""
  url = env(""DATABASE_URL"")
  relationMode = ""foreignKeys""
}

model StockEntry {
  @@map(""stock_entries"")
  companyId String @db.VarChar(255) @map(""company_id"")

  id String @id @db.VarChar(255) @default(cuid())

  orderPrice Int @db.Integer @map(""order_price"")
}
```

```ts
prisma.$queryRawTyped(theQuery('whatever'))
```


### Environment & setup

- OS: WSL 2
- Database: Postgres
- Node.js version: 20.11.0


### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
Preview Features        : relationJoins, prismaSchemaFolder, typedSql
```",2392362010,I am hitting a similar issue here with `COUNT(*)` and a `CASE` statement that `CAST`s to an enum. They all end up nullable in the generated types.
2506433881,25167,Custom generators not run with npx context on Windows,"### Bug description

Custom generators are not running within the `npx` context when `prisma generate` is executed on Windows (in Git Bash): `Error: spawn prisma-frontend ENOENT`. On MacOS there is no issue.

Here's example code using my generator, [`prisma-frontend`](https://www.npmjs.com/package/prisma-frontend):

```prisma
generator jsFrontend {
  provider = ""prisma-frontend""
}
```

### How to reproduce

1. Install and use a custom generator
2. Omit `npx` from the provider value
3. Run `npx prisma generate` on Windows
4. See errors.

### Expected behavior

Custom generators are run with `npx` context on both Windows and macOS.

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

generator jsFrontend {
  provider = ""prisma-frontend""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

### Environment & setup

- OS: Windows 11
- Database: PostgreSQL
- Node.js version: 20.17


### Prisma Version

```
5.18.0
```
",,
2505400577,25163,TypedSQL generates invalid typescript file when enums contain hyphens,"### Bug description

TypedSQL generates invalid typescript file when enums contain hyphens.

### How to reproduce

1. Create a schema with an enum mapped to a name containing hyphens, e.g. `course-chapter-type-enum`
```
enum CourseChapterType {
  SECTION
  EXAM

  @@map(""course-chapter-type-enum"")
}
```

2. Follow the [TypedSQL documentation](https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/typedsql) to generate typescript functions and types.

3. Generated types for DbEnums contains invalid variable names containing hyphens `node_modules/.prisma/client/sql/$DbEnums.d.ts`

```typescript
export type course-chapter-type-enum = ""SECTION"" | ""EXAM""
```

### Expected behavior

I should be able to use TypedSQL with enums containing hyphens.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""fullTextSearch"", ""typedSql""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

enum CourseChapterType {
  SECTION
  EXAM

  @@map(""course-chapter-type-enum"")
}

...
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v16.20.2

### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v16.20.2
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
Preview Features        : fullTextSearch, typedSql
```
",,
2505032916,25161,Accelerate not accepting `?pgbouncer=true` in connection string,"### Bug description

I am working on a project using supabase and prisma accelerate. I am trying to add `?pgbouncer=true` to the connection string to fix [ConnectorError: 42P05 #24798](https://github.com/prisma/prisma/issues/24798) but I get the error:

`One or more fields were invalid: [connectionString]`


### How to reproduce

1. Go to `https://console.prisma.io/` > `Accelerate` > `Settings`
2. Change `Database connection string` to include `?pgbouncer=true`
3. Save
4. See error `One or more fields were invalid: [connectionString]` pops up.


### Expected behavior

To prevent Supavisor from erroring, it is necessary to add the following query parameter to your connection strings: `pgbouncer=true` to the Transaction connection string.

This is the only fix for `> “prepared statement \“s#\” does not exist”` error other than restarting by project frequently


### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""relationJoins""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String
  password String
  ratings  Rating[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  releaseDate DateTime
  description String
  genre       String[]
  ratings     Rating[]
}

model Rating {
  id      Int @id @default(autoincrement())
  value   Int
  user  User  @relation(fields: [userId], references: [id])
  userId  Int
  movie Movie @relation(fields: [movieId], references: [id])
  movieId Int
  @@unique([userId, movieId])
}
```

```ts
import { PrismaClient } from '@prisma/client/edge';
import { withAccelerate } from '@prisma/extension-accelerate';

export const prismaClient = new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],
  transactionOptions: {
    maxWait: 5000, // default: 2000
    timeout: 10000 // default: 5000
  }
}).$extends(withAccelerate());
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL (supabase)
- Node.js version: v21.7.3


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v21.7.3
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
Preview Features        : relationJoins
```
",,
2504775654,25159,A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.,"### Bug description

 ⚠ Compiled with warnings

./node_modules/.pnpm/@prisma+debug@5.20.0-dev.5/node_modules/@prisma/debug/dist/index.js
A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime

Import trace for requested module:
./node_modules/.pnpm/@prisma+debug@5.20.0-dev.5/node_modules/@prisma/debug/dist/index.js
./node_modules/.pnpm/@prisma+driver-adapter-utils@5.20.0-dev.5/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
./node_modules/.pnpm/@prisma+adapter-neon@5.20.0-dev.5_@neondatabase+serverless@0.9.5/node_modules/@prisma/adapter-neon/dist/index.mjs
./src/app/lib/prisma-client.ts

./node_modules/.pnpm/@prisma+debug@5.20.0-dev.5/node_modules/@prisma/debug/dist/index.js
A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.
Learn more: https://nextjs.org/docs/api-reference/edge-runtime

Import trace for requested module:
./node_modules/.pnpm/@prisma+debug@5.20.0-dev.5/node_modules/@prisma/debug/dist/index.js
./node_modules/.pnpm/@prisma+driver-adapter-utils@5.20.0-dev.5/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
./node_modules/.pnpm/@prisma+adapter-neon@5.20.0-dev.5_@neondatabase+serverless@0.9.5/node_modules/@prisma/adapter-neon/dist/index.mjs
./src/app/lib/prisma-client.ts

### How to reproduce

1. Install with nextjs 
2. run next build



### Expected behavior

Solve this problem https://github.com/prisma/prisma/pull/24686

### Prisma information


```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username String?
  password String
}
```

```ts
import { PrismaClient } from ""@prisma/client""
import { Pool } from '@neondatabase/serverless'
import { PrismaNeon } from '@prisma/adapter-neon'
import { DATABASE_URL } from ""../constants/app""

const connectionString = DATABASE_URL
const prismaClientSingleton = () => {
  const pool = new Pool({ connectionString })
  // https://github.com/neondatabase/serverless/blob/main/DEPLOY.md
  const adapter = new PrismaNeon(pool)
  return new PrismaClient({ adapter })
}

declare const globalThis: {
  prismaGlobal: ReturnType<typeof prismaClientSingleton>
} & typeof global

const prisma = globalThis.prismaGlobal ?? prismaClientSingleton()

export default prisma

if (process.env.NODE_ENV !== ""production"") globalThis.prismaGlobal = prisma

```


### Environment & setup

- OS: macOS 
- Database: PostgreSQL 
- Node.js version: v18.19.0 - v20.11.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.20.0-dev.5
@prisma/client          : 5.20.0-dev.5
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine f2561ec470647d6a14db84d3c1dc6fc1c2414386 (at node_modules/.pnpm/@prisma+engines@5.20.0-dev.5/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli f2561ec470647d6a14db84d3c1dc6fc1c2414386 (at node_modules/.pnpm/@prisma+engines@5.20.0-dev.5/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.20.0-4.f2561ec470647d6a14db84d3c1dc6fc1c2414386
Default Engines Hash    : f2561ec470647d6a14db84d3c1dc6fc1c2414386
Studio                  : 0.502.0
Preview Features        : driverAdapters
```

Problem exists in 5.19.1 as well
",,
2504488087,25158,Transaction API error: Transaction with { txnNumber: 2 } has been aborted.,"### Bug description

I am using the following code:

```
async create(createProductDto: CreateProductDto) {
    try {
      return await this.prisma.$transaction(
        async (tx: Prisma.TransactionClient) => {
          const serialCounter = await tx.serialCounter.findFirst();
          if (!serialCounter) {
            throw new BadRequestException('Serial counter not found');
          }

          for (let i = 1; i <= createProductDto.quantity; i++) {
            const serialNumber = `ZB-${serialCounter.counterValue + i}`;

            const url = `${ownerUrl}/qr-handler/${getId()}`;

            const qrCodeUrl = await generateQRCode(this.prisma, url);

            await cloudinary.v2.uploader.upload(qrCodeUrl, {
              folder: 'qrCodes',
            });
            const warranty = new Date();
            const warrantyMonths = 12;

            warranty.setMonth(warranty.getMonth() + warrantyMonths);

            const { productImages } = createProductDto;

            console.log(`creating product ${i}===>`);

            await tx.product.create({
              data: {
                serial: serialNumber,
                title: createProductDto.title,
                price: createProductDto.price,
                description: createProductDto.description,
                category: {
                  connect: {
                    id: createProductDto.categoryId,
                  },
                },
                productQR: {
                  create: {
                    url,
                    warranty: warranty,
                    warrantyMonths: warrantyMonths,
                  },
                },
                ProductImage: {
                  createMany: {
                    data: productImages.map(({ mediaId }) => ({
                      mediaId,
                    })),
                  },
                },
              },
            });
          }

          await tx.serialCounter.update({
            where: { id: serialCounter.id },
            data: {
              counterValue:
                serialCounter.counterValue + createProductDto.quantity,
            },
          });

          return {
            message: 'products created successfully',
          };
        },
        {
          maxWait: 800000,
          timeout: 500000,
        }
      );
    } catch (error) {
      throw error;
    }
  }
  ```
  
  But getting error:
  
  ```
   [Nest] 367  - 09/04/2024, 6:58:41 AM   ERROR [ExceptionsHandler] 
 Invalid `tx.product.create()` invocation in
 /app/src/modules/product/product.service.ts:62:30
 
   59 
   60 console.log(`creating product ${i}===>`);
   61 
 → 62 await tx.product.create(
 Transaction API error: Transaction with { txnNumber: 2 } has been aborted.
 PrismaClientKnownRequestError: 
 Invalid `tx.product.create()` invocation in
 /app/src/modules/product/product.service.ts:62:30
 
   59 
   60 console.log(`creating product ${i}===>`);
   61 
 → 62 await tx.product.create(
 Transaction API error: Transaction with { txnNumber: 2 } has been aborted.
     at Ln.handleRequestError (/app/node_modules/@prisma/client/runtime/library.js:121:7753)
     at Ln.handleAndLogRequestError (/app/node_modules/@prisma/client/runtime/library.js:121:7061)
     at Ln.request (/app/node_modules/@prisma/client/runtime/library.js:121:6745)
     at async l (/app/node_modules/@prisma/client/runtime/library.js:130:9633)
     at async prisma.$transaction.maxWait (/app/src/modules/product/product.service.ts:62:13)
     at async Proxy._transactionWithCallback (/app/node_modules/@prisma/client/runtime/library.js:130:8000)
     at async ProductService.create (/app/src/modules/product/product.service.ts:34:14)
     at async /app/node_modules/@nestjs/core/router/router-execution-context.js:46:28
     at async /app/node_modules/@nestjs/core/router/router-proxy.js:9:17
```

This error appears after 1.1 0 1.5 mins, but my `maxWait` is  13.33 mins (800000)

### How to reproduce

<!--
1. create a mongo DB database
2. create a single table in the schema.prisma
3. add about 50-100 entries so that it take more than 1.5 - 2 mins to add
4. See error
-->


### Expected behavior

Should create the 50 records successfully

### Prisma information

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model User {
  id                    String            @id @default(auto()) @map(""_id"") @db.ObjectId
  firstName             String?
  lastName              String?
  email                 String            @unique
  password              String
  phoneNumber           String?
  paymentMethod         String?
  stripeCustomerId      String?           @unique
  stripeSubscriptionId  String?
  paypalagreementId     String?
  subscriptionStatus    String?
  subscriptionStartsAt  DateTime?         @default(now())
  subscriptionExpiresAt DateTime?
  pfpId                 String?           @db.ObjectId
  subscriptionTypeId    String?           @db.ObjectId
  role                  Role
  status                SubAdminStatus?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @default(now()) @updatedAt
  resetToken            ResetToken[]
  product               Product[]
  Stripe                Stripe[]
  Paypal                Paypal[]
  notification          Notification[]
  media                 Media?            @relation(fields: [pfpId], references: [id], onDelete: Cascade)
  subscriptionType      SubscriptionType? @relation(fields: [subscriptionTypeId], references: [id], onDelete: Cascade)
}

model SubscriptionType {
  id                     String                  @id @default(auto()) @map(""_id"") @db.ObjectId
  name                   String
  price                  Float
  durationInDays         Int
  productsAllowed        Int
  subscriptionTypeStatus SubscriptionTypeStatus? //* if null then seeded
  user                   User[]
}

model Stripe {
  id                String   @id @default(auto()) @map(""_id"") @db.ObjectId
  createdAtId       Int?
  clientReferenceId String?  @unique
  userId            String?  @db.ObjectId
  paymentMethod     String?
  paymentStatus     String
  amountTotal       Int
  currency          String
  expiresAt         Int?
  subscription      String?
  invoice           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User?    @relation(fields: [userId], references: [id])
}

model Paypal {
  id             String   @id @default(auto()) @map(""_id"") @db.ObjectId
  userId         String?  @db.ObjectId
  agreementId    String?  @unique
  agreementState String
  description    String?
  startDate      DateTime
  endDate        DateTime
  paymentMethod  String?
  currency       String
  amountTotal    Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  userId    String   @db.ObjectId
  isUsed    Boolean  @default(false)
  token     String   @unique
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String         @id @default(auto()) @map(""_id"") @db.ObjectId
  name      String         @unique
  status    CategoryStatus @default(Active)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  product   Product[]
}

model SerialCounter {
  id           String @id @default(auto()) @map(""_id"") @db.ObjectId
  counterValue Int
}

model Product {
  id                   String               @id @default(auto()) @map(""_id"") @db.ObjectId
  serial               String               @unique
  title                String
  nickName             String?
  price                Int
  description          String
  productStatus        ProductStatus        @default(Inactive)
  inventoryStatus      InventoryStatus      @default(Available)
  adminInventoryStatus AdminInventoryStatus @default(Available)
  userId               String?              @db.ObjectId
  categoryId           String               @db.ObjectId
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt
  category             Category             @relation(fields: [categoryId], references: [id])
  user                 User?                @relation(fields: [userId], references: [id])
  ProductImage         ProductImage[]
  productQR            ProductQR?
  ScanHistory          ScanHistory[]
  ProductTemplate      ProductTemplate?
}

model ProductQR {
  id              String           @id @default(auto()) @map(""_id"") @db.ObjectId
  url             String
  warranty        DateTime
  warrantyMonths  Int?
  productId       String           @unique @db.ObjectId
  scannedAt       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  ScanHistory     ScanHistory[]
  productTemplate ProductTemplate? @relation(fields: [productId], references: [id])
}

model ProductTemplate {
  id                     String                   @id @default(auto()) @map(""_id"") @db.ObjectId
  template               Json
  name                   String
  signature              String
  productId              String                   @unique @db.ObjectId
  subscription           ProductStatus            @default(Inactive)
  trailExpiry            DateTime?
  counter                Int                      @default(0)
  mediaId                String?                  @db.ObjectId
  signedAt               DateTime
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
  productQR              ProductQR?
  ProductTemplateHistory ProductTemplateHistory[]
  product                Product                  @relation(fields: [productId], references: [id])
  media                  Media?                   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model ProductTemplateHistory {
  id                String          @id @default(auto()) @map(""_id"") @db.ObjectId
  productTemplateId String          @db.ObjectId
  counter           Int             @default(0)
  template          Json
  name              String
  signature         String
  signedAt          DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  productTemplate   ProductTemplate @relation(fields: [productTemplateId], references: [id])
}

model ProductImage {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  mediaId   String?  @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  media     Media?   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model ScanHistory {
  id        String    @id @default(auto()) @map(""_id"") @db.ObjectId
  latitude  Float?
  longitude Float?
  location  String?
  productId String    @db.ObjectId
  qrCodeId  String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productQR ProductQR @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
}

model Media {
  id              String            @id @default(auto()) @map(""_id"") @db.ObjectId
  fileName        String
  mimetype        String
  fileUrl         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  ProductImage    ProductImage[]
  user            User[]
  ProductTemplate ProductTemplate[]
}

enum PaymentStatus {
  Paid
  UnPaid
}

enum Role {
  Admin
  SubAdmin
  Owner
  User
}

enum SubAdminStatus {
  Active
  Blocked
}

enum CategoryStatus {
  Active
  Inactive
}

enum ProductStatus {
  Active
  Inactive
}

enum InventoryStatus {
  Available
  Sold
}

enum AdminInventoryStatus {
  Available
  Sold
}

enum SubscriptionTypeStatus {
  Requested
  Accepted
  Expired
}
```

### Environment & setup

- OS: masOS 14.5 (23F79)
- Database: MongoDB
- Node.js version: v20.17.0


### Prisma Version

```
5.7.1
```

I know the schema is really bad but it was created by previous dev :)",,
2503999639,25153,Method `$on()` of new `PrismaClient` instance returns `void`,"### Bug description

Prisma is a dependency of [`nestjs-prisma`](https://nestjs-prisma.dev/). To implement client extensions, nestjs-prisma relies on the `$extends` method of the `PrismaClient` instance. An example of this in action can be found [here](https://github.com/notiz-dev/nestjs-prisma/blob/c17a1d30dc07b05cbe3e5df2709082d74357a29a/examples/extensions/src/prisma.extension.ts#L17).

However, logging depends on the `$on` method of the same instance. This currently returns `void` which means it's not possible to chain the `$extends` method, therefore negating the ability to implement both logging and client extensions together.

### How to reproduce

Create an instance of the PrismaClient that utilises both the `$on` and `$extends` methods.

```
export const extendedPrismaClient = new PrismaClient<
  Prisma.PrismaClientOptions,
  'query' | 'info' | 'warn' | 'error'
>({
  log: [
    { level: 'query', emit: 'event' },
    { level: 'info', emit: 'event' },
    { level: 'warn', emit: 'event' },
    { level: 'error', emit: 'event' },
  ],
})
  .$on('query', (event) => {
    console.log(event);
  })
  .$extends({
    model: {
    $allModels: {
      async exists<T>(
        this: T,
        where: Prisma.Args<T, 'findFirst'>['where']
      ): Promise<boolean> {
        const context = Prisma.getExtensionContext(this)
        const result = await (context as any).findFirst({ where })
        return result !== null
      },
    },
  },
})
```

The compiler will throw the error `Property '$extends' does not exist on type 'void'.`

Comment out the 3 lines relating to `$on` and the extensions code compiles correctly.

### Expected behavior

The `$on` method returns an instance of the Prisma Client that can be extended with `$extends`.

### Prisma information

I am using the code from the nestjs-prisma [example](https://github.com/notiz-dev/nestjs-prisma/blob/c17a1d30dc07b05cbe3e5df2709082d74357a29a/examples/extensions/src/prisma.extension.ts).

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v19.9.0


### Prisma Version

```
prisma                  : 5.19.0
@prisma/client          : 5.19.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v19.9.0
Query Engine (Node-API) : libquery-engine 5fe21811a6ba0b952a3bc71400666511fe3b902f (at node_modules/.pnpm/@prisma+engines@5.19.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5fe21811a6ba0b952a3bc71400666511fe3b902f (at node_modules/.pnpm/@prisma+engines@5.19.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.0-31.5fe21811a6ba0b952a3bc71400666511fe3b902f
Default Engines Hash    : 5fe21811a6ba0b952a3bc71400666511fe3b902f
Studio                  : 0.502.0
```
",,
2502464248,25150,Deno preview feature client generation throws an error,"### Bug description

Trying the deno preview feature, following the doc here: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-deno-deploy

At the step to generate the client, I get:
```
$ deno run -A --unstable npm:prisma@latest generate --no-engine
⚠️  The `--unstable` flag is deprecated and will be removed in Deno 2.0. Use granular `--unstable-*` flags instead.
Learn more at: https://docs.deno.com/runtime/manual/tools/unstable_flags
Prisma schema loaded from prisma/schema.prisma
Warning: [Prisma auto-install on generate] Prisma could not find a package.json file in the inferred project root /workspace/packages/temp. During the next step, when an auto-install of Prisma package(s) will be attempted, it will then be created by your package manager on the appropriate level if necessary.

✔ Installed the @prisma/client and prisma packages in your project
Error: Cannot read properties of null (reading 'on')
```

Looks like a js error from prisma, but no idea where that comes from
```
Error: Cannot read properties of null (reading 'on')
```

Also, no client has been generated at the desired `output` location

### How to reproduce

Follow your doc from https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-deno-deploy

### Expected behavior

No error and the client properly generated at the given location.

### Prisma information

Schema from the doc:

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""deno""]
  output          = ""../generated/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Log {
  id      Int    @id @default(autoincrement())
  level   Level
  message String
  meta    Json
}

enum Level {
  Info
  Warn
  Error
}
```



### Environment & setup

- OS: in a debian docker container (deno official `denoland/deno:latest`)
- Database: postgresql
- Node.js version: 
deno 1.46.2 (stable, release, aarch64-unknown-linux-gnu)
v8 12.9.202.5-rusty
typescript 5.5.2
npm 9.2.0
node v18.19.0

### Prisma Version

```
prisma                  : 5.19.1
@prisma/client          : 5.19.1
Computed binaryTarget   : linux-arm64-openssl-3.0.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/libquery_engine-linux-arm64-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 69d742ee20b815d88e17e54db4a2a7a3b30324e3 (at node_modules/@prisma/engines/schema-engine-linux-arm64-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.1-2.69d742ee20b815d88e17e54db4a2a7a3b30324e3
Default Engines Hash    : 69d742ee20b815d88e17e54db4a2a7a3b30324e3
Studio                  : 0.502.0
Preview Features        : deno
```",,
2501007747,25146,PrismaClientRustPanicError: Expected parent IDs to be set when ordering by parent ID,"### Bug description

Prisma throws the RustPanicError when the function written below is called.
It seems like there are some records in the db that causes the problem. The weird thing is the following:
If I take 50 elements skipping 0 I get the error. If I take 20 elements skipping 0, 20, 40 and so on (passing the 50th row) I never get the error.
For this reason it's impossible to understand if the problem is caused by a record or some weird prisma's behaviour.

### How to reproduce

If I try running the SQL queries manually on the db I don't get any error. The error seems to be caused by the Prisma Client code.

Example of the weird pagination behaviour.
If I try running the same exact query changing only skip and take I get the following (weird) results:
- skip 0 take 33 -> error
- skip 1 take 32 -> error
- skip 2 take 31 -> error
- skip 3 take 30 -> error
- skip 4 take 29 -> no error
- skip 5 take 30 -> no error
- ... and so on
- skip 0 take 40 -> error
- skip 1(,2,3) take 40 -> error
- skip 0 take 32 (or less) -> no error

Some ""rules"" I think I've seen:
skip from 0 to 3 taking the 33th row -> error

It seems like row 33 it the problem. However every (I can't really garantuee the ""every"") skip above 3 that takes that row doen't raise the error...

### Expected behavior

_No response_

### Prisma information

schema.prisma
```prisma
model Registrations {
  id                 Int                @id @default(autoincrement())
  identificationCode String             @unique
  registrationStatus RegistrationStatus
  marathon           Marathons          @relation(fields: [marathonName], references: [name])
  marathonName       String
  teamName           String?
  subscribers        Subscribers[]
  payment            Payments?          @relation(fields: [paymentId], references: [id])
  paymentId          Int?               @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Payments {
  id                 Int                  @id @default(autoincrement())
  stripeClientSecret String?
  paymentStatus      PaymentStatus
  coupons            Coupons?             @relation(fields: [couponId], references: [code])
  couponId           String?
  registration       Registrations?
  total              Int?
  promotionalPackage PromotionalPackages?
  paymentMethods     PaymentMethods?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

enum PaymentStatus {
  completed
  failed
  inProgress
}

enum PaymentMethods {
  stripe
  bacs
}

enum RegistrationStatus {
  confirmed
  rejected
  pending
}
```

Function that raises the error
```ts
await prisma.registrations.findMany({
      include: {
        payment: {
          include: {
            coupons: true
            },
          },
        },
      },
      skip: pagination
        ? (pagination.page - 1) * pagination.pageLength
        : undefined,
      take: pagination ? pagination.pageLength : undefined,
    });
```

### Rust stack backtrace
```
0:     0x7ff9f6889abf - napi_register_module_v1
   1:     0x7ff9f5f3e04b - <unknown>
   2:     0x7ff9f687c3c2 - napi_register_module_v1
   3:     0x7ff9f688c01a - napi_register_module_v1
   4:     0x7ff9f688bc0e - napi_register_module_v1
   5:     0x7ff9f688cb88 - napi_register_module_v1
   6:     0x7ff9f688c665 - napi_register_module_v1
   7:     0x7ff9f688c5a9 - napi_register_module_v1
   8:     0x7ff9f688c594 - napi_register_module_v1
   9:     0x7ff9f6a401e7 - napi_register_module_v1
  10:     0x7ff9f6a40802 - napi_register_module_v1
  11:     0x7ff9f65cfc79 - napi_register_module_v1
  12:     0x7ff9f65cfa8d - napi_register_module_v1
  13:     0x7ff9f65cca20 - napi_register_module_v1
  14:     0x7ff9f65c5458 - napi_register_module_v1
  15:     0x7ff9f65c05a7 - napi_register_module_v1
  16:     0x7ff9f65bfd7f - napi_register_module_v1
  17:     0x7ff9f65c6a59 - napi_register_module_v1
  18:     0x7ff9f65c05a7 - napi_register_module_v1
  19:     0x7ff9f65bfd7f - napi_register_module_v1
  20:     0x7ff9f65d06a9 - napi_register_module_v1
  21:     0x7ff9f65c0621 - napi_register_module_v1
  22:     0x7ff9f660b559 - napi_register_module_v1
  23:     0x7ff9f6611bb5 - napi_register_module_v1
  24:     0x7ff9f5e012fe - <unknown>
  25:     0x7ff9f5e03c4b - <unknown>
  26:     0x7ff9f5e2c22c - <unknown>
  27:     0x7ff9f5e24c3b - <unknown>
  28:     0x7ff9f5e0dacc - <unknown>
  29:     0x7ff9f5e822e5 - <unknown>
  30:     0x7ff9f5e5762d - <unknown>
  31:     0x7ff9f5e649a0 - <unknown>
  32:     0x7ff9f68a55df - napi_register_module_v1
  33:     0x7ff9f68b158c - napi_register_module_v1
  34:     0x7ff9f68a8bc2 - napi_register_module_v1
  35:     0x7ff9f68a84ea - napi_register_module_v1
  36:     0x7ff9f68a9c95 - napi_register_module_v1
  37:     0x7ff9f688908b - napi_register_module_v1
  38:     0x7ffa9235257d - BaseThreadInitThunk
  39:     0x7ffa9372af28 - RtlUserThreadStart
```

### Environment & setup

- OS: Windows
- Database: MySQL
- Node.js version: 20.13.1


### Prisma Version

```
5.7.0
```
",,
2499635868,25136,bug(cli): `prisma format` does not format files other than `schema.prisma` when using `prismaSchemaFolder` preview feature,"### Bug description

Running the `prisma format` command on a directory with a `schema.prisma` file and a `model.schema` file will only cause the `schema.prisma` file to be formatted. The CLI allows a `--schema` flag to point to a schema file but doing so with the `prismaSchemaFolder` preview feature enabled causes it to error as the native database types found from the datasource provider in `schema.prisma` is not used.

![image](https://github.com/user-attachments/assets/cf0d49e5-d906-44f2-8f42-32e09d70b52c)


### How to reproduce

- Create a Prisma schema folder.
- Enable `prismaSchemaFolder` preview feature.
- Run `prisma format` on the schema folder.
- Run `prisma format --schema=<model schema>` to format a model file.

### Expected behavior

This should ideally format all valid schema files when under a `schema` folder or at least auto detect the datasource provider.

### Prisma information

`schema.prisma`

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""prismaSchemaFolder""]
}

datasource db {
  provider = ""cockroachdb""
  url      = env(""ENGINE_DATABASE_URL"")
}
```

`model.prisma`

```prisma
model Model {
    id String @id @db.String(12)
}
```

### Environment & setup

- OS: Windows
- Database: CockroachDB
- Node.js version: v20.17.0


### Prisma Version

```
prisma                  : 5.19.0
@prisma/client          : 5.19.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.17.0
Query Engine (Node-API) : libquery-engine 5fe21811a6ba0b952a3bc71400666511fe3b902f (at ..\..\..\..\..\..\..\..\..\..\nvm\v20.17.0\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 5fe21811a6ba0b952a3bc71400666511fe3b902f (at ..\..\..\..\..\..\..\..\..\..\nvm\v20.17.0\node_modules\prisma\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.0-31.5fe21811a6ba0b952a3bc71400666511fe3b902f
Default Engines Hash    : 5fe21811a6ba0b952a3bc71400666511fe3b902f
Studio                  : 0.502.0
Preview Features        : prismaSchemaFolder
```
",,
2496465944,25123,`typedSQL` causes deployment errors on Cloudflare Workers due to unresolved node modules,"### Bug description

When deploying an application using Prisma's typedSQL on Cloudflare Workers, an error occurs due to unresolved Node.js built-in modules. The application uses the `@prisma/pg-worker` and `@prisma/adapter-pg-worker` with the `driverAdapters` feature enabled. The deployment fails with the following errors when attempting to use the module generated by `@prisma/client/sql`:

```vbnet
✘ [ERROR] Could not resolve ""fs/promises""

    node_modules/@prisma/client/runtime/library.js:4:1407:
      4 │ ...d_process"")),Jn=k(require(""fs/promises"")),Vr=k(require(""os""));va...
        ╵                              ~~~~~~~~~~~~~

  The package ""fs/promises"" wasn't found on the file system but is built into node. Are you trying to bundle for node? You can use ""platform: 'node'"" to do that, which will remove this error.

✘ [ERROR] Could not resolve ""async_hooks""

    node_modules/@prisma/client/runtime/library.js:21:5329:
      21 │ ...l=k(ti());var Ml=require(""async_hooks""),$l=require(""events""),ql...
         ╵                             ~~~~~~~~~~~~~

  The package ""async_hooks"" wasn't found on the file system but is built into node. Are you trying to bundle for node? You can use ""platform: 'node'"" to do that, which will remove this error.
```

These errors do not occur when not using the `@prisma/client/sql` module.

### How to reproduce

1. Follow the official documentation ""[Deploy to Cloudflare Workers & Pages](https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-cloudflare#postgresql-traditional)""  to set up the application. (At this point, the application deploys successfully, and data retrieval using `.findFirst()` and `.findMany()` works as expected.)
2. Follow the [typedSQL documentation](https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/typedsql) to add `typedSql` to the `previewFeatures`, create raw SQL files, and run `prisma generate --sql` to generate `@prisma/client/sql`.
3. Import the `@prisma/client/sql` module and write a query using `.$queryRawTyped()`.
4. Run `wrangler dev` or `wrangler deploy` to deploy the application. The deployment fails with errors.

### Expected behavior

The application should deploy successfully on Cloudflare Workers without errors related to unresolved Node.js modules. The `typedSQL` feature should work correctly in this environment.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters"", ""typedSql""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model ...
```

```ts
import { Pool } from ""@prisma/pg-worker"";
import { PrismaPg } from ""@prisma/adapter-pg-worker"";
import { PrismaClient } from ""@prisma/client"";
import { myRawSql } from ""@prisma/client/sql"";

const pool = new Pool({ connectionString: env.DATABASE_URL });
const adapter = new PrismaPg(pool);
const prisma = new PrismaClient({ adapter });
prisma.$queryRawTyped(myRawSql());
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.11.1
- Runtime: Cloudflare Workers

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.19.0
@prisma/client          : 5.19.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 5fe21811a6ba0b952a3bc71400666511fe3b902f (at node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli 5fe21811a6ba0b952a3bc71400666511fe3b902f (at node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.0-31.5fe21811a6ba0b952a3bc71400666511fe3b902f
Default Engines Hash    : 5fe21811a6ba0b952a3bc71400666511fe3b902f
Studio                  : 0.502.0
Preview Features        : driverAdapters, typedSql
```
",,
2495781397,25122,Query Fails with Invalid API Key Error Despite Correct .env Setup,"### Bug description

Despite having `DATABASE_URL` and `DIRECT_DATABASE_URL` correctly set up in the `.env` file, all queries via Prisma ORM fail with an invalid API key error.

### Error Message
```
This request could not be understood by the server: {""type"":""UnknownJsonError"",""body"":{""code"":""P6002"",""message"":""The provided API Key is invalid. Reason: Validation of API Key failed.""}}
```

### Full Error Stack
```
[0] PrismaClientKnownRequestError: 
[0] Invalid `prisma.user.findFirst()` invocation:
[0]
[0]
[0] This request could not be understood by the server: {""type"":""UnknownJsonError"",""body"":{""code"":""P6002"",""message"":""The provided API Key is invalid. Reason: Validation of API Key failed.""}} (The request id was: 8bb0216a4fe05a24)
[0]     at Hr.handleRequestError (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\@prisma\client\runtime\edge.js:20:7987)        
[0]     at Hr.handleAndLogRequestError (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\@prisma\client\runtime\edge.js:20:7295)  
[0]     at Hr.request (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\@prisma\client\runtime\edge.js:20:6985)
[0]     at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[0]     at async l (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\@prisma\client\runtime\edge.js:29:9558)
[0]     at async login (webpack-internal:///(action-browser)/./src/app/(auth)/login/actions.ts:30:30)
[0]     at async D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\compiled\next-server\app-page.runtime.dev.js:39:418   
[0]     at async rS (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\compiled\next-server\app-page.runtime.dev.js:38:7978)
[0]     at async r4 (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\compiled\next-server\app-page.runtime.dev.js:41:1256)
[0]     at async doRender (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\base-server.js:1418:30)
[0]     at async cacheEntry.responseCache.get.routeKind (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\base-server.js:1579:28)
[0]     at async DevServer.renderToResponseWithComponentsImpl (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\base-server.js:1487:28)
[0]     at async DevServer.renderPageComponent (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\base-server.js:1911:24)
[0]     at async DevServer.renderToResponseImpl (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\base-server.js:1949:32)
[0]     at async DevServer.pipeImpl (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\base-server.js:916:25)     
[0]     at async NextNodeServer.handleCatchallRenderRequest (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\next-server.js:272:17)
[0]     at async DevServer.handleRequestImpl (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\base-server.js:812:17)
[0]     at async D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\dev\next-dev-server.js:339:20
[0]     at async Span.traceAsyncFn (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\trace\trace.js:154:20)
[0]     at async DevServer.handleRequest (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\dev\next-dev-server.js:336:24)
[0]     at async invokeRender (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\lib\router-server.js:173:21)     
[0]     at async handleRequest (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\lib\router-server.js:350:24)    
[0]     at async requestHandlerImpl (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\lib\router-server.js:374:13)
[0]     at async Server.requestListener (D:\Projects\Avocodos\avocodos-web\frontend\node_modules\next\dist\server\lib\start-server.js:141:13) {
[0]   code: 'P5000',
[0]   clientVersion: '5.20.0-dev.2',
[0]   meta: { modelName: 'User' }
[0] }
```

### Steps Taken

1. Verified correct setup of `DATABASE_URL` and `DIRECT_DATABASE_URL` in `.env` file.
2. Recreated the project.
3. Followed the tutorial for setting up Accelerate and verified multiple times.

### Question

Does anyone know what might be causing this issue? Any help or suggestions would be greatly appreciated.

### How to reproduce

N/A


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""fullTextSearch""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_DATABASE_URL"")
}
```

```ts
import { PrismaClient } from ""@prisma/client/edge"";
import { withAccelerate } from '@prisma/extension-accelerate'

const prismaClientSingleton = () => {
  return new PrismaClient().$extends(withAccelerate())
};

declare global {
  var prisma: ReturnType<typeof prismaClientSingleton> | undefined;
}

const prisma =
  global.prisma ??
  (typeof window === 'undefined' ? prismaClientSingleton() : undefined);

if (process.env.NODE_ENV !== ""production"") global.prisma = prisma;

export default prisma;

```


### Environment & setup

- OS: Windows 11
- Database: Tembo
- Node.js version: v22.7.0


### Prisma Version

```
prisma                  : 5.20.0-dev.2
@prisma/client          : 5.20.0-dev.2
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v22.7.0
Query Engine (Node-API) : libquery-engine 5fe21811a6ba0b952a3bc71400666511fe3b902f (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 5fe21811a6ba0b952a3bc71400666511fe3b902f (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.19.0-31.5fe21811a6ba0b952a3bc71400666511fe3b902f
Default Engines Hash    : 5fe21811a6ba0b952a3bc71400666511fe3b902f
Studio                  : 0.502.0
Preview Features        : fullTextSearch
```
",,
2494536975,25118,"TypedSQL Error while generating client, ""prepared statement ""n"" does not exist"" using PostgreSQL NeonTech","# Context
I've installed the latest prisma version in my project and I'm testing the new preview feature `typedsql`.
I'm using NeonTech PostgreSQL database, with a db connection string (with connection pooling) like this:
`postgresql://[user]:[pass]@[endpoint]-pooler.us-east-2.aws.neon.tech/[db]?sslmode=require&connect_timeout=10`

I've read all the docs prisma offers so far:
- Documentation: https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/typedsql
- Announcement blog post: https://www.prisma.io/blog/announcing-typedsql-make-your-raw-sql-queries-type-safe-with-prisma-orm

# Description
I'm having the following error when running the script `yarn prisma generate --sql`:

```bash
Prisma schema loaded from modules/prisma/schema.prisma
Error: Errors while reading sql files:

ERROR: prepared statement ""s2"" does not exist
```

This is my `package.json` config. I load envs with dot-env before running any prisma script and I've checked that both the `DATABASE_URL` and `DATABASE_DIRECT_URL` envs are set.

```json
...
 ""scripts"": {
 ...
    ""prisma"": ""node ../../load-env -- prisma"",
    ""prisma:generate"": ""yarn run prisma generate --sql"",
 ...
  },
""prisma"": {
    ""schema"": ""./modules/prisma/schema.prisma""
  },
...
```

I created an .sql file under the `/prisma/sql` directory with the name `getModelCategories.sql`

```sql
-- getModelCategories.sql file
SELECT DISTINCT
    pi.model,
    c.name AS ""categoryName"",
    c.slug AS ""categorySlug""
FROM 
    public.""PromptItem"" pi
JOIN 
    public.""PromptCategories"" pc ON pi.id = pc.""promptId""
JOIN 
    public.""Category"" c ON pc.""categoryId"" = c.id
ORDER BY 
    pi.model asc, c.name;
```

And my `schema.prisma` file here

```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""typedSql""]
}
...
...
datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DATABASE_DIRECT_URL"")
}
```

I haven't had any issues with prisma before when generating the schema. I guess this previewFeature needs to connect to the database to validate the .sql query.


I'm sure that my connection string is correct and is currently working in development and production.

I would be grateful if the Prisma team could help me resolve this issue. Any guidance or support would be greatly appreciated!! Thank you in advance for your assistance.",,
2494523210,25117,Prisma migrate not dropping index after schema update,"### Bug description

When i remove an index from _schema.prisma_ file and run the command `prisma migrate dev`, no migration file is generated to drop the index in the database


### How to reproduce

1. I have this model:
```
model User {
  id Int    @id @default(autoincrement())
  email  String
  mobile  String
  company_id  Int 

  @@index([mobile], map: ""users_mobile__index"")
  @@index([company_id],  map: ""users_company__index"")
  @@map(""users"")
}
``` 

2. Remove index for mobile
```
model User {
  id  Int    @id @default(autoincrement())
  email  String
  mobile  String
  company_id  Int 

  @@index([company_id],  map: ""users_company__index"")
  @@map(""users"")
}
```
3. Run `prisma migrate dev`
Prisma says: _Already in sync, no schema change or pending migration was found._ 

### Expected behavior

I expect migration file with: 
`DROP INDEX users_mobile__index`

### Prisma information

```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}
```


### Environment & setup


- OS                   : ubuntu 22 (same for windows)
- Node.js            : v20.15.1
- Database         : mariaDb:10.5

### Prisma Version

- prisma             : 5.17.0
- @prisma/client: 5.17.0",,
2493912761,25114,FindMany slow performance (Version:- 5.17.0),"### Bug description

So currently I am using Nexus + Pal + Prisma + MySQL (MARIADB). I noticed some performance issues. I inserted 9561 entries in the user table and enabled the Prisma logs
`log: [
        {
          emit: ""event"",
          level: ""query"",
        },],`
      

     
     instance.$on(""query"", (e) => {
      console.log({
        query: e.query,
        params: e.params,
        duration: e.duration / 1000,
      });
    });`
    
   so log duration time is `0.028` but the query takes more than 4-5sec with 13k entries. But when I reverted to version 5.8.0, it worked fine as expected
   
![image](https://github.com/user-attachments/assets/17af9306-d438-4290-8cce-f97370b9ba0c)


### How to reproduce

1 create a schem.prisma

```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Company {
  id             Int      @id @default(autoincrement())
  user           String   @db.VarChar(50)
  creation_date  DateTime @db.Date
  User           User[]

  @@map(""admin"")
}

model User {
  id                          Int       @id @default(autoincrement())
  username                    String?   @db.VarChar(255)
  full_name                   String    @db.VarChar(255)
  password                    String?   @db.VarChar(255)
  company_id                  Int?      @map(""company"")
  Company                     Company?  @relation(fields: [company_id], references: [id], onDelete: NoAction, map: ""company_id_key"")

  @@index([company_id], map: ""company"")
  @@map(""users"")
}
```
2 server.ts
```
import { makeSchema } from ""nexus"";
import * as types from ""./test/src/generated/types/index"";
import { paljs } from ""@paljs/nexus"";
import express from ""express"";
import parser from ""body-parser"";
import { ApolloServer } from ""@apollo/server"";
import { ApolloServerPluginDrainHttpServer } from ""@apollo/server/plugin/drainHttpServer"";
import { expressMiddleware } from ""@apollo/server/express4"";
import cors from ""cors"";
import { PrismaClient } from ""@prisma/client"";
import http from ""http"";

const { json } = parser;

const createContext = () => {
  const ret = {
    select: {},
    backendBridgeAccess: false,
  };
  ret.prisma = (() => {
    const instance = new PrismaClient({
      datasources: {
        db: {
          url: ""<URL>"",
        },
      },
      log: [
        {
          emit: ""event"",
          level: ""query"",
        },
      ],
    });
    instance.$on(""query"", (e) => {
      console.log({
        query: e.query,
        params: e.params,
        duration: e.duration / 1000,
      });
    });
    return instance;
  })();
  return ret;
};

export const schema = makeSchema({
  types: [types],
  plugins: [paljs()],
  sourceTypes: {
    modules: [
      {
        module: ""@prisma/client"",
        alias: ""prisma"",
      },
    ],
  },
});
export async function createApp() {
  const app = express();
  const httpServer = http.createServer(app);

  app.use(express.json({ limit: ""50mb"" }));
  app.get(""/"", function (_, res) {
    res.send(""<h1>Private</h1>"");
  });

  const server = new ApolloServer({
    schema: schema,
    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
    introspection: true,
    persistedQueries: false,
  });

  app.set(""trust proxy"", 1);
  await server.start();

  app.use(
    ""/graphql"",
    cors(),
    json(),
    expressMiddleware(server, {
      context: async (req) => createContext(req),
    })
  );

  return app;
}

createApp()
  .then((e) => {
    e.listen(3999, () => {
      console.log(`Server running on http://localhost:${3999}`);
    });
  })
  .catch((error) => {
    console.log(""errpr------"", error);
  });
```
3 pal.json

```
{
  ""backend"": {
    ""generator"": ""nexus"",
    ""output"": ""test/src/generated/types"",
    ""models"": [""User"", ""Company""]
  }
}
```
4 package.json
```
{
  ""name"": ""dummy"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""server.ts"",
  ""type"": ""module"",
  ""scripts"": {
    ""test"": ""echo \""Error: no test specified\"" && exit 1""
  },
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""@apollo/server"": ""4.11.0"",
    ""@paljs/cli"": ""7.0.2"",
    ""@paljs/nexus"": ""7.0.2"",
    ""@prisma/client"": ""5.17.0"",
    ""body-parser"": ""1.20.2"",
    ""cors"": ""2.8.5"",
    ""express"": ""4.19.2"",
    ""graphql"": ""16.8.1"",
    ""http"": ""0.0.1-security"",
    ""nexus"": ""1.3.0"",
    ""prisma"": ""5.17.0"",
    ""ts-node"": ""10.9.2""
  },
  ""devDependencies"": {
    ""tsx"": ""^4.19.0""
  }
}
```
5 npx prisma generate
6 yarn pal g -c=pal.json
7 npx tsx server.ts 

![image](https://github.com/user-attachments/assets/ac803a9e-71aa-498b-a454-b6f90e41e659)

![image](https://github.com/user-attachments/assets/523bbe07-ebc6-44e5-b6e2-5fdab185d07e)


### Expected behavior

Version:- 5.8.0 (NOTE:-  I didn't try 5.9.0)

1 package.json

```
{
  ""name"": ""dummy"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""server.ts"",
  ""type"": ""module"",
  ""scripts"": {
    ""test"": ""echo \""Error: no test specified\"" && exit 1""
  },
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""@apollo/server"": ""4.11.0"",
    ""@paljs/cli"": ""7.0.2"",
    ""@paljs/nexus"": ""7.0.2"",
    ""@prisma/client"": ""5.8.0"",
    ""body-parser"": ""1.20.2"",
    ""cors"": ""2.8.5"",
    ""express"": ""4.19.2"",
    ""graphql"": ""16.8.1"",
    ""http"": ""0.0.1-security"",
    ""nexus"": ""1.3.0"",
    ""prisma"": ""5.8.0"",
    ""ts-node"": ""10.9.2""
  },
  ""devDependencies"": {
    ""tsx"": ""^4.19.0""
  }
}
```
2 npm i --force
3 npx prisma generate
4 yarn pal g -c=pal.json
5 npx tsx server.ts
6 hit the same query

![image](https://github.com/user-attachments/assets/9378084e-d259-4528-bf1d-c3b10dd82380)
![image](https://github.com/user-attachments/assets/11d0bd7c-f685-4aa8-a0b1-11093256d9d6)


so seems like something wrong with the new version of prisma

### Prisma information

QUERY
```
query ($take: Int){
  findManyUser(orderBy: { full_name: asc }, take: $take) {
    id
    name: full_name
    deleted
    image
  }
}
```

variables

```
{
  ""take"": 12000,
}
```

### Environment & setup

- OS: Windows
- Database: MariaDB 10.5.25
- Node.js version: v20.15.1


### Prisma Version

```
5.17.0
```
",,
2492948125,25109,TypedSQL Nested Directory Structure,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
I had recently decided to move forward with prisma for migrations but kysley for raw queries and query building. With this new feature, I'm considering dropping kysely from the mix. However, it looks like you can't structure the raw queries under `prisma/sql` into different directories. I'm going 100% raw queries, and would like to be able to organize the queries by domain/repository that's using them.

## Suggested solution
<!-- A clear and concise description of what you want to happen. -->
I would like to be able to have
```
/prisma/
/prisma/sql/
/prisma/sql/user/
/prisma/sql/user/getUsers.sql
...
```
Rather than
```
/prisma/
/prisma/sql/
/prisma/sql/getUsers.sql
...
```
And be able to import
```
import { getUsers } from '@prisma/client/sql/user'
```

---

Awesome feature and perfect timing for me! Thanks!",,
2492017901,25104,relationJoins: Broken query with nested filter in many-to-many through one-to-many relation,"@key-moon wrote in https://github.com/prisma/prisma/discussions/22288#discussioncomment-10464782:

> Hey. Today, I encountered a bug that this feature flag seems to have caused.
> 
> Following a query with a schema like `A <-1--N-> B <-N--N-> C` generates an invalid SQL Query, and it causes a `The column t3.name does not exist in the current database.` error.
> ```ts
> await prisma.a.findFirst({
>   select: {
>     bs: {
>       where: {
>         cs: {
>           every: {
>             name: ""a""
>           },
>         },
>       }
>     }
>   }
> });
> ```
> 
> ## Client Error
> ```
> PrismaClientKnownRequestError: 
> Invalid `prisma.a.findFirst()` invocation in
> ./script.ts:6:18
> 
>   3 const prisma = new PrismaClient()
>   4 
>   5 async function main() {
> → 6   await prisma.a.findFirst(
> The column `t3.name` does not exist in the current database.
>     at Ln.handleRequestError (./node_modules/.pnpm/@prisma+client@5.19.0_prisma@5.19.0/node_modules/@prisma/client/runtime/library.js:121:7753)
>     at Ln.handleAndLogRequestError (./node_modules/.pnpm/@prisma+client@5.19.0_prisma@5.19.0/node_modules/@prisma/client/runtime/library.js:121:7061)
>     at Ln.request (./node_modules/.pnpm/@prisma+client@5.19.0_prisma@5.19.0/node_modules/@prisma/client/runtime/library.js:121:6745)
>     at async l (./node_modules/.pnpm/@prisma+client@5.19.0_prisma@5.19.0/node_modules/@prisma/client/runtime/library.js:130:9633) {
>   code: 'P2022',
>   clientVersion: '5.19.0',
>   meta: { modelName: 'A', column: 't3.name' }
> }
> ```
> 
> ## DB Error
> ```
> ERROR:  column t3.name does not exist at character 296
> STATEMENT:  SELECT ""t1"".""id"", ""A_bs"".""__prisma_data__"" AS ""bs"" FROM ""public"".""A"" AS ""t1"" LEFT JOIN LATERAL (SELECT COALESCE(JSONB_AGG(""__prisma_data__""), '[]') AS ""__prisma_data__"" FROM (SELECT ""t4"".""__prisma_data__"" FROM (SELECT JSONB_BUILD_OBJECT('id', ""t3"".""id"", 'aId', ""t3"".""aId"") AS ""__prisma_data__"", ""t3"".""name"" FROM (SELECT ""t2"".* FROM ""public"".""B"" AS ""t2"" WHERE ""t1"".""id"" = ""t2"".""aId"" /* root select */) AS ""t3"" /* inner select */) AS ""t4"" WHERE (""t4"".""id"") NOT IN (SELECT ""t1"".""A"" FROM ""public"".""_BToC"" AS ""t1"" INNER JOIN ""public"".""C"" AS ""j1"" ON (""j1"".""id"") = (""t1"".""B"") WHERE ((NOT ""j1"".""name"" = $1) AND ""t1"".""A"" IS NOT NULL)) /* middle select */) AS ""t5"" /* outer select */) AS ""A_bs"" ON true LIMIT $2
> ```
> 
> I've created a PoC repository, so I would appreciate it if you could take a look.
> 
> https://github.com/key-moon/prisma-relationjoins-bug-reproduce
> 
> Thank you!

The rendered query looks like this:

```sql
SELECT
  ""t1"".""id"",
  ""A_bs"".""__prisma_data__"" AS ""bs""
FROM
  ""public"".""A"" AS ""t1""
  LEFT JOIN LATERAL (
    SELECT
      COALESCE(JSONB_AGG(""__prisma_data__""), '[]') AS ""__prisma_data__""
    FROM
      (
        SELECT
          ""t4"".""__prisma_data__""
        FROM
          (
            SELECT
              JSONB_BUILD_OBJECT('id', ""t3"".""id"", 'aId', ""t3"".""aId"") AS ""__prisma_data__"",
              ""t3"".""name""
            FROM
              (
                SELECT
                  ""t2"".*
                FROM
                  ""public"".""B"" AS ""t2""
                WHERE
                  ""t1"".""id"" = ""t2"".""aId""
                  /* root select */
              ) AS ""t3""
              /* inner select */
          ) AS ""t4""
        WHERE
          (""t4"".""id"") NOT IN (
            SELECT
              ""t1"".""A""
            FROM
              ""public"".""_BToC"" AS ""t1""
              INNER JOIN ""public"".""C"" AS ""j1"" ON (""j1"".""id"") = (""t1"".""B"")
            WHERE
              (
                (NOT ""j1"".""name"" = $1)
                AND ""t1"".""A"" IS NOT NULL
              )
          )
          /* middle select */
      ) AS ""t5""
      /* outer select */
  ) AS ""A_bs"" ON true
LIMIT
  $2
```

The `""t3"".""name""` selection is bogus, the column does not exist in this table (it is a field of `C` model, not `B`) and it's not actually used further in the query.",,
2491994190,25103,"Nested where-clause fails with ""does not exist in the current database"" when relationJoins is enabled","### Bug description

After upgrading to version 5.19.0, one of our queries has started to fail with the following error:

```
The column `t70.deletedAt` does not exist in the current database.
```

The column that's referenced in the error _does_ in fact exist in the database.
Disabling the `relationJoins` preview feature resolves the issue, and the query works as expected. The Typescript types also don't complain about the attribute.

I noticed that the release notes reference the following issue, which references the same error message:
https://github.com/prisma/prisma/issues/23742

### How to reproduce

Using the `contactDetailsIncludeInput` described below will cause the issue to occur on our end.
Removing the `deletedAt: null` condition resolves the error.

### Expected behavior

_No response_

### Prisma information

```ts
export const contactDetailsIncludeInput = {
  identities: {
    include: {
      subscriptions: {
        where: {
          optedOutAt: null,
          audience: {
            deletedAt: null  <------- This is the one Prisma complains about
          }
        },
        include: {
          audience: true
        }
      }
    }
  }
} satisfies Prisma.ContactInclude
```


### Environment & setup

- OS: macOS
- Database: Postgres
- Node.js version: v20.16.0


### Prisma Version

```
5.19.0
```
",,
2491702863,25101,[regression] `Schema engine error` in Prisma 5.19.0,"### Bug description

Version 5.19.0 appears broken to me.  `npx prisma migrate dev --name init`  simply gives error 

```
risma:getConfig Using getConfig Wasm +0ms
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
Error: Error: Schema engine error:

    at Cf (/home/satadhi.halde/Documents/nestjs-practise/prisma-prac/node_modules/prisma/build/index.js:432:1600)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async nl (/home/satadhi.halderDocuments/nestjs-practise/prisma-prac/node_modules/prisma/build/index.js:513:1789)
    at async Sm.parse (/home/satadhi.halderDocuments/nestjs-practise/prisma-prac/node_modules/prisma/build/index.js:943:72)
    at async s2t (/home/satadhi.halderDocuments/nestjs-practise/prisma-prac/node_modules/prisma/build/index.js:2002:1678)

```

### How to reproduce

Followed steps in [nestjs docs](https://docs.nestjs.com/recipes/prisma)

The env file looks like this. 


```
DATABASE_URL=""mysql://root:password@127.0.0.1:3306/nestjs_prisma""

MYSQL_DATABASE=nestjs_prisma
MYSQL_ROOT_PASSWORD=password
```

I use docker-compose.yaml to run sql

```
services:
  mysql:
    image: mysql
    env_file:
      - .env
    ports:
      - '3306:3306'
```

### Expected behavior

It should just run normally. I tried using  version `5.18.0` everything works expected

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Product {
  id   Int    @id @default(autoincrement())
  name String
}


```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> Ubuntu 22.04.2 LTS
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> MySQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> 20.14.0


### Prisma Version

```
5.19.0
```
",,
2491568250,25099,Support @prisma/pg-worker on node.js (for remix vite:dev),"## Problem

(The title request is just one suggestion to solve the problem)

As a result of the limitations of the remix dev server(node.js), workerd and `@prisma/pg-worker`, incremental builds are not possible in the development environment. Details are given below.

- prisma/adapter-pg-worker is not available in the production environment and in the remix postbuild workerd (`wrangler pages dev ./build/client`), but not for `remix vite:dev` (node).
- Conversely, prisma/adapter-pg works in `remix vite:dev` (node), but not in the cloudflare workerd environment because it cannot resolve node-builtins referenced by `pg`.

These are exclusive relationships.

As a result, development environments employing remix + cloudflare-pages + prisma/adapter-pg-worker will have to give up the `remix vite:dev` incremental build environment. This is very stressful as it requires a full build for every code change.

## Suggested solution

wrangler pages dev | build fails the moment you touch `pg` in static analysis.

```ts
import pg from 'pg';
const Pool = pg.Pool;
```

In prisma/adapter-pg-worker in a workerd environment, it seems to be failing at the part where it goes to resolve the `cloudflare:*` import.

If the following code fallsback properly on node.js, `remix vite:dev` should work with `prisma/adapter-pg-worker`.

```ts
import { Pool } from '@prisma/pg-worker';
```

As far as I know, prisma/adapter-pg-worker refers to prisma/adatpter-pg.

https://github.com/prisma/prisma/blob/main/packages/adapter-pg-worker/src/pg.ts#L14

(I have no idea about this feasibility yet)

## Alternatives

I first tried the following static analysis and TreeShake solution.

```ts
// load-context.ts
// ...

  let db: PrismaClient;.
  if (process.env.NODE_ENV === 'production') {
    const pool = new Pool({
      connectionString: context.cloudflare.env.DATABASE_URL
    });
    const adapter = new PrismaPgWorker(pool);
    db = new PrismaClient({ adapter }); }
  } else {
    const { default: PG } = await import('pg'); }
    const { PrismaPg } = await import('@prisma/adapter-pg');
    const pool = new PG.Pool({
      connectionString: context.cloudflare.env.DATABASE_URL
    });
    const adapter = new PrismaPg(pool);
    db = new PrismaClient({ adapter });
  }
````

This will not work, because wrangler pages do not have the ability to do static replacing.

I ended up creating a project that replaces the entry point during development and startup. This works fine, but it is a non-trivial hack and adds boilerplate. Also, using commands other than those provided in npm scripts is prone to inconsistencies.

https://github.com/mizchi/remix-supabase-prisma-example

https://github.com/mizchi/remix-supabase-prisma-example/blob/main/package.json#L7-L8

## Additional context

- `remix vite:build` spits out `build/client` and `build/server`
- `wrangler pages` resolve code via paths like `functions/[[path]].ts` => `build/server`, which is out of vite's control and leaves no room for static replacement",,
2485771212,25087,Option to disable automatic full select on create/update operations,"## Problem

Prisma's default behavior of automatically selecting all columns on create and update operations leads to several issues:

Performance overhead: Unnecessarily retrieving all fields, especially in large tables, can impact performance.

Code verbosity: Having to add select: { id: true } to every create and update operation increases code length and reduces readability.

Inefficient for modern cloud-based databases: With the increasing use of on-demand RDBMS services, retrieving unnecessary data can lead to increased costs and reduced efficiency.

As developers who obsess over reducing code lines, it's frustrating to add an extra line (e.g., select: { id: true }) for every operation, even with a generous printWidth of 120 in Prettier config.

This issue was raised 3 years ago, but the lack of response or action from the Prisma team is disappointing.

## Suggested solution

I propose adding updateOnly and createOnly options to Prisma operations.

These would perform the respective operations without automatically selecting any fields, addressing the issues mentioned above.

Consider implementing these options as follows:

```typescript
return await prismaService.user.createOnly({
  data: { name: ""youngwoo lee"", email: ""rolldeep@stepmerrily.com"" }
}); 
```
```typescript
return await prismaService.user.updateOnly( { where: { id: 1 },  data: { name: ""rolldeep-stepmerrily"" } } );
```


This approach would offer several benefits:

1. Performance improvement by eliminating unnecessary data fetching.
2. Reduction in code verbosity, aligning with our goal of writing concise code.
3. Better efficiency in cloud environments where data transfer affects costs.


I believe this feature would significantly enhance Prisma's utility, especially for projects with performance-critical requirements or those aiming for lean, efficient database interactions.

 

## Additional context
Prisma is already the best ORM. 

Addressing this long-standing issue would further enhance its efficiency and developer experience, solidifying its position as the unrivaled leader in the field.

This improvement would perfectly complement Prisma's existing strengths, making an exceptional tool even better.
",,
2484940740,25081,Concurrent `upsert` on MySQL results in Unique constraint error rather than one insert + one update,"### Bug description

When I run tests in my app in parallel that have helpers that create users in the DB, i get this error:

```
 FAIL  ../test/cartridge.test.ts > /api/cartridge > post /api/cartridge - create a cartridge
PrismaClientKnownRequestError:
Invalid `prisma.user.upsert()` invocation:


Unique constraint failed on the constraint: `users_email_key`
 ❯ _n.handleRequestError ../node_modules/.pnpm/@prisma+client@5.18.0_prisma@5.18.0/node_modules/@prisma/client/runtime/library.js:121:7749
 ❯ _n.handleAndLogRequestError ../node_modules/.pnpm/@prisma+client@5.18.0_prisma@5.18.0/node_modules/@prisma/client/runtime/library.js:121:7057
 ❯ _n.request ../node_modules/.pnpm/@prisma+client@5.18.0_prisma@5.18.0/node_modules/@prisma/client/runtime/library.js:121:6741
 ❯ l ../node_modules/.pnpm/@prisma+client@5.18.0_prisma@5.18.0/node_modules/@prisma/client/runtime/library.js:130:9355
 ❯ Module.createUser utils/user.ts:11:10
      9|   let user: User | null = null
     10|
     11|   user = await prisma.user.upsert({
       |          ^
     12|     where: { email: info.email },
     13|     create: {
 ❯ userFromEmail ../test/auth.ts:38:28
 ❯ Module.actingAs ../test/auth.ts:44:16
 ❯ ../test/cartridge.test.ts:12:28

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 'P2002', clientVersion: '5.18.0', meta: { modelName: 'User', target: 'users_email_key' }, batchRequestIdx: undefined }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
```

Although if i disable parallelism and only allow 1 thread this error never shows up.

### How to reproduce

create an insert and/or upsert to a user table with a @unique on email, run 2 at the same time.

### Expected behavior

1 should get created, the other should fail and/or upsert

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model User {
  id         BigInt      @id @default(autoincrement())
  email      String      @unique
  name       String?
  avatar     String?     @db.VarChar(1600)
  providers  Provider[]
  sessions   Token[]
  pens       Pen[]
  cartridges Cartridge[]
  shots      Shot[]
  payload    Json
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map(""users"")
}

model Provider {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  user      User     @relation(fields: [userId], references: [id])
  name      String?
  avatar    String?  @db.VarChar(1600)
  payload   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@map(""providers"")
}

model Token {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt
  user       User     @relation(fields: [userId], references: [id])
  hash       String   @unique
  source     String
  ip         String
  agent      String
  location   Json
  // coordinate Unsupported(""Point"")
  coordinate String   @default(""30.2423 -97.7672"")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map(""tokens"")
}

```

```ts
  user = await prisma.user.upsert({
    where: { email: info.email },
    create: {
      email: info.email,
      name: info.name,
      avatar: info.avatar,
      payload: (info.payload ? info.payload : ({ roles: { admin: false } } as UserPayload)) as unknown as Prisma.JsonObject,
      providers: {
        create: [
          {

            name: provider,
            avatar: info.avatar,
            payload: oauthPayload as unknown as Prisma.JsonObject,
          },

        ],
      },
    },
    update: {},
  }) as unknown as User```


### Environment & setup

- OS: macOS
- Database: MySQL
- Node.js version: v20.16.0


### Prisma Version

```
❯ npx prisma -v
Environment variables loaded from .env
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.16.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
Preview Features        : prismaSchemaFolder
```
",,
2484707072,25079,An ISO timestamp anywhere in a `String` column causes a `PrismaClientKnownRequestError`,"### Bug description

I've spent the last few months working on a Discord bot called Puddleshine. It's a gacha card collector bot that includes all of the characters from the popular novel series Warriors by Erin Hunter. The bot is written in TypeScript and runs as a serverless function on Cloudflare Workers following Discord's [official tutorial](https://discord.com/developers/docs/tutorials/hosting-on-cloudflare-workers). D1 is the primary database and I query it using Prisma by following a [tutorial in Cloudflare Docs](https://developers.cloudflare.com/d1/tutorials/d1-and-prisma-orm/).

The collector cards require art and I've thus had members of the community design and submit Warriors fanart for me to add to the bot with credit. Every time you roll a card, it also shows the name of the person who designed it. Then, you can use the command `/catcha artist (artistname)` to see that artist's profile and a list of all of the cards they've designed. The profile is supposed to let the artist include links to their social medias, for instance, for some additional credit. When viewing your own artist profile, there's an additional button to edit the profile description. The artist names, discord user IDs, and profile descriptions are stored in a Cloudflare D1 database with Prisma. It looks something like this:

![image](https://github.com/user-attachments/assets/7eb58b35-cda2-4e19-92f6-4a1ca9576540)
![image](https://github.com/user-attachments/assets/1a61fd6c-a0bc-45d4-b059-df48e6580088)

However, I recently noticed something odd. If you put an ISO date string (e.g. `2024-08-24T15:50:04.382Z`) anywhere in your profile description (which anyone who has submitted art to the bot could do) it will completely break the `/catcha artist` command for everyone due to a bug in Prisma.

![image](https://github.com/user-attachments/assets/9e8ba289-3a80-4f4e-9687-af9465235e48)

In this screenshot I've set my description (used the identical test bot Puddlepaw to do it because I don't want to mess with the production bot's database) to `This is just a test description, here's the date string: 2024-08-24T15:09:40.854Z` and I'm trying to run `/catcha artist Bristlefrost` but it fails with a Prisma error telling me it has failed to convert the entire column to `DateTime` even though I've never specified its data type as `DateTime` in my schema. It's specified as `String?` in my schema and always has been. Prisma is up-to-date and I've run all of the migrations and `prisma generate`. There's no way the data type is set as DateTime anywhere. It must therefore be a bug in Prisma.

I'd ideally not want to have any game-breaking exploits in my bot and would like to get it sorted as quickly as possible. I'm not very familiar with the Prisma codebase but I could probably just fork the repo and locate where it's trying to do the conversion and simply comment it out to disable it as a temporary workaround. But I have no clue how to navigate this codebase.

### How to reproduce

Simply attempt to query a `String` column that contains an ISO timestamp somewhere, it doesn't matter where, from a Cloudflare D1 database through Prisma. I've tried it in multiple places and it fails every time. I haven't tried any other databased as D1 is what I use for my project.


### Expected behavior

I'd expect Prisma to return the `description` as string like it's defined in my schema. I didn't specify `DateTime` as the type in the `ArtistProfile` model so I don't want Prisma to attempt to convert it into a date automatically just because someone happens to have put an ISO timestamp somewhere in their description. It should be treated as plain text like I've specified in the schema. I would expect it to automatically convert it if I specified `DateTime` as the type in my schema, but I haven't in this case.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model ArtistProfile {
	name         String   @id @unique
	displayName  String?  @map(""display_name"")

	discordId  String?  @map(""discord_id"")

	description  String?

	@@index([discordId])
	@@map(""artist_profiles"")
}
```

```ts
// artist-db.ts
async function findArtistProfile(name: string, prisma: D1PrismaClient) {
	return await prisma.artistProfile.findUnique({
		where: {
			name: name.toLowerCase(),
		},
	});
}

// In another file for the artist subcommand
async execute(options) {
	const { artist } = parseCommandOptions(options.commandOptions);

	if (artist === undefined || artist.type !== DAPI.ApplicationCommandOptionType.String)
		return simpleEphemeralResponse('No artist option provided');

	const artList = listArtistArt(artist.value);
	if (artList.length === 0) return embedMessageResponse(errorEmbed('No art found with this input.'));

	const artistProfile = await artistDB.findArtistProfile(artist.value, options.env.PRISMA); // This is where the error is thrown
}
```


### Environment & setup

- OS: I develop my project in WSL (Ubuntu 24.04 LTS) on Windows 11 but the code runs on Cloudflare Workers
- Database: Cloudflare D1 (SQLite)
- Node.js version: v22.5.1


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.5.1
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
Preview Features        : driverAdapters
```
",,
2484438736,25073,Large JSONB error.,"### Bug description

From morning i getting following error.

```
total size of jsonb array elements exceeds the maximum of 268435455 bytes
```

Now to check which column in my table is throwing this error. i executed following in datagrip.

```
DO $$
    DECLARE
        rec RECORD;
        tbl RECORD;
        col_name TEXT;
        col_size BIGINT;
    BEGIN
        FOR tbl IN
            SELECT table_schema, table_name
            FROM information_schema.tables
            WHERE table_schema = 'public'  -- Adjust schema if necessary
            LOOP
                FOR rec IN
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_schema = tbl.table_schema AND table_name = tbl.table_name AND data_type = 'jsonb'
                    LOOP
                        EXECUTE format('SELECT max(pg_column_size(%I)) FROM %I.%I', rec.column_name, tbl.table_schema, tbl.table_name) INTO col_size;
                        RAISE NOTICE 'Table: %, Column: %, Size: %', tbl.table_name, rec.column_name, col_size;

                        IF col_size > 268435455 THEN
                            RAISE NOTICE 'Table: %, Column: % exceeds maximum JSONB size limit!', tbl.table_name, rec.column_name;
                        END IF;
                    END LOOP;
            END LOOP;
    END $$;
```

which outputs following.

```
Table: Logs, Column: output, Size: <NULL>
Table: Test, Column: response, Size: 344
Table: RoutePlan, Column: loadBalancerConfiguration, Size: 261
Table: Sms, Column: dlr, Size: 151
```

Now why i am getting following error. even i know that my json are not that much large. but still this error pops up.

Also is there any possibility that too much include can cause this issue ?

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Sms {
  id                           String                   @id @unique @default(cuid())
  createdAt                    DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt                    DateTime                 @default(now()) @updatedAt @db.Timestamp(6)
  receiptId                    String?
  destinationAddress           String?
  sourceAddress                String?
  message                      String?
  originalCopyOfMessage        String?
  transformedSourceAddress     String?
  isFakeDlr                    Boolean?                 @default(false)
  submittedAt                  DateTime?
  doneAt                       DateTime?
  error                        String?
  encoding                     SMS_BUILT_TYPE?          @default(TEXT)
  status                       SMS_STATUS
  registeredDelivery           SMPP_REGISTERED_DELIVERY @default(NONE)
  deliveredThrough             PLATFORM_SERVICE_TYPE?
  isUnicodeMessage             Boolean?
  messageChunkSize             Int?
  messageLength                Int?
  remoteIpAddress              String?
  destinationIpAddress         String?
  isDlrSentToTheClient         Boolean?                 @default(false)
  patch_vendorRatePlanId_ref   String?
  patch_customerRatePlanId_ref String?
  dlr                          Json?
  isDeleted                    Boolean?                 @default(false)
  remoteUsername               String?
  persisted__customerrateplan  Json?                    @db.Json
  persisted__vendorplan        Json?                    @db.Json
  persisted__vendorrateplan    Json?                    @db.Json
  persisted__routeplan         Json?                    @db.Json
  persisted__customer          Json?                    @db.Json
  persisted__customersmpp      Json?                    @db.Json
  persisted__smpp              Json?                    @db.Json /// @deprecated(""Use persisted__vendorsmpp instead of persisted__smpp"")
  persisted__vendorsmpp        Json?                    @db.Json
  persisted__vendor            Json?                    @db.Json
  persisted__hlrlookup         Json?                    @db.Json
  CustomerRatePlan             RatePlan?                @relation(""CustomerRatePlanToSmsRef"", fields: [patch_customerRatePlanId_ref], references: [id])
  VendorRatePlan               RatePlan?                @relation(""VendorRatePlanToSmsRef"", fields: [patch_vendorRatePlanId_ref], references: [id])
  RoutePlan                    RoutePlan[]              @relation(""RoutePlanToSms"")
}
```

```ts
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""nativeDistinct"", ""relationJoins""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_POSTGRES_WRITE_URL"")
}
```


### Environment & setup

- OS: Ubuntu LTS ( 22 )
- Database: Postgresql 14
- Node.js version: v20.9.0


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : Not found
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.9.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at .npm/_npx/2778af9cee32ff87/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at .npm/_npx/2778af9cee32ff87/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```
",,
2483951046,25069,allow async `onManifest` in `generatorHandler`,"## Problem

A generator's default output path cannot be asynchronously based on `config.sourceFilePath` because `onManifest` can only be async.

## Suggested solution

Handle an async `onManifest`.

## Alternatives

- Allow the output path to be set in `onGenerate`.
- Allow third party generators to hook into `generatorResolvers` to dynamically determine their output paths like `prisma-client-js` does.

## Additional context

I'm trying to create a generator that reads the output of `prisma-client-js` but `prisma-client-js`'s output path varies dramatically based on environment. All the internal functions for determining this output path are async. Also, `prisma-client-js` calculates its output path asynchronously inside `generatorResolvers`, which is not available to third party generators.

related: https://github.com/electrovir/prisma-frontend/issues/1",,
2480798471,25061,"disconnect or onDELETE: SetNull tries to set all fields to null on combined index, even if it used elsewhere","### Bug description

imagine this:

```
model A {
  id       String @default(cuid())
  tenantId String

  bId String?
  b   B?      @relation(fields: [tenantId, bId], references: [tenantId, id])

  cId String?
  c   C?      @relation(fields: [tenantId, cId], references: [tenantId, id])

  @@id([tenantId, id])
}

model B {
  id       String @default(cuid())
  tenantId String
  A        A[]

  @@id([tenantId, id])
}

model C {
  id       String @default(cuid())
  tenantId String
  A        A[]

  @@id([tenantId, id])
}
```

in this scheme we try to enforce separation of entities by always using combined indexes and also do the relations that way. 

This makes it impossible to accidentially link one B or C to A with a different tenantId.

While this pattern looks sound at first glance, it yields to multiple problems:

- if you delete an B or C, the property b or c of an A can't be set to null, because it will try to set tenantId to null as well, which is not allowed and will throw an error
- similarly if you call disconnect on b or c on A, it will lead to the same problem

Also in creates/updates there are problems

you can create an A with B or C at the same time, but you have to declare the tenantId multiple times. And you can pass different values for tenantIds, which then result in ambiguity. 

I think the bug is that prisma allows this, but yielding to ambiguous results. i think in the disconnect or SetNull case it should not try to set all fields to null, either when they aren't nullable and when they are used in multiple relations



### How to reproduce

1.

```prisma
model A {
  id       String @default(cuid())
  tenantId String

  bId String?
  b   B?      @relation(fields: [tenantId, bId], references: [tenantId, id])

  cId String?
  c   C?      @relation(fields: [tenantId, cId], references: [tenantId, id])

  @@id([tenantId, id])
}

model B {
  id       String @default(cuid())
  tenantId String
  A        A[]

  @@id([tenantId, id])
}

model C {
  id       String @default(cuid())
  tenantId String
  A        A[]

  @@id([tenantId, id])
}
```

2.

```typescript

const a= prisma.a.create({
  tenantId: ""my-tenantId"",
   b: {
      create: {tenantId: ""my-tenantId""} // already shows ambiguity
   },
 c: {
      create: {tenantId: ""my-tenantId""} // already shows ambiguity
   }
})
```

3.

```typescript

await prisma.a.update({
where: x, data: {
   b: {disconnect: true}
}})

```



### Expected behavior

i think in the disconnect or SetNull case it should not try to set all fields to null, either when they aren't nullable and when they are used in multiple relations.

it should only set the fields to null that can be set to null in an non-ambiguous way



### Prisma information


```prisma
model A {
  id       String @default(cuid())
  tenantId String

  bId String?
  b   B?      @relation(fields: [tenantId, bId], references: [tenantId, id])

  @@id([tenantId, id])
}

model B {
  id       String  @default(cuid())
  tenantId String
  A        A[]
  cId      String?
  c        C?      @relation(fields: [tenantId, cId], references: [tenantId, id])

  @@id([tenantId, id])
}

model C {
  id       String @default(cuid())
  tenantId String
  B        B[]

  @@id([tenantId, id])
}

```


### Environment & setup

- OS: macOS
- Database:PostgreSQL
- Node.js version: 20


### Prisma Version

```
5.17.0
```
",,
2479838895,25060,Prisma shared sequence self combustion,"### Bug description

When you try and implement a shared sequence using `@default(dbgenerated())` prisma will attempt to delete the sequence.
It doesn't matter if you actually specify the dbgeneration or not (i.e. `dbgenerated(""nextval('\""Phantom_id_seq\""')"")`.

I assume this is because it is trying to convert from an `autoincrement` to `default`, causing a feedback loop of self destruction, since this might be hard to fix properly, it would be nice if there was at least a way to tell prisma to `@ignore` for the migration, but leave it present for the client as a patch fix for this issue.

### How to reproduce

Either clone [this repo](https://github.com/AjaniBilby/prisma-shared-sequence) and run two migrations, or just run `prisma migrate dev` twice on the schema below.

Below are the abbreviated migrations generated if you do above:
```sql
CREATE TABLE ""Phantom"" (
    ""id"" SERIAL NOT NULL,
    CONSTRAINT ""Phantom_pkey"" PRIMARY KEY (""id"")
);
CREATE TABLE ""ThingA"" (
    ""id"" INTEGER NOT NULL DEFAULT nextval('""Phantom_id_seq""'),
    CONSTRAINT ""ThingA_pkey"" PRIMARY KEY (""id"")
);
CREATE TABLE ""ThingB"" (
    ""id"" INTEGER NOT NULL DEFAULT nextval('""Phantom_id_seq""'),
    CONSTRAINT ""ThingB_pkey"" PRIMARY KEY (""id"")
);
```
```sql
-- AlterTable
ALTER TABLE ""ThingA"" ALTER COLUMN ""id"" SET DEFAULT nextval('""Phantom_id_seq""'),
ALTER COLUMN ""id"" DROP DEFAULT;
DROP SEQUENCE ""Phantom_id_seq"";
-- AlterTable
ALTER TABLE ""ThingB"" ALTER COLUMN ""id"" SET DEFAULT nextval('""Phantom_id_seq""'),
ALTER COLUMN ""id"" DROP DEFAULT;
DROP SEQUENCE ""Phantom_id_seq"";
```

As you can see it tries to drop the sequence it's currently using and then causes the migration to fail, and then means you can never migrate forward again without using `--create-only` and manually removing the drops everytime.

### Expected behavior

Prisma to not drop the sequence I am using in the `dbgenerate`

### Prisma information

```prisma
datasource db {
	provider = ""postgresql""
	url      = env(""DATABASE_URL"")
}

generator client {
	provider = ""prisma-client-js""
	previewFeatures = []
}

model Phantom {
	id Int @id @default(autoincrement())
	@@ignore
}

model ThingA {
	id Int @id @default(dbgenerated(""nextval('\""Phantom_id_seq\""')""))
}

model ThingB {
	id Int @id @default(dbgenerated(""nextval('\""Phantom_id_seq\""')""))
}
```

### Environment & setup

- OS: `Microsoft Windows [Version 10.0.22631.4037]`
- Database: `Postgres`
- Node.js version: `v21.4.0`


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v21.4.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```
",,
2477368505,25059,feature request:  add sequence reset functionality,"## Problem

When working with Prisma and databases like PostgreSQL, there's currently no built-in way to reset sequences (e.g., auto-increment IDs) for models. This is particularly problematic after bulk deletions or when setting up test environments, as the ID sequences continue from their last value instead of restarting from 1.
 
Currently, I have to use raw SQL queries within a transaction to achieve this, which goes against Prisma's type-safe approach. Here's an example of what I'm currently doing:

```typescript
async deleteUsers() {
  try {
    return await this.prismaService.$transaction(async (prisma) => {
      await prisma.user.deleteMany();

      await prisma.$executeRaw`ALTER SEQUENCE ""User_id_seq"" RESTART WITH 1;`;
    });
  } catch (e) {
    console.error(e);

    throw new InternalServerErrorException();
  }
}
```

This approach works, but it requires writing database-specific SQL, which reduces portability and type safety.


## Suggested solution

Implement a new Prisma Client method or configuration option to reset sequences for specified models. For example:

```typescript
await prisma.user.resetSequence('id');
```

This would allow developers to easily reset auto-increment IDs without resorting to raw SQL queries, maintaining the type safety and convenience that Prisma offers.

Ideally, this method would be integrated into Prisma's transaction API, allowing operations like this:

```typescript
return await this.prismaService.$transaction(async (prisma) => {
  await prisma.user.deleteMany();

  await prisma.user.resetSequence('id');
});

```

## Additional context
 
This feature would be particularly useful for:


Setting up test environments with predictable IDs
Cleaning up development databases
Ensuring consistency in ID sequences across different environments

It would enhance Prisma's capabilities in database management and make it even more powerful for developers working with relational databases.
",,
2476847131,25056,"Help me, please...","### Bug description

Hello, I want to report an error about Prisma and with React, it turns out that I am making an application with React which is a Netflix Clone, when trying to import Prisma and a MySQL database I got an error saying this: ""Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report
    at Object.get (@prisma_client.js?v=4899fa02:1069:19)
    at a.ts:5:39"", maybe here is the capture. Greetings and happy day/night/afternoon!


![Screenshot 2024-08-20 220522](https://github.com/user-attachments/assets/e76d97e1-1c37-46b0-9474-fc3a2891d999)



### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information


```prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Movies {
  id          Int    @id @default(autoincrement())
  title       String @db.VarChar(100)
  description String @db.VarChar(200)
  movies      Bytes  @db.LongBlob()
  image       Bytes  @db.LongBlob()
}


```


### Environment & setup

- OS: Windows 11
- Database: MySQL
- Node.js version: v20.12.2


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
```
",,
2474992460,25050,[P0] Prisma client is not able to push data to MongoDB,"### Bug description

Pushing data to Mongo DB not working for Prisma 5.14.0
Pushing and pulling data from MongoDB not working for Prisma 5.18.0
Error 
![image](https://github.com/user-attachments/assets/61da6ab2-e25a-4343-bd77-85d11e3aa43d)
![image](https://github.com/user-attachments/assets/b85b3532-4fc3-4c61-b734-3dc3effc6778)


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. Try the same schema and client with MongoDB with prisma version: 5.13.0
2. Update the prisma to 5.14.0
3. Try to pull and push data from DB using the below shared code
4. It works for pull: findUnique but not for create
5. upgrade prisma to 5.18.0 - latest
6. it does not work for either operation
7. code: 

```ts
async function createTagAction(data: TagIterface) {
  const validatedData = tagSchema.safeParse(data);

  if (!validatedData.success) {
    return {
      error: validatedData.error.format(),
    };
  }

  const { slug, description, imageUrl } = validatedData.data;
  try {
    const existingTag = await prisma.tag.findUnique({
      where: { slug },
    });

    if (existingTag) {
      console.log(""Tag already exists"");
      return {
        error: { slug: ""Slug already exists"" },
      };
    }

    console.log(""Data being passed to Prisma:"", validatedData.data);

    console.time(""DB Operation"");
    const newTag = await prisma.tag.create({
      data: {
        slug,
        description,
        imageUrl,
      },
    });
    console.timeEnd(""DB Operation"");

    return { success: true, tag: newTag };
  } catch (error) {
    console.error(""Failed to create tag:"", error);
    return { error: ""Failed to create tag."" };
  }
}
```

### Expected behavior

Should be able to push and pull data from db with all prisma versions. 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model ContactForm {
  id        String   @id @default(cuid()) @map(""_id"")
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Tag {
  id    String @id @default(cuid()) @map(""_id"") 
  slug  String @unique
  description String?
  imageUrl String?
  posts TagOnPost[]
}
```


```ts
// Add your code using Prisma Client
import { PrismaClient } from ""@prisma/client"";

const prismaClientSingleton = () => {
  return new PrismaClient();
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

// eslint-disable-next-line
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClientSingleton | undefined;
};

const prisma = globalForPrisma.prisma ?? prismaClientSingleton();

export default prisma;

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> macOS
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->MongoDB
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->v21.7.3


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
prisma                  : 5.14.0
@prisma/client          : 5.14.0
prisma                  : 5.13.0
@prisma/client          : 5.13.0
```
",,
2474757769,25047,"PrismaClient is not configured to run in Cloudflare Workers. In order to run Prisma Client on edge runtime, either: - Use Prisma Accelerate: https://pris.ly/d/accelerate - Use Driver Adapters: https://pris.ly/d/driver-adapters If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report","### Bug description


import { PrismaClient } from ""@prisma/client"";
import { PrismaD1 } from ""@prisma/adapter-d1"";

export interface Env {
	DB: D1Database;
}

export default {
	async fetch(request: Request, env: Env, ctx: any): Promise<Response> {
		const adapter = new PrismaD1(env.DB);

		const prisma = new PrismaClient({ adapter });

		const users = await prisma.user.findMany();

		const result = JSON.stringify(users);
		return new Response(result);
	},
};


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

[[d1_databases]]
binding = ""DB""
database_name = ""ex1""
database_id = ""34dde81c-8330-1233-5566-17851d1e4242""

### Prisma Version

prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.16.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0



///////////////////

Here is the translation:

I don't think the issue is with my code. Sometimes it works after recreating, but other times it doesn't. I'm not sure what the exact cause is.

",,
2474639481,25046,Repeated invocation of `prisma migrate dev` continues to add migrations,"### Bug description

Using MySQL with a UUID primary key of the form
```prisma
id Bytes @id @default(dbgenerated(""(uuid_to_bin(uuid(), 1))"")) @db.Binary(16)
```
(as suggested by https://dev.mysql.com/blog-archive/mysql-8-0-uuid-support/) causes prisma to create a new migration of the form
```sql
-- AlterTable
ALTER TABLE `content` MODIFY `id` BINARY(16) NOT NULL DEFAULT (uuid_to_bin(uuid(), true));
```
every time one runs `prisma migrate dev`. It always thinks that the `id` column in the database is different from the one in the schema.

### How to reproduce

1. Create the schema.prisma file given below with a single table and a single column.
2. Run `prisma migrate dev`, entering a name for the migration file.
3. Run `prisma migrate dev` again, and it asks for the name of a new migration, which it creates.
4. Repeat step 3 until satisfied that the behavior will never change.
5. Observe that all the `migration.sql` files after the first are identical and contain:
```sql
-- AlterTable
ALTER TABLE `content` MODIFY `id` BINARY(16) NOT NULL DEFAULT (uuid_to_bin(uuid(), true));
```


### Expected behavior

Steps 3 and following should have no effect. Prisma should recognize that the database matches the schema and create no additional migrations.

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model content {
  id Bytes @id @default(dbgenerated(""(uuid_to_bin(uuid(), true))"")) @db.Binary(16)
}

```


### Environment & setup

- OS: Ubuntu 24.04
- Database: MySQL 8.0.39
- Node.js version: v20.16.0


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.16.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```
",,
2473753179,25044,Warnings when bundling Prisma Client with `esbuild`,"### Bug description

When bundling a project using a Prisma Client with `esbuild`, `esbuild` complaints about “‘dead’ conditional branches that can never be reached” in the `package.json` of the client.

### How to reproduce

1. In a project using a Prisma Client, run `prisma generate` to generate the client, resulting in the `package.json` file shown below
2. Run `esbuild --bundle --platform=node --packages=bundle --format=esm` on the project’s entrypoint
3. Observe the following output, originating [here](https://github.com/evanw/esbuild/blob/332727499e62315cff4ecaff9fa8b86336555e46/internal/resolver/package_json.go#L710):

```
▲ [WARNING] The condition ""default"" here will never be used as it comes after both ""import"" and ""require"" [package.json]

    prisma/client/package.json:25:6:
      25 │       ""default"": ""./index.js""
         ╵       ~~~~~~~~~

  The ""import"" condition comes earlier and will be used for all ""import"" statements:

    prisma/client/package.json:17:6:
      17 │       ""import"": {
         ╵       ~~~~~~~~

  The ""require"" condition comes earlier and will be used for all ""require"" calls:

    prisma/client/package.json:9:6:
      9 │       ""require"": {
        ╵       ~~~~~~~~~

[… and similar warnings for every export]
```

Is the `package.json` created by `prisma generate` syntactically correct?

### Expected behavior

No warnings and no “dead” conditional branches that can never be reached in the client’s `package.json`

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  output          = ""./client""
  […]
}

[…]
```

```json
  […]
  ""exports"": {
    ""./package.json"": ""./package.json"",
    ""."": {
      ""require"": {
        ""node"": ""./index.js"",
        ""edge-light"": ""./wasm.js"",
        ""workerd"": ""./wasm.js"",
        ""worker"": ""./wasm.js"",
        ""browser"": ""./index-browser.js"",
        ""default"": ""./index.js""
      },
      ""import"": {
        ""node"": ""./index.js"",
        ""edge-light"": ""./wasm.js"",
        ""workerd"": ""./wasm.js"",
        ""worker"": ""./wasm.js"",
        ""browser"": ""./index-browser.js"",
        ""default"": ""./index.js""
      },
      ""default"": ""./index.js""
    },
    ""./edge"": {
      ""types"": ""./edge.d.ts"",
      ""require"": ""./edge.js"",
      ""import"": ""./edge.js"",
      ""default"": ""./edge.js""
    },
    ""./react-native"": {
      ""types"": ""./react-native.d.ts"",
      ""require"": ""./react-native.js"",
      ""import"": ""./react-native.js"",
      ""default"": ""./react-native.js""
    },
    ""./extension"": {
      ""types"": ""./extension.d.ts"",
      ""require"": ""./extension.js"",
      ""import"": ""./extension.js"",
      ""default"": ""./extension.js""
    },
    ""./index-browser"": {
      ""types"": ""./index.d.ts"",
      ""require"": ""./index-browser.js"",
      ""import"": ""./index-browser.js"",
      ""default"": ""./index-browser.js""
    },
    ""./index"": {
      ""types"": ""./index.d.ts"",
      ""require"": ""./index.js"",
      ""import"": ""./index.js"",
      ""default"": ""./index.js""
    },
    ""./wasm"": {
      ""types"": ""./wasm.d.ts"",
      ""require"": ""./wasm.js"",
      ""import"": ""./wasm.js"",
      ""default"": ""./wasm.js""
    },
    ""./runtime/library"": {
      ""types"": ""./runtime/library.d.ts"",
      ""require"": ""./runtime/library.js"",
      ""import"": ""./runtime/library.js"",
      ""default"": ""./runtime/library.js""
    },
    ""./runtime/binary"": {
      ""types"": ""./runtime/binary.d.ts"",
      ""require"": ""./runtime/binary.js"",
      ""import"": ""./runtime/binary.js"",
      ""default"": ""./runtime/binary.js""
    },
    ""./generator-build"": {
      ""require"": ""./generator-build/index.js"",
      ""import"": ""./generator-build/index.js"",
      ""default"": ""./generator-build/index.js""
    },
    ""./*"": ""./*""
  },
  […]
```


### Environment & setup

- OS: Alpine Linux v3.20.2
- Database: PostgreSQL
- Node.js version: 22.6.0


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : linux-musl-arm64-openssl-3.0.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v22.6.0
Query Engine (Node-API) : libquery-engine  (at ../../tools/node_modules/@prisma/engines/libquery_engine-linux-musl-arm64-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli  (at ../../tools/node_modules/@prisma/engines/schema-engine-linux-musl-arm64-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
Preview Features        : postgresqlExtensions
```
",,
2471649963,25041,PANIC: timer has gone away,"Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v18.20.3           | 
| OS              | debian-openssl-1.0.x|
| Prisma Client   | 5.18.0             |
| Query Engine    | 4c784e32044a8a016d99474bd02a3b6123742169|
| Database        | mysql              |



## Logs
```
prisma:tryLoadEnv Environment variables not found at null
prisma:tryLoadEnv Environment variables not found at /home/bhaira5/unifydaily-admin.wishnow.app/.env
prisma:tryLoadEnv No Environment variables loaded
prisma:client checkPlatformCaching:postinstall false
prisma:client checkPlatformCaching:ciName 
prisma:tryLoadEnv Environment variables not found at null
prisma:tryLoadEnv Environment variables not found at /home/bhaira5/unifydaily-admin.wishnow.app/.env
prisma:tryLoadEnv No Environment variables loaded
prisma:client dirname /home/bhaira5/unifydaily-admin.wishnow.app/node_modules/.prisma/client
prisma:client relativePath ../../../prisma
prisma:client cwd /home/bhaira5/unifydaily-admin.wishnow.app/prisma
prisma:client clientVersion 5.18.0
prisma:client:libraryEngine internalSetup
prisma:get-platform Don't know any platform-specific paths for ""undefined"" on x64 (x86_64)
prisma:get-platform Falling back to ""ldconfig"" and other generic paths
prisma:client:libraryEngine sending request, this.libraryStarted: false
prisma:get-platform Command ""ldconfig -p | sed ""s/.*=>s*//"" | sed ""s|.*/||"" | grep libssl | sort | grep -v ""libssl.so.0"""" successfully returned ""libssl3.so
libssl.so
libssl.so.10
libssl.so.1.1
""
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl3.so
libssl.so
libssl.so.10
libssl.so.1.1

prisma:get-platform The parsed libssl version is: 1.0.x
prisma:get-platform Distro is ""undefined"". Falling back to Prisma engines built for ""debian"".
prisma:client:engines:resolveEnginePath enginePath /home/bhaira5/unifydaily-admin.wishnow.app/node_modules/.prisma/client/libquery_engine-debian-openssl-1.0.x.so.node
prisma:client:libraryEngine library starting
```

## Client Snippet
```ts
// PLEASE FILL YOUR CODE SNIPPET HERE

const createUserIntoDB = async (props: User) => {
  const isUserExist = await prisma.user.findUnique({
    where: {
      phoneNumber: props?.phoneNumber as string,
    },
  });
  //  check is user
  if (isUserExist) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'This user already existed!');
  }

  const newPassword = await isUserPasswordConvertBcrypt(props?.password);
  // database
  const res = await prisma.user.create({
    data: {
      ...props,
      password: newPassword,
    },
    select: UserSelect,
  });

  return res;
};
const loginUserWithDB = async (props: User) => {
  // database
  const res = await prisma.user.findUnique({
    where: {
      phoneNumber: props?.phoneNumber as string,
    },
  });

  if (!res) {
    throw new ApiError(httpStatus.BAD_REQUEST, ""User doesn't exist!"");
  }
  //
  const { password, ...responseWithoutPassword } = res;

  //
  const isMatchPassword = await isUserPasswordMatch(props?.password, password);

  if (!isMatchPassword) {
    throw new ApiError(httpStatus.BAD_REQUEST, ""Password doesn't match."");
  }

  //  email and roll
  const { role, phoneNumber, id } = responseWithoutPassword;

  //  create access and refresh tokens
  const accessToken = jwtHelpers.createToken(
    { phoneNumber, role, id },
    config.jwt.secret as Secret,
    config.jwt.expires_in as string
  );
  // refresh Token
  const refreshToken = jwtHelpers.createToken(
    { phoneNumber, role, id },
    config.jwt.refresh_secret as Secret,
    config.jwt.refresh_expires_in as string
  );

  return {
    user: responseWithoutPassword,
    accessToken: accessToken,
    refreshToken: refreshToken,
  };
};
```

## Schema
```prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""native"",""debian-openssl-1.0.x""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

// Define Role Enum
enum UserRole {
  admin
  agent
  user
}

// Define OrderStatus Enum
enum OrderStatus {
  success
  pending
  cancel
}

// Define VisitStatus Enum
enum VisitStatus {
  success
  pending
  cancel
}

model User {
  id          String        @id @default(uuid())
  name        String?
  email       String?       @unique
  phoneNumber String?       @unique
  password    String
  role        UserRole      @default(agent)
  address     String?
  profileImg  String?
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt @db.Timestamp(6)
  Outlet      Outlet[]
  AssignRoad  AssignRoad[]
  AgentTarget AgentTarget[]

  @@map(""users"")
}

model Outlet {
  id           String      @id @default(uuid())
  banner       String
  visitingArea String
  location     String
  businessType String
  businessName String
  ownerName    String
  phoneNumber  String
  nextFollowup String?
  remarks      String?
  visitStatus  VisitStatus @default(pending)
  geoLocation  String?
  agentId      String
  agent        User        @relation(fields: [agentId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map(""outlets"")
}

model AssignRoad {
  id        String @id @default(uuid())
  agentId   String
  agent     User   @relation(fields: [agentId], references: [id])
  location  String
  startDate String
  endDate   String

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map(""assignRoads"")
}

model AgentTarget {
  id          String @id @default(uuid())
  agentId     String
  agent       User   @relation(fields: [agentId], references: [id])
  month       Int
  outlet      Int
  workingDays Int
  flowUp      Int

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map(""agentTargets"")
}

```

## Prisma Engine Query
```

```
",,
2471553582,25040,withAccelerate causes unhandled runtime error in nextjs server actions,"### Bug description

Hi. Made a simple CRUD panel to test `withAccelerate` extension. However, even if I am not using it within client components, as the system obviously works just fine without it, I get the following error:

![CleanShot 2024-08-17 at 17 37 12](https://github.com/user-attachments/assets/d5c968ad-faf8-4100-92cf-b28acbe49765)

Removing the `withAccelerate` line of code works just fine, I'm confused as to what the next step is. The implementation is correct, however I assume that this error is triggered due to the client component importing a few server actions that require prisma.


### How to reproduce

1. Implement prisma accelerate
2. code a prisma query in a server action
3. import a server action into a client component

### Expected behavior

The above error should not trigger since this is not executed in the client.

`Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in unknown).`

Executing the same exact code without `Accelerate` works just fine.

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_DATABASE_URL"")
}

model Organisation {
  id        Int       @id @default(autoincrement())
  name      String
  users     User[]
  stations  Station[]
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model Station {
  id        Int          @id @default(autoincrement())
  orgId     Int
  name      String
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  org       Organisation @relation(fields: [orgId], references: [id])
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  name      String
  password  String
  orgId     Int
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  org       Organisation @relation(fields: [orgId], references: [id])
}

```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.14.0


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```
",,
2471491886,25038,"Nested PostDetail Not Created in MongoDB with Prisma Client, No Error Thrown","### Bug description


**Summary:** When attempting to create a `Post` with a nested `PostDetail` using Prisma Client and MongoDB, the `Post` is created successfully, but the associated `PostDetail` is not created. Despite the `PostDetail` data being passed correctly and logged, it does not appear in the database, and no error is thrown by Prisma.

**Impact:** The expected one-to-one relationship between `Post` and `PostDetail` is not being maintained, leading to incomplete data records and potential data integrity issues in applications relying on this relationship.




**Actual Result:** Only `Post` is created, while `PostDetail` is not, and no errors are thrown to indicate the failure.

**Workaround:** None identified. The issue persists even when attempting to create `PostDetail` separately in the same transaction.



### How to reproduce

**Steps to Reproduce:**

1. Define a one-to-one relationship between `Post` and `PostDetail` in the Prisma schema, with `PostDetail` referencing `postId` as a unique field.
2. Attempt to create a `Post` with a nested `PostDetail` using Prisma Client.
3. Observe that the `Post` is created, but `PostDetail` is missing in the database, and no errors are reported.

### Expected behavior

**Expected Result:** Both `Post` and `PostDetail` should be created, maintaining the one-to-one relationship as defined in the schema.


### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model Post {
  id         String      @id @default(auto()) @map(""_id"") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         String  @id @default(auto()) @map(""_id"") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @unique @db.ObjectId
  postId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id         String      @id @default(auto()) @map(""_id"") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  createdAt  DateTime    @default(now())
  posts      Post[]
  savedPosts SavedPost[]
}
```

```ts
export const addPosts = async (req, res) => {
  const { postData, PostDetail } = req.body;
  const tokenUserId = req.userId;

  if (!tokenUserId) {
    return res.status(401).json({ message: ""User not authenticated"" });
  }

  try {
    const newPost = await prisma.post.create({
      data: {
        ...postData,
        userId: tokenUserId,
      },
    });
    console.log(""Post Created:"", newPost);

    if (PostDetail) {
      const newPostDetail = await prisma.postDetail.create({
        data: {
          ...PostDetail,
          postId: newPost.id,
        },
      });
      console.log(""PostDetail Created:"", newPostDetail);
    }

    return res.status(201).json(newPost);
  } catch (err) {
    console.error(err);
    return res.status(500).json({ message: ""Failed to create post"" });
  }
};

```


### Environment & setup

- OS: Ubuntu 24
- Database: MongoDB
- Node.js version: v18.19.1


### Prisma Version

```
5.11.1
```
",,
2469936758,25035,"How to define relations in entities , when using it with nestjs?","### Bug description

**May be I should ask it in nestjs's issues no here**

In [nestjs's document](https://docs.nestjs.com/techniques/database#relations) they can define relastions with typeorm like this

```ts
import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';
import { Photo } from '../photos/photo.entity';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column({ default: true })
  isActive: boolean;

  @OneToMany(type => Photo, photo => photo.user)
  photos: Photo[];
}
```

However it will get a infinite type match error , when using prisma + nestjs. 

### How to reproduce

1. create `ObjectType`
```ts
@ObjectType()
export class QuestionBank {
  @Field(() => Int)
  id: number;
  @Field(() => String)
  title: string;

  @Field(() => Int)
  resourceId: number;

  @OneToOne(() => Resource, (item) => item.questionBank)
  resource: Resource;

  @Field(() => Int)
  versionNum: number;

  @Field(() => Int)
  curVerQuestionCount: number;
}

@ObjectType()
export class Resource {
  @Field(() => Int, { description: '' })
  id: number;
  @Field(() => Int)
  categoryId: number;
  @Field(() => String, { description: '' })
  title: string;
  @Field(() => ResourceType, { description: '' })
  type: ResourceType;
  @Field(() => Boolean, { description: '' })
  isParsed: boolean;
  @Field(() => Boolean, { description: '' })
  isCreatorSetPublic: boolean;

  @Field(() => Int, { nullable: true })
  creatorId: number;
  @Field(() => User, { description: '', nullable: true })
  creator: User;
  @Field(() => Category, { description: '' })
  category: Category;
  @Field(() => Boolean, { description: '' })
  isReqAdminImport: boolean;
  @Field(() => String)
  auditStatus: string;

  @Field(() => Boolean)
  isSystemSrc: boolean;

  @Field(() => Boolean)
  isDeleted: boolean;

  @Field(() => Date)
  createdAt: Date;

  @Field(() => String)
  filePath: string;

  @Field(() => File, { nullable: true })
  file: File;

  @Field(() => QuestionBank, { nullable: true })
  questionBank: QuestionBank;
}
```

2. access `QuestionBank`

```ts

    const resourceTest = await this.prisma.resource.findFirst({
      where: { id: 1 },
      include: {
        creator: true,
        category: true,
        file: true,
        questionBank: true,
      },
    });
    return resourceTest;
```

3. get errors

```sh
src/resource/resource.service.ts:892:5 - error TS2322: Type '{ creator: { id: number; username: string; isUsernameChecked: boolean; nickname: string; hashedPassword: string; isPasswordConfirmed: boolean; isPhoneConfirmed: boolean; phone: string; appleId: string; ... 5 more ...; signUpDeviceType: TokenType; }; category: { ...; }; file: { ...; }; questionBank: { ...; }; } & { ....' is not assignable to type 'Resource'.
  Types of property 'questionBank' are incompatible.
    Type '{ id: number; title: string; desc: string; createdAt: Date; parsedAt: Date; versionNum: number; curVerQuestionCount: number; resourceId: number; }' is not assignable to type 'QuestionBank'.

892     return resourceTest;
        ~~~~~~
```

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Resource {
  id                       Int                       @id @default(autoincrement())
  title                    String
  desc                     String                    @default("""")
  creator                  User?                     @relation(fields: [creatorId], references: [id])
  creatorId                Int?
  
  category                 Category                  @relation(fields: [categoryId], references: [id])
  categoryId               Int
  file                     File?
  questionBank             QuestionBank?
}

model QuestionBank {
  id                  Int                   @id @default(autoincrement())
  desc                String                @default("""")
  createdAt           DateTime              @default(now())
  parsedAt            DateTime              @default(now())
  questions           Question[]
  sessions            Session[]
  resource            Resource              @relation(fields: [resourceId], references: [id])
  resourceId          Int                   @unique
}

```

```ts
    const resourceTest = await this.prisma.resource.findFirst({
      where: { id: 1 },
      include: {
        creator: true,
        category: true,
        file: true,
        questionBank: true,
      },
    });
    return resourceTest;
```


### Environment & setup

- OS: windows
- Database: PostgreSQL
- Node.js version:  v20.10.0


### Prisma Version

```
5.17.0
```
",,
2469111622,25033,npx prisma db pull failed due to current Prisma schema file is invalid?,"### Bug description

npx prisma db pull failed due to current Prisma schema file is invalid:

```
npx prisma db pull
Prisma schema loaded from prisma/schema.prisma
Environment variables loaded from .env
Datasource ""db"": PostgreSQL database ""postgres"", schemas ""auth, public"" at ""aws-0-us-west-1.pooler.supabase.com:5432""

✖ Introspecting based on datasource defined in prisma/schema.prisma

Error: P1012

error: The `schemas` property is only availably with the `multiSchema` preview feature.
  -->  prisma/schema.prisma:14
   | 
13 |   url      = env(""DATABASE_URL"")
14 |   schemas  = [""public"", ""auth""]
   | 


Introspection failed as your current Prisma schema file is invalid
```

### How to reproduce

1. setup supabase project
2. setup a nextjs project 
3. install prisma and run the command `npx prisma db pull`

receive error:

```
npx prisma db pull
Prisma schema loaded from prisma/schema.prisma
Environment variables loaded from .env
Datasource ""db"": PostgreSQL database ""postgres"", schemas ""auth, public"" at ""aws-0-us-west-1.pooler.supabase.com:5432""

✖ Introspecting based on datasource defined in prisma/schema.prisma

Error: P1012

error: The `schemas` property is only availably with the `multiSchema` preview feature.
  -->  prisma/schema.prisma:14
   | 
13 |   url      = env(""DATABASE_URL"")
14 |   schemas  = [""public"", ""auth""]
   | 


Introspection failed as your current Prisma schema file is invalid
```



### Expected behavior

sync success

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  schemas  = [""public"", ""auth""]
}

```

```ts
// Add your code using Prisma Client
Hasn't build yet...
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

npx prisma --version

```
Environment variables loaded from .env
prisma                  : 5.18.0
@prisma/client          : Not found
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v18.19.1
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```",,
2468041073,25030,ERROR: Deploy to Cloudflare Pages after installing Prisma | Nuxt 3,"### Bug description

I am trying to deploy a Nuxt 3 application to cloudflare, but after installing the prisma Module, the app stopped working

After running locally 
`npx nuxt build --preset cloudflare-pages ; npx wrangler pages dev dist/`

I get this Error
```sh
C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\wrangler-dist\cli.js:29765
            throw a;
            ^

TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute
    at getPathFromURLWin32 (node:internal/url:1364:11)
    at fileURLToPath (node:internal/url:1394:22)
    at tryFileURLToPath (C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\node_modules\@cspotcode\source-map-support\source-map-support.js:133:12)
    at retrieveSourceMapURL (C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\node_modules\@cspotcode\source-map-support\source-map-support.js:335:27)
    at Array.<anonymous> (C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\node_modules\@cspotcode\source-map-support\source-map-support.js:353:26)
    at C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\node_modules\@cspotcode\source-map-support\source-map-support.js:199:32
    at mapSourcePosition (C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\node_modules\@cspotcode\source-map-support\source-map-support.js:383:21)
    at wrapCallSite (C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\node_modules\@cspotcode\source-map-support\source-map-support.js:592:20)
    at prepareStackTrace (C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\node_modules\@cspotcode\source-map-support\source-map-support.js:671:41)
    at getSourceMappedString (C:\Users\username\AppData\Roaming\npm\node_modules\wrangler\wrangler-dist\cli.js:161846:34) {
  code: 'ERR_INVALID_FILE_URL_PATH'
}
```

In Cloudflare after deploying it I get  this error:
![image](https://github.com/user-attachments/assets/85a054d9-dc9c-4375-a487-9a538ecc3bdb)

and in the logs:

```json
""logs"": [
    {
      ""message"": [
        ""[nuxt] [request error] [unhandled] [500]"",
        ""Cannot read properties of undefined (reading 'exec')\n  at chunks/build/server.mjs:1:76942""
      ],
      ""level"": ""error"",
      ""timestamp"": 1723727695746
    },
    {
      ""message"": [
        ""[nuxt] [request error] [unhandled] [500]"",
        ""Cannot access 'default' before initialization\n  at chunks/routes/renderer.mjs:1:100942  \n  at async chunks/routes/renderer.mjs:1:100895  \n  at async chunks/routes/renderer.mjs:1:103350  \n  at async Object.handler (chunks/routes/renderer.mjs:1:102102)  \n  at async Object.handler (chunks/runtime.mjs:1:73771)  \n  at async chunks/runtime.mjs:1:76908  \n  at async chunks/runtime.mjs:1:108399  \n  at async errorHandler (chunks/runtime.mjs:1:104342)  \n  at async chunks/runtime.mjs:1:77060  \n  at async chunks/runtime.mjs:1:108399""
      ],
      ""level"": ""error"",
      ""timestamp"": 1723727695746
    }
  ],
```

I tried with a local DB, one in Supabase and one in aiven (aws).

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
Here is a reproduction repo: https://github.com/dalisys/prisma-flare.git

1. npm install
2. add .env file
3. npx nuxt build --preset cloudflare-pages 
4. npx wrangler pages dev dist/

### Expected behavior

Working

## Prisma information

### Schema
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}
```

```ts
// Add your code using Prisma Client
not using it yet
```


### Environment & setup

- OS: Cloudflare Pages
- Database: PostgreSQL
- Node.js version: 20.11.1


### Prisma Version

```
5.18.0
```
",,
2467719558,25026,"FluentAPI, bumping to v5.18.0 prisma changed how data is returned","### Bug description

FluentAPI in 5.18.0 (we skipped bunch of version so maybe earlier as well) has changed behaviour. FluentAPI returns now the parent object instead.

### How to reproduce

This query

```
await prisma.licenseModel
        .findUnique({ where: { id: license.id }, select: { id: true } })
        .MainDeviceModel({ select: { id: true, realmPartition: true, deviceId: true } })
```

in past would return 
```
 {
        id: 3,
        realmPartition: 'd317685d-dc6a-49a9-986d-eb0434f31a0f',
        deviceId: 'deviceId'
}
```

Now it returns 
```
 {
      id: 2,
      MainDeviceModel: {
        id: 3,
        realmPartition: 'd317685d-dc6a-49a9-986d-eb0434f31a0f',
        deviceId: 'deviceId'
      }
    }
```

worst of all, the types generated are the previous ones, so TypeScript thinks all is good: 
![IMG_2741](https://github.com/user-attachments/assets/dd309b8f-ee86-4083-af0e-d25d5e39a019)
(sorry for photo, JetBrains types popup is missing from normal screenshots lol)

### Expected behavior

The output should match the types

### Prisma information

Prisma v5.18.0

### Environment & setup

- OS: macOs
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at ../node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at ../node_modules/.pnpm/@prisma+engines@5.18.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```
",,
2465582773,25021, [ERROR] Error: PrismaClient is not configured to run in Cloudflare Workers. In order to run Prisma Client on edge runtime,"### Bug description

[wrangler:inf] Ready on http://localhost:8787
✘ [ERROR] Error: PrismaClient is not configured to run in Cloudflare Workers. In order to run Prisma Client on edge runtime, either:

  - Use Prisma Accelerate: https://pris.ly/d/accelerate
  - Use Driver Adapters: https://pris.ly/d/driver-adapters
  
  If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report
      at Object.get
  (file:///Users/roshanpatil/Desktop/Hkirat_React%20/backend/node_modules/.prisma/client/index-browser.js:167:15)
      at Array.<anonymous>
  (file:///Users/roshanpatil/Desktop/Hkirat_React%20/backend/src/index.ts:15:16)
      at async jsonError
  (file:///Users/roshanpatil/Desktop/Hkirat_React%20/backend/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts:22:10)
      at async drainBody
  (file:///Users/roshanpatil/Desktop/Hkirat_React%20/backend/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts:5:10)


[wrangler:inf] POST /api/v1/signup 500 Internal Server Error (26ms)
╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ [b] open a browser, [d] open Devtools, [l] turn off local mode, [c] clear console, [x] to exit                            │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

wan to execute query with hono (Cloudfare  workers )  how to integrate prisma client with cloudfare worker 



### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2465386108,25020,Breaking change after updating from 5.17 to 5.18,"### Bug description

After updating from 5.17 to 5.18 i notice i can no more run `npx prisma migrate deploy` inside my docker image

I have an error: `Error: Can't write to /home/node/node_modules/@prisma/engines please make sure you install ""prisma"" with the right permissions.`

Look like the command is now doing changes inside node_modules, but for security purpose we can't allow our runtime user to write inside node_modules

I feed like this is an unexpected behavior and should not append

DEBUG=*
```
prisma:engines binaries to download libquery-engine, schema-engine +113ms
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""musl"",
  ""familyDistro"": ""alpine"",
  ""originalDistro"": ""alpine""
} +3ms
prisma:get-platform Don't know any platform-specific paths for ""alpine"" on arm64 (aarch64) +0ms
prisma:get-platform Falling back to ""ldconfig"" and other generic paths +0ms
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl.so.3 +4ms
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
prisma:fetch-engine:cache-dir The following error is being caught and just there for debugging: +1ms
prisma:fetch-engine:cache-dir {
  ""errno"": -2,
  ""code"": ""ENOENT"",
  ""syscall"": ""mkdir"",
  ""path"": ""/home/node/.cache""
} +0ms
prisma:fetch-engine:download file /home/node/node_modules/@prisma/engines/libquery_engine-linux-musl-arm64-openssl-3.0.x.so.node exists but its version is libquery-engine  and we expect 4c784e32044a8a016d99474bd02a3b6123742169 +6ms
prisma:fetch-engine:cache-dir The following error is being caught and just there for debugging: +1ms
prisma:fetch-engine:cache-dir {
  ""errno"": -2,
  ""code"": ""ENOENT"",
  ""syscall"": ""mkdir"",
  ""path"": ""/home/node/.cache""
} +0ms
prisma:fetch-engine:download file /home/node/node_modules/@prisma/engines/schema-engine-linux-musl-arm64-openssl-3.0.x exists but its version is schema-engine-cli  and we expect 4c784e32044a8a016d99474bd02a3b6123742169 +6ms
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/4c784e32044a8a016d99474bd02a3b6123742169/linux-musl-arm64-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /home/node/node_modules/@prisma/engines/libquery_engine-linux-musl-arm64-openssl-3.0.x.so.node +0ms
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/4c784e32044a8a016d99474bd02a3b6123742169/linux-musl-arm64-openssl-3.0.x/schema-engine.gz will be downloaded to /home/node/node_modules/@prisma/engines/schema-engine-linux-musl-arm64-openssl-3.0.x +0ms
Error: Error: Can't write to /home/node/node_modules/@prisma/engines please make sure you install ""prisma"" with the right permissions.
    at downloadBinary (/home/node/node_modules/@prisma/fetch-engine/dist/chunk-IDYGZR4L.js:2330:13)
    at /home/node/node_modules/@prisma/fetch-engine/dist/chunk-IDYGZR4L.js:2159:14
    at Array.map (<anonymous>)
    at download (/home/node/node_modules/@prisma/fetch-engine/dist/chunk-IDYGZR4L.js:2151:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async ensureBinariesExist (/home/node/node_modules/@prisma/engines/dist/index.js:74:3)
    at async Ra.parse (/home/node/node_modules/prisma/build/index.js:1276:835)
    at async lPt (/home/node/node_modules/prisma/build/index.js:1999:1678)
```

### How to reproduce

Here is a simple repo to reproduce:

https://github.com/rchoffar/prisma-breaking-repro

```
docker build . -t prisma-repro
docker run prisma-repro
```

Change version to 5.17 to see there is no issue

### Expected behavior

I expect the command `npx prisma migrate deploy` to not try to write inside node_modules and expect `npx prisma generate` or `npm installl` to install all deps

### Prisma information

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

### Environment & setup

- Alpine 3.20
- PostgreSQL
- 22.3


### Prisma Version

```
5.18
```
",,
2463529347,25015,Update scalar list error with set,"### Bug description

```
import { PrismaClient as PrismaMongo } from ""../prisma/generated/mongo"";
const prismaMongo = new PrismaMongo();
prismaMongo.ready.update({
  ""where"": {
    ""id"": 1494260
  },
  ""data"": {
    ""appointment"": {
      ""set"": {
        ""fascia_oraria"": {
          ""set"": [
            ""07:00"",
            ""18:00""
          ]
        }
      }
    }
  }
}).then((data) => {
  console.log('success',data);
} ).catch((error) => {
  console.log('error',error);
});
```
generate this error

`Failed to convert 'Object([(""set"", List([String(""07:00""), String(""18:00"")]))])' to 'String`

**It work if** I remove ""**set**"" in fascia_oraria and give the array directly:
```
""fascia_oraria"": [
    ""07:00"",
    ""18:00""
  ]
```
**but** the original query was made by typegraphql-prisma and if I remove the set operator the query failed in graphql.
I think the problem is actually that the second set is nested within the first and is an error from typegraphql-prisma so I have also open same issue [there](https://github.com/MichalLytek/typegraphql-prisma/issues/463)

### How to reproduce

run the script

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
prisma.schema
```prisma
generator client {
  provider           = ""prisma-client-js""
  output             = ""../generated/mongo""
  emitTranspiledCode = ""true""
}

generator typegraphql {
  provider               = ""typegraphql-prisma""
  output                 = ""../generated/mongo-ts""
  customPrismaImportPath = ""../mongo""
  contextPrismaKey       = ""mongo""
  simpleResolvers        = ""true""
}

datasource db {
  provider = ""mongodb""
  url      = env(""MONGODB_CONN"")
}

type Appointment {
  fascia_oraria String[]
}

model ready {
  id                Int                    @id @map(""_id"")
  appointment       Appointment?
}
```

test.ts
```ts
import { PrismaClient as PrismaMongo } from ""../prisma/generated/mongo"";
const prismaMongo = new PrismaMongo();
prismaMongo.ready.update({
  ""where"": {
    ""id"": 1494260
  },
  ""data"": {
    ""appointment"": {
      ""set"": {
        ""fascia_oraria"": {
          ""set"": [
            ""07:00"",
            ""18:00""
          ]
        }
      }
    }
  }
}).then((data) => {
  console.log('success',data);
} ).catch((error) => {
  console.log('error',error);
});
```


### Environment & setup

- OS: Windows
- Database: MongoDB v7.0.9
- Node.js version: v20.10.0


### Prisma Version

```
{
""dependencies"": {
    ""@prisma/client"": ""^5.18.0"",
  },
  ""devDependencies"": {
    ""@types/node"": ""^20.12.10"",
    ""prisma"": ""^5.18.0"",
    ""typegraphql-prisma"": ""^0.28.0"",
    ""typescript"": ""^5.4.5""
  }
}
```
",,
2462862350,25013,The number of connections in the prisma connection pool suddenly decreased,"### Bug description

Through the monitoring system, it was found that the connections in the prisma connection pool would be closed suddenly, resulting in a timeout of fetching the connection, prompting `Timed out fetching a new connection from the connection pool.`

See closing links via netstat
<img width=""849"" alt=""image"" src=""https://github.com/user-attachments/assets/7234d844-800b-4d04-9427-db2f529b5ed5"">

The monitoring system prompts that the number of connections suddenly decreases
<img width=""1381"" alt=""image"" src=""https://github.com/user-attachments/assets/3114fd63-4980-484d-a1ad-446032b679cf"">
<img width=""1394"" alt=""image"" src=""https://github.com/user-attachments/assets/f845bc3b-d299-41a8-945a-5d8b4f739e0e"">

Query latency p95 is very high: ~30s
<img width=""1396"" alt=""image"" src=""https://github.com/user-attachments/assets/ae83fd9a-d419-4810-aadf-132c765c0309"">


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider        = ""prisma-client-js""
  output          = ""./client""
  previewFeatures = [""metrics""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

```

```ts
export const prismaClient = new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
    {
      emit: 'stdout',
      level: 'error',
    },
    {
      emit: 'stdout',
      level: 'info',
    },
    {
      emit: 'stdout',
      level: 'warn',
    },
  ],
});

const queryTimeout = process.env.QUERY_TIMEOUT
  ? parseInt(process.env.QUERY_TIMEOUT, 10)
  : 500;
prismaClient.$on('query', e => {
  if (e.duration < queryTimeout) return;
  OrmLogger.info(
    `orm operation exceed time limit(${queryTimeout}ms)`,
    'orm-timeout',
    {
      query: e.query,
      params: e.params,
      duration: e.duration,
    }
  );
});
```


### Environment & setup

- OS: CentOS
- Database: PostgreSQL
- Node.js version: v20.12.1


### Prisma Version

```
5.12.1
```
",,
2460662138,25001,DeprecationWarning: Use of deprecated double slash resolving ,"### Bug description

Framework: Solid
Prisma version: 5.18.0
Prisma/client version: 5.18.0

When I did the build, it came back with this error

```
(node:39908) [DEP0155] DeprecationWarning: Use of deprecated trailing slash pattern mapping ""./"" in the ""exports"" field module resolution of the package at C:\Users\User\Documents\GitHub\project\node_modules\@prisma\client\package.json imported from C:\Users\User\Documents\GitHub\project\node_modules. Mapping specifiers ending in ""/"" is no longer supported.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:39908) [DEP0166] DeprecationWarning: Use of deprecated double slash resolving "".//index.mjs"" for module request "".//index.mjs"" matched to ""./*"" in the ""exports"" field module resolution of the package at C:\Users\User\Documents\GitHub\project\node_modules\@prisma\client\package.json imported from C:\Users\User\Documents\GitHub\project\node_modules.
(node:39908) [DEP0166] DeprecationWarning: Use of deprecated double slash resolving "".//index.cjs"" for module request "".//index.cjs"" matched to ""./*"" in the ""exports"" field module resolution of the package at C:\Users\User\Documents\GitHub\project\node_modules\@prisma\client\package.json imported from C:\Users\User\Documents\GitHub\project\node_modules.
(node:39908) [DEP0166] DeprecationWarning: Use of deprecated double slash resolving "".//index.js"" for module request "".//index.js"" matched to ""./*"" in the ""exports"" field module resolution of the package at C:\Users\User\Documents\GitHub\project\node_modules\@prisma\client\package.json imported from C:\Users\User\Documents\GitHub\project\node_modules.
```

When I want to start the build, I get this back

`node .\.output\server\index.mjs`
```
node:internal/modules/esm/resolve:265
    throw new ERR_MODULE_NOT_FOUND(
          ^

Error [ERR_MODULE_NOT_FOUND]: Cannot find module 'C:\Users\User\Documents\GitHub\project\.output\server\node_modules\@prisma\client\default.js' imported from C:\Users\User\Documents\GitHub\project\.output\server\index.mjs
    at finalizeResolution (node:internal/modules/esm/resolve:265:11)
    at moduleResolve (node:internal/modules/esm/resolve:933:10)
    at defaultResolve (node:internal/modules/esm/resolve:1169:11)
    at ModuleLoader.defaultResolve (node:internal/modules/esm/loader:383:12)
    at ModuleLoader.resolve (node:internal/modules/esm/loader:352:25)
    at ModuleLoader.getModuleJob (node:internal/modules/esm/loader:227:38)
    at ModuleWrap.<anonymous> (node:internal/modules/esm/module_job:87:39)
    at link (node:internal/modules/esm/module_job:86:36) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///C:/Users/User/Documents/GitHub/project/.output/server/node_modules/@prisma/client/default.js'
}

Node.js v20.15.1
```

### How to reproduce

<!--
bun build
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id                 String               @id
  sessions           Session[]
  tokens             Tokens[]
  AccountInformation AccountInformation?
  AddressInformation AddressInformation?
  BillingInformation BillingInformation?
  username           String               @unique
  email              String               @unique
  password_hash      String
  two_factor_secret  String?
  password_reset     Boolean              @default(false)
  email_verified     Boolean              @default(false)
  last_login         DateTime?            @default(now())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

enum TokenType {
  Email
  Password
  TWOFACTOR
}

model Tokens {
  id        String    @id @unique @default(uuid())
  type      TokenType
  token     String
  userId    String
  email     String?
  username  String?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  userId    String
  twoFactor Boolean  @default(false)
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum paymentMethod {
  CreditCard
  Stripe
}

model AccountInformation {
  id     String @id @unique @default(uuid())
  userId String @unique

  firstname   String
  lastname    String
  birtday     String
  companyname String?
  taxnumber   String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AddressInformation {
  id     String @id @default(uuid())
  userId String @unique

  mobil   String?
  address String?
  country String?
  state   String?
  zip     String?

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  complited Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BillingInformation {
  id     String @id @default(uuid())
  userId String @unique

  paymentMethod paymentMethod @default(CreditCard)
  cc_name       String?
  cc_number     String?
  cc_bank       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

```

```ts
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient();

export default prisma;
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.15.1


### Prisma Version

```
@prisma/client          : 5.19.0-integration-feat-typed-sql.6
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.15.1
Query Engine (Node-API) : libquery-engine 4dcdf8b8304815e12f4af0e41837efb42c98e9b7 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 4dcdf8b8304815e12f4af0e41837efb42c98e9b7 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-26.feat-introspect-sql-4dcdf8b8304815e12f4af0e41837efb42c98e9b7
Default Engines Hash    : 4dcdf8b8304815e12f4af0e41837efb42c98e9b7
Studio                  : 0.502.0
```
",,
2460246083,25000,How do I leverage dynamic return types of a Prisma findFirst/findMany?,"### Discussed in https://github.com/prisma/prisma/discussions/24994

<div type='discussions-op-text'>

<sup>Originally posted by **samithjaganath** August 11, 2024</sup>
### Question

I have the following structure in my rest service. 

CrudRepository.ts (A base interface that should be inherited by all models that would need to support crud)
```
export interface CrudRepository {
  getOne(filter: FindFirstFilter, tx?: Prisma.TransactionClient): Promise<WHAT_DO_I_RETURN_HERE>;
  getMany(filter: FindFirstFilter, tx?: Prisma.TransactionClient): Promise<WHAT_DO_I_RETURN_HERE[]>;
}
```


ICarRepository.ts (An interface for the Car repository. Car is a prisma model)
```
export interface ICarRepository extends CrudRepository {
  getOne(
    filter: Prisma.CarFindFirstArgs,
    tx?: Prisma.TransactionClient
  ): Promise<WHAT_DO_I_RETURN_HERE>;
}

```

CarRepository (Implementation class for ICarRepository)
```
@injectable()
export class CarRepository implements ICarRepository {
  constructor(
    @inject(Types.CarModelProvider) private carModelProvider: Factory<StorageModel<'Car'>>
  ) {}

  async getOne(
    filter: Prisma.CarFindFirstArgs,
    tx?: Prisma.TransactionClient
  ): Promise<WHAT_DO_I_RETURN_HERE> {
	return this.carModelProvider(tx).findFirst(filter);
  }
```

While I'm using CarRepository in a Service, I need it to **only return the keys mentioned in my select clause(with types)**. 

I project that this codebase could become large one day. Hence the high reusability targeted with repository functions. 





### How to reproduce (optional)

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior (optional)

_No response_

### Information about Prisma Schema, Client Queries and Environment (optional)

<!-- Paste your Prisma schema below. Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

<!-- Paste your Prisma Client queries below. -->
```ts
// Add any relevant Prisma Client queries here
```

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->

- Run `prisma -v` to see your Prisma version and paste it
</div>",,
2460165113,24999,After Next.js Build prisma doesn't update information,"### Bug description

Hello,
I have the following problem:
At the moment, if I build my next.js app and try to fetch my users table everything works as expected. But If a new users will be added to this table, and I try to fetch the users table again, the new entry will not be shown. Here is my Code: 

```
import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/app/lib/prisma';

export async function GET(req: NextRequest, res: NextResponse) {
    try {
        const allUsers = await prisma.user.findMany();
        await prisma.$disconnect();
        return NextResponse.json(allUsers);
    } catch (e: any) {
        console.log(e);
        await prisma.$disconnect();
        return NextResponse.error();
    }
}
```

This is an API Endpoint, which will be called from the client. Might this be a caching problem or something like this? 

Thank you and best
Trapsen

### How to reproduce

1. Create a API Endpoint, which fetches a table and all his information ->prisma.[table].findMany()
2. Build your application and run it
3. Call this API Endpoint from client side
4. Add a new entry to the database
5. Call this API Endpoint again and show if the new entry will be shown

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--Windows 11-->
- Database: <!--SQL Server-->
- Node.js version: <!--v20.14.0-->


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
```
",,
2459563733,24996,[Driver Adapters] PrismaClient for CockroachDB provider is broken since version  >= 5.16,"### Bug description

CockroachDB provider is broken since version  >= 5.16.

The  line:

`const prisma = new PrismaClient({ adapter });
`

**thrown error:**
**PrismaClientInitializationError**: The Driver Adapter `@prisma/adapter-pg`, based on `postgres`, is not compatible with the provider `cockroachdb` specified in the Prisma schema.





### How to reproduce

You can use your own example:
https://github.com/prisma/ecosystem-tests/tree/dev/driver-adapters-wasm/pg-cf-basic

change the provider to ""cockroachdb"", and  you will see the error thrown when you get to line

`const prisma = new PrismaClient({ adapter }); `

=====================================================

@jkomyno @Jolg42  the root cause is the merge/pr below.
     -> https://github.com/prisma/prisma/issues/21864 
          ->(https://github.com/prisma/prisma/pull/24481  (v 5.16)    <===  this is the merge that broke cockroachdb

![image](https://github.com/user-attachments/assets/1a46d3d5-6c09-4667-ba1d-9c8a4cc3a589)

the bug in the merge introduced is in the function getPrismaClient in file getPrismaClient.ts   (see screenshot below)
At line 383, you need to check for postressql or cockroachdb 
  -> this pattern of checking for both [postgres or cockroachdb] is in other parts of the code (since they share the same postgres driver), but forgotten to be here)
      -> so PrismaClientInitializationError error is thrown if the provider = cockroachdb

![image](https://github.com/user-attachments/assets/aa0edde7-81bb-4afa-84ab-0f0febca6c75)





### Expected behavior

the command below should work for cockroachdb
`const prisma = new PrismaClient({ adapter }); `



### Prisma information

const prisma = new PrismaClient({ adapter });

datasource db {
  provider = ""cockroachdb""
   url = ""...""
}


### Environment & setup

OS: windows 10
Database: [PostgreSQL]
Node.js version: v18.16.0

### Prisma Version

```
prisma 5.18   (or 5.16 or 5.17)
@prisma/client 5.18   (or 5.16 or 5.17)
@prisma/adapter-pg  5.18   (or 5.16 or 5.17)
```
",,
2456961022,24985,Unknown fields in deep nested relation query,"### Bug description

when execute deep nested relation query, it reports unknown field error.

### How to reproduce


query 
```ts
async findOneWithRoleAndPermission(username: string): Promise<any> {
        const re = await this.admin.user.findFirst({
            where: {
                username,
            } as Prisma.UserWhereUniqueInput,
            relationLoadStrategy: 'join',
            include: {
                roles: {
                    select: {
                        permissions: true,
                    } as Prisma.RolePermissionSelect,
                },

            },
        });
        return re;
    }
```

error:
```
""\nInvalid `this.admin.user.findFirst()` invocation in\n/Users/*/users/pusers.service.ts:85:42\n\n  82 }\n  83 \n  84 async findOneWithRoleAndPermission(username: string): Promise<any> {\n→ 85     const re = await this.admin.user.findFirst({\n           where: {\n             username: \""admin\""\n           },\n           relationLoadStrategy: \""join\"",\n           include: {\n             roles: {\n               select: {\n                 permissions: true,\n                 ~~~~~~~~~~~\n         ?       user_id?: true,\n         ?       role_id?: true,\n         ?       create_at?: true,\n         ?       update_at?: true,\n         ?       deleted_at?: true,\n         ?       user?: true,\n         ?       role?: true\n               }\n             }\n           }\n         })\n
\nUnknown field `permissions` for select statement on model `UserRole`. Available options are marked with ?."",
```

### Expected behavior

get the nested result in User<->Role<->Permission

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""relationJoins""]
  output = ""../../node_modules/@prisma/mysql_admin/client""
}

datasource db {
  provider = ""mysql""
  url      = env(""MYSQL_DATABASE_URL_OF_ADMIN"")
}

model User {
  id              String            @id @default(uuid()) @db.VarChar(36)
  username        String            @db.VarChar(255)
  password        String            @db.VarChar(255)
  status          Int               @default(0)
  created_at      DateTime          @default(now()) @db.DateTime(6)
  deleted_at      DateTime?         @db.DateTime(6)
  updated_at      DateTime          @default(now()) @db.DateTime(6)
  roles UserRole[]

  @@map(""admin_users"")
}

model Role {
  id                    String                  @id @default(uuid()) @db.VarChar(36)
  name                  String                  @db.VarChar(255)
  status                Int                     @default(0)
  created_at            DateTime                @default(now()) @db.DateTime(6)
  deleted_at            DateTime?               @db.DateTime(6)
  updated_at            DateTime                @default(now()) @db.DateTime(6)
  users UserRole[]
  permissions RolePermission[]

  @@map(""admin_roles"")
}

model Permission {
  id                    String                  @id @db.VarChar(36)
  code                  String                  @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  status                Int                     @default(0)
  created_at            DateTime                @default(now()) @db.DateTime(6)
  deleted_at            DateTime?               @db.DateTime(6)
  updated_at            DateTime                @default(now()) @db.DateTime(6)
  roles RolePermission[]
  @@map(""admin_permissions"")
}

model UserRole {
  user  User  @relation(fields: [user_id], references: [id])
  user_id String
  role  Role  @relation(fields: [role_id], references: [id])
  role_id String
  create_at             DateTime  @default(now()) @db.DateTime(6)
  update_at             DateTime  @default(now()) @db.DateTime(6)
  deleted_at            DateTime?                 @db.DateTime(6)

  @@id([user_id, role_id])
  @@map(""admin_user_role"")
}


model RolePermission {
  role  Role  @relation(fields: [role_id], references: [id])
  role_id String
  permission  Permission  @relation(fields: [permission_id], references: [id])
  permission_id String
  create_at             DateTime  @default(now()) @db.DateTime(6)
  update_at             DateTime  @default(now()) @db.DateTime(6)
  deleted_at            DateTime?                 @db.DateTime(6)

  @@id([role_id, permission_id])
  @@map(""admin_role_permission"")
}
```


### Environment & setup

- OS:  macOS
- Database:  MySQL8
- Node.js version: v22.2.0
- Nestjs: 10.4.2
- prisma: 5.18


### Prisma Version

```

```
",,
2455938253,24982,Error: Unknown binary target debian-openssl-3.2.x in generator client.,"### Bug description

When I try to generate the client for target ""debian-openssl-3.2.x"", I get the message of unknown binary target. Even installing Openssl 3.2.2:

Error: Unknown binary target debian-openssl-3.2.x in generator client.
Possible binaryTargets: darwin, darwin-arm64, debian-openssl-1.0.x, debian-openssl-1.1.x, debian-openssl-3.0.x, rhel-openssl-1.0.x, rhel-openssl-1.1.x, rhel-openssl-3.0.x, linux-arm64-openssl-1.1.x, linux-arm64-openssl-1.0.x, linux-arm64-openssl-3.0.x, linux-arm-openssl-1.1.x, linux-arm-openssl-1.0.x, linux-arm-openssl-3.0.x, linux-musl, linux-musl-openssl-3.0.x, linux-musl-arm64-openssl-1.1.x, linux-musl-arm64-openssl-3.0.x, linux-nixos, linux-static-x64, linux-static-arm64, windows, freebsd11, freebsd12, freebsd13, openbsd, netbsd, arm, native

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
npx prisma generate

### Expected behavior

debian-openssl-3.2.x  

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```
generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.2.x""]
}
```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Debian
- Database: PostgreSQL 16.1
- Node.js version: 16.20.1


### Prisma Version

```
4.2.1

```
",,
2454765908,24977,Weird error when executing queryRaw,"### Bug description

Hi everyone, this is Maxi from Argentina.

Im having this weird issue when executing some queryraws with prisma client. This is the query:

```
client.$queryRaw`SELECT *,
       (""createdAt"" AT TIME ZONE 'UTC' AT TIME ZONE ${timeZone}) AS ""createdAt""
                      FROM (
                          SELECT *, ROW_NUMBER() OVER(PARTITION BY DATE_TRUNC('hour', ""createdAt"") ORDER BY ""createdAt"" DESC) as row_num FROM ""WalletSnapshots"" ws
                          WHERE (""createdAt"" AT TIME ZONE 'UTC' AT TIME ZONE ${timeZone}) >= CAST(${fromDate} AS TIMESTAMP)
                            AND (""createdAt"" AT TIME ZONE 'UTC' AT TIME ZONE ${timeZone}) <=  CAST(${toDate} AS TIMESTAMP)
                            AND ""walletId"" = ${walletId}
                      ) AS subquery
                      WHERE row_num = 1`;
```
                      
The thing here is: This is working fine when testing the code locally. However, when I try to build and run my API in a docker image, this query starts to fail with the following message:

```
TypeError: e2.map is not a function
    at wl (/app/packages/api/dist/chunk-FM4H3MFA.js:890183:17)
    at async _class33.getLastBalancesFromPeriod (/app/packages/api/dist/chunk-FM4H3MFA.js:943123:29)
    at async /app/packages/api/dist/chunk-FM4H3MFA.js:941751:24
    at async Object.getLastBalancesFromPeriod (/app/packages/api/dist/chunk-FM4H3MFA.js:944538:26)
```

I think this might have something to do with the raw query mapping, but I just dont understand it.

Thanks,
Maxi


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2453842587,24975,prisma migrate dev hangs with no error message,"### Bug description

I have created a new table and enum for my database.  When I try to run the migration the command hangs at the prisma:schemaEngine:stderr step.  I have left it for 30+ minutes and it just stays there. I am connecting to an AWS RDS and I have checked that the credentials I am using are correct.  I also have made no changes to the .env file so my database url is the same as when this was working.  I can also connect via database management tool using the same url  to the db and make queries.  This is the output in debug mode:
```
$ /Users/coelallen/repos/my-app/node_modules/.bin/prisma migrate dev --create-only
  prisma:engines  binaries to download libquery-engine, schema-engine +0ms
  prisma:loadEnv  project root found at /Users/coelallen/my-app/package.json +0ms
  prisma:tryLoadEnv  Environment variables loaded from /Users/coelallen/repos/my-app/.env +0ms
  prisma:getConfig  Using getConfig Wasm +0ms
  prisma:getConfig  config data retrieved without errors in getConfig Wasm +8ms
  prisma:loadEnv  project root found at /Users/coelallen/repos/my-app/package.json +12ms
  prisma:tryLoadEnv  Environment variables loaded from /Users/coelallen/repos/my-app/.env +11ms
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
  prisma:getConfig  Using getConfig Wasm +3ms
  prisma:getConfig  config data retrieved without errors in getConfig Wasm +4ms
Datasource ""db"": PostgreSQL database ""my-db"", schema ""public"" at ""my-db.********.us-west-2.rds.amazonaws.com:5432""

  prisma:validate  Using validate Wasm +0ms
  prisma:getConfig  Using getConfig Wasm +10ms
  prisma:getConfig  config data retrieved without errors in getConfig Wasm +3ms
  prisma:getConfig  Using getConfig Wasm +0ms
  prisma:getConfig  config data retrieved without errors in getConfig Wasm +7ms
  prisma:schemaEngine:rpc  starting Schema engine with binary: /Users/coelallen/repos/my-app/node_modules/@prisma/engines/schema-engine-darwin-arm64 +0ms
  prisma:schemaEngine:rpc  SENDING RPC CALL {""id"":1,""jsonrpc"":""2.0"",""method"":""devDiagnostic"",""params"":{""migrationsDirectoryPath"":""/Users/coelallen/repos/my-app/prisma/migrations""}} +3ms
  prisma:schemaEngine:stderr  {""timestamp"":""2024-08-07T15:42:50.102844Z"",""level"":""INFO"",""fields"":{""message"":""Starting schema engine RPC server"",""git_hash"":""6a3747c37ff169c90047725a05a6ef02e32ac97e""},""target"":""schema_engine""} +0ms
```


### How to reproduce


1. I don't know how you would properly reproduce this error.  This is a production environment that has been working smoothly for over a year.  I have made many migrations and this hasn't happened before.  



### Expected behavior

I am expecting it to prompt me to name the migration and then run it.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
This is the table and enum that I added.
```prisma
model AddressVerificationStatus {
  addressVerificationStatusId Int                 @id @default(autoincrement()) @map(""address_verification_status_id"")
  status                      AddressVerification @map(""status"")
  createdAt                   DateTime            @default(now()) @map(""created_at"")
  updatedAt                   DateTime            @updatedAt @map(""updated_at"")
  requestId                   String              @map(""request_id"")

  @@unique([requestId])
  @@map(""address_verification_status"")
}

enum AddressVerification {
  in_progress
  valid
  invalid
}

```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: PostgresSQL
- Node.js version: 18.18.0


### Prisma Version

```
  prisma:engines  binaries to download libquery-engine, schema-engine +0ms
  prisma:loadEnv  project root found at /Users/coelallen/repos/my-app/package.json +0ms
  prisma:tryLoadEnv  Environment variables loaded from /Users/coelallen/repos/my-app/.env +0ms
Environment variables loaded from .env
  prisma:getConfig  Using getConfig Wasm +0ms
  prisma:getConfig  config data retrieved without errors in getConfig Wasm +6ms
prisma                  : 5.1.1
@prisma/client          : 5.1.1
Current platform        : darwin-arm64
Query Engine (Node-API) : libquery-engine 6a3747c37ff169c90047725a05a6ef02e32ac97e (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 6a3747c37ff169c90047725a05a6ef02e32ac97e (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.1.1-1.6a3747c37ff169c90047725a05a6ef02e32ac97e
Default Engines Hash    : 6a3747c37ff169c90047725a05a6ef02e32ac97e
Studio                  : 0.492.0
Preview Features        : views
  prisma:getConfig  Using getConfig Wasm +3ms
  prisma:getConfig  config data retrieved without errors in getConfig Wasm +5ms
```
",,
2452876135,24971,[5.18] `libquery_engine-linux-musl-openssl-3.0.x.so.node` exists but its version is `libquery-engine`  and we expect `4c784e32044a8a016d99474bd02a3b6123742169`,"### Bug description

When trying to update to 5.18 I got this error in one of my docker containers:

```raw
Error: Can't write to /app/node_modules/@prisma/engines please make sure you install ""prisma"" with the right permissions.
```

Enabling `DEBUG=*` produces this log:

```raw
prisma:engines binaries to download libquery-engine, schema-engine +346ms
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""musl"",
  ""familyDistro"": ""alpine"",
  ""originalDistro"": ""alpine""
} +10ms
prisma:get-platform Don't know any platform-specific paths for ""alpine"" on x64 (x86_64) +1ms
prisma:get-platform Falling back to ""ldconfig"" and other generic paths +0ms
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl.so.3 +12ms
prisma:get-platform The parsed libssl version is: 3.0.x +1ms
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node exists but its version is libquery-engine  and we expect 4c784e32044a8a016d99474bd02a3b6123742169 +11ms
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x exists but its version is schema-engine-cli  and we expect 4c784e32044a8a016d99474bd02a3b6123742169 +13ms
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/4c784e32044a8a016d99474bd02a3b6123742169/linux-musl-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node +1ms
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/4c784e32044a8a016d99474bd02a3b6123742169/linux-musl-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x +1ms
Error: Error: Can't write to /app/node_modules/@prisma/engines please make sure you install ""prisma"" with the right permissions.
    at downloadBinary (/app/node_modules/@prisma/fetch-engine/dist/chunk-IDYGZR4L.js:2330:13)
    at /app/node_modules/@prisma/fetch-engine/dist/chunk-IDYGZR4L.js:2159:14
    at Array.map (<anonymous>)
    at download (/app/node_modules/@prisma/fetch-engine/dist/chunk-IDYGZR4L.js:2151:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async ensureBinariesExist (/app/node_modules/@prisma/engines/dist/index.js:74:3)
    at async Ra.parse (/app/node_modules/prisma/build/index.js:1276:835)
    at async lPt (/app/node_modules/prisma/build/index.js:1999:1678)
```

The same on 5.17 instead finds the correct engine file and just continues:

```raw
prisma:engines binaries to download libquery-engine, schema-engine +391ms
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""musl"",
  ""familyDistro"": ""alpine"",
  ""originalDistro"": ""alpine""
} +10ms
prisma:get-platform Don't know any platform-specific paths for ""alpine"" on x64 (x86_64) +1ms
prisma:get-platform Falling back to ""ldconfig"" and other generic paths +1ms
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl.so.3 +12ms
prisma:get-platform The parsed libssl version is: 3.0.x +1ms
...
```

I can of course update the permissions so prisma is able to download the engine file, but I'm wondering why this did not happen before.

### How to reproduce

1. Save this as `Dockerfile`:  
    ```Dockerfile
	# syntax=docker/dockerfile:1.9
	
	ARG node_version=20.16.0-alpine
	ARG prisma_version=5.18.0
	
	FROM node:${node_version} AS source
	WORKDIR /app
	
	ENV NODE_ENV=production
	
	RUN addgroup --system --gid 1001 nodejs
	RUN adduser --system --uid 1001 worker
	
	ARG prisma_version
	RUN npm i prisma@${prisma_version}
	
	USER worker
	
	ENV DEBUG=""*""
	CMD [ ""./node_modules/.bin/prisma"", ""-v"" ]
    ```
2. Build the image using `docker build -t prisma-issue-24971 .`
3. Run the container using `docker run --rm prisma-issue-24971`

### Expected behavior

The correct engine files should be included when installing prisma.

### Prisma information

\-

### Environment & setup

See Dockerfile

### Prisma Version

Can't even run `prisma -v` in the container because it wants to download the engine file.

```raw
prisma: 5.18.0
```

But this is the output for 5.17.0 (which does work)

```raw
prisma                  : 5.17.0
@prisma/client          : Not found
Computed binaryTarget   : linux-musl-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.16.0
Query Engine (Node-API) : libquery-engine 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
Default Engines Hash    : 393aa359c9ad4a4bb28630fb5613f9c281cde053
Studio                  : 0.502.0
```",,
2452719672,24970,migrate dev error,"### Bug description
I am following this tutorial: https://www.youtube.com/watch?v=6-mGtUyfGLw

After executing the ``` npx prisma migrate dev --name init ``` command, an error appears: 

``` Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""localhost:5432""

Error: P1001: Cant reach database server at ""localhost:5432""        

Please make sure your database server is running at ""localhost:5432""
 ```

The database server is running, I tried using other ORMs and everything connected without problems

### How to reproduce


1. initialize new node js app with typescript 
2. run ```npx prisma init --datasource-provider postgresql```
3. write scheme
4. run ``` npx prisma migrate dev --name init ```



### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id                    Int    @id @default(autoincrement())
  prepaidDay            Int
  salaryDay             Int
  banks                 Bank[]
  monthlyExpenses       Int
  summerUtilityExpenses Int
  winterUtilityExpenses Int

  @@map(""users"")
}

model Bank {
  id             Int    @id @default(autoincrement())
  name           String
  goal           Int
  currentBalance Int
  goalPayment    Int
  lastPayment    Int
  owner          User   @relation(fields: [ownerId], references: [id])
  ownerId        Int
}

```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows 10 20H2 build: 19042.631
- Database: PostgreSQL
- Node.js version: v20.16.0


### Prisma Version

```
prisma                  : 5.18.0
@prisma/client          : 5.18.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.16.0
Query Engine (Node-API) : libquery-engine 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 4c784e32044a8a016d99474bd02a3b6123742169 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169
Default Engines Hash    : 4c784e32044a8a016d99474bd02a3b6123742169
Studio                  : 0.502.0
```
",,
2451200450,24966,bad type on Prisma TransactionClient - can't pass a transaction to another function,"### Bug description

The Prisma.TransactionClient's types are wrong.
We can't pass a transaction client to another function.

![carbon](https://github.com/user-attachments/assets/fbf74bfd-7cb7-4360-a7f5-bcc2aafc0181)


`
Unable to assign type 'Omit<DynamicClientExtensionThis<TypeMap<InternalArgs & { result: {}; model: { $allModels: { findManyAndCount: () => <Model, Args>(this: Model, args: Exact<Args, Args<Model, ""findMany"">>) => Promise<...>; }; ... 33 more ...; customerBankAccount: { ...; }; }; query: {}; client: {}; }, PrismaClientOptions>, TypeMapCb, ...' to type 'TransactionClient'.
Types of 'account.findUnique' are incompatible.
Unable to assign type '<A extends AccountFindUniqueArgs<InternalArgs & { result: {}; model: { $allModels: { findManyAndCount: () => <Model, Args>(this: Model, args: Exact<Args, Args<Model, ""findMany"">>) => Promise<...>; }; ... 33 more ...; customerBankAccount: { ...; }; }; query: {}; client: {}; }>>(args: Exact<...>) => DynamicModelExtens...' to type '<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<DefaultArgs>>) => Prisma__AccountClient<GetFindResult<$AccountPayload<DefaultArgs>, T, {}> | null, null, DefaultArgs>'.
The types of parameters 'args' and 'args' are incompatible.
Unable to assign type 'SelectSubset<T, AccountFindUniqueArgs<DefaultArgs>>' to type 'Exact<T, AccountFindUniqueArgs<InternalArgs & { result: {}; model: { $allModels: { findManyAndCount: () => <Model, Args>(this: Model, args: Exact<Args, Args<Model, ""findMany"">>) => Promise<...>; }; ... 33 more ...; customerBankAccount: { ...; }; }; query: {}; client: {}; }>>'.
Unable to assign type 'SelectSubset<T, AccountFindUniqueArgs<DefaultArgs>>' to type 'T extends Narrowable ? T : never'.ts(2322)
`

### How to reproduce

Code to reproduce:


```ts
 async update({
    where,
    data,
  }: {
    where: Prisma.CustomerInformationWhereUniqueInput;
    data: Prisma.CustomerInformationUpdateInput;
  }) {
    const customerInformation = await this.db.prisma.$transaction(
      async (tx) => {
        // -- update
        const customerInformation = await tx.customerInformation.update({
          where,
          data: data,
        });

        // -- refresh
        await this.refresh({
          customerInformationId: customerInformation.id,
          tx: tx,
        });

        return customerInformation;
      }
    );

    return customerInformation;
  }

  async refresh({
    customerInformationId,
    tx,
  }: {
    customerInformationId: string;
    tx: Prisma.TransactionClient
  }) {
    console.log(""refresh called"");

    await Promise.all([
      this.formatPhoneNumber({
        customerInformationId: customerInformationId,
      }),
      this.determineCustomerType({
        customerInformationId: customerInformationId,
      }),
      this.determineCityInseeCode({
        customerInformationId: customerInformationId,
      }),
      this.determineCountryInseeCode({
        customerInformationId: customerInformationId,
      }),
    ]);
  }
```


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model CustomerInformation {
  id                    String           @id @default(uuid())
  type                  CustomerType?
  civility              CustomerCivility
  lastName              String
  firstName             String
  companyName           String?
  companySiretNumber    String?
  birthDate             DateTime         @db.Date
  birthCountry          Country?         @relation(fields: [birthCountryCode], references: [iso2Code])
  birthCountryCode      String
  birthCountryInseeCode String?
  birthDepartmentCode   String? // (de 01 à 95 et de 971 à 976) (exemple: 13 pour bouches du rhone)
  birthCity             String? // (commune de naissance) must be retrieved from https://public.opendatasoft.com/explore/dataset/correspondance-code-insee-code-postal/table/ - Exemple: CASALTA
  birthCityInseeCode    String? // must be retrieved from https://www.insee.fr/fr/information/6051727 or https://geo.api.gouv.fr/decoupageadministratif/communes - Exemple : 072 pour la commune CASALTA
  phoneNumber           String?

  owner   Customer @relation(fields: [ownerId], references: [id])
  ownerId String   @unique
}


```

```ts
 async update({
    where,
    data,
  }: {
    where: Prisma.CustomerInformationWhereUniqueInput;
    data: Prisma.CustomerInformationUpdateInput;
  }) {
    const customerInformation = await this.db.prisma.$transaction(
      async (tx) => {
        // -- update
        const customerInformation = await tx.customerInformation.update({
          where,
          data: data,
        });

        // -- refresh
        await this.refresh({
          customerInformationId: customerInformation.id,
          tx: tx,
        });

        return customerInformation;
      }
    );

    return customerInformation;
  }

  async refresh({
    customerInformationId,
    tx,
  }: {
    customerInformationId: string;
    tx: Prisma.TransactionClient
  }) {
    console.log(""refresh called"");

    await Promise.all([
      this.formatPhoneNumber({
        customerInformationId: customerInformationId,
      }),
      this.determineCustomerType({
        customerInformationId: customerInformationId,
      }),
      this.determineCityInseeCode({
        customerInformationId: customerInformationId,
      }),
      this.determineCountryInseeCode({
        customerInformationId: customerInformationId,
      }),
    ]);
  }
```


### Environment & setup

- OS: Docker Container of :  `node:22.2.0-bullseye-slim`
- Database: MySQL 8
- Node.js version: 22.2.0

### Prisma Version

```
5.18.0
```
",,
2450867267,24962,Postgresql - issue with some cloud version related to regclass returning errors,"### Bug description

Prisma is pushing some queries that fail in some cloud MS postgresql version (at least neon and xata). While it is not clear yetwhat is causing the issue of the SQL statements below, would it be possible to catch errors within Prisma or disable access to the comments of the tables with some env variables?
Tables comments should not be needed and errors messages are flooding log servers.
Working SQL:
```
select
'public.jackson_ttl'::regclass as a
```

Not working SQL:
```
select 
 ('public' || '.' || 'jackson_ttl')::regclass as d
```

This is based of the original prisma query:
```
query failed: SELECT ""table_schema"", ""table_name"", obj_description(('""' || ""table_schema"" || '"".""' || ""table_name"" || '""')::regclass, 'pg_class') AS table_comment FROM ""information_schema"".""tables"" WHERE (""table_schema"" = 'public' AND ""table_name"" = 'jackson_store') OR (""table_schema"" = 'public' AND ""table_name"" = 'jackson_index') OR (""table_schema"" = 'public' AND ""table_name"" = 'jackson_ttl')
error: error: relation ""public.jackson_ttl"" does not exist
Recording is off, propagating context in a non-recording span
error connecting to engine: sql, type: postgres db: QueryFailedError: relation ""public.jackson_ttl"" does not exist
```

Of course the table exists.
The original version of the query was working:
 ```
SELECT
                views.viewname AS view_name,
                views.definition AS view_sql,
                views.schemaname AS namespace,
                description.description AS description,
                pg_catalog.obj_description(class.oid, 'pg_class') AS description
            FROM pg_catalog.pg_views views
            INNER JOIN pg_catalog.pg_namespace ns ON views.schemaname = ns.nspname
            INNER JOIN pg_catalog.pg_class class ON class.relnamespace = ns.oid AND class.relname = views.viewname
            LEFT JOIN pg_catalog.pg_description description ON description.objoid = class.oid AND description.objsubid = 0
            WHERE schemaname =  'public'
```
Ref:
#19935 - change code for postgresql

### How to reproduce

<!--
bug during complex workflow involving for unknown reason a need for prisma to identify the comments of the table/columns
connected to some DB Postgresql version and new code on prisma side (see #19935 )
-->


### Expected behavior

1. error should happen only once, no need to read the description (should be cached) and show the errors in the console more than 1 (flooding the console).
2. need a way to disable the comments; not sure why prisma needs it. Need an env variable to skip this step.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
  invalid_login_attempts Int       @default(0)
  lockedAt               DateTime?

  teamMembers TeamMember[]
  accounts    Account[]
  sessions    Session[]
  invitations Invitation[]
}

model Team {
  id              String       @id @default(uuid())
  name            String
  slug            String       @unique
  domain          String?      @unique
  defaultRole     Role         @default(MEMBER)
  billingId       String?
  billingProvider String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  members         TeamMember[]
  invitations     Invitation[]
  apiKeys         ApiKey[]

  @@index([billingId])
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id             String   @id @default(uuid())
  teamId         String
  email          String?
  role           Role     @default(MEMBER)
  token          String   @unique
  expires        DateTime
  invitedBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  sentViaEmail   Boolean  @default(true)
  allowedDomains String[] @default([])

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Subscription {
  id         String    @id
  customerId String
  priceId    String
  active     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime
  cancelAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([customerId])
}

model Service {
  id          String   @id @default(uuid())
  description String
  features    String[]
  image       String
  name        String
  created     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Price       Price[]
}

model Price {
  id            String   @id @default(uuid())
  billingScheme String
  currency      String
  serviceId     String
  amount        Int?
  metadata      Json
  type          String
  created       DateTime

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model jackson_store {
  key        String    @id(map: ""_jackson_store_key"") @db.VarChar(1500)
  value      String
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  modifiedAt DateTime? @db.Timestamp(6)
  namespace  String?   @db.VarChar(256)

  jackson_index jackson_index[]

  @@index([namespace], map: ""_jackson_store_namespace"")
  @@ignore
}

model jackson_index {
  id       Int    @id(map: ""_jackson_index_id"") @default(autoincrement())
  key      String @db.VarChar(1500)
  storeKey String @db.VarChar(1500)

  store jackson_store @relation(fields: [storeKey], references: [key], onDelete: Cascade, onUpdate: NoAction)

  @@index([key], map: ""_jackson_index_key"")
  @@index([key, storeKey], map: ""_jackson_index_key_store"")
  @@ignore
}

model jackson_ttl {
  key       String @id(map: ""jackson_ttl_key"") @db.VarChar(1500)
  expiresAt BigInt

  @@index([expiresAt], map: ""_jackson_ttl_expires_at"")
  @@ignore
}

```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->
Node v20.14.0
DB: Neon and xata using PQ driver

### Prisma Version

```
5.17.0
```
",,
2450596015,24960,"The program hangs on the line ""this.db.model""","### Bug description

  I want a different Prisma model to be selected depending on the property of the object
 ```
  const model = query.isUnique ? this.db.uniquePlace : this.db.place;
    const { searchArea, searchText } = query;
    let whereOwnerIdFilter = {};
    if (searchArea == ""My"")
      whereOwnerIdFilter = { ownerId: accountId }
    if (searchArea == ""Other"")
      whereOwnerIdFilter = { NOT: { ownerId: accountId } }
    const availablePlaces = await (model as Record<string, any>).findMany({
    ...
```
I use NestJS, so I styled Prisma Client as a module.

```
@Injectable()
export class DBService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }
}
```
I noticed that my request to the server is hanging. By inserting console.log() after each line, it became clear that this was the issue:
`const model = query.isUnique ? this.db.uniquePlace : this.db.place;`

I have a feeling that I don’t understand the mechanism of work and this cannot be done. I tried to turn on the logger, but it didn't show anything. I didn’t understand how to enable DEBUG=""*"" environment variable.

### How to reproduce

<!--
1. Start server on port 5000 
2. Send a request to the server
-->


### Expected behavior

It is possible to select a model before connecting to DB

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""fullTextSearch"", ""fullTextIndex""] 
}

datasource db {
  provider = ""cockroachdb""
  url      = env(""DATABASE_URL"")
}

model User{
  id    Int @id @default(sequence())
  name  String 
  email String @unique
  hash  String 
  salt  String
  
  account Account?
}
model Account{
  id      Int @id @default(sequence(minValue: 100,start: 100))
  ownerId Int @unique
  owner   User @relation(fields: [ownerId], references: [id])
  uniqueQuota Int @default(1)
  name String @default(""Placer"")
  places Place[]
  uniquePlaces UniquePlace[]
}

model Place {
  id Int @id @default(sequence())
  ownerId Int  
  abovePlaceId Int?  
  owner   Account @relation(fields: [ownerId], references: [id])
  accessIdList  Int[]
  name String
  url  String? 
  discription String?
  publicAccess Boolean @default(false)
  underPlace Place[] @relation(""directory"")
  abovePlace Place? @relation(""directory"",fields: [abovePlaceId],references:[id])
  files File[]  @relation(""directory"")
}

model UniquePlace {
  id Int @id @default(sequence())
  ownerId Int  
  owner   Account @relation(fields: [ownerId], references: [id])
  accessIdList  Int[] 
  name String @unique
  url  String? @unique
  discription String?
  publicAccess Boolean @default(false)
  files File[]  @relation(""directory"")
}


model File{
  id Int @id @unique @default(sequence())
  placeId Int
  abovePlace Place? @relation(""directory"",fields: [placeId],references: [id],map: ""place_fk"")
  aboveUniquePlace UniquePlace? @relation(""directory"",fields: [placeId],references: [id],map: ""unique_place_fk"")
 
  accessIdList  Int[]

  name String
  size Int
  ext  String
  url  String 
  uploadedAt DateTime @default(now())
}

```

```ts
async getPlacesAvailableByQuery(
    accountId: number,
    query: getAvailblePlacesDTO
  ): Promise<PlacesDTO[]> {
    if (this.isObjectEmpty(query))
      query = { skip: 0, take: 10 };
    const skip = query.skip || 0;
    const take = query.take || 10;
    const model = query.isUnique ? this.db.uniquePlace : this.db.place;
    const { searchArea, searchText } = query;
    let whereOwnerIdFilter = {};
    if (searchArea == ""My"")
      whereOwnerIdFilter = { ownerId: accountId }
    if (searchArea == ""Other"")
      whereOwnerIdFilter = { NOT: { ownerId: accountId } }
    const availablePlaces = await (model as Record<string, any>).findMany({
      skip: Number(skip),
      take: Number(take),
      include: {
        owner: true
      },
      where: {
        ...whereOwnerIdFilter,
        AND: [{
          OR: [{
            name:
            {
              contains: searchText
            },
          },
          {
            discription: {
              contains: searchText
            }
          }
          ],
        },
        {
          OR: [
            {
              accessIdList: {
                has: Number(accountId)
              }
            },
            { publicAccess: true }
          ]
        }
        ]
      }
    });
    if (availablePlaces)
      return availablePlaces;
    throw new BadRequestException({ type: ""No available places"" });
  }
```


### Environment & setup

- OS: Debian
- Database: CockroachDB
- Node.js version: v18.19.0


### Prisma Version

```
prisma                  : 5.7.1
@prisma/client          : 5.7.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.7.1-1.0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
Default Engines Hash    : 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
Studio                  : 0.495.0
Preview Features        : fullTextIndex, fullTextSearch
```
",,
2450109218,24954,ExtensionUsageError: Error: Uncaught Error: PrismaClient is unable to run in this browser environment.,"### Bug description

I'm developing a shopify checkout UI extension app locally with a remix app. I connected my phphmyadmin database with Prisma. In the checkout.jsx file, I import my PrismaClient from @prisma/client and fetch the data object of my database. I want to show the database value of the phpmyadmin. at the backend side in routes, my data response works fine and gets output in the console from my database but when I add this logic to my checkout.jsx file which is for the frontend side, it is not work.

```ts
""use client""
import React, { useEffect, useState } from ""react"";
import {
  reactExtension,
  Divider,
  Image,
  Banner,
  Heading,
  Button,
  InlineLayout,
  BlockStack,
  List,
  Text,
  SkeletonText,
  SkeletonImage,
  useCartLines,
  useApplyCartLinesChange,
  useApi,
  BlockLayout,
  Grid,
  Select,
  Stepper,
  Link,
  Icon,
  View,
  Pressable,
  TextBlock,
} from ""@shopify/ui-extensions-react/checkout"";
import { Modal } from ""@shopify/ui-extensions/checkout"";
import { PrismaClient, Prisma } from ""@prisma/client"";
import { useNavigate, useLoaderData } from ""@remix-run/react"";

const prisma = new PrismaClient();
export async function loader() {
  const users = await prisma.user.findMany();
  return ({ users });
}

// Set up the entry point for the extension
export default reactExtension(""purchase.checkout.block.render"", () => <App />);

export const CustomModel = ({
  item,
  onChangeQuantityValue,
  quantityValue,
  variants,
  onChangeVariant,
  selectItem,
  addToCart,
  variantList,
  productPrice,
}) => {
  const [previewImageUrl, setPreviewImageUrl] = useState("""");
  const users = prisma.user.findMany();

  useEffect(() => {
    if (previewImageUrl === """") {
      setPreviewImageUrl(item?.images?.nodes[0]?.url);
    }
  }, [previewImageUrl]);



  return (
    <Modal
      id=""my-modal""
      padding
      title={item?.title}
      onClose={() => {
        setPreviewImageUrl("""");
      }}
    >
      <Grid columns={[""50%"", ""50%""]} rows={[""100%""]} spacing=""base"">
        <Grid columns={[""100%""]} rows={[""50%""]} spacing=""base"">
          <Grid columns={[""100%""]} rows={[""50%""]} spacing=""base"">
            <TextBlock>{users}</TextBlock>
            {previewImageUrl && (
              <View padding=""base"">
                <Image
                  borderWidth=""base""
                  borderRadius=""loose""
                  source={previewImageUrl}
                  description={item?.title}
                  aspectRatio={1.8}
                />
              </View>
            )}
          </Grid>
          {item?.variants?.nodes?.length > 1 && (
            <Grid columns={[""25%"", ""25%"", ""25%""]} rows={[""50%""]} spacing=""base"">
              {item?.images?.nodes?.map((data, index) => (
                <Pressable
                  key={index}
                  border=""base""
                  cornerRadius=""base""
                  padding=""base""
                  onPress={() => {
                    setPreviewImageUrl(data?.url);
                  }}
                >
                  <Image
                    borderWidth=""base""
                    borderRadius=""loose""
                    source={data?.url}
                    description={item?.title}
                    aspectRatio={1.8}
                  />
                </Pressable>
              ))}
            </Grid>
          )}
        </Grid>
        <View padding=""base"">
          <TextBlock>{item?.description}</TextBlock>
          <Stepper
            onChange={(i) => {
              onChangeQuantityValue(item, i);
            }}
            id=""""
            min=""1""
            max=""5""
            label=""Quantity""
            value={quantityValue ? quantityValue[item?.id] : """"}
          />
          <Divider />
          {item?.variants.nodes.length > 1 && (
            <Select
              label=""Variants""
              value={variants ? variants[item?.id] : """"}
              onChange={(e) => onChangeVariant(item, e)}
              options={variantList(item)}
            />
          )}
          <BlockStack spacing=""none"">
            <Text size=""extraLarge"" appearance=""subdued"">
              {productPrice(item)}
            </Text>
            <Button
              kind=""secondary""
              loading={selectItem && selectItem[item?.id]}
              accessibilityLabel={`Add ${item?.title} to cart`}
              id={item?.id}
              onPress={() => {
                addToCart(item);
              }}
            >
              Add
            </Button>
          </BlockStack>
        </View>
      </Grid>
    </Modal>
  );
};

function App() {
  const { query, i18n } = useApi();
  const applyCartLinesChange = useApplyCartLinesChange();
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [adding, setAdding] = useState(false);
  const [showError, setShowError] = useState(false);
  const lines = useCartLines();

  useEffect(() => {
    fetchProducts();
  }, []);

  useEffect(() => {
    if (showError) {
      const timer = setTimeout(() => setShowError(false), 3000);
      return () => clearTimeout(timer);
    }
  }, [showError]);

  async function handleAddToCart(variantId) {
    setAdding(true);
    const result = await applyCartLinesChange({
      type: ""addCartLine"",
      merchandiseId: variantId,
      quantity: 1,
    });
    setAdding(false);
    if (result.type === ""error"") {
      setShowError(true);
      console.error(result.message);
    }
  }

  async function fetchProducts() {
    setLoading(true);
    try {
      const { data } = await query(
        `query ($first: Int!) {
          products(first: $first) {
            nodes {
              id
              title
              images(first:5){
                nodes {
                  url
                }
              }
              variants(first: 5) {
                nodes {
                  id
                  price {
                    amount
                  }
                }
              }
            }
          }
        }`,
        {
          variables: { first: 5 },
        },
      );
      setProducts(data.products.nodes);

    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  }

  if (loading) {
    return <LoadingSkeleton /> ;
  }

  if (!loading && products.length === 0) {
    return null;
  }

  const productsOnOffer = getProductsOnOffer(lines, products);

  if (!productsOnOffer.length) {
    return null;
  }

  return (
    <ProductOffer
      product={productsOnOffer}
      i18n={i18n}
      adding={adding}
      handleAddToCart={handleAddToCart}
      showError={showError}
      applyCartLinesChange={applyCartLinesChange}
      setShowError={setShowError}
    />
  );
}

function LoadingSkeleton() {
  return (
    <BlockStack spacing=""loose"">
      <Divider />
      <Heading level={2}>You might also like</Heading>
      <BlockStack spacing=""loose"">
        <InlineLayout
          spacing=""base""
          columns={[64, ""fill"", ""auto""]}
          blockAlignment=""center""
        >
          <SkeletonImage aspectRatio={1} />
          <BlockStack spacing=""none"">
            <SkeletonText inlineSize=""large"" />
            <SkeletonText inlineSize=""small"" />
          </BlockStack>
          <Button kind=""secondary"" disabled={true}>
            Add
          </Button>
        </InlineLayout>
      </BlockStack>
    </BlockStack>
  );
}

function getProductsOnOffer(lines, products) {
  const cartLineProductVariantIds = lines.map((item) => item.merchandise.id);
  return products.filter((product) => {
    const isProductVariantInCart = product.variants.nodes.some(({ id }) =>
      cartLineProductVariantIds.includes(id),
    );
    return !isProductVariantInCart;
  });
}

function ProductOffer({
  product,
  i18n,
  adding,
  handleAddToCart,
  showError,
  applyCartLinesChange,
  setShowError,
}) {
  const [variants, setVariants] = useState(product?.variants);
  const [quantityValue, setQuantityValue] = useState();
  const [selectItem, setSelectItem] = useState();
  const [indexValue, setIndexValue] = useState(0);
  const [showProductDetails, setShowProductDetails] = useState();
  const [errorMessage, setErrorMessage] = useState(false);
  useEffect(() => {
    if (
      product.length !== 0 &&
      indexValue === 0 &&
      showProductDetails === undefined
    ) {
      setShowProductDetails(product[0]);
    }
  }, [product]);

  useEffect(() => {
    if (product.length !== 0) {
      const data = product?.filter((item, i) => indexValue === i);
      setShowProductDetails(data[0]);
    }
  }, [indexValue]);

  const productPrice = (item) => {
    const price =
      variants && variants[item.id] !== undefined
        ? item.variants.nodes.filter(
            (selectedData) => selectedData.id === variants[item.id],
          )[0].price.amount
        : i18n.formatCurrency(item?.variants.nodes[0].price.amount);
    return `Price: ${price}`;
  };

  const onChangeVariant = (item, id) => {
    setVariants({
      ...variants,
      [item?.id]: id,
    });
  };


  const variantList = (data) => {
    return data?.variants?.nodes.map((item) => ({
      value: item.id,
      label: item?.price?.amount,
      key: item.id,
      id: item.id,
      name: i18n.formatCurrency(item.price.amount),
    }));
  };
  const onChangeQuantityValue = (item, value) => {
    setQuantityValue({
      ...quantityValue,
      [item?.id]: value,
    });
  };

  const isError = (data) => {
    if (data?.variants.nodes.length > 1) {
      return !(
        quantityValue &&
        variants &&
        variants[data.id] &&
        quantityValue[data.id]
      );
    } else {
      return !(quantityValue && quantityValue[data.id]);
    }
  };


  const addToCart = async (data) => {
    if (!isError(data)) {
      setErrorMessage(false);
      setSelectItem({
        ...selectItem,
        [data.id]: true,
      });
      const response = await applyCartLinesChange({
        type: ""addCartLine"",
        merchandiseId:
          data?.variants.nodes.length > 1
            ? variants[data.id]
            : data?.variants.nodes[0].id,
        quantity: quantityValue[data.id],
        key: data.id,
      });
      if (response.type === ""error"") {
        setShowError(true);
      }
      setSelectItem({
        ...selectItem,
        [data.id]: false,
      });
    } else {
      setErrorMessage(true);
    }
  };

  return (
    <BlockStack spacing=""loose"">
      <Divider />
      <Heading level={2}>You might also like</Heading>
      <BlockLayout spacing=""loose"" rows={[130]} overflow=""hidden"">
        {showProductDetails && (
          <InlineLayout
            key={showProductDetails?.id}
            spacing=""base""
            columns={[30, 64, ""fill"", ""auto"", 30]}
            blockAlignment=""center""
          >
            <Button
              kind=""plain""
              onPress={() => {
                if (indexValue > 0) {
                  setIndexValue(indexValue - 1);
                }
              }}
              disabled={indexValue <= 0}
            >
              <Icon source=""chevronLeft"" />
            </Button>
            <Image
              border=""base""
              borderWidth=""base""
              borderRadius=""loose""
              source={showProductDetails?.images.nodes[0]?.url}
              description={showProductDetails?.title}
              aspectRatio={1}
            />
            <BlockStack spacing=""none"">
              <Text size=""medium"" emphasis=""strong"">
                {showProductDetails?.title}
              </Text>
              {/* <Text appearance=""subdued"">{renderPrice}</Text> */}
              <Text appearance=""subdued"">
                {productPrice(showProductDetails)}
              </Text>
              <Grid columns={[""40%"", ""40%""]} rows={[""100%""]} spacing=""base"">
                {showProductDetails.variants.nodes.length > 1 && (
                  <Select
                    label=""Variants""
                    value={variants ? variants[showProductDetails.id] : """"}
                    required
                    name={i18n.formatCurrency(
                      showProductDetails?.variants.nodes[0].price.amount,
                    )}
                    onChange={(e) => {
                      onChangeVariant(showProductDetails, e);
                    }}
                    options={variantList(showProductDetails)}
                  />
                )}
                <Stepper
                  onChange={(i) => {
                    onChangeQuantityValue(showProductDetails, i);
                  }}
                  id=""""
                  min=""1""
                  max=""5""
                  label=""Quantity""
                  value={
                    quantityValue ? quantityValue[showProductDetails.id] : """"
                  }
                />
              </Grid>
            </BlockStack>
            <Grid columns={[""100%""]} rows={[""100%""]} spacing=""base"">
              <Button
                kind=""secondary""
                loading={selectItem && selectItem[showProductDetails.id]}
                accessibilityLabel={`Add ${showProductDetails?.title} to cart`}
                id={showProductDetails.id}
                onPress={() => {
                  addToCart(showProductDetails);
                }}
              >
                Add
              </Button>
              <Link
                overlay={
                  <CustomModel
                    item={showProductDetails}
                    onChangeQuantityValue={onChangeQuantityValue}
                    quantityValue={quantityValue}
                    variants={variants}
                    onChangeVariant={onChangeVariant}
                    selectItem={selectItem}
                    addToCart={addToCart}
                    variantList={variantList}
                    productPrice={productPrice}
                  />
                }
              >
                View Product
              </Link>
            </Grid>
            <Button
              kind=""plain""
              onPress={() => {
                if (product.length - 1 > indexValue) {
                  setIndexValue(indexValue + 1);
                }
              }}
              disabled={product.length - 1 <= indexValue}
            >
              <Icon source=""chevronRight"" />
            </Button>
          </InlineLayout>
        )}
        {errorMessage && (
          <Banner status=""critical"">Please fill the reqired fields.</Banner>
        )}
      </BlockLayout>
      {showError && <ErrorBanner />}
    </BlockStack>
  );
}

function ErrorBanner() {
  return (
    <Banner status=""critical"">
      There was an issue adding this product. Please try again.
    </Banner>
  );
}
```

I added a code like above in my checkout.jsx file.

See the screenshot below,
![Screenshot from 2024-08-06 12-30-08](https://github.com/user-attachments/assets/9a39994c-116e-4944-9195-aa62a99a1674)

Please help me with this, want to show database entries on my frontend side.
Thanks


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
model User {
  id Int @id @default(autoincrement())
  name String
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS:  Ubuntu 22.04.4 LTS
- Database: MySQL
- Node.js version: v18.20.4

### Prisma Version

```
""@prisma/client"": ""^5.11.0"",
```

```[tasklist]
### Tasks
```
",,
2448029229,24945,Prisma reaching connection pool limits error while using an external pooler,"### Bug description

While using Prisma and pg-bouncer via cloudnativePg, we configured our connection to use pgbouncer by passing the` ?pgbouncer=true` parameter to the connection url

We have jobs running periodically, one of which runs an updateMany() on multiple rows based on dates. Around the time the day changes, this job logically sees  a peak in activity. There can be multiple instances of this job running concurrently

When this happens we start to see this connection limits errors coming from prisma :
`Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)`
While pgbouncer seems to be running normally

We've also notice Prisma throwing an error containing the following chunk of the client runtime library before the first timeout of the daily run (that's line 122 from prisma/client/library.js) :


```
)}var Zi=({clientMethod:e,activeProvider:r})=>t=>{let n="""",i;if(Array.isArray(t)){let[o,...s]=t;n=o,i={values:Pt(s||[]),__prismaRawParameters__:!0}}else switch(r){case""sqlite"":case""mysql"":{n=t.sql,i={values:Pt(t.values),__prismaRawParameters__:!0};break}case""cockroachdb"":case""postgresql"":case""postgres"":{n=t.text,i={values:Pt(t.values),__prismaRawParameters__:!0};break}case""sqlserver"":{n=tl(t),i={values:Pt(t.values),__prismaRawParameters__:!0};break}default:throw new Error(`The ${r} provider does not support ${e}`)}return i?.values?sl(`prisma.${e}(${n}, ${i.values})`):sl(`prisma.${e}(${n})`),{query:n,parameters:i}},al={requestArgsToMiddlewareArgs(e){return[e.strings,...e.values]},middlewareArgsToRequestArgs(e){let[r,...t]=e;return new ie(r,t)}},ll={requestArgsToMiddlewareArgs(e){return[e]},middlewareArgsToRequestArgs(e){return e[0]}};function Xi(e){return function(t){let n,i=(o=e)=>{try{return o===void 0||o?.kind===""itx""?n??(n=ul(t(o))):ul(t(o))}catch(s){return Promise.reject(s)}};return{then(o,s){return i().then(o,s)},catch(o){return i().catch(o)},finally(o){return i().finally(o)},requestTransaction(o){let s=i(o);return s.requestTransaction?s.requestTransaction(o):s},[Symbol.toStringTag]:""PrismaPromise""}}}function ul(e){return typeof e.then==""function""?e:Promise.resolve(e)}var cl={isEnabled(){return!1},getTraceParent(){return""00-10-10-00""},async createEngineSpan(){},getActiveContext(){},runInChildSpan(e,r){return r()}},eo=class{isEnabled(){return this.getGlobalTracingHelper().isEnabled()}getTraceParent(r){return this.getGlobalTracingHelper().getTraceParent(r)}createEngineSpan(r){return this.getGlobalTracingHelper().createEngineSpan(r)}getActiveContext(){return this.getGlobalTracingHelper().getActiveContext()}runInChildSpan(r,t){return this.getGlobalTracingHelper().runInChildSpan(r,t)}getGlobalTracingHelper(){return globalThis.PRISMA_INSTRUMENTATION?.helper??cl}};function pl(e){return e.includes(""tracing"")?new eo:cl}function ml(e,r=()=>{}){let t,n=new Promise(i=>t=i);return{then(i){return--e===0&&t(r()),i?.(n)}}}var Zm=[""$connect"",""$disconnect"",""$on"",""$transaction"",""$use"",""$extends""],dl=Zm;function fl(e){return typeof e==""string""?e:e.reduce((r,t)=>{let n=typeof t==""string""?t:t.level;return n===""query""?r:r&&(t===""info""||r===""info"")?""info"":n},void 0)}var Cn=class{constructor(){this._middlewares=[]}use(r){this._middlewares.push(r)}get(r){return this._middlewares[r]}has(r){return!!this._middlewares[r]}length(){return this._middlewares.length}};var hl=k(ui());function Sn(e){return typeof e.batchRequestIdx==""number""}function Rn(e){return e===null?e:Array.isArray(e)?e.map(Rn):typeof e==""object""?Xm(e)?ed(e):gr(e,Rn):e}function Xm(e){return e!==null&&typeof e==""object""&&typeof e.$type==""string""}function ed({$type:e,value:r}){switch(e){case""BigInt"":return BigInt(r);case""Bytes"":return Buffer.from(r,""base64"");case""DateTime"":return new Date(r);case""Decimal"":return new Te(r);case""Json"":return JSON.parse(r);default:rr(r,""Unknown tagged value"")}}function gl(e){if(e.action!==""findUnique""&&e.action!==""findUniqueOrThrow"")return;let r=[];return e.modelName&&r.push(e.modelName),e.query.arguments&&r.push(ro(e.query.arguments)),r.push(ro(e.query.selection)),r.join("""")}function ro(e){return`(${Object.keys(e).sort().map(t=>{let n=e[t];return typeof n==""object""&&n!==null?`(${t} ${ro(n)})`:t}).join("" "")})`}var rd={aggregate:!1,aggregateRaw:!1,createMany:!0,createManyAndReturn:!0,createOne:!0,deleteMany:!0,deleteOne:!0,executeRaw:!0,findFirst:!1,findFirstOrThrow:!1,findMany:!1,findRaw:!1,findUnique:!1,findUniqueOrThrow:!1,groupBy:!1,queryRaw:!1,runCommandRaw:!0,updateMany:!0,updateOne:!0,upsertOne:!0};function to(e){return rd[e]}var An=class{constructor(r){this.options=r;this.tickActive=!1;this.batches={}}request(r){let t=this.options.batchBy(r);return t?(this.batches[t]||(this.batches[t]=[],this.tickActive||(this.tickActive=!0,process.nextTick(()=>{this.dispatchBatches(),this.tickActive=!1}))),new Promise((n,i)=>{this.batches[t].push({request:r,resolve:n,reject:i})})):this.options.singleLoader(r)}dispatchBatches(){for(let r in this.batches){let t=this.batches[r];delete this.batches[r],t.length===1?this.options.singleLoader(t[0].request).then(n=>{n instanceof Error?t[0].reject(n):t[0].resolve(n)}).catch(n=>{t[0].reject(n)}):(t.sort((n,i)=>this.options.batchOrder(n.request,i.request)),this.options.batchLoader(t.map(n=>n.request)).then(n=>{if(n instanceof Error)for(let i=0;i<t.length;i++)t[i].reject(n);else for(let i=0;i<t.length;i++){let o=n[i];o instanceof Error?t[i].reject(o):t[i].resolve(o)}}).catch(n=>{for(let i=0;i<t.length;i++)t[i].reject(n)}))}}get[Symbol.toStringTag](){return""DataLoader""}};var td=L(""prisma:client:request_handler""),In=class{constructor(r,t){this.logEmitter=t,this.client=r,this.dataloader=new An({batchLoader:na(async({requests:n,customDataProxyFetch:i})=>{let{transaction:o,otelParentCtx:s}=n[0],a=n.map(p=>p.protocolQuery),l=this.client._tracingHelper.getTraceParent(s),u=n.some(p=>to(p.protocolQuery.action));return(await this.client._engine.requestBatch(a,{traceparent:l,transaction:nd(o),containsWrite:u,customDataProxyFetch:i})).map((p,m)=>{if(p instanceof Error)return p;try{return this.mapQueryEngineResult(n[m],p)}catch(f){return f}})}),singleLoader:async n=>{let i=n.transaction?.kind===""itx""?yl(n.transaction):void 0,o=await this.client._engine.request(n.protocolQuery,{traceparent:this.client._tracingHelper.getTraceParent(),interactiveTransaction:i,isWrite:to(n.protocolQuery.action),customDataProxyFetch:n.customDataProxyFetch});return this.mapQueryEngineResult(n,o)},batchBy:n=>n.transaction?.id?`transaction-${n.transaction.id}`:gl(n.protocolQuery),batchOrder(n,i){return n.transaction?.kind===""batch""&&i.transaction?.kind===""batch""?n.transaction.index-i.transaction.index:0}})}async request(r){try{return await this.dataloader.request(r)}catch(t){let{clientMethod:n,callsite:i,transaction:o,args:s,modelName:a}=r;this.handleAndLogRequestError({error:t,clientMethod:n,callsite:i,transaction:o,args:s,modelName:a})}}mapQueryEngineResult({dataPath:r,unpacker:t},n){let i=n?.data,o=n?.elapsed,s=this.unpack(i,r,t);return process.env.PRISMA_CLIENT_GET_TIME?{data:s,elapsed:o}:s}handleAndLogRequestError(r){try{this.handleRequestError(r)}catch(t){throw this.logEmitter&&this.logEmitter.emit(""error"",{message:t.message,target:r.clientMethod,timestamp:new Date}),t}}handleRequestError({error:r,clientMethod:t,callsite:n,transaction:i,args:o,modelName:s}){if(td(r),id(r,i)||r instanceof Oe)throw r;if(r instanceof V&&od(r)){let l=El(r.meta);Tn({args:o,errors:[l],callsite:n,errorFormat:this.client._errorFormat,originalMethod:t,clientVersion:this.client._clientVersion})}let a=r.message;if(n&&(a=Ar({callsite:n,originalMethod:t,isPanic:r.isPanic,showColors:this.client._errorFormat===""pretty"",message:a})),a=this.sanitizeMessage(a),r.code){let l=s?{modelName:s,...r.meta}:r.meta;throw new V(a,{code:r.code,clientVersion:this.client._clientVersion,meta:l,batchRequestIdx:r.batchRequestIdx})}else{if(r.isPanic)throw new le(a,this.client._clientVersion);if(r instanceof B)throw new B(a,{clientVersion:this.client._clientVersion,batchRequestIdx:r.batchRequestIdx});if(r instanceof R)throw new R(a,this.client._clientVersion);if(r instanceof le)throw new le(a,this.client._clientVersion)}throw r.clientVersion=this.client._clientVersion,r}sanitizeMessage(r){return this.client._errorFormat&&this.client._errorFormat!==""pretty""?(0,hl.default)(r):r}unpack(r,t,n){if(!r||(r.data&&(r=r.data),!r))return r;let i=Object.values(r)[0],o=t.filter(a=>a!==""select""&&a!==""include""),s=Rn(Ii(i,o));return n?n(s):s}get[Symbol.toStringTag](){return""RequestHandler""}};function nd(e){if(e){if(e.kind===""batch"")return{kind:""batch"",options:{isolationLevel:e.isolationLevel}};if(e.kind===""itx"")return{kind:""itx"",options:yl(e)};rr(e,""Unknown transaction kind"")}}function yl(e){return{id:e.id,payload:e.payload}}function id(e,r){return Sn(e)&&r?.kind===""batch""&&e.batchRequestIdx!==r.index}function od(e){return e.code===""P2009""||e.code===""P2012""}function El(e){if(e.kind===""Union"")return{kind:""Union"",errors:e.errors.map(El)};if(Array.isArray(e.selectionPath)){let[,...r]=e.selectionPath;return{...e,selectionPath:r}}return e}var bl=""5.15.1"";var wl=bl;function xl(e){return e.map(r=>{let t={};for(let n of Object.keys(r))t[n]=Pl(r[n]);return t})}function Pl({prisma__type:e,prisma__value:r}){switch(e){case""bigint"":return BigInt(r);case""bytes"":return Buffer.from(r,""base64"");case""decimal"":return new Te(r);case""datetime"":case""date"":return new Date(r);case""time"":return new Date(`1970-01-01T${r}Z`);case""array"":return r.map(Pl);default:return r}}var Sl=k(Hi());var q=class extends Error{constructor(r){super(r+
```


### How to reproduce

Set up Prisma to use pgbouncer
Run a large amount of queries in parallel



### Expected behavior

We expect prisma to let pgbouncer handle the connection pooling

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model MarketsGameInstances {
  marketGameInstanceId     Int                       @id(map: ""primary_key_market_game_instance_id"") @default(autoincrement()) @map(""market_game_instance_id"")
  eventGameId              Int                       @map(""event_game_id"")
  marketGameId             Int                       @map(""market_game_id"")
  offerType                OfferType                 @map(""offer_type"")
  status                   Int                       @db.SmallInt
  eventGame                EventsGame                @relation(fields: [eventGameId], references: [eventId], onDelete: Cascade, onUpdate: NoAction, map: ""market_game_instance_event_game_foreign_key"")
  marketGame               MarketsGame               @relation(fields: [marketGameId], references: [marketGameId], onDelete: Cascade, onUpdate: NoAction, map: ""market_game_instance_market_game_foreign_key"")
  outcomesGameInstances    OutcomesGameInstances[]

  @@unique([eventGameId, marketGameId, offerType], map: ""market_game_instance_unique_event_market_offer_type"")
  @@index([eventGameId], map: ""market_game_instance_index_event_game_id"")
  @@index([marketGameId], map: ""market_game_instance_index_market_game_id"")
  @@index([offerType], map: ""market_game_instance_index_offer_type"")
  @@map(""market_game_instances"")
}

model EventsGame {
  eventId              Int                    @id(map: ""event_id_primary_key"") @default(autoincrement()) @map(""event_id"")
  targetId             Int                    @map(""target_id"") @db.SmallInt
  name                 String                 @db.VarChar(120)
  sportId              Int                    @map(""sport_id"")
  internalId           String                 @map(""internal_id"") @db.VarChar(120)
  eventDate            DateTime?              @map(""event_date"") @db.Timestamptz(6)
  createdAt            DateTime               @default(now()) @map(""created_at"") @db.Timestamptz(6)

  @@unique([targetId, internalId], map: ""events_unique"")
  @@index([targetId], map: ""events_index_target_id"")
  @@index([sportId], map: ""events_index_sport_id"")
  @@index([competitionId], map: ""events_index_competition_id"")
  @@index([internalId], map: ""events_index_internal_id"")
  @@index([eventDate], map: ""events_index_event_date"")
  @@index([name], map: ""events_index_name"")
  @@map(""events"")
}


```

```ts
  async close(data: {
    offerType: ScrapableUrlType;
    marketGameInstanceIdsToExclude: number[];
    targetId: number;
    sportIds?: number[];
    eventIds?: number[];
    eventIdsToExclude?: number[];
  }): Promise<void> {
    const where: Prisma.MarketsGameInstancesWhereInput = {
      marketGameInstanceId: { notIn: data.marketGameInstanceIdsToExclude },
      offerType: data.offerType,
      eventGame: {
        targetId: data.targetId,
        eventDate: { gte: threeDaysAgo() },
      },
    };
    if (data.sportIds?.length > 0) {
      where.eventGame.sportId = { in: data.sportIds };
    }
    if (data.eventIds?.length > 0) {
      where.eventGameId = { in: data.eventIds };
    }
    if (data.eventIdsToExclude?.length > 0) {
      where.eventGameId = { notIn: data.eventIdsToExclude };
    }

    try {
      await this.prisma.marketsGameInstances.updateMany({
        where,
        data: { status: InstanceStatus.CLOSED },
      });
    } catch (e) {
      throw e;
    }
  }
```


### Environment & setup

- Database: Postgresql
- Node.js version: v18.19.1


### Prisma Version

```
5.15.1
```
",,
2447133757,24942,Issue with deploy on AWS with SAM and manually generation of prisma client,"### Bug description

I am building my backend and doing prisma generate from myself before sending on aws. I don't typescript code and not using eslint.

so i can't use this guide: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-aws-lambda#deploying-with-aws-sam

### How to reproduce

i am using as backend nestjs: so my steps are:
1. npm run build
2. npx prisma generate
3. test local with sam: sam local start-api

### Expected behavior

working backend. running npm start serve (to use the generated dist folder and nodemodules generated prisma client) is working, but with sam:
```Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.```

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: not relevant.
- Database: not relevant.
- Node.js version: not relevant.

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.17.0
@prisma/client          : 5.17.0
Computed binaryTarget   : rhel-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/libquery_engine-rhel-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/schema-engine-rhel-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
Default Engines Hash    : 393aa359c9ad4a4bb28630fb5613f9c281cde053
Studio                  : 0.502.0
```
",,
2443362471,24933,called `Option::unwrap()` on a `None` value,"Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v22.2.0            | 
| OS              | darwin-arm64       |
| Prisma Client   | 5.6.0              |
| Query Engine    | e95e739751f42d8ca026f6b910f5a2dc5adeaeee|
| Database        | postgresql         |



## Logs
```
yStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client prisma.$queryRawUnsafe(SELECT COUNT(DISTINCT project_id) FROM _agg WHERE LOWER(project_name) LIKE '%%' AND voluntary_registry IN ('VCS'), [])
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.6.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.6.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client prisma.$queryRawUnsafe(SELECT COUNT(DISTINCT project_id) FROM _agg WHERE LOWER(project_name) LIKE '%%' AND voluntary_registry IN ('VCS'), [])
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.6.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client prisma.$queryRawUnsafe(SELECT COUNT(DISTINCT project_id) FROM _agg WHERE LOWER(project_name) LIKE '%%' AND voluntary_registry IN ('VCS'), [])
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
```

## Client Snippet
```ts
// PLEASE FILL YOUR CODE SNIPPET HERE

async function validator(ctx: AppKoaContext<ValidatedData, Request>, next: Next) {
  const project = await projectService.findFirst({
    where: { project_id: ctx.request.params.id },
    include: {
      credits: true,
      expansion: true,
      methodology: true,
    },
  });

  ctx.assertError(project, 'Project not found');

  ctx.validatedData = { project };
  await next();
}

```

## Schema
```prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE

generator client {
  provider        = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""POSTGRES_URI"")
}

enum RoleType {
  FREE_USER
  STANDARD_USER
  PREMIUM_USER
  SYS_ADMIN
}

enum TokenType {
  ACCESS
}

model ProjectExpansion {
  project_id                                         String  @id @unique
  index                                              Int?
  type                                               String?
  arb_id                                             String?
  offset_project_operator                            String?
  authorized_project_designee                        String?
  project_name                                       String?
  project_description                                String?
  project_is_being_transferred_from_another_registry String?
  crediting_period                                   String?
  project_type                                       String?
  project_commencement_date                          String?
  project_reporting_start_date                       String?
  project_website                                    String?
  project_site_location                              String?
  stateprovince                                      String?
  country                                            String?
  project_status                                     String?
  crediting_period_expires                           String?
  project_listed_date                                String?
  project_registered_date                            String?
  verification_bodies                                String?
  documents                                          String?
  project_owner                                      String?
  aggregate                                          String?
  all_project_site_states                            String?
  primary_project_site_state                         String?
  registery                                          String?

  project Project?

  @@map(""projects"")
}

model ProjectCredit {
  project_id                      String   @id
  year                            Int?
  credits_issued_by_vintage       Int?
  credits_retired                 Int?
  credits_remaining_by_vintage    Int?
  credits_issued_by_issuance_year Int?
  Project                         Project? @relation(fields: [project_id], references: [project_id])

  @@map(""credits"")
}

model Project {
  project_id                                 String    @id @unique
  project_name                               String?
  voluntary_registry                         String?
  arb_project                                String?
  voluntary_status                           String?
  scope                                      String?
  type                                       String?
  methodology_protocol                       String?
  region                                     String?
  country                                    String?
  state                                      String?
  project_site_location                      String?
  project_developer                          String?
  total_credits_issued                       Int?
  total_credits_retired                      Int?
  total_credits_remaining                    Int?
  first_year_of_project                      DateTime?
  notes_from_registry                        String?
  notes_from_berkeley_carbon_trading_project String?
  date_added_to_database                     String?
  first_yop                                  Float?
  project_owner                              String?
  offset_project_operator                    String?
  authorized_project_designee                String?
  verifier                                   String?
  estimated_annual_emission_reductions       Float?
  pers                                       Int?
  registry_arb                               String?
  arb_project_detail                         String?
  arb_id                                     String?
  project_listed                             String?
  project_registered                         String?
  ccb_certifications                         String?
  project_type                               String?
  registry_documents                         String?
  project_website                            String?

  street         String?
  email          String?
  telephone      String?
  representative String?

  issuance_date                   String?
  vintage_monitoring_period_start String?
  vintage_monitoring_period_end   String?
  total_vintage_quantity          Int?
  quantity_issued                 Int?
  retirement_cancellation_date    String?
  serial_number                   String?
  retirement_details              String?
  retirement_reason               String?
  retirement_beneficiary          String?

  car_project_id                                      String?
  car_cooperative_aggregate_id                        String?
  car_date_issued                                     String?
  car_project_name                                    String?
  car_project_developer                               String?
  car_project_owner                                   String?
  car_project_site_location                           String?
  car_project_site_state                              String?
  car_project_site_country                            String?
  car_vintage                                         String?
  car_total_offset_credits_issued                     String?
  car_verification_body                               String?
  car_project_type                                    String?
  car_protocol_version                                String?
  car_canceled_for_arb_compliance                     String?
  car_offset_credits_currently_in_reserve_buffer_pool String?
  car_offset_credits_intended_for_arb_buffer_pool     String?
  car_offset_credits_converted_to_vcus                String?
  car_credits_canceled                                String?
  car_additional_certifications                       String?
  car_arb_eligible                                    String?
  car_corsia_eligible                                 String?
  car_project_website                                 String?

  acr_project_id                         String?
  acr_date_issued                        String?
  acr_project_name                       String?
  acr_project_developer                  String?
  acr_project_type                       String?
  acr_project_vvb                        String?
  acr_project_methodology_protocol       String?
  acr_methodology_protocol_version       String?
  acr_verified_removal                   String?
  acr_arb_eligible                       String?
  acr_ecology_eligible                   String?
  acr_corsia_eligible                    String?
  acr_vintage                            String?
  acr_vintage_monitoring_period_start    String?
  acr_vintage_monitoring_period_end      String?
  acr_total_credits_issued               String?
  acr_credits_issued_to_project          String?
  acr_credits_transferred_to_buffer_pool String?
  acr_credits_issued_to_buffer_pool      String?
  acr_project_location                   String?
  acr_project_state                      String?
  acr_project_country                    String?
  acr_sustainable_development_goals      String?
  acr_project_website                    String?

  gs_project_id              String?
  gs_vintage                 String?
  gs_credit_status           String?
  gs_quantity_issued         String?
  gs_project_name            String?
  gs_project_developer       String?
  gs_country                 String?
  gs_project_type            String?
  gs_methodology             String?
  gs_programme_of_activities String?
  gs_poa_gsid                String?
  gs_product_type            String?
  gs_issuance_date           String?
  gs_monitoring_period_start String?
  gs_monitoring_period_end   String?
  gs_serial_number           String?
  gs_eligible_for_corsia     String?
  gs_retired_for_corsia      String?
  gs_corsia_authorisation    String?

  vcs_id                              String?
  vcs_project_id                      String?
  vcs_name                            String?
  vcs_issuance_date                   String?
  vcs_vintage_monitoring_period_start String?
  vcs_vintage_monitoring_period_end   String?
  vcs_country                         String?
  vcs_project_type                    String?
  vcs_methodology                     String?
  vcs_total_vintage_quantity          String?
  vcs_quantity_issued                 String?
  vcs_sustainable_development_goals   String?
  vcs_serial_number                   String?
  vcs_additional_certifications       String?
  vcs_retirement_cancellation_date    String?
  vcs_retirement_beneficiary          String?
  vcs_retirement_reason               String?
  vcs_retirement_details              String?

  expansion   ProjectExpansion? @relation(fields: [project_id], references: [project_id], map: ""project_expansion_fk"")
  credits     ProjectCredit[]
  methodology Methodology?      @relation(fields: [methodology_protocol], references: [methodology_number], map: ""project_methodology_fk"")

  credits_issued_by_vintage_1996       Float?
  credits_issued_by_vintage_1997       Float?
  credits_issued_by_vintage_1998       Float?
  credits_issued_by_vintage_1999       Float?
  credits_issued_by_vintage_2000       Float?
  credits_issued_by_vintage_2001       Float?
  credits_issued_by_vintage_2002       Float?
  credits_issued_by_vintage_2003       Float?
  credits_issued_by_vintage_2004       Float?
  credits_issued_by_vintage_2005       Float?
  credits_issued_by_vintage_2006       Float?
  credits_issued_by_vintage_2007       Float?
  credits_issued_by_vintage_2008       Float?
  credits_issued_by_vintage_2009       Float?
  credits_issued_by_vintage_2010       Float?
  credits_issued_by_vintage_2011       Float?
  credits_issued_by_vintage_2012       Float?
  credits_issued_by_vintage_2013       Float?
  credits_issued_by_vintage_2014       Float?
  credits_issued_by_vintage_2015       Float?
  credits_issued_by_vintage_2016       Float?
  credits_issued_by_vintage_2017       Float?
  credits_issued_by_vintage_2018       Float?
  credits_issued_by_vintage_2019       Float?
  credits_issued_by_vintage_2020       Float?
  credits_issued_by_vintage_2021       Float?
  credits_retired_1996                 Int?
  credits_retired_1997                 Int?
  credits_retired_1998                 Int?
  credits_retired_1999                 Int?
  credits_retired_2000                 Int?
  credits_retired_2001                 Int?
  credits_retired_2002                 Int?
  credits_retired_2003                 Int?
  credits_retired_2004                 Int?
  credits_retired_2005                 Int?
  credits_retired_2006                 Int?
  credits_retired_2007                 Int?
  credits_retired_2008                 Int?
  credits_retired_2009                 Int?
  credits_retired_2010                 Int?
  credits_retired_2011                 Int?
  credits_retired_2012                 Int?
  credits_retired_2013                 Int?
  credits_retired_2014                 Int?
  credits_retired_2015                 Int?
  credits_retired_2016                 Int?
  credits_retired_2017                 Int?
  credits_retired_2018                 Int?
  credits_retired_2019                 Int?
  credits_retired_2020                 Int?
  credits_retired_2021                 Int?
  credits_retired_unknown_year         Int?
  credits_remaining_by_vintage_1996    Float?
  credits_remaining_by_vintage_1997    Float?
  credits_remaining_by_vintage_1998    Float?
  credits_remaining_by_vintage_1999    Float?
  credits_remaining_by_vintage_2000    Float?
  credits_remaining_by_vintage_2001    Float?
  credits_remaining_by_vintage_2002    Float?
  credits_remaining_by_vintage_2003    Float?
  credits_remaining_by_vintage_2004    Float?
  credits_remaining_by_vintage_2005    Float?
  credits_remaining_by_vintage_2006    Float?
  credits_remaining_by_vintage_2007    Float?
  credits_remaining_by_vintage_2008    Float?
  credits_remaining_by_vintage_2009    Float?
  credits_remaining_by_vintage_2010    Float?
  credits_remaining_by_vintage_2011    Float?
  credits_remaining_by_vintage_2012    Float?
  credits_remaining_by_vintage_2013    Float?
  credits_remaining_by_vintage_2014    Float?
  credits_remaining_by_vintage_2015    Float?
  credits_remaining_by_vintage_2016    Float?
  credits_remaining_by_vintage_2017    Float?
  credits_remaining_by_vintage_2018    Float?
  credits_remaining_by_vintage_2019    Float?
  credits_remaining_by_vintage_2020    Float?
  credits_remaining_by_vintage_2021    Float?
  credits_issued_by_issuance_year_1996 Int?
  credits_issued_by_issuance_year_1997 Int?
  credits_issued_by_issuance_year_1998 Int?
  credits_issued_by_issuance_year_1999 Int?
  credits_issued_by_issuance_year_2000 Int?
  credits_issued_by_issuance_year_2001 Int?
  credits_issued_by_issuance_year_2002 Int?
  credits_issued_by_issuance_year_2003 Int?
  credits_issued_by_issuance_year_2004 Int?
  credits_issued_by_issuance_year_2005 Int?
  credits_issued_by_issuance_year_2006 Int?
  credits_issued_by_issuance_year_2007 Int?
  credits_issued_by_issuance_year_2008 Int?
  credits_issued_by_issuance_year_2009 Int?
  credits_issued_by_issuance_year_2010 Int?
  credits_issued_by_issuance_year_2011 Int?
  credits_issued_by_issuance_year_2012 Int?
  credits_issued_by_issuance_year_2013 Int?
  credits_issued_by_issuance_year_2014 Int?
  credits_issued_by_issuance_year_2015 Int?
  credits_issued_by_issuance_year_2016 Int?
  credits_issued_by_issuance_year_2017 Int?
  credits_issued_by_issuance_year_2018 Int?
  credits_issued_by_issuance_year_2019 Int?
  credits_issued_by_issuance_year_2020 Int?
  credits_issued_by_issuance_year_2021 Int?

  car_cost_data String?
  acr_cost_data String?
  vcs_cost_data String?
  gs_cost_data  String?
  has_cost_data String?
  continent     String?

  @@map(""_agg"")
}

model Methodology {
  id                 Int       @id
  registry           String
  methodology_number String?   @unique
  methodology_title  String    @unique
  version            String?
  date               String?
  development_status String?
  scope              String?
  sphere_of_activity String?
  subfield           String?
  nbs_engineered     String?
  removal_reduction  String?
  summary            String?
  sources_relations  String?
  links              String?
  used_by_registries String?
  Project            Project[]

  @@map(""methodologies"")
}

model Token {
  id        Int       @id @default(autoincrement())
  createdOn DateTime  @default(now())
  updatedOn DateTime  @default(now())
  deletedOn DateTime  @default(now())
  type      TokenType @default(ACCESS)
  value     String    @default("""")
  userId    Int
  users     User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: ""userID"")

  @@map(""tokens"")
}

model User {
  id                 Int        @id @default(autoincrement())
  createdOn          DateTime   @default(now())
  updatedOn          DateTime   @default(now())
  lastRequest        DateTime   @default(now())
  email              String     @default("""")
  passwordHash       String     @default("""")
  signupToken        String     @default("""")
  resetPasswordToken String     @default("""")
  isEmailVerified    Boolean    @default(false)
  oauthGoogle        Boolean    @default(false)
  isPremium          Boolean    @default(false)
  tokens             Token[]
  roles              RoleType[]

  @@map(""users"")
}

```

## Prisma Engine Query
```
{""X"":true}}}
```
",,
2443300392,24932,Race conditions in MongoDB updates,"### Bug description

When multiple queries run at the same time, prisma couldn't handle them.
prisma handle few of concurrent operations I think it's using retries that mention in [issues/12814](https://github.com/prisma/prisma/issues/12814) it's handle about 100 concurrent operations on my system but can't handle all of them.
in this code I try to simulate multiple users action:
```ts
const promises = [];
for (let i = 0; i < 300/*you might need to increase this number to get this error*/; i++) {
  promises.push(prisma.product.update({
      where: {
        id: ""MjNgwCO1Q0Q1lbv5FNTI""
      },
      data: {
        like: {
          increment: 1
        }
      }
    }));
}
await Promise.all(promises);
```
above code return this:
 ```ts
  55 //  Query: db.products.aggregate([ { $match: { $expr: { $and: [ { $and: [ { $eq: [ ""$_id"", { $literal: ""MjNgwCO1Q0Q1lbv5FNTI"", }, ], }, { $ne: [ ""$_id"", ""$$REMOVE"", ], }, ], }, ], }, }, }, ...
  56 // Duration: 0ms
  57
→ 58 return prisma.product.update(
Transaction failed due to a write conflict or a deadlock. Please retry your transaction
```
If multiple users, for example, 300 people(**in your system might need bigger number to get error**) press the like button at the same time this error occur. I fix this by using raw query this code fix the problem and didn't get error on large number of queries:
```ts
prisma.$runCommandRaw({
  update: ""products"",
  updates: [
    {
      q: { _id: ""MjNgwCO1Q0Q1lbv5FNTI"" },
      u: { $inc: { ""like"": 1 } },
      multi: false
    }
  ]
});
```
<hr>

this might be another issue but i think it's related. in upsert have same issue. in this example if field exist increment the `like_count` and if not create one. if two request get to this at the same time prisma check if field exist and both of them marked as `create` and when queries execute first one create the field and second one instead of update return `unique constraint` error.
```ts
this.prisma.product.upsert({
  where:{
    unique_name:""product 1""
  },
  update:{
    like:{
      increment:1
    }
  },
  create:{
    unique_name:""product 1"",
    like:0
  }
});
```


### How to reproduce

Run more than 100 updates (or more depending on the system) at the same time

### Expected behavior

execute all updates that received at the same time successfully

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Product {
  id            String @id @default(auto()) @map(""_id"") @db.ObjectId
  like_count    Int    @default(0)
  unique_name   String @unique
  //... other data

  @@map(""products"")
}
```

### Environment & setup

- OS: Windows10 <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: MongoDB <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: 20.11.1 <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
5.17.0
```
",,
2442918291,24930,Invalid migration created for `dbgenerated()` with Enum columns,"### Bug description

This seems essentially the same as a [previous issue I created a while back](https://github.com/prisma/prisma/issues/14799) and [was fixed](https://github.com/prisma/prisma-engines/pull/3153) (thanks!) - however I've now discovered the same issue is reappearing when a column has an `Enum` as the type.

Minimum Reproducible Example here: https://github.com/andyjy/mre-prisma-dbgenerated-enum 

Noting that in general, Prisma [doesn't yet support Generated Columns](https://github.com/prisma/prisma/issues/6336). 

However, a workaround using `@default(dbgenerated())` has been [working just fine for non-Enum columns](https://github.com/prisma/prisma/issues/6336#issuecomment-1492949370) (as noted by a [few other folks](https://github.com/prisma/prisma/issues/6336#issuecomment-1650970223))

So here's hoping it may be possible to get a fix for whatever is different for Enums(!)

[This comment](https://github.com/prisma/prisma/issues/6336#issuecomment-2064207641) also seems related to this issue - same incorrect `DROP DEFAULT` migration created when the column is of type Integer - the author refers to their `GENERATED ALWAYS AS` definition ending `AS IDENTITY`, but it seems reasonably likely the difference may actually be due to the column type.

Thanks 🙏 

### How to reproduce

1. Create a column with definition `GENERATED ALWAYS AS (...) STORED` using a custom migration
2. Migration applies, everything works fine
3. On a subsequent run of `prisma migrate dev`, an invalid migration is created that attempts to `DROP DEFAULT` on the generated column, which fails. This migration is created if the column is defined as using an Enum type, but is correctly not created if the column is of type String.

MRE: https://github.com/andyjy/mre-prisma-dbgenerated-enum



### Expected behavior

_No response_

### Prisma information

Latest Prisma v5.17
https://github.com/andyjy/mre-prisma-dbgenerated-enum

### Environment & setup

- OS: MacOS
- Database: PostgreSQL
- Node.js version: 18.18.0


### Prisma Version

```
5.17.0
```
",,
2442612596,24928,Feature Request: Schema Annotation for Dynamic Schema Selection in Prisma,"## Problem

I'm always frustrated when using Prisma's multiSchema feature to manage multiple tenants with identical models. Currently, with the multiSchema system in Prisma, I have two options, both of which have significant limitations:

1. **Explicitly specify a schema for each tenant by duplicating all models with different names and using @@map to point them to the same table.**

```
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  schemas  = [""shared"", ""tenant1"", ""tenant2""]
}

model Post {
  id       Int       @id @default(autoincrement())
  Text     String
  PostType PostType  @relation(fields: [post_type_id], references: [id])
  ...
  @@schema(""tenant1"")
}

model Post2 {
  id       Int       @id @default(autoincrement())
  Text     String
  PostType PostType  @relation(fields: [post_type_id], references: [id])
  ...
  @@schema(""tenant2"")
  @@map(""Post"")
}

...

model PostType {
  id          Int      @id @default(autoincrement())
  description String
  @@schema(""shared"")
}

```

This approach is cumbersome because I need to know all tenants in advance and I have to duplicate all tenant models for each tenant.

2. **Create two separate Prisma schema files, one for tenants and one for shared data:**

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Post {
  id       Int       @id @default(autoincrement())
  Text     String
  PostType PostType  @relation(fields: [post_type_id], references: [id])
  ...
}

``` 
```

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL2"")
}

model PostType {
  id          Int      @id @default(autoincrement())
  description String
  @@schema(""shared"")
}

```

In this way, for tenants, I can use middleware to inject the tenant into the connection string. This way, I don't have to know the tenants in advance and I don't have to duplicate the models. However, I end up with two separate services for shared and tenants, which prevents me from performing various operations (e.g., joins) across these services.

## Suggested solution

A clear and concise solution would be to allow specifying the schema dynamically for certain tables within the same schema.prisma file, while other tables can default to the schema defined in the connection string. This would enable:

- Dynamic schema management for tenants without duplicating models.
- Seamless integration and queries across shared and tenant-specific tables within a single Prisma client.

```
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model Post { // This should use the schema defined in the connection string
  id       Int       @id @default(autoincrement())
  Text     String
  PostType PostType  @relation(fields: [post_type_id], references: [id])
  ...
}

model PostType {
  id          Int      @id @default(autoincrement())
  description String
  @@schema(""shared"") // This should always use the 'shared' schema
}

```

## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->

## Additional context

Allowing dynamic schema specification would greatly enhance the flexibility and usability of Prisma in multi-tenant environments. It would reduce the need for redundant configurations and enable more powerful and efficient data management strategies. This feature would address a significant pain point for developers working with multi-tenant applications and could also provide benefits in other scenarios that do not involve multi-tenancy. 
",,
2440573273,24924,Weird encoding when returning query results from server to client,"### Bug description

I have a NextJS server action, that when called returns a list of possible clients for a user to select.

This list of clients is then used in a select where its id is used as the value.

Currently the return of the server action is like so:

```json
[
  {
    ""id"": ""$n15"",
    ""nome"": ""DEV LOCAL"",
    ""alertas"": ""1"",
    ""modificacaoUsuario"": ""$n15"",
    ""tipoAcesso"": 2,
    ""user_id"": ""$n8"",
    ""funcaoId"": ""$n1"",
    ""visualizouAvisoInicial"": 1
  }
]
```
If you notice, some of the numbers returned have this weird ""$n"" attached to them, instead of `id: 15`, we see `id: ""Sn15""`.

The weird thing, not all numbers seem to have this property, if you noticed the field `tipoAcesso`, it is a number, and it returned correctly.

From doing some investigation on my schema, I've noticed that only the fields marked with `@db.Unsigned` are getting this weird encoding.

So I assume it is either Prisma or NextJS doing something funny with the JSON encoding, has anyone encountered this, or has any possible fixes?



### How to reproduce

Copy my schema and run the code snippet provided with a databse in the same version I mentioned below

### Expected behavior

_No response_

### Prisma information

```prisma
model auth_usuario {
  id                                                                     Int                           @id @default(autoincrement()) @db.UnsignedInt
  nome                                                                   String?                       @db.VarChar(80)
  alertas                                                                auth_usuario_alertas          @default(ativo)
  modificacaoUsuario                                                     Int?                          @db.UnsignedInt
  tipoAcesso                                                             Int?                          @default(2) @db.TinyInt
  user_id                                                                Int?                          @db.UnsignedInt
  funcaoId                                                               Int?                          @db.UnsignedInt
  visualizouAvisoInicial                                                 Boolean                       @default(true)
}
```

```ts
""use server"";

async function getUsers() {
      return await clientDb.$queryRaw<
	      auth_usuario[]
      >`SELECT * FROM auth_usuario WHERE email NOT RLIKE '@my.company.email' AND status NOT IN ('', '0') AND isPartner = 0;`;
}
```


### Environment & setup

- OS: Ubuntu 22.04
- Database: MySQL 5.6 and 8.0
- Node.js version: 20


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.13.0
@prisma/client          : 5.8.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.15.1
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../.npm-global/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../.npm-global/lib/node_modules/prisma/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2438794840,24913,Unable to reach database server at aws-0-us-east-1.pooler.supabase.com:5432 using Prisma migrate dev,"### Bug description

I am encountering an issue where I am unable to connect to my Supabase PostgreSQL database server using Prisma's migrate dev command. This problem started occurring suddenly and was not an issue previously. I have made sure my supabase pooler connection is transaction at port: 6543 but it consistenly says to connect to port: 5432. I have also tried including direct connection but the same error appears. My supabase is active.

```
(venv): npx prisma migrate dev
Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""aws-0-us-east-1.pooler.supabase.com:5432""

Error: P1001: Can't reach database server at `aws-0-us-east-1.pooler.supabase.com:5432`

Please make sure your database server is running at `aws-0-us-east-1.pooler.supabase.com:5432`.
```

### How to reproduce

Steps to Reproduce:

Set up a PostgreSQL database on Supabase.
Configure Prisma with the Supabase database connection.
Run the command npx prisma migrate dev.


### Expected behavior

Prisma should successfully connect to the database and apply migrations.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model User {
  id        String     @id
  email     String     @unique
  name      String?
  password  String?
  flashcards Flashcard[]
}

model Flashcard {
  id        String   @id @default(uuid())
  question  String
  answer    String
  order     Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
```

```ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export default prisma
```


### Environment & setup

- OS: Windows
- Database: Supabase
- Node.js version: v20.12.1

### Prisma Version

```
v5.17.0
```
",,
2437935546,24912,Schema folder preview feature can create multiple databases,"### Bug description

### What's not working?

In RedwoodJS we notice odd behavior with the schema folder after supporting the feature in 15.5.

In short, multiple SQLite databases could be created depending on relative paths and working directories.

Thus the migration would run on one database and he client generate on the second -- this meant the app when when using the generated client didn't have any tables and queries failed.

We think it might happen when Prisma initiates a connection to the database, doesn't find and thus creates a new one.

We worked with @jharrell to reproduce and have a repo to showcase it.

See: https://github.com/redwoodjs/redwood/issues/11008 (content below):

This isn't strictly a bug in redwood but I am creating this issue to track what we want to do about the new behaviour (if we care to do anything at all).

In prisma v15.6.0 they made some breaking changes to the multi file schema preview feature:
>* When using relative paths in Prisma Schema files with the prismaSchemaFolder feature, a path is now relative to the file it is defined in rather than relative to the prisma/schema folder. This means that if you have a generator block in /project/prisma/schema/config/generator.prisma with an output of ./foo the output will be resolved to /project/prisma/schema/config/foo rather than /project/prisma/foo. The path to a SQLite file will be resolved in the same manner.
>* We realized that during migration many people would have prisma/schema as well as prisma/schema.prisma. Our initial implementation looked for a .prisma file first and would ignore the schema folder if it exists. This is now an error.

We added support for this in redwood recently. There was a slight difference in behaviour when I tested the multi file schema behaviour before and after the upgrade. The location that the database file resolves to is different. 

If you setup the test project you'll get a sqlite database file in the standard spot. If you now enable prisma multi file schema and then perform some action like `yarn rw prisma migrate reset` you'll observe a new database file generated in a different location. This is mentioned in prisma's first point above.

The result of following the reproduction steps below. Observe multiple database files:
<img width=""371"" alt=""image"" src=""https://github.com/user-attachments/assets/7cd64aba-18a0-470e-becb-c6acec89be2d"">

Maybe this is just something users should expect given prisma have changed their behaviour and we have nothing to do here? Perhaps we should add documentation to highlight this to our users? 

I'll leave it up to @dthyresson to how to go forward but happy if you want to just close this as expected behaviour. 


### How do we reproduce the bug?

* Create a new test project
* Follow the docs to setup multi file schema
* Run `yarn rw prisma migrate reset`
* Observe the new database file generated


### How to reproduce

ere's a non-redwood reproduction of the issue we were seeing: https://github.com/Josh-Walker-GM/prisma-multi-file-issue-repro.

Note we worked with @jharrell and confirmed reproduction case.

### Expected behavior

1. Database not duplicated
2. Client geenrated correctly

### Prisma information

See rep for schema

### Environment & setup

OSX, SQLite, RedwoodJs 7.7.3+, Prisma 15.6.x. See repo for setup.

### Prisma Version

```
 Prisma 15.6.x
```
",,
2435681892,24908,Return type of extension is not being updated based on args,"### Bug description

With the following db tables:

```prisma
model User {
  id       String    @id() @default(uuid()) @db.Uuid()
  comments Comment[]
}

model Comment {
  id     String @id() @default(uuid()) @db.Uuid()
  text   String
  userId String @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])
}
```

And the following extension:

```typescript
const prismax = prisma.$extends({
  model: {
    $allModels: {
      myFancyFind<T, A>(
        this: T,
        args: Prisma.Args<T, ""findFirst"">
      ): Prisma.Result<T, ""findFirst""> {
        const ctx = Prisma.getExtensionContext(this);

        return ctx.findFirst(args);
      },
    },
  },
});
```

I expect this to work.

```typescript
type CommentWithUser = Comment & { user: User };

function fancyFindCommentWithUser(id: string): CommentWithUser {
  return this.prisma.comment.myFancyFind({
    where: { id },
    include: { user: true },
  });
}
```

However, it seems like the return type of `myFancyFind` is not correctly reflecting the args which I'm passing in (which have the `include`).

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. Create prisma schema
2. Write extension
3. Call the extension with the expected return type
4. See error

### Expected behavior

Return type of extension should be updated based on the type of the args passed in to the `Prisma.Result<...>` type, from the generic passed in to the extension.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model User {
  id       String    @id() @default(uuid()) @db.Uuid()
  comments Comment[]
}

model Comment {
  id     String @id() @default(uuid()) @db.Uuid()
  text   String
  userId String @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])
}
```

```ts
const prismax = prisma.$extends({
  model: {
    $allModels: {
      myFancyFind<T, A>(
        this: T,
        args: Prisma.Args<T, ""findFirst"">
      ): Prisma.Result<T, ""findFirst""> {
        const ctx = Prisma.getExtensionContext(this);

        return ctx.findFirst(args);
      },
    },
  },
});

type CommentWithUser = Comment & { user: User };

function fancyFindCommentWithUser(id: string): CommentWithUser {
  return this.prisma.comment.myFancyFind({
    where: { id },
    include: { user: true },
  });
}
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v18.18.2

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 4.13.0
@prisma/client          : 5.17.0
Current platform        : darwin-arm64
Query Engine (Node-API) : libquery-engine 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a (at ../../.npm-global/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Migration Engine        : migration-engine-cli 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a (at ../../.npm-global/lib/node_modules/prisma/node_modules/@prisma/engines/migration-engine-darwin-arm64)
Format Wasm             : @prisma/prisma-fmt-wasm 4.13.0-50.1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
Default Engines Hash    : 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
```
(Although my `package.json` and my `package-lock.json` both show that I'm running prisma version `5.17.0`)",,
2433864218,24901,Prisma generates types incorectly,"### Bug description

latest 5.17.0 version generates incorrect types for client



### How to reproduce

<img width=""772"" alt=""image"" src=""https://github.com/user-attachments/assets/c98523f1-0c66-4e9a-bb60-5aa988fface5"">

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""fullTextSearch"", ""fullTextIndex""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

enum PostStatus {
  DRAFT
  DELETED
  PUBLISHED
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique @db.VarChar(100)
  password   String   @db.VarChar(255)
  name       String   @db.VarChar(100)
  resetToken String?  @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  roleId Int
  Role   Role   @relation(fields: [roleId], references: [id])
  Post   Post[]
}
```
Generated client
```ts
export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: ""PrismaPromise""
    Role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, ""findUniqueOrThrow""> | Null, Null, ExtArgs>
    Post<T extends User$PostArgs<ExtArgs> = {}>(args?: Subset<T, User$PostArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, ""findMany""> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }


findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, ""findUnique""> | null, null, ExtArgs>
```


### Environment & setup

- OS: macOS
- Database: MySQL
- Node.js version: v18.18.2


### Prisma Version

```
prisma                  : 5.17.0
@prisma/client          : 5.17.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.18.2
Query Engine (Node-API) : libquery-engine 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
Default Engines Hash    : 393aa359c9ad4a4bb28630fb5613f9c281cde053
Studio                  : 0.502.0
Preview Features        : fullTextIndex, fullTextSearch
```
",,
2433444627,24898,Delay in prisma:get-platform during first call after AWS lambda deployment.,"### Bug description
From:
![image](https://github.com/user-attachments/assets/36614dac-9b11-40d9-8107-2a924083c24d)

To:
![image](https://github.com/user-attachments/assets/921afc88-6f98-4a25-a56d-6279a2be1539)

I read an article about Prisma reducing Lambda's cold start time by 9x. However, no matter what method I used, the cold start time couldn't be reduced below a certain point. After enabling debug mode and testing, I discovered that the prisma:get-platform command was consuming approximately 1.5 seconds.

I currently use a read-replica, so the second prisma:get-platform log shows the one from the read replica.

### How to reproduce

1. AWS Lambda Node 20.X environment
2. Bundle source codes with esbuild and zip with rhel-openssl-3.0.x(libquery_engine-rhel-openssl-3.0.x.so.node) engine file.
3. Deploy & test

### Expected behavior

Enhanced database connection performance like <1s

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  binaryTargets   = [""native"", ""rhel-openssl-3.0.x""]
  provider        = ""prisma-client-js""
  output          = ""../../node_modules/@prisma/client/cms""
  previewFeatures = [""prismaSchemaFolder"", ""relationJoins"", ""nativeDistinct""]
}

generator json {
  provider = ""prisma-json-types-generator""
}

generator kysely {
  provider = ""prisma-kysely""
  output   = ""../common/generations/prisma""
  fileName = ""kysely.types.ts""
}

datasource database {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```
```ts
/** Initializes the clients. */
export function initializeClients() {
  if (!prisma) {
    const prismaClients = createPrismaClients();
    prisma = prismaClients.finalClient;
    prismaConnectionResolver = prismaClients.initialClient.$connect();
  }

  if (!eventManager) {
    eventManager = createEventStoreClient({
      prisma,
    });
    eventManager.useSagas(Sagas as unknown as Record<string, EventSaga>);
    eventManager.init();
  }
}
```
```ts
  const start = Date.now();
  logger.http('Initializing the clients.');
  initializeClients();
  await prismaConnectionResolver;
  logger.http(`Clients are initialized. (${Date.now() - start}ms)`); // Almost all cases take 1.5 seconds. (When running the Lambda for the first time)
```

prisma client version is 5.17.0


### Environment & setup

- OS: Lambda Node 20.X
- Database: PostgreSQL
- Node.js version: 20.11.0


### Prisma Version

```
5.17.0
```
",,
2430971076,24889,"Dynamic require of ""fs"" is not supported","### Bug description

Hello everyone,

I'm encountering the error ""Dynamic require of 'fs' is not supported"" when starting my project.

Here's the scenario:

I am setting up a repository that uses Prisma to manage two database connections. For this, I have two clients in my project: one located in the default Prisma folder (@prisma/client) and another within the repository itself, located at @shared/infra/database/prisma-second.

![image](https://github.com/user-attachments/assets/4b43b84f-0058-40fd-9c5e-6c6c474c6657)

Currently, the project is built with esbuild using the ""esm"" format, which I cannot change. When switching to cjs, the project runs fine. However, when set to ""ES modules [esm]"", it fails because the files generated by the Prisma client for the second schema dynamically import modules using require.

It is worth noting that the client generated in the default path does not require such dynamic imports, as it does not generate an index.js with a require(""fs"") statement. Thus, it doesn’t cause any issues. The problem only arises with the client generated for the second database.

The question is: how can I generate the client in an ESM format without dynamic imports?

My generator client
![image](https://github.com/user-attachments/assets/5ed3632c-1d1d-46be-b161-ab6e4b1ee265)

The default prisma client generated (without the require(""fs""):
![image](https://github.com/user-attachments/assets/b83dd006-03cb-44ef-aaf1-aa69156188ea)

The Client generated to the second schema with that command: npx prisma generate --schema=./src/shared/infra/database/prisma-second/schema.prisma
![image](https://github.com/user-attachments/assets/9ca9251b-c0f2-464c-920a-53e300818764)



### How to reproduce

<!--
1. Creates an express app
2. install prisma and prisma client
3. creates an first schema.prisma and generates the client
4. create a second schema.prisma with the ""output"" parameter
5. try to use these two prismaClients
6. You also can follow this tutorial: https://www.kenaqshal.com/blog/connecting-to-multiple-databases-with-node-js-and-prisma
-->


### Expected behavior

I expected the Prisma client to be generated in the same way as the default one, without any changes, without dynamic requires or anything that could break the ESM format.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator docs {
  provider              = ""node node_modules/prisma-docs-generator""
  includeRelationFields = false
}

generator dbml {
  provider            = ""prisma-dbml-generator""
  output              = ""erd""
  outputName          = ""erd.dbml""
  projectName         = ""Template""
  projectDatabaseType = ""PostgreSQL""
  projectNote         = ""Consequat aliqua laborum aliquip amet dolore aliquip. Culpa mollit nulla quis quis. Culpa pariatur culpa mollit commodo minim officia anim ea nostrud. Labore in eiusmod minim minim magna laboris laborum tempor nulla culpa culpa. Nisi non eu laborum culpa consequat nisi incididunt aute aute. Exercitation ea duis mollit cillum.""
}

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""linux-musl-openssl-3.0.x"", ""rhel-openssl-1.0.x""]
  output        = ""./client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DB_DIRECT_1"")
}

/// Account
model Account {
  id   String @id @default(uuid())
  name String
}

```

```ts
import { logger } from '@/shared/application/logger';
import { PrismaClientOptions } from '@prisma/client/runtime/library';

import { PrismaClient } from './prisma-second/client';

const shouldDebug = process.env.PRISMA_DEBUG == 'true';

const options = {
    datasources: {
        db: {
            url: process.env.DB_URL_2,
        },
    },
    log: [
        {
            emit: 'event',
            level: 'query',
        },
    ],
} satisfies PrismaClientOptions;

if (!shouldDebug) Reflect.deleteProperty(options, 'log');

export const prismaSecond = new PrismaClient(options);

if (shouldDebug)
    prismaSecond.$on('query', async (e) => {
        logger.info(`${e.query} ${e.params}`);
    });

```


### Environment & setup

- OS: Ubuntu
- Database: PostgreSQL
- Node.js version: 20.10.0


### Prisma Version

```
5.17.0
```
",,
2426973830,24871,Having Type mismatch While Creating a Model using same model type referance,"![image](https://github.com/user-attachments/assets/2319fd9e-d774-46c5-b06a-b2353971cddb)
![image](https://github.com/user-attachments/assets/c2799045-b054-48a1-8ee2-27f80e111904)
![image](https://github.com/user-attachments/assets/cd2f2095-f7cd-4063-a916-989d34cca521)

```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  attribute Json
  Post      Post[]
}
```

```ts
import { PrismaClient } from ""@prisma/client"";
const prismaClientSingleton = () => {
  return new PrismaClient();
};

declare const globalThis: {
  prismaGlobal: ReturnType<typeof prismaClientSingleton>;
} & typeof global;

const prisma = globalThis.prismaGlobal ?? prismaClientSingleton();

export default prisma;

if (process.env.NODE_ENV !== ""production"") globalThis.prismaGlobal = prisma;
```
- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->Debian
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->supabase
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->node -v",,
2426545593,24868,Does the prisma extension lose typesafety?,"## Problem

I'm using the default method, findMany, after customizing it with an extension.
However, when using the extended method, the type of the args is not clearly deducible.

Is this normal?

**original**
![스크린샷 2024-07-24 오후 12 58 48](https://github.com/user-attachments/assets/a93919e3-685e-4842-bc15-f1f2d4eb0bc9)
![스크린샷 2024-07-24 오후 1 05 43](https://github.com/user-attachments/assets/54ee4ae0-6ff6-481e-ba95-bb1970355984)


**extension**
![스크린샷 2024-07-24 오후 12 59 10](https://github.com/user-attachments/assets/fe79f7d7-fe1c-4de3-9598-f0de5e24a325)
![스크린샷 2024-07-24 오후 1 05 59](https://github.com/user-attachments/assets/05e64888-a7f1-4e30-abb4-be229140dd79)


```ts
import { Injectable, OnModuleInit } from ""@nestjs/common"";
import { Prisma, PrismaClient } from ""@prisma/client"";
import { prismaExtendedClient } from ""./prisma.extends"";
import { Config } from ""../../config"";
import { LoggerService } from ""@common/logger/logger.service"";
import { ClsService } from ""nestjs-cls"";

@Injectable()
export class PrismaService extends PrismaClient<Prisma.PrismaClientOptions, ""query"" | ""error"" | ""info"" | ""warn""> implements OnModuleInit {
    readonly extendedClient = prismaExtendedClient(this, this.logger);

    constructor(
        private logger: LoggerService,
        private cls: ClsService,
    ) {
        super({
            log: [
                {
                    emit: ""event"",
                    level: ""query"",
                },
                {
                    emit: ""event"",
                    level: ""error"",
                },
                {
                    emit: ""event"",
                    level: ""info"",
                },
                {
                    emit: ""event"",
                    level: ""warn"",
                },
            ],
        });
    }

    async onModuleInit(): Promise<void> {
        await this.$connect();

        if (process.env.NODE_ENV) {
            const { IS_PRISMA_QUERY_LOG_PRINT, IS_PRISMA_INFO_LOG_PRINT, IS_PRISMA_WARN_LOG_PRINT, IS_PRISMA_ERROR_LOG_PRINT } = Config;

            IS_PRISMA_ERROR_LOG_PRINT &&
                this.$on(""error"", event => {
                    this.logger.query(event, PrismaService.name);
                });
            IS_PRISMA_WARN_LOG_PRINT &&
                this.$on(""warn"", event => {
                    this.logger.query(event, PrismaService.name);
                });

            IS_PRISMA_INFO_LOG_PRINT &&
                this.$on(""info"", event => {
                    this.logger.query(event, PrismaService.name);
                });

            IS_PRISMA_QUERY_LOG_PRINT &&
                this.$on(""query"", event => {
                    event.params === ""[]"" && this.logger.log(`\x1B[96m${event.query.replaceAll(`""public"".`, """")}\x1B[39m \x1B[32m`, PrismaService.name);
                    event.params !== ""[]"" &&
                        this.logger.query(`\x1B[96m${event.query.replaceAll(`""public"".`, """")}\x1B[39m \x1B[32m--- parameter\ ${event.params}\x1B[39m`, PrismaService.name);
                });
        }
    }
}
```


```ts
import { Prisma, PrismaClient } from ""@prisma/client"";
import { LoggerService } from ""@common/logger/logger.service"";

const prisma = new PrismaClient();
export const prismaExtendedClient = (prismaClient: PrismaClient, logger: LoggerService) =>
    prismaClient.$extends({
        query: {
            $allModels: {
                $allOperations({ model, operation, args, query }) {
                    logger.prisma("""", { prisma: { model, args, operation } });
                    return query(args);
                },
                async findMany({ model, operation, args, query }) {
                    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

                    if (target?.fields.find(m => m.name === ""deletedAt"")) {
                        (args as any).where = { ...args.where, deletedAt: null };
                    }

                    (args as any).where && ((args as any).where = whereSoftDelete((args as any).where, model));
                    (args as any).include && ((args as any).include = includeSoftDelete((args as any).include, model));
                    (args as any).select && ((args as any).select = selectSoftDelete((args as any).select, model));

                    return query(args);
                },

                async findFirst({ model, operation, args, query }) {
                    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

                    if (target?.fields.find(m => m.name === ""deletedAt"")) {
                        (args as any).where = { ...args.where, deletedAt: null };
                    }

                    (args as any).where && ((args as any).where = whereSoftDelete((args as any).where, model));
                    (args as any).include && ((args as any).include = includeSoftDelete((args as any).include, model));
                    (args as any).select && ((args as any).select = selectSoftDelete((args as any).select, model));

                    return query(args);
                },

                async findUnique({ model, operation, args, query }) {
                    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

                    if (target?.fields.find(m => m.name === ""deletedAt"")) {
                        (args as any).where = { ...args.where, deletedAt: null };
                    }

                    (args as any).where && ((args as any).where = whereSoftDelete((args as any).where, model));
                    (args as any).include && ((args as any).include = includeSoftDelete((args as any).include, model));
                    (args as any).select && ((args as any).select = selectSoftDelete((args as any).select, model));

                    return query(args);
                },

                async findFirstOrThrow({ model, operation, args, query }) {
                    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

                    if (target?.fields.find(m => m.name === ""deletedAt"")) {
                        (args as any).where = { ...args.where, deletedAt: null };
                    }

                    (args as any).where && ((args as any).where = whereSoftDelete((args as any).where, model));
                    (args as any).include && ((args as any).include = includeSoftDelete((args as any).include, model));
                    (args as any).select && ((args as any).select = selectSoftDelete((args as any).select, model));

                    return query(args);
                },

                async findUniqueOrThrow({ model, operation, args, query }) {
                    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

                    if (target?.fields.find(m => m.name === ""deletedAt"")) {
                        (args as any).where = { ...args.where, deletedAt: null };
                    }

                    (args as any).where && ((args as any).where = whereSoftDelete((args as any).where, model));
                    (args as any).include && ((args as any).include = includeSoftDelete((args as any).include, model));
                    (args as any).select && ((args as any).select = selectSoftDelete((args as any).select, model));

                    return query(args);
                },

                async count({ model, operation, args, query }) {
                    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

                    if (target?.fields.find(m => m.name === ""deletedAt"")) {
                        (args as any).where = { ...args.where, deletedAt: null };
                    }

                    (args as any).where && ((args as any).where = whereSoftDelete((args as any).where, model));
                    (args as any).include && ((args as any).include = includeSoftDelete((args as any).include, model));
                    (args as any).select && ((args as any).select = selectSoftDelete((args as any).select, model));

                    return query(args);
                },

                async update({ model, operation, args, query }) {
                    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

                    return query(args);
                },
            },
        },
        model: {
            $allModels: {
                /** SoftDelete
                 * 테이블 내 deletedAt 컬럼에 현재 날짜를 기록하여 삭제된 데이터로 취급합니다.
                 *  */
                async softDelete<M, A>(this: M, where: Prisma.Args<M, ""update"">[""where""]): Promise<Prisma.Result<M, A, ""update"">> {
                    const context = Prisma.getExtensionContext(this);

                    await cascade.onDelete(context.name as Prisma.ModelName, Object.values(where)[0]);

                    return (context as any).update({
                        where,
                        data: {
                            deletedAt: new Date(),
                        },
                    });
                },
                async softDeleteMany<M, A>(this: M, where: Prisma.Args<M, ""updateMany"">[""where""]): Promise<Prisma.Result<M, A, ""update"">> {
                    const context = Prisma.getExtensionContext(this);

                    return (context as any).updateMany({
                        where,
                        data: {
                            deletedAt: new Date(),
                        },
                    });
                },
            },
        },
    });

const cascade = {
    onDelete: async (model: Prisma.ModelName, id: any) => {
        //요청 모델의 정보
        const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);

        //요청 모델의 Many관계 필터
        const targetMany = target?.fields.filter(m => m.kind === ""object"" && m.isList) || [];

        for (const many of targetMany) {
            //요청 모델의 Many관계 모델 정보
            const includeModel = Prisma.dmmf.datamodel.models.find(m => m.name === many.type);
            const includeModelPrimaryKey = includeModel?.fields.find(m => m.isId);
            const relationFromFields = includeModel?.fields.find(m => m.type === target?.name)?.relationFromFields || [];

            if (includeModel?.fields.some(m => m.name === relationFromFields[0])) {
                const findRelationFromFields = await prisma[many?.type.charAt(0) + many?.type.slice(1)].findMany({ where: { [relationFromFields[0]]: id } });

                if (includeModel?.fields.find(m => m.name === ""deletedAt"")) {
                    for (const relationFromField of relationFromFields) {
                        await prisma[many?.type.charAt(0) + many?.type.slice(1)].updateMany({ where: { [relationFromField]: id }, data: { deletedAt: new Date() } });
                    }
                }

                if (findRelationFromFields.length !== 0) {
                    for (const findRelationTarget of findRelationFromFields) {
                        await cascade.onDelete(includeModel?.name as Prisma.ModelName, findRelationTarget[includeModelPrimaryKey?.name]);
                    }
                }
            }
        }
    },
};

function whereSoftDelete(obj: object, model: Prisma.ModelName) {
    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);
    for (const key in obj) {
        if (obj[key] instanceof Object) {
            const includeModelInfo = target?.fields.find(m => m.name === key);
            if (includeModelInfo) {
                whereSoftDelete(obj[key], includeModelInfo?.type as Prisma.ModelName);
            }
        }

        const includeTarget = Prisma.dmmf.datamodel.models.find(m => m.name === target?.fields.find(m => m.name === key)?.type);

        /** 조인 모델 */
        if (target?.fields.find(m => m.name === key)?.kind === ""object"" && includeTarget?.fields.some(m => m.name === ""deletedAt"")) {
            const includeWhereTarget = target.fields.find(m => m.name === key)?.type;
            const includeWhereIsList = target.fields.find(m => m.name === key)?.isList;
            const includeWhereModel = Prisma.dmmf.datamodel.models.find(m => m.name === includeWhereTarget);

            if (!includeWhereIsList) {
                if (includeWhereModel?.fields.some(m => m.name === ""deletedAt"")) {
                    if (Object.keys(obj[key]).includes(""is"")) {
                        obj[key].is = { ...obj[key].is, deletedAt: null };
                    }

                    if (Object.keys(obj[key]).includes(""isNot"")) {
                        obj[key].isNot = { ...obj[key].isNot, deletedAt: null };
                    }

                    if (!Object.keys(obj[key]).includes(""isNot"") && !Object.keys(obj[key]).includes(""is"")) {
                        obj[key] = { ...obj[key], deletedAt: null };
                    }
                }
            } else {
                if (Object.keys(obj[key]).includes(""some"")) {
                    obj[key].some = { ...obj[key].some, deletedAt: null };
                }

                if (Object.keys(obj[key]).includes(""every"")) {
                    obj[key].every = { ...obj[key].every, deletedAt: null };
                }

                if (Object.keys(obj[key]).includes(""none"")) {
                    obj[key].none = { ...obj[key].none, deletedAt: null };
                }
            }
        }
    }
    return obj;
}

function includeSoftDelete(obj: object, model: Prisma.ModelName) {
    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);
    for (const key in obj) {
        if (obj[key] instanceof Object) {
            const includeModelInfo = target?.fields.find(m => m.name === key);
            includeSoftDelete(obj[key], includeModelInfo ? (includeModelInfo?.type as Prisma.ModelName) : model);
        }

        const includeTarget = Prisma.dmmf.datamodel.models.find(m => m.name === target?.fields.find(m => m.name === key)?.type);

        /** 조인 모델 */
        if (target?.fields.find(m => m.name === key)?.kind === ""object"" && includeTarget?.fields.some(m => m.name === ""deletedAt"")) {
            const includeWhereTarget = target.fields.find(m => m.name === key)?.type;
            const includeWhereIsList = target.fields.find(m => m.name === key)?.isList;
            const includeWhereIsRequired = target.fields.find(m => m.name === key)?.isRequired;
            const includeWhereModel = Prisma.dmmf.datamodel.models.find(m => m.name === includeWhereTarget);

            if (!(!includeWhereIsList && includeWhereIsRequired)) {
                if (!includeWhereIsList) {
                    if (includeWhereModel?.fields.some(m => m.name === ""deletedAt"")) {
                        if (obj[key] === true) {
                            obj[key] = { where: { ...obj[key].where, deletedAt: null } };
                        } else {
                            obj[key][""where""] = { ...obj[key][""where""], deletedAt: null };
                        }
                    }
                } else {
                    if (obj[key] === true) {
                        obj[key] = { where: { ...obj[key].where, deletedAt: null } };
                    } else {
                        obj[key][""where""] = { ...obj[key][""where""], deletedAt: null };
                    }
                }
            }
        }
    }
    return obj;
}

function selectSoftDelete(obj: object, model: Prisma.ModelName) {
    const target = Prisma.dmmf.datamodel.models.find(m => m.name === model);
    for (const key in obj) {
        if (obj[key] instanceof Object) {
            const includeModelInfo = target?.fields.find(m => m.name === key);
            selectSoftDelete(obj[key], includeModelInfo ? (includeModelInfo?.type as Prisma.ModelName) : model);
        }

        const includeTarget = Prisma.dmmf.datamodel.models.find(m => m.name === target?.fields.find(m => m.name === key)?.type);

        /** 조인 모델 */
        if (target?.fields.find(m => m.name === key)?.kind === ""object"" && includeTarget?.fields.some(m => m.name === ""deletedAt"")) {
            const includeWhereTarget = target.fields.find(m => m.name === key)?.type;
            const includeWhereIsList = target.fields.find(m => m.name === key)?.isList;
            const includeWhereIsRequired = target.fields.find(m => m.name === key)?.isRequired;
            const includeWhereModel = Prisma.dmmf.datamodel.models.find(m => m.name === includeWhereTarget);

            if (!(!includeWhereIsList && includeWhereIsRequired)) {
                if (!includeWhereIsList) {
                    if (includeWhereModel?.fields.some(m => m.name === ""deletedAt"")) {
                        if (obj[key] === true) {
                            obj[key] = { where: { ...obj[key].where, deletedAt: null } };
                        } else {
                            obj[key][""where""] = { ...obj[key][""where""], deletedAt: null };
                        }
                    }
                } else {
                    if (obj[key] === true) {
                        obj[key] = { where: { ...obj[key].where, deletedAt: null } };
                    } else {
                        obj[key][""where""] = { ...obj[key][""where""], deletedAt: null };
                    }
                }
            }
        }
    }
    return obj;
}
```",,
2424164966,24861,SELECT prop: undefined behaves like prop: true,"### Bug description

full code:
```typescript
import { PrismaClient } from ""@prisma/client"";
import * as util from ""util"";
const prismaService = new PrismaClient();

async function main() {
  const user = await prismaService.user.create({
    data: { projectList: { createMany: { data: [{}, {}] } } },
  });

  const userSelectWithTrue = await prismaService.user.findUniqueOrThrow({
    where: { id: user.id },
    select: { id: true, propA: true, propB: true, projectList: true },
  });

  const userSelectWithUndefined1 = await prismaService.user.findUniqueOrThrow({
    where: { id: user.id },
    select: { id: true },
  });

  const userSelectWithUndefined2 = await prismaService.user.findUniqueOrThrow({
    where: { id: user.id },
    select: {
      id: true,
      propA: undefined,
      propB: undefined,
      projectList: undefined,
    },
  });

  const userSelectWithFalse = await prismaService.user.findUniqueOrThrow({
    where: { id: user.id },
    select: { id: true, propA: false, propB: false, projectList: false },
  });

  console.log(
    util.inspect(
      {
        userSelectWithTrue,
        userSelectWithUndefined1,
        userSelectWithUndefined2,
        userSelectWithFalse,
      },
      { showHidden: false, depth: null, colors: true }
    )
  );
}

main();
```

SELECT prop: undefined behaves like prop: true
In Prisma, after version 5.16.0, the following query:
```typescript
  const userSelectWithTrue = await prismaService.user.findUniqueOrThrow({
    where: { id: user.id },
    select: { id: true, propA: true, propB: true, projectList: true },
  });
```
behaves the same as:
```typescript
  const userSelectWithUndefined2 = await prismaService.user.findUniqueOrThrow({
    where: { id: user.id },
    select: {
      id: true,
      propA: undefined,
      propB: undefined,
      projectList: undefined,
    },
  });
```

However, this behavior did not occur in Prisma version 5.15.1.

### How to reproduce
https://github.com/KuanWenChen/prisma-issue
1. npm install
2. docker compose up -d
3. npx prisma migrate dev
4. npm run start

### Expected behavior

`undefined` should not be the same as `true`.
`userSelectWithUndefined2` should be the same as `userSelectWithUndefined1`.

### Prisma information
```
generator client {
    provider = ""prisma-client-js""
}

datasource db {
    provider          = ""postgresql""
    url               = env(""DATABASE_URL"")
    shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
}

model User {
    id    Int     @id @default(autoincrement())
    propA String  @default("""")
    propB String?

    projectList Project[]
}

model Project {
    id     Int     @id @default(autoincrement())
    userId Int
    propA  String  @default("""")
    propB  String?

    user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
```

### Environment & setup

CONTAINER_DB_PORT=""5432""
DATABASE_URL=""postgresql://postgres:postgres@127.0.0.1:5432/prisma-issue?schema=public""

### Prisma Version

```
5.17.0
```
",,
2423353542,24859,Can't import enum from prisma client in client-side code,"### Bug description

Can't import enum from prisma client in client-side code.
`console.log(ThemeReviewStatus)` in the client side prints the undefined, while print normally in the loader

```

import { ThemeReviewStatus } from ""@prisma/client"";


export const loader = async ({ request }: LoaderFunctionArgs) => {
  console.log(ThemeReviewStatus);  // as expected

  return json({ ""ok"": 1 });
};

export default function Demo() {
  const loaderData = useLoaderData<typeof loader>();
  console.log(ThemeReviewStatus);  // print undefined
  return (
    <div>
    </div>
  );


}

```

![image](https://github.com/user-attachments/assets/34038296-f537-4ddd-bca9-7d9a2bb6c567)


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

could print the `ThemeReviewStatus` enum in the client side code.

### Prisma information

```
enum ThemeReviewStatus {
  PENDING
  PROCESSING
  APPROVED
  HOLD_ON
  REJECTED
  CANCELLED
}
```

### Environment & setup

- OS:  windows 10 lstc
- Database: [PostgreSQL](postgres:16.3)
- Node.js version: v18.17.1


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v18.17.1
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2421516099,24850,"Support for ""not null *going forward*"", for expand-contract schema+data migration patterns","## Problem

Prisma recommends the ""expand-contract"" pattern for schema & data migrations (which I agree with and think is great):

https://www.prisma.io/dataguide/types/relational/expand-and-contract-pattern

I use this pattern all the time, and the most common case of it for me is adding a new column that I want to eventually set to `NOT NULL`, but I can't at first, because a bunch of existing data still needs to be migrated to it. (And assuming that a simple backfill in a single SQL statement isn't possible, as it often isn't for non-trivial data.)

In my Prisma schema, I only have two options: fully `NOT NULL` (via no `?` modifier on the field) to require this column on both new data going forward _and existing data in the DB_ (since it adds an explicit `NOT NULL` constraint in the DB), or fully nullable (via `?` modifier), which allows both existing data to omit this column _as well as_ new data going forward.

## Suggested solution

I'd love some way to be able to specify that a field may be null on _reads_ — but must not be null on _writes_.

Specifically, no `NOT NULL` constraint should be added to the DB, but the _client library_ (generated code) can and should require the field to be explicitly provided and not null on at least creates, and maybe also updates.

Strawman examples of how this might look:

```prisma
name String? @required // to require it on all writes going forward, both creates and updates

// or:

name String? @required(creates: true, updates: false) // optional args to control when it's required
```

## Alternatives

The only alternative I'm aware of is the only option today: no automatic enforcement. Application code has to take care to ensure it's writing this column going forward on all code paths.

## Additional context

I feel like this'd be a shining example of the power of (a) generated code from Prisma's powerful custom schema language and (b) Prisma's strongly typed (TypeScript) client library! And I'd find it extremely convenient.

Thanks for your consideration.",,
2421336358,24848,Add support to android? Everything works fine in termux except prisma,"## Problem

I always use android with termux to raise my skills in places where I can't open a pc like school. The problem is that everything works fine except prisma
I setup postgresql and svelte kit template project and everything is OK until I did
```
template $ npx prisma migrate dev --name init
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": PostgreSQL database ""dev"", schema ""public"" at ""0.0.0.0:5432""

Error: Schema engine error:

template $ npx prisma -v
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Environment variables loaded from .env
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Error: Unable to require(`/data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node`).
The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements

Details: dlopen failed: ""/data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node"" is for EM_X86_64 (62) instead of EM_AARCH64 (183)
    at Jte (/data/data/com.termux/files/home/work/prv/template/node_modules/prisma/build/index.js:284:116)
    at i7e (/data/data/com.termux/files/home/work/prv/template/node_modules/prisma/build/index.js:284:269)
Error: Command failed with exit code 1: /data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version
/data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x[2]: syntax error: unexpected ';'
    at KAe (/data/data/com.termux/files/home/work/prv/template/node_modules/prisma/build/index.js:5:57)
    at /data/data/com.termux/files/home/work/prv/template/node_modules/prisma/build/index.js:5:10625
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async i7e (/data/data/com.termux/files/home/work/prv/template/node_modules/prisma/build/index.js:284:343) {
  shortMessage: 'Command failed with exit code 1: /data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version',
  command: '/data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version',
  escapedCommand: '""/data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x"" --version',
  exitCode: 1,
  signal: undefined,
  signalDescription: undefined,
  stdout: '',
  stderr: ""/data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x[2]: syntax error: unexpected ';'"",
  failed: true,
  timedOut: false,
  isCanceled: false,
  killed: false
}
prisma                  : 5.17.0
@prisma/client          : 5.17.0
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : android
Architecture            : arm64
Node.js                 : v22.4.1
Query Engine (Node-API) : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
Default Engines Hash    : 393aa359c9ad4a4bb28630fb5613f9c281cde053
Studio                  : 0.502.0
~/.../prv/template $ node -v
v22.4.1
```

## Suggested solution

I have no idea to be honest.
I am in a vacance and I was going to report this as bug but I know that android is not supported so I am asking for it as a feature. 
Based on this line
`""/data/data/com.termux/files/home/work/prv/template/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node"" is for EM_X86_64 (62) instead of EM_AARCH64 (183)` it's a release architecture problem and I don't know what to do with it what should I rebuild or idk
",,
2420904885,24845,All tables missing in build only,"### Bug description

I have a SolidStart webapp with AuthJS and Prisma that runs fine in dev, but in build it fails and throws the following error:

```The table `main.<tablename here>` does not exist in the current database.```.

 I found the recent issue: https://github.com/prisma/prisma/issues/24779
And tried upgrading to `5.18.0-integration-fix-config-dir-client.5` but still got the same error.

It probably has to do with SQLite integration. Similar issue found here without reproduction: https://github.com/prisma/prisma/issues/10633#issuecomment-1570048865

### How to reproduce

1. `npm init solid@latest`
2. Select the following options: Solid-Start: Yes, TypeScript: Yes, template: ""with-prisma""
3. cd into project folder
4. `npm install`
5. `npx prisma generate`
6. `npx prisma migrate dev`
7. `npm run dev`
8. Open ""localhost:3000"". Interact with the site. Register a user, login, logout. Observe correct behavior.
9. `npm run build`
10. `node .output/server/index.mjs`
11. Open ""localhost:3000"". Interact with the site. Register a user, login, logout. Observe it's impossible. Error: `Invalid `prisma.user.findUnique()` invocation: The table `main.User` does not exist in the current database.`

### Expected behavior

Expected to work in build as it does in dev.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}
 
generator client {
  provider = ""prisma-client-js""
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
```

```ts
import DiscordProvider from ""@auth/core/providers/discord"";
import GithubProvider from ""@auth/core/providers/github"";
import { SolidAuthConfig } from ""@solid-mediakit/auth/"";
import { PrismaAdapter } from ""@auth/prisma-adapter"";
import { PrismaClient } from ""@prisma/client"";
import { Adapter } from ""@auth/core/adapters"";

const prisma = new PrismaClient();

export const authOptions: SolidAuthConfig = {
  providers: [
    DiscordProvider({
      clientId: process.env.DISCORD_CLIENT_ID as string,
      clientSecret: process.env.DISCORD_CLIENT_SECRET as string
    }),
    GithubProvider({
      clientId: process.env.GITHUB_CLIENT_ID as string,
      clientSecret: process.env.GITHUB_CLIENT_SECRET as string
    })
  ],
  adapter: PrismaAdapter(prisma) as Adapter,
  basePath: ""/api/auth""
};
```

and

```ts
import { getSession } from ""@solid-mediakit/auth"";
import { cache } from ""@solidjs/router"";
import { getWebRequest } from ""vinxi/server"";
import { authOptions } from ""./auth"";

export const getUserSession = cache(async () => {
    ""use server""
    const request = getWebRequest();
    const session = await getSession(request, authOptions);
    return session;
  }, ""user"");
```

But it could be any code using prisma through the normal client also.

### Environment & setup

- OS: Windows 11
- Database: SQLite
- Node.js version: v21.6.1


### Prisma Version

```
prisma                  : 5.16.2
@prisma/client          : 5.16.2
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
```
",,
2418788304,24835,Incorrect type inferred when using omit + include inside of an include.,"### Bug description

When using the omit type with an include the inferred type is as intended. However, when using an omit and include inside of an include (nested), the type inferred is not correct. The output of the function is correct and the fields are correctly omitted.

Here is a minimal example:
```prisma
model A {
  id Int @id @default(autoincrement())

  model_b B[]
}

model B {
  id Int @id @default(autoincrement())

  a_id Int
  a    A   @relation(fields: [a_id], references: [id])

  private_field String

  c_id Int
  c    C   @relation(fields: [c_id], references: [id])
}

model C {
  id Int @id @default(autoincrement())

  public_field String
  B            B[]
}
```

Example 4 in my minimal example repository shows that a top-level omit + include is correctly inferred whilst a second-level (nested) omit + include is not correctly inferred. Here is the code used.

```ts
const example_four = await prisma.a.findFirst({
  include: {
    model_b: {
      include: {
        c: true,
      },
      omit: {
        private_field: true,
      },
    },
  },
  omit: { id: true },
});
```

The inferred type is as follows:
```ts
({
  model_b: ({
    c: {
      id: number;
      public_field: string;
    };
  } & {
    id: number;
    a_id: number;
    private_field: string;
    c_id: number;
  })[];
} & {}) | null
```
Notice that `A.id` is omitted in the type but `A.model_b.private_field` is not.

Example 5 is similar to the original case which resulted in me noticing this behavior. It is very similar to example 4. In Example 4 I omit a non-relationship field. In this example I omit the relation field `c_id`. Like in example 4, the type is wrong but the output is correct.

### How to reproduce

1. Go to `https://github.com/danielluna90/prisma-nested-omit-type-inference-min-example`
2. `cd prisma-nested-omit-type-inference-min-example`
3. Set `.env`
4. Run `npm i`
5. Run `npm start`
6. Check type interferences and console output


### Expected behavior

The resultant inferred type generated should not include the omitted fields.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""omitApi""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model A {
  id Int @id @default(autoincrement())

  model_b B[]
}

model B {
  id Int @id @default(autoincrement())

  a_id Int
  a    A   @relation(fields: [a_id], references: [id])

  private_field String

  c_id Int
  c    C   @relation(fields: [c_id], references: [id])
}

model C {
  id Int @id @default(autoincrement())

  public_field String
  B            B[]
}
```

```ts
// This is one of two non-working examples. Three working examples and one more non-working example are available at the GitHub repository linked above.
async function example_four_func() {
  const example_four = await prisma.a.findFirst({
    include: {
      model_b: {
        include: {
          c: true,
        },
        omit: {
          private_field: true,
        },
      },
    },
    omit: { id: true },
  });

  // Property 'id' does not exist on type '{ model_b: ({ c: { id: number; public_field: string; }; } & { id: number; a_id: number; private_field: string; c_id: number; })[]; } & {}'. ts(2339)
  // example_four?.id;

  // No Type Error
  example_four?.model_b[0].private_field;

  console.log(""Example Four"");
  console.log(example_four);
  console.log(
    ""example_four->model_b->private_field:"",
    example_four?.model_b[0].private_field
  ); // Returns undefined
  console.log(""==================================================="");
}
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v21.7.0
- Typescript version: v5.5.3

### Prisma Version

```
prisma                  : 5.17.0
@prisma/client          : 5.17.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.7.0
Query Engine (Node-API) : libquery-engine 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
Default Engines Hash    : 393aa359c9ad4a4bb28630fb5613f9c281cde053
Studio                  : 0.502.0
Preview Features        : omitApi
```
",,
2415490096,24829,Incorrect type inferred when using conditional include on 1:N relation field,"### Bug description

```prisma
model A {
    id   Int    @id @default(autoincrement())
    name String

    b B[]
}

model B {
    id   Int    @id @default(autoincrement())
    name String
    aId  Int

    a A @relation(fields: [aId], references: [id])
}
```

`A` may have multiple `B`s.

```ts
await prisma.a.findUniqueOrThrow({
  where: { id },
  include: { b: include },
});
```

As `include` is `boolean`, result type should be inferred like below, or result should have empty array.

```ts
Promise<{
    b?: {
        id: number;
        name: string;
        aId: number;
    }[];
} & {
    id: number;
    name: string;
}>
```

...but actually inferred without appropriate `?`, and the array is actually undefined

### How to reproduce

1. `git clone https://github.com/my-trash-bin/240718`
2. `cd 240718`
3. `npm i`
4. `npm start`

### Expected behavior

One of...

1. Result type should have appropriate `?` on conditional included field (maybe better)
2. Result should have empty array if `include` for the field is not `true`

### Prisma information

```prisma
generator client {
    provider = ""prisma-client-js""
}

datasource db {
    provider = ""sqlite""
    url      = ""file:./db.db""
}

model A {
    id   Int    @id @default(autoincrement())
    name String

    b B[]
}

model B {
    id   Int    @id @default(autoincrement())
    name String
    aId  Int

    a A @relation(fields: [aId], references: [id])
}
```

```ts
export async function main(id: number, include: boolean) {
  return await prisma.a.findUniqueOrThrow({
    where: { id },
    include: { b: include },
  });
}
```


### Environment & setup

- OS: macOS
- Database: SQLite
- Node.js version: v18.19.1

### Prisma Version

```
prisma                  : 5.17.0
@prisma/client          : 5.17.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.19.1
Query Engine (Node-API) : libquery-engine 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 393aa359c9ad4a4bb28630fb5613f9c281cde053 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.17.0-31.393aa359c9ad4a4bb28630fb5613f9c281cde053
Default Engines Hash    : 393aa359c9ad4a4bb28630fb5613f9c281cde053
Studio                  : 0.502.0
```
",,
2413827102,24824,Raw Query Throws an Error in Release 5.17.0,"### Bug description

When invoking the the raw query call, an error is thrown when that wasn't the case before version 5.17.0. For example, we have a health check endpoint that invokes:

```ts
prismaClient.$queryRaw`SELECT 1`
```

In versions 5.16.2 and prior, this worked fine. Now we see: `TypeError: t.map is not a function`

### How to reproduce

1. Specify version `5.17.0` in `package.json` for the `prisma`, `@prisma/client`, and `@prisma/adapter-pg` dependencies
2. Run `npx prisma generate`
3. Launch application and invoke the raw query mentioned above

### Expected behavior

Should execute without any errors.

### Prisma information

We have the following generator client and datasource setup:

```prisma
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
  engineType    = ""library""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

The raw query we used:
```ts
prismaClient.$queryRaw`SELECT 1`
```


### Environment & setup

- OS: **Debian**
- Database: **PostgreSQL**
- Node.js version: **v20.9.0**


### Prisma Version

```
5.17.0
```
",,
2412469341,24814,Raw Query with $executeRaw Fails When Using Variable in SQL CREATE SEQUENCE,"### Bug description

When using the Prisma $executeRaw method to create a SQL sequence with a variable for the sequence name, the query fails with a syntax error. The error message indicates that the variable is not being properly substituted into the SQL query.

This is my code:
```js
const name = 'tenant_code_seq';
await prisma.$executeRaw`CREATE SEQUENCE ${name} START 1`;
```

The query fails with the following error message:
```bash
Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near ""$1""`
```

Debug info: 
![image](https://github.com/user-attachments/assets/2ed64191-c737-4e1b-a297-eaf24b4fd6f5)

But if I don't use variable names to execute, there won't be any errors.
```js
await this.$executeRaw`CREATE SEQUENCE tenant_code_seq START 1`;
```

Using this method will not result in any errors.
```js
const sql = `CREATE SEQUENCE ${name} START 1`;
await this.$executeRawUnsafe(sql);
```
I am currently using this method to temporarily solve the problem.

### How to reproduce

1. Use Prisma Client to execute a raw SQL query with $executeRaw to create a sequence.
2. Use a variable to specify the sequence name.
```js
const name = 'tenant_code_seq';
await prisma.$executeRaw`CREATE SEQUENCE ${name} START 1`;
```
3. Run the code.



### Expected behavior

The sequence should be created successfully with the specified name.


### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
async function checkAndCreateSequence(name: string) {
  const exists = await this.$queryRaw`
    SELECT EXISTS (
      SELECT 1
      FROM pg_class
      WHERE relkind = 'S' AND relname = ${name}
    ) as exists
  `.then((res) => res[0].exists);
  if (!exists) {
    await this.$executeRaw`CREATE SEQUENCE ${name} START 1`;
  }
}
```


### Environment & setup

- OS: MacOS M2
- Database: PostgreSQL 14.11
- Node.js version: 20.11.1

### Prisma Version

```
5.14.0
```
",,
2412263277,24812,Multiple concurrent raw queries lead to timeouts,"### Bug description

Hi there!

I've encountered an issue where Prisma connections get stuck in a ""busy"" state when concurrent `$queryRaw` queries are executed. This only occurs when the connection pool is fully saturated with raw queries and an additional request comes in. I'm able to identify the `busy` state by looking at the `prisma_pool_connections_busy` metric.

#### Only applies to raw queries
I'm confident this is an issue specifically to raw queries because reproducing this with an identical query, constructed using the ORM based method, doesn't cause this problem.

#### Driver specific
Also it's worth flagging I'm able to consistently reproduce this with the default Prisma driver. The issue goes away when using [the node-postgres driver](https://www.prisma.io/docs/orm/overview/databases/postgresql#using-the-node-postgres-driver).

#### Additional info

 - Once one connection gets stuck in a busy state, later queries are hit-or-miss as to whether they will resolve. My theory is that this is because they get assigned to the busy connection (which never becomes available).
 - Killing the runtime and restarting fixes the issue until the connection limit is hit again (hence it not being a database performance issue)

### How to reproduce

1. Create a prisma client instance with the driver argument `connection_limit=10`
2. Create a SQL query which takes at least 100ms to resolve (e.g. an aggregation on a large dataset)
    ```js
    const doThing = (arg) => prisma.$queryRaw`
       SELECT avg(""col"") FROM ""Table"" WHERE ""otherCol"" > ${arg};
    `
    ```
3. Execute this query concurrently, 15 times
   ```js
   Promise.all(Array.from(new Array(15)).map((_, i) => doThing(i))).then(console.log)
   ```

### Expected behavior

The query is executed 15 times. Queries get queued when connections are saturated before being fulfilled. 


Actual behavior: some of the queries get stuck in a busy state and don't ever resolve.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Table {
  col            Int
  otherCol       Int
}
```



### Environment & setup

- OS: macOS and Linux
- Database: PostgresDB
- Node.js version: 20.14.0


### Prisma Version

```
5.17.0
```
",,
2411366892,24807,findMany returns integer instead of floats,"### Bug description

I have this schema where i declared price and priceAfterPromotion as floats: 
```
model Premium {
  createdAt           DateTime           @default(now())
  deletedAt           DateTime?
  purchasedPremiums   PurchasedPremium[]
  id                  String             @id @default(uuid())
  updatedAt           DateTime?          @updatedAt
  durationNum         Int?
  durationUnit        String?
  title               String?
  price               Float?
  priceAfterPromotion Float?
  promotionPercent    Int?

  @@unique([durationNum, durationUnit, price])
}
```
When using findUnique I get the correct values as floats. But when I used findMany i get integers without the floating point

```
  findMany = async (
    args: Prisma.PremiumFindManyArgs,
    c: Context
  ): Promise<PaginatedInterface<Premium>> => {
    try {
      console.log(""********"", await this.prisma.prismaIntit(c).premium.findMany())
      const [data, totalCount] = await Promise.all([
        this.prisma.prismaIntit(c).premium.findMany(args),
        this.prisma.prismaIntit(c).premium.count({ where: { deletedAt: null } })
      ])
      return { paginatedResult: data, totalCount }
    } catch (error: any) {
      throw new Error(`Error updating Premium: ${error.message}`)
    }
  }

  // find a single Premium
  findOne = async (
    id: string | undefined,
    c: Context
  ): Promise<Premium | null> => {
    try {
      const response = await this.prisma.prismaIntit(c).premium.findUnique({
        where: { id: id }
      })
      return response
    } catch (error: any) {
      throw new Error(`Error updating Premium: ${error.message}`)
    }
  }
```


### How to reproduce

1- define schema with properties as floats
2- use findMany
3- get integers instead of floats


### Expected behavior

findMany returns floats

### Prisma information

```
model Premium {
  createdAt           DateTime           @default(now())
  deletedAt           DateTime?
  purchasedPremiums   PurchasedPremium[]
  id                  String             @id @default(uuid())
  updatedAt           DateTime?          @updatedAt
  durationNum         Int?
  durationUnit        String?
  title               String?
  price               Float?
  priceAfterPromotion Float?
  promotionPercent    Int?

  @@unique([durationNum, durationUnit, price])
}
```


```
  findMany = async (
    args: Prisma.PremiumFindManyArgs,
    c: Context
  ): Promise<PaginatedInterface<Premium>> => {
    try {
      console.log(""********"", await this.prisma.prismaIntit(c).premium.findMany())
      const [data, totalCount] = await Promise.all([
        this.prisma.prismaIntit(c).premium.findMany(args),
        this.prisma.prismaIntit(c).premium.count({ where: { deletedAt: null } })
      ])
      return { paginatedResult: data, totalCount }
    } catch (error: any) {
      throw new Error(`Error updating Premium: ${error.message}`)
    }
  }

  // find a single Premium
  findOne = async (
    id: string | undefined,
    c: Context
  ): Promise<Premium | null> => {
    try {
      const response = await this.prisma.prismaIntit(c).premium.findUnique({
        where: { id: id }
      })
      return response
    } catch (error: any) {
      throw new Error(`Error updating Premium: ${error.message}`)
    }
  }
```

### Environment & setup

- OS: Ubuntu
- Database: Cloudflare D1
- Node.js version: v18.20.3


### Prisma Version

```
5.11.0
```
",,
2409620798,24803,Prisma relation query and connect behave strangely with composite relations,"### Bug description

If a `@relation` property has more than one field, it seems to be difficult to use that property in queries and when creating entities using `connect` etc. For example, with the attached schema, querying by `parent: null` always returns NO rows.
```ts
console.log('Root entities:')
const rootEntities = await prisma.node.findMany({
  where: { parent: null }
});
console.log(rootEntities)
```
When enabling query logging I can see that the generated query is expecting _both_ relation fields to be null, even though one of them (tree_id) is not actually nullable.
```sh
Root entities:
prisma:query SELECT `main`.`Node`.`id`, `main`.`Node`.`tree_id`, `main`.`Node`.`node_id`, `main`.`Node`.`parent_id` FROM `main`.`Node` WHERE (`main`.`Node`.`tree_id` IS NULL AND `main`.`Node`.`parent_id` IS NULL) LIMIT ? OFFSET ?
[]
```
It is possible to work around by using a query that refers to the `parent_id` field itself, instead:
```ts
const rootEntities = await prisma.node.findMany({
  where: { parent_id: null }
});
```

In my particular application I'm using this schema instead of the ""simpler"" foreign key into the primary key of the current table because I'm loading the data in bulk and it's not necessarily the case that the parent is read before the child, so it makes the import code much simpler (can read it all in one `createMany` which isn't otherwise possible because the parent's PK isn't known until the parent is created).

### How to reproduce

1. Push attached schema to database
2. Load an entity into the database with parent_id: null
3. Query for entities using `parent: null` 

### Expected behavior

Entities with null `parent` are returned (i.e. those for which `parent_id` is null, or those where the referenced `parent` does not exist. Something like:
```sql
SELECT node.* 
FROM node 
  LEFT OUTER JOIN node AS parent 
  ON node.tree_id=parent.tree_id AND node.parent_id=parent.node_id 
WHERE parent.id IS NULL
```

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Node {
  id        Int     @id @default(autoincrement())
  // Identifies which ""tree"" the trace belongs to
  tree_id   String
  // Identifies the ""node"" in the tree
  node_id   String
  // Parent node in the same tree as the current node, if any
  parent_id String?
  parent    Node?   @relation(""ParentChild"", fields: [tree_id, parent_id], references: [tree_id, node_id])
  child     Node[]  @relation(""ParentChild"")

  // node_id is unique within a given tree, but not globally
  @@unique([tree_id, node_id])
}
```

```ts
const parent = await prisma.node.create({
  data: {
    tree_id: ""1"",
    node_id: ""2"",
  }
});
// Invalid create call
await prisma.node.create({
      data: {
        tree_id: ""1"",
        node_id: ""2"",
        parent: {
          connect: {
            id: parent.id,
          },
        },
      },
    });
// successful create
await prisma.node.create({
      data: {
        tree_id: ""1"",
        node_id: ""2"",
        parent_id: ""1"",
      }
    });
// Returns no nodes
await prisma.node.findMany({
  where: { parent: null }
});
// Returns root node
await prisma.node.findMany({
  where: { parent_id: null }
});
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL, SQLite
- Node.js version: v18.19.0


### Prisma Version

```
prisma                  : 5.16.2
@prisma/client          : 5.16.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
```
",,
2408817055,24798,ConnectorError: 42P05 occurs frequently,"### Bug description

`ConnectorError: 42P05` occurs frequently
(I'm using superbase as my database, and restarting it from the dashboard fixes it temporarily. Then the error starts occurring again right away.)

> [!NOTE]
> I tried it by referring to https://github.com/prisma/prisma/issues/11643

### How to reproduce

1. run: `bunx prisma generate --no-engine`
2. Run the following code:
```ts
const threads = await prisma.thread.findMany({
  include: {
    user: {
      select: {
        avatar: true,
        nickname: true,
        username: true
      }
    },
  },
  orderBy: {
    id: ""desc""
  },
  where: {
    status: {
      not: ""hidden""
    }
  },
  cacheStrategy: {
    ttl: 60,
  }
})
```

### Expected behavior

`ConnectorError: 42P05` does not occur and information is obtained correctly

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma

generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""omitApi""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}

// ユーザーデータ
model User {
  // 固有ID
  id       Int    @id @default(autoincrement())
  // 認証情報
  email    String @unique
  password String

  // 表示
  username  String   @unique
  nickname  String
  avatar    String?
  // アカウント作成日時
  createdAt DateTime @default(now())
  // ステータス
  status    Status   @default(EMAIL_VERIFICATION_PENDING)

  // リレーション
  threads  Thread[]
  messages ThreadMessage[]
  roles    Role[]          @relation(""RoleToUser"")
}

enum Status {
  // メールアドレス認証確認中(未認証)
  EMAIL_VERIFICATION_PENDING
  // 一般(認証済み)
  VERIFIED
  // 学生(学生認証済み)
  STUDENT_VERIFIED
  // アカウント停止
  BANNED
}

// ロール役職
model Role {
  // 固有ID
  id                Int              @id @default(autoincrement())
  // 表示
  name              String
  description       String?
  // 権限
  availableCategory ThreadCategory[] @relation(""RoleToThreadCategory"")

  // meta
  users User[] @relation(""RoleToUser"")
}

model Thread {
  id            Int             @id @default(autoincrement())
  userId        Int
  title         String
  content       String
  createdAt     DateTime        @default(now())
  categoryId    Int
  status        thread_status   @default(normal)
  contentCached String
  user          User            @relation(fields: [userId], references: [id])
  category      ThreadCategory  @relation(fields: [categoryId], references: [id])
  message       ThreadMessage[]
}
```

```ts
// Add your code using Prisma Client

/**
 * - prepared statement \""s0\"" already exists #11643
 * > (Prisma ConnectorError / Code: 42P05)
 * @link {@see https://github.com/prisma/prisma/issues/11643}
 * 
 * - セキュリティ対策
 * @link {@see https://www.prisma.io/docs/orm/prisma-client/queries/excluding-fields#excluding-the-password-field-without-using-omit}
 */

import { PrismaClient } from '@prisma/client';
import { withAccelerate } from '@prisma/extension-accelerate';

export const prisma = new PrismaClient({
  omit: {
    user: {
      password: true
    }
  }
}).$extends(withAccelerate());

```


### Environment & setup

- OS: Ubuntu Linux 20.04.6 LTS
- Database: PostgreSQL (supabase)
- Node.js version: v20.11.1


### Prisma Version

```
prisma                  : 5.16.2
@prisma/client          : 5.16.2
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : omitApi
```",,
2407186200,24789,Generic Types for Abstraction,"## Problem

I'd like to develop a Abstraction for my API's repository, using prisma and typescript, but when I'm typifying my variables I can't go further because prisma generates a diferente type for evey model in the schema and those types doesn't have a generic type (e.g Model<User>) or it doesn't extend any default type (e.g UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends DefaultDelegate)

## Suggested solution

Create generic types for operation types (e.g export type UserDelegate = Delegate<User>)

## Alternatives

Create default types for extension (e.g UserDelegate extends DefaultDelegate)

## Additional context

Below is a example of what I'm building, if there is already a way to do this, please forgive me and post the link of the anwser somewhere. If needed to update the source code I'm willing to do it, I'll just need some guidance.

----------------------------------------------------------------------------------------------------------------------------------------------

```ts
import prisma from ""../../prisma/prisma"";

interface Pagination<T> {
  content: T[];
  count: number;
}

export default class Repository<T, R> {
  constructor(private repository: R) {
    this.repository = repository;
  }

  public async create(data: T): Promise<T> {
    const entity = await this.repository.create({ data });

    await prisma.$disconnect();

    return entity;
  }

  public async update<K>(id: K, data: T): Promise<T> {
    const entity = await this.repository.update({})

    await prisma.$disconnect();

    return entity;
  }

  public async delete<K>(id: K): Promise<void> {
    const entity = await this.repository.delete({})

    await prisma.$disconnect();
  }

  public async findOne<Q>(args: Q): Promise<T> {
    const entity = await this.repository.findUnique(args);

    await prisma.$disconnect();

    return entity;
  }

  public async findMany<Q>(args: Q): Promise<Pagination<T>> {
    const res = await Promise.all([
      this.repository.findMany(args),
      this.repository.count(args)
    ]);

    await prisma.$disconnect();

    return { content: res[0], count: res[1] };
  }
}
```

Thanks a lot, see ya.
",,
2405292026,24782,No more enums generated,"### Bug description


I have added new enum in prisma.schema, then ran npx prisma migrate dev, it was successfull. This type is in the DB.

<img width=""400"" alt=""image"" src=""https://github.com/user-attachments/assets/1d3c8b69-0c15-44cc-b0be-4053108240d6"">


<img width=""699"" alt=""image"" src=""https://github.com/user-attachments/assets/92f9a059-7a53-403d-beb2-9156c224e864"">

But this type did not appear in @prisma/client. Hence i cannot use that type. Already tried npx prisma generate, db pull, reinstalling node_modules.  It's not just typescript server error, because there is no type in prisma file. But also tried to restart typescript server.

<img width=""720"" alt=""image"" src=""https://github.com/user-attachments/assets/ea9f5aa7-56cf-4aa9-85be-dd428d0b5465"">

There are all other types in index.d.ts, that were created previously. Also have tried other names for type, didn't help. Have tried create another enum after that one, it also isn't created in prisma/client.

### How to reproduce

Hard to say exactly.
Create 10 enums, than 11th won't work... 
Might be it?

### Expected behavior

Expected to have generated type in @prisma/client.

### Prisma information

Cannot share all schema

### Environment & setup

- OS: MacOS, but it happens also on Linux and Windows, on any other machine.
- Database: PostgreSQL
- Node.js version: also happens on any version,  tried: 22, 20, 21,  18


### Prisma Version

```
Tried on prisma 5.11, 5.12, 5.15
```",,
2405256651,24780,Selection with `_count: undefined` not working properly,"### Bug description

Settings `_count: undefined` on selection throws an error: `Unknown field at ""wallet._count selection""`

result1 and result2 works properly, result3 no

### How to reproduce

```typescript
const prisma = new PrismaClient()
const result1 = await prisma.authenticator.findMany({ select: { wallet: { select: { id: true, _count: { select: { sent: true } } } } } })
const result2 = await prisma.authenticator.findMany({ select: { wallet: { select: { id: true } } } })
const result3 = await prisma.authenticator.findMany({ select: { wallet: { select: { id: true, _count: undefined } } } })
await prisma.$disconnect()
  ```

### Expected behavior

result3 should not throw and behave like result2

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Wallet {
  id          String  @id @default(auto()) @map(""_id"") @db.ObjectId
}

model Authenticator {
  id         String  @id @default(auto()) @map(""_id"") @db.ObjectId
  
  walletId       String? @db.ObjectId
  wallet         Wallet? @relation(fields: [walletId], references: [id])
}
```



### Environment & setup

- OS: macOS
- Database: MongoDB
- Node.js version: 20.10


### Prisma Version

```
prisma                  : 5.16.2
@prisma/client          : 5.16.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../../node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../../node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
```
",,
2404530612,24779,[SQLite] Bug in `prismaSchemaFolder`: Incorrect Database File Generation and Missing Table Error,"### Bug description

When using Prisma and SQLite in NestJS and the new feature prismaSchemaFolder, with datasource db.url = ""file:./dev.db"". `prisma db push`, a dev.db file will be generated under prisma/schema. But when the application is running, for example, when accessing an API that uses Prisma Client, a dev.db will be generated under the prisma folder, which is a blank database.an error is reported: The table `main.Project` does not exist in the current database. 
![image](https://github.com/user-attachments/assets/ab875c2f-56dd-412b-89ed-aad8e1d6a7e3)
![image](https://github.com/user-attachments/assets/f19ef09c-7fab-4ac1-a828-4a07bb44b07c)

__

### How to reproduce

1. use prismaSchemaFolder
2. db.url = ""file:./dev.db""
3. prisma db push
4. access API with prismaService

### Expected behavior

Use the dev.db file under prisma/schema

### Prisma information

```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""prismaSchemaFolder""]
}

datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

```

```
@Injectable()
export class AppService {
  constructor(private prisma: PrismaService) {}
  getHello() {
    return this.prisma.project.create({
      data: {
        name: 'test',
        description: 'test',
      },
    });
  }
}

```


### Environment & setup

- OS: Windows11
- Database: SQLite
- Node.js version: v20.15.0


### Prisma Version

```
prisma                  : 5.16.2
@prisma/client          : 5.16.2
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.15.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules\.pnpm\@prisma+engines@5.16.2\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules\.pnpm\@prisma+engines@5.16.2\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : prismaSchemaFolder
```
",,
2403629047,24770,createManyAndReturn include do not work with relations defined on other table,"### Bug description

createManyAndReturn include is missing relations that findMany has

### How to reproduce

look at prisma information

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Animal {
  id                  String               @id @default(uuid())
  tenantId            String               @map(""tenant_id"")
  tenant              Tenant               @relation(fields: [tenantId], references: [id])
  duck Duck?

  @@unique([id, tenantId])
  @@map(""apple"")
}

model Duck {
  id           String              @id @default(uuid())
  tenantId     String              @map(""tenant_id"")
  tenant       Tenant              @relation(fields: [tenantId], references: [id])
  animal Animal        @relation(fields: [id, tenantId], references: [id, tenantId])
  name     String              @map(""name"")

  @@unique([id, tenantId])
  @@map(""duck"")
}
```

```ts
getPrismaClient.animal.createManyAndReturn({data: [{
id: 'auuid',
tenantId: 'anotherUUid',
duck: {
create: {
 name: 'quack'
}
}
}], include:{tenant:true}});
```
duck is not typed in typescript...


### Environment & setup

- OS: macOs
- Database: PostgreSQL
- Node.js version: 18.19.1


### Prisma Version

```
5.16.2
```
",,
2402027348,24761,please make generate cli for multischema 제발,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

--- ai-schema.prisma ---
generator client {
  provider = ""prisma-client-js""
  previewFeatures  = [""multiSchema""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  schemas  = [""base"", ""ai""]
}

model CustomerPosture {
  ID                      BigInt   @id @default(autoincrement()) 
  cct_status              String? 
  user_id                 String? 
  @@schema(""ai"")
}
---

generator client {
  provider = ""prisma-client-js""
  previewFeatures  = [""multiSchema""]
}

--- schema.prisma ---
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  schemas  = [""base"", ""ai""]
}

// generator erd {
//   provider = ""prisma-erd-generator""
//   output = ""ERD.svg""
// }

// 사용자 (회원, 트레이너)
model User {
  id        String    @id @default(uuid())
  role      Role      @default(USER)
  type      UserType  @default(PT_MEMBER)
  name      String
  @@schema(""base"")
}

![image](https://github.com/prisma/prisma/assets/82086890/ead0db4c-5276-4471-bdc3-f2d504afe8ba)

## Suggested solution

I have files with multi-schema structure.

I want to generate these two, but currently, there is no way to merge the two and generate them anywhere, not even in the official documentation. 

I know that multi-schema is supported starting from 5.15, so I am trying to introduce it, but a problem occurs in generate cli. Please make this feature.

Please if you already have the feature! Please post it in the official document. Accessibility of official documents is very poor.
Most essential things, such as search and inquiry content, can be found on Stack Overflow.
<!-- A clear and concise description of what you want to happen. -->

## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->
",,
2399658312,24749,Create a DATABASE Import Export Option in Prisma Studio,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
Like Mysql Workbench create a new option to import and export 
In diffrent formates like SQL CSV ....
## Suggested solution

<!-- A clear and concise description of what you want to happen. -->

## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->
",,
2399326939,24748,cannot create databases migrations on Windows,"### Bug description

I can't create a migration from a sqlite database, whenever I run the command to create a migration the following error appears:

schema engine exited. Error: Command failed with UNKNOWN: C:\TheFato\The Fato\Projects Rocketseat\nlw-journey-node\node_modules\@prisma\engines\schema-engine-windows.exe cli --datasource <REDACTED> can-connect-to -data base
spawn UNKNOWN

I've seen other issues reported with this same error, but they always said to install Visual C ++, I did that and it still didn't work

### How to reproduce

<!---
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
---!>


### Expected behavior

create the database migration

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider   = ""prisma-client-js""
  engineType = ""binary""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Trip {
  id           String   @id @default(uuid())
  destination  String
  date_start   DateTime
  date_ends    DateTime
  is_confirmed Boolean  @default(false)
  created_at   DateTime @default(now())

  @@map(""trip"")
}

```


### Environment & setup

- OS:  Windows 10 32 Bits
- Database: SQLite
- Node.js version: 20.14.0


### Prisma Version

```
5.16.2
```
",,
2397488505,24737,Prisma generate option --allow-no-models doesn't work.,"### Bug description

`npx prisma generate --allow-no-models` doesn't work in `v5.16`. It works in `v5.15`

### How to reproduce

## Repository

https://github.com/MansurAliKoroglu/prisma-bug

## Steps

- Run `npm i` to install packages.
- Run `npx prisma generate --allow-no-models` and see it doesn't work
- Edit `package.json` file and change prisma packages to version `5.15.0` 
- Run `npm i` to install packages.
- Run `npx prisma generate --allow-no-models` and see it works.

### Expected behavior

It should work in `v5.16` too.

### Prisma information

```prisma.schema
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}
```

No code needed.

### Environment & setup

OS: Kubuntu 22.04
Node: 20.15.0

### Prisma Version

5.16",,
2393960503,24722,Prisma client defined in .js file instead of .ts breaks intellisense in vscode,"### Bug description

When prisma client instance is defined in .js file with custom extension, VSCode does not provide intellisense at all.

### How to reproduce

```
// prisma.js
const prisma = new PrismaClient().$extends({
  result: {
    user: {
      fullName: {
        // the dependencies
        needs: { firstName: true, lastName: true },
        compute(user) {
          // the computation logic
          return `${user.firstName} ${user.lastName}`
        }
      }
    }
  }
})

export { prisma }
```

```
// example.js
import { prisma } from './prisma.js'

prisma.user // no intellisense at all
```

if extension of prisma file is .ts all works as expected. but i dont use typescript in my project so i cant use client extensions without breaking intellisence in vscode.

### Expected behavior

_No response_

### Prisma information

No prisma information, it's related to VSCode

### Environment & setup

Windows 10, VSCode

### Prisma Version

```
5.14.0
```
",,
2393799277,24720,TypeError thrown when calling Pulse `stream()` API with AND filter,"### Bug description

When calling Pulse's `stream()` API with a filter containing a logical combination (e.g., AND), a TypeError is thrown:

```
node_modules/@prisma/extension-pulse/dist/cjs/serializer.js:105
            serialized[field] = this.#serializeField(field, fields[field]);
                                     ^
TypeError: Cannot read properties of undefined (reading 'PulseSubscriptionFilterSerializer')
    at #serializeFields (/private/tmp/xata-pulse/node_modules/@prisma/extension-pulse/dist/cjs/serializer.js:105:38)
    at Array.map (<anonymous>)
    at PulseSubscriptionFilterSerializer.#serializeFields (/private/tmp/xata-pulse/node_modules/@prisma/extension-pulse/dist/cjs/serializer.js:102:51)
    at PulseSubscriptionFilterSerializer.serialize (/private/tmp/xata-pulse/node_modules/@prisma/extension-pulse/dist/cjs/serializer.js:79:54)
    at establishSubscription (/private/tmp/xata-pulse/node_modules/@prisma/extension-pulse/dist/cjs/entry.node.js:70:27)
    at Proxy.stream (/private/tmp/xata-pulse/node_modules/@prisma/extension-pulse/dist/cjs/entry.node.js:56:32)
    at /private/tmp/xata-pulse/index.ts:13:38
    at Generator.next (<anonymous>)
    at /private/tmp/xata-pulse/index.ts:8:71
    at new Promise (<anonymous>)
```

It happens to `scribe()` too.

### How to reproduce

1. Create a Pulse starter project using `npx try-prisma@latest`
2. Set up database URL and Pulse key
3. Change the TS code to the following

```ts
import 'dotenv/config';
import { PrismaClient } from '@prisma/client';
import { withPulse } from '@prisma/extension-pulse';

process.on('SIGINT', () => {
    process.exit(0);
});

const apiKey: string = process.env.PULSE_API_KEY ?? '';
const prisma = new PrismaClient().$extends(withPulse({ apiKey: apiKey }));

async function main() {
    const stream = await prisma.user.stream({
        create: { AND: [{ name: { contains: 'abc' } }] },
    });

    process.on('exit', (code) => {
        stream.stop();
    });

    for await (const event of stream) {
        console.log('just received an event:', event);
    }
}

main();
```

### Expected behavior

No error is thrown and the filter works.

### Prisma information

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
}
```

```ts
import 'dotenv/config';
import { PrismaClient } from '@prisma/client';
import { withPulse } from '@prisma/extension-pulse';

process.on('SIGINT', () => {
    process.exit(0);
});

const apiKey: string = process.env.PULSE_API_KEY ?? '';
const prisma = new PrismaClient().$extends(withPulse({ apiKey: apiKey }));

async function main() {
    const stream = await prisma.user.stream({
        create: { AND: [{ name: { contains: 'abc' } }] },
    });

    process.on('exit', (code) => {
        stream.stop();
    });

    for await (const event of stream) {
        console.log('just received an event:', event);
    }
}

main();
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL (Supabase)
- Node.js version: v20.10.0


### Prisma Version

```
prisma                  : 5.16.1
@prisma/client          : 5.16.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
```
",,
2393650145,24718,Prisma fails to reconnect after being unfrozen(?) in a Lambda instance,"### Bug description

I've been getting intermittent (1-3% of requests) `P1001` errors in my Lambda functions that look like this:

```
Invalid `prisma.session.findUnique()` invocation:

Can't reach database server at `<db-name>.cluster-czu26m4ieacl.us-west-2.rds.amazonaws.com:5432`

Please make sure your database server is running at `<db-name>.us-west-2.rds.amazonaws.com:5432`.
    at In.handleRequestError (/var/task/node_modules/@prisma/client/runtime/library.js:122:7177)
    at In.handleAndLogRequestError (/var/task/node_modules/@prisma/client/runtime/library.js:122:6211)
    at In.request (/var/task/node_modules/@prisma/client/runtime/library.js:122:5919)
    at async l (/var/task/node_modules/@prisma/client/runtime/library.js:127:11167)
    at async readData (file:///var/task/index.js:237966:23)
    at async Object.getSession (file:///var/task/index.js:126398:29)
    at async Authenticator2.isAuthenticated (file:///var/task/index.js:136666:76)
    at async authenticatedUserOrNull (file:///var/task/index.js:238281:23)
    at async authenticatedUser (file:///var/task/index.js:238267:16)
    at async Promise.all (index 0) {
  clientVersion: '5.14.0',
  errorCode: undefined
}
````

The strangest aspect is that the errors are getting logged a full 7 seconds after the original Lambda invocation finished:
```
2024-07-03T21:44:56.037Z	REPORT RequestId: 82ec3b58-1618-488d-91a4-a29491e7dc40	Duration: 989.84 ms	Billed Duration: 990 ms	Memory Size: 256 MB	Max Memory Used: 182 MB	...
....
2024-07-03T21:45:03.337Z	82ec3b58-1618-488d-91a4-a29491e7dc40	ERROR	Unhandled Promise Rejection
```

There are also a number of `Connection reset by peer` in the RDS error logs which seem correlated.
```
2024-07-03 21:45:03 UTC:10.0.165.245(34030):[unknown]@[unknown]:[19428]:LOG: could not accept SSL connection: Connection reset by peer
...
2024-07-03 21:50:52 UTC:10.0.165.245(7593):postgres@postgres:[19431]:LOG: could not receive data from client: Connection reset by peer
```

My suspicion is that something like this is happening:

* `t = 44:55` - **Request 1** begins
  * Prisma creates a persistent DB connection to postgres over TCP
  * Query successfully issued
  * Response sent
* `t = 44:56` - **Request 1** finished
  * Invocation reported to console
* `t = 44:57` - Amazon freezes the execution environment preventing TCP keep-alive from being delivered ([reddit discussion](https://www.reddit.com/r/aws/comments/n8xlux/frozen_aws_lambda_how_does_keepalive_mechanisms/))
* `t = 45:00`(ish) - TCP connection is reset due to failed keep-alive requests
   * Default Node HTTP agents may not have this problem? ([docs](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html))
* `t = 45:02` - **Request 2** begins
  * Amazon unfreezes the execution environemnt (which is unaware that the postgres TCP connection has been reset)
* `t = 45:03` - Prisma issues query
  * Query fails with `P1001` ""Can't reach database server"" error
  * ...and maybe because the connection was created during **Request 1**, this is reported to the Lambda logs with **Request 1**'s id?

Has anyone else encountered this issue? I'm at a total loss for what to do 😅

### How to reproduce

Deploy an AWS Lambda (I'm using the Node 20.x runtime) with the `server-lambda.js` code below.

Make requests until you encounter the error in the logs.

This requires some non-deterministic combination of triggering concurrent executions & pausing between requests that I can't reliably reproduce. (AWS doesn't document the exact triggers that cause them to freeze a Lambda or what happens with keep-alive packets when frozen. I also can't find any logs in AWS for freezing/unfreezing VMs or TCP resets)

### Expected behavior

I wouldn't expect any connection errors, or for Prisma to try reconnecting if the connection was reset.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider      = ""prisma-client-js""
  // ""rhel-openssl-3.0.x"" is for AWS runtime Node 20.X
  // https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_cli_binary_targets
  binaryTargets = [""native"", ""rhel-openssl-3.0.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

/// Data stored for a browser session
model Session {
  /// Unique session id (the only thing that should be stored in cookies)
  id        String    @id @default(uuid()) @db.Uuid
  /// The serialized session data (including flash data)
  data      Json
}
```

```ts
// server-lambda.js
import { PrismaClient } from ""@prisma/client"";
const prisma = new PrismaClient({
  // Use connection_limit=1 per Prisma docs
  datasourceUrl: process.env.DATABASE_URL
});

// set up connection before invoking handlers
await prisma.$connect();

export const handler = async function (event) {
  const session = await prisma.session.findUnique({
    where: {id: event.id}
  });
  return session;
}
```

### Environment & setup

- OS: [Amazon Linux 2023](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)
- Database: Postgres (Aurora Serverless v2)
- Node.js version: [20.X runtime](https://aws.amazon.com/blogs/compute/node-js-20-x-runtime-now-available-in-aws-lambda/)


### Prisma Version

```
5.14.0
```
",,
2393488174,24717,Missing Typings with OmitApi with external client,"### Bug description

If I try to initialize a global prisma client by specifying the omitConfig first, then the types do not autocomplete.

I need to specify the config outside the actual client because I dont want to have to keep specifying what stuff is being omitted more than once when making my client(s)

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

I should specify what I want to omit once, and use that information both for getting types and for actually making the client

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""omitApi""]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  age       Int
  country   String
  role      Role     @default(USER)
  posts     Post[]
  profile   Profile?
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String?
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

const omitConfig = {
  user: {
    id: true,
  },
}

declare global {
  var prisma: PrismaClient<{ omit: typeof omitConfig }>;
}

const _prisma = global.prisma || new PrismaClient({
  datasourceUrl: process.env.DATABASE_URL,
  omit: omitConfig
});

if (process.env.NODE_ENV === ""development"") global.prisma = prisma;

async function check() {
  const user = await prisma.user.findFirstOrThrow({})
  let y = user.id  // this should have errored saying property 'id' does not exist on type
}
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 22.3


### Prisma Version

```
prisma                  : 5.16.1
@prisma/client          : 5.16.1
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.3.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../usr/local/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../usr/local/lib/node_modules/prisma/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : fullTextSearch, views, relationJoins, omitApi
```
",,
2393483528,24716,`createMany` with `omitApi` client level omit field crashes,"### Bug description

If I enable `omitApi`, and then do a client level omit on `id` for my users table, and then do a createMany in which I dont supply any ids, it crashes saying:
```
Unknown field `id` on model `AffectedRowsOutput`. Available options are marked with ?.
```

### How to reproduce


1. Enable omitApi
2. add client level omit on id column for table
3. Run createMany query for that table
4. See error



### Expected behavior

If I omit the `id` column because I don't want it being returned by default, I should still be able to create many records at once for that model

### Prisma information

```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""omitApi""]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  age       Int
  country   String
  role      Role     @default(USER)
  posts     Post[]
  profile   Profile?
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String?
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

```

```ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient({
  datasourceUrl: process.env.DATABASE_URL,
  omit: {
    user: {
      id: true
    }
  }
});

async function main() {
  await prisma.user.createMany({
    data: [
      {
        email: 'hi@example.com',
        name: 'John Doe',
        age: 30,
        country: 'USA',
        role: 'USER'
      },
      {
        email: 'hello@example.com',
        name: 'Jane Doe',
        age: 25,
        country: 'Canada',
        role: 'ADMIN'
      }
    ]
  });
}

main()
  .catch(e => {
    throw e;
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 22.3


### Prisma Version

```
prisma                  : 5.16.1
@prisma/client          : 5.16.1
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.3.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../usr/local/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../usr/local/lib/node_modules/prisma/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : fullTextSearch, views, relationJoins, omitApi
```
",,
2393136284,24715,Instrumentation: Problems in working with Elastic APM,"### Bug description

I am instrumenting our NestJS application using the Elastic APM OpenTelemetry Bridge. It seems to work fine with all other instrumentation libraries, such as Redis and NestJS, but is not working with Elastic.

Perhaps related to #14887 

When I enable Elastic APM OpenTelemetry Bridge and I enable Prisma Instrumentation, I get an error:

```
TypeError: parentTracer.getSpanLimits is not a function
    at new Span (/home/samir/git/dir/server/node_modules/@opentelemetry/sdk-trace-base/src/Span.ts:126:37)
    at /home/samir/git/dir/server/node_modules/@prisma/instrumentation/dist/chunk-VVAFFO6L.js:59:20
    at Array.forEach (<anonymous>)
    at ActiveTracingHelper.createEngineSpan (/home/samir/git/dir/server/node_modules/@prisma/instrumentation/dist/chunk-VVAFFO6L.js:44:27)
    at ro.createEngineSpan (/home/samir/git/dir/server/node_modules/@prisma/client/runtime/library.js:122:1645)
    at vr.logger (/home/samir/git/dir/server/node_modules/@prisma/client/runtime/library.js:112:1167)
    at /home/samir/git/dir/server/node_modules/@prisma/client/runtime/library.js:112:922
```

### How to reproduce

1. Set up Elastic APM either using a cloud trial or using Elastdocker
2. Instrument the code as shown below
3. Observe the logs

otel.ts:
```
import { NodeSDK } from '@opentelemetry/sdk-node';
import { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { registerInstrumentations } from '@opentelemetry/instrumentation';
import { PrismaInstrumentation } from '@prisma/instrumentation';

export function registerOtelInstrumentations() {
    registerInstrumentations({
        instrumentations: [
            getNodeAutoInstrumentations(),
            new PrismaInstrumentation(),
        ],
    });
    console.log('Registered instrumentation');
}
```

initelastic.ts:
```
import * as apm from 'elastic-apm-node';

import {
    APM_API_KEY,
    APM_SECRET_TOKEN,
    APM_SERVER_URL,
    APM_SERVICE_NAME,
} from './env';
import { registerOtelInstrumentations } from './otel';

// Elastic instrumentation MUST BE FIRST
// If not, the host IP addresses etc. goes wrong.
let apmInstance;
if (!apmInstance) {
    console.log('Apm instance initialized');
    apmInstance = apm.start({
        serviceName: APM_SERVICE_NAME,
        serverUrl: APM_SERVER_URL,
        secretToken: APM_SECRET_TOKEN,
        apiKey: APM_API_KEY,
        opentelemetryBridgeEnabled: true,
    });
}

// OpenTelemetry Instrumentation always must be second
registerOtelInstrumentations();

export default apmInstance;
```

Import initelastic.ts as the first line in entry point.

### Expected behavior

Expect Prisma to not give errors, and Prisma spans to start showing up.

### Prisma information

Running Prisma 5.16.1 

### Environment & setup

- OS: Windows 11 with WSL
- Database: Postgresql 14
- Node.js version: Node 20


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.16.1
@prisma/client          : 5.16.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : tracing
```
",,
2392893066,24713,Failed to deploy nuxtjs+prisma+cloudflareD1 to Cloudflare page,"### Bug description

Building failed with prisma+cloudflareD1 in nuxtjs framework, both local and cloudflare pipeline.

### How to reproduce

Running `prisma generate && nuxt build`
And got this:
```
Running
[plugin inject] node_modules/.pnpm/@prisma+client@5.16.1_prisma@5.16.1/node_modules/.prisma/client/query_engine_bg.wasm: rollup-plugin-inject: failed to parse /opt/buildhome/repo/node_modules/.pnpm/@prisma+client@5.16.1_prisma@5.16.1/node_modules/.prisma/client/query_engine_bg.wasm. Consider restricting the plugin to particular files via options.include
--
00:17:43.355 | [error] [nitro] RollupError: node_modules/.pnpm/@prisma+client@5.16.1_prisma@5.16.1/node_modules/.prisma/client/query_engine_bg.wasm (1:5): Unexpected eof (Note that you need plugins to import files that are not JavaScript)
00:17:43.356 |  
00:17:43.356 |  
00:17:43.356 | 1: asm�V```````````~```~`~`...
00:17:43.357 | ^
00:17:43.357 | 2: `}`\|`~`}`~`}`\|`~`~~`~~`\|`~~`\|`\|`...
00:17:43.357 | 3:  						!...
00:17:43.357 | [error] node_modules/.pnpm/@prisma+client@5.16.1_prisma@5.16.1/node_modules/.prisma/client/query_engine_bg.wasm (1:5): Unexpected eof (Note that you need plugins to import files that are not JavaScript)
00:17:43.357 | at getRollupError (node_modules/.pnpm/rollup@4.18.0/node_modules/rollup/dist/es/shared/parseAst.js:396:41)
00:17:43.358 | at ParseError.initialise (node_modules/.pnpm/rollup@4.18.0/node_modules/rollup/dist/es/shared/node-entry.js:11332:28)
00:17:43.358 | at convertNode (node_modules/.pnpm/rollup@4.18.0/node_modules/rollup/dist/es/shared/node-entry.js:13082:10)
00:17:43.358 | at convertProgram (node_modules/.pnpm/rollup@4.18.0/node_modules/rollup/dist/es/shared/node-entry.js:12399:12)
00:17:43.359 | at Module.setSource (node_modules/.pnpm/rollup@4.18.0/node_modules/rollup/dist/es/shared/node-entry.js:14246:24)
00:17:43.359 | at async ModuleLoader.addModuleSource (node_modules/.pnpm/rollup@4.18.0/node_modules/rollup/dist/es/shared/node-entry.js:18892:13)
00:17:43.359 |  
00:17:43.359 | [error] node_modules/.pnpm/@prisma+client@5.16.1_prisma@5.16.1/node_modules/.prisma/client/query_engine_bg.wasm (1:5): Unexpected eof (Note that you need plugins to import files that are not JavaScript)

```



### Expected behavior

_No response_

### Prisma information


```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

generator zod {
  provider         = ""zod-prisma-types""
  output           = ""./types""
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}
```

```ts
import type { EventHandlerRequest, H3Event } from 'h3'
import { PrismaD1 } from '@prisma/adapter-d1'
import { PrismaClient } from '@prisma/client'

export function useDB(event: H3Event<EventHandlerRequest>): D1Database {
  return event.context.cloudflare.env.db as D1Database
}

let prismaClient: PrismaClient
export function usePrisma(event: H3Event<EventHandlerRequest>) {
  if (!prismaClient) {
    const adapter = new PrismaD1(useDB(event))
    prismaClient = new PrismaClient({ adapter })
  }
  return prismaClient
}

```


### Environment & setup

- OS: macOs
- Database: CloudflareD1
- Node.js version: 20


### Prisma Version

```
prisma                  : 5.16.1
@prisma/client          : 5.16.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.13.1
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/.pnpm/@prisma+engines@5.16.1/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/.pnpm/@prisma+engines@5.16.1/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : driverAdapters
```
",,
2391697297,24705,Unable to connect to SQL Server if Prisma deployed to Kubernetes cluster (TLS: (error: unexpected EOF)),"### Bug description

Hello.

This is the first time I try to deploy my Prisma app to Kubernetes but I am unable to use Prisma that I use in my Express app (Dockerized) if it is deployed to there. Whenever Prisma tries to connect to my SQL Server database, it is throwing this error:
`Invalid Prisma invocation: Error opening a TLS connection: The TLS settings didn't allow the connection to be established. Please review your connection string. (error: unexpected EOF)`

The SQL Server is hosted Windows Server 2016, Kubernetes is on RHEL.

If I build my app to Docker Image locally, it works fine. Here is my connection string:
`DATABASE_URL=""sqlserver://<db-ip>;database=<db1>;user=<db1-user>;password=<db1-pwd>;trustServerCertificate=true;encrypt=true""`

Am I doing something wrong with how I deploy my app with Prisma in it?

### How to reproduce

<!--
1. Build the app into Docker Image
2. Deploy the app into Kubernetes cluster
3. Hit one of my app endpoint
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
	provider = ""prisma-client-js""
	output   = ""./generated/claim""
}

datasource db {
	provider = ""sqlserver""
	url      = env(""DATABASE_URL"")
}
```

```ts
import { PrismaClient as PrismaClaim } from ""../../prisma/generated/claim"";

export const prismaClaim = new PrismaClaim();
```


### Environment & setup

- OS: RHEL
- Database: SQL Server
- Node.js version: v18.20.3


### Prisma Version

```
5.12.1
```
",,
2388201533,24696,`*Many` queries does not support creation of implicit m-m tables,"### Bug description

`createMany`, `createManyAndReturn`, or `updateMany` does not allow the creation of implicit m-m tables.

### How to reproduce

Works:
```typescript
const createPostAndCategory = await prisma.post.create({
  data: {
    title: 'How to become a butterfly',
    categories: {
      create: [{ name: 'Magic' }, { name: 'Butterflies' }],
    },
  },
})
```

Doesn't:
```typescript
const createPostAndCategory = await prisma.post.createMany({
  data: [
    {
      categories: // Object literal may only specify known properties
    }
  ]
})
```

### Expected behavior

Implicit m-m tables can be created using `createMany`, `createManyAndReturn`, or `updateMany`.

### Prisma information

From: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#implicit-many-to-many-relations

```prisma
model Post {
  id         Int        @id @default(autoincrement())
  title      String
  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}
```


### Environment & setup

- OS: Linux
- Database: PostgreSQL
- Node.js version: v20.12.2


### Prisma Version

```
prisma                  : 5.16.1
@prisma/client          : 5.16.1
Computed binaryTarget   : linux-nixos
Operating System        : linux
Architecture            : x64
Node.js                 : v20.12.2
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../../../../../nix/store/nknr29vd7zphq39hzlw8dx3kqs9bjd75-prisma-bin-34ace0eb2704183d2c05b60b52fba5c43c13f303/lib/libquery_engine.node, resolved by PRISMA_QUERY_ENGINE_LIBRARY)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../../../../../nix/store/nknr29vd7zphq39hzlw8dx3kqs9bjd75-prisma-bin-34ace0eb2704183d2c05b60b52fba5c43c13f303/bin/schema-engine, resolved by PRISMA_SCHEMA_ENGINE_BINARY)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : fullTextSearch
```
",,
2385991004,24687,Support Read Committed transaction level for CockroachDB,"## Problem

CockroachDB 24.1+ supports using Read Committed transaction level. However, Prisma doesn't recognize that as a valid level either on a client or on a transaction level. Only `Serializable` is a valid option as of `5.16.1`.

## Suggested solution

* Adjust `TransactionIsolationLevel` enum for CockroachDB to include `ReadCommitted`
* Adjust SQL generation logic to work correctly with ReadCommitted, if necessary.

## Alternatives

* Support passing any transaction isolation level, and only throw an error if DB itself throws an error

## Additional context

https://www.cockroachlabs.com/docs/stable/read-committed
",,
2382321454,24678,"Postinstall fails in Bun environment using `bun prisma generate`, bun x prisma generate`, etc.","### Bug description

I have filed this bug with Bun as well, due to the fact that Bun is allegedly a drop in replacement for NodeJS.

See: https://github.com/oven-sh/bun/issues/12266

I have a minimum reproducable example, detailed logs/ directory, setup.txt showing steps, etc.

Included is a Dockerfile that uses Bun 1.1.17, deployment strategy adopted by Fly.io and has previously worked for me. My projects are deployed via CapRover, Coolify, etc-- anything that can deploy Dockerfile's should work.

https://github.com/maietta/mre-sveltekit-prisma

### How to reproduce



The following steps were taken to set this project up:

Create project:
bun create svelte@latest
    (Choose ESLint, Prettier, Experimental Svelte 5 support)

Switch the adaptor:
bun add -d svelte-adapter-bun
    (Modify the svelte.config.js to refernce the svelte-adapter-bun)

Add Prisma CLI & Client
bun add -D prisma
bun prisma init

Run the SQL create script found in sql/ to create some sample tables.

Introspect the database to create a local Prisma schema.
bun prisma db pull

(Side note: For the purposes of this demo, we will not be baselining the database, but this would be an important step in production.)

Now we are ready for setting up our application.

Add the Prisma Client dependency and generate the local client interface, which by default is included in node_modules/
bun add @prisma/client

Generate the client interface, which will be by default, located in node_modules/, a directory that is not included in our commits.

bun prisma generate

NOTE: This is where we begin to see a problem? This might have been fixed, but we're about to find out. Running the generate command appears to work.

With all the prerequisites out of the way, let's wire up the database to the app and display something out of the database.

After dropping in the Dockerfile and attempting to build, we get hit with the following:

PrismaClientInitializationError: Prisma Client could not locate the Query Engine for runtime ""debian-openssl-1.1.x"".
2.462 
2.462 This happened because Prisma Client was generated for ""rhel-openssl-3.0.x"", but the actual deployment required ""debian-openssl-1.1.x"".
2.462 Add ""debian-openssl-1.1.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:
2.462 
2.462 generator client {
2.462   provider      = ""prisma-client-js""
2.462   binaryTargets = [""native"", ""debian-openssl-1.1.x""]
2.462 }

Let's fix that by updating the prisma.schema and re-running the generate client command.

That did not fix the problem, but now we are starting to reproduce the issues I expierenced.

See logs/ for the various log outputs after each fix attempt.

log2-after-installing-nodejs.txt details what happens when we go ahead and update our Dockerfile to include nodejs. Note that building the docker image locally no longer is successful because now we generate an error. I believe this error might be a big clue as to what is happening.

Let's now try and generate our client outside the node_modules/ and in our project instead, but I think this is a moot point, since we now have errors that seem to point to the problem.

Now that we've got our Prisma.schema with the following:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-1.1.x""]
  output        = ""../src/lib/server/prisma/client""
},

We need to run `bun prisma generate` once again, which will build a new client in our src/lib/server/prisma/client directory. Adjust the local reference in src/lib/prisma.ts.

Afer this, we now have a log3. ""Error when evaluating SSR module /src/lib/server/prisma/client/index-browser.js: - ReferenceError: exports is not defined""

Okay, now I'm getting stumped.

Next, I try and update Dockerfile to use `npx prisma generate` instead of `bun prisma generate`. This results in same problem. This is not our issue.


### Expected behavior

When there is no nodejs present, there is no error.

The moment I install nodejs in my dockerfile, or force the --bun flag to use Bun, that's when the postinstall errors come to light.

### Prisma information

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-1.1.x""]
  // output        = ""../src/lib/server/prisma/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
  authorId  Int
  User      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id      Int      @id @default(autoincrement())
  name    String?  @db.VarChar(255)
  email   String   @unique @db.VarChar(255)
  Post    Post[]
  Profile Profile?
}

### Environment & setup

Running Fedora 40 Workstation.

Bun 1.1.15 through 1.1.17.
PostgreSQL 15

Fails both in and out of Dockerfile (included in MRE repo)

https://github.com/maietta/mre-sveltekit-prisma


### Prisma Version

From packages.json

""prisma"": ""^5.16.1"",

 ""@prisma/client"": ""^5.16.1""",,
2382177038,24675,Prisma Studio localhost:5555 screen is not visible properly when i try to delete something,"### Bug description

when i run `npx prisma studio` 
when i try to delete a data set a popup is appering but the issue is that i cannot see the popup properly


https://github.com/prisma/prisma/assets/107169527/b206550d-aec9-4396-9ba3-1a49bb7c5e0f



### How to reproduce

<!--
1. Go to 'localhost:5555'
try to delete something
first popup is going to warn u
another popup is not visible properly look at the video
See error
-->


### Expected behavior

pop should be visible properly

### Prisma information


```prisma

model Project {
  // Note that the project with ID `internal` is handled as a special case.
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayName      String
  description      String?                @default("""")
  configId         String                 @db.Uuid
  config           ProjectConfig          @relation(fields: [configId], references: [id])
  configOverride   ProjectConfigOverride?
  isProductionMode Boolean

  users      ProjectUser[] @relation(""ProjectUsers"")
  teams      Team[]
  apiKeySets ApiKeySet[]
}

// Contains all the configuration for a project.
// 
// More specifically, ""configuration"" is what we call those settings that only depend on environment variables and overrides between different deployments.
model ProjectConfig {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allowLocalhost    Boolean
  credentialEnabled Boolean
  magicLinkEnabled  Boolean

  createTeamOnSignUp Boolean

  projects             Project[]
  oauthProviderConfigs OAuthProviderConfig[]
  emailServiceConfig   EmailServiceConfig?
  domains              ProjectDomain[]
  permissions          Permission[]

  teamCreateDefaultSystemPermissions TeamSystemPermission[]
  teamMemberDefaultSystemPermissions TeamSystemPermission[]
}

model ProjectDomain {
  projectConfigId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domain      String
  handlerPath String

  projectConfig ProjectConfig @relation(fields: [projectConfigId], references: [id])

  @@unique([projectConfigId, domain])
}

// Environment-specific overrides for a configuration.
//
// This is a quick and dirty way to allow for environment-specific overrides of the configuration.
//
// For most cases, you should prefer to use environment variables.
//
// Note: Overrides (and environment variables) are currently unimplemented, so this model is empty.
model ProjectConfigOverride {
  projectId String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}

model Team {
  projectId String
  teamId    String @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayName String

  project             Project       @relation(fields: [projectId], references: [id])
  permissions         Permission[]
  teamMembers         TeamMember[]
  selectedProjectUser ProjectUser[] // TODO: remove in next release

  @@id([projectId, teamId])
}

model TeamMember {
  projectId     String
  projectUserId String @db.Uuid
  teamId        String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)
  team        Team        @relation(fields: [projectId, teamId], references: [projectId, teamId], onDelete: Cascade)
  selected    Boolean?

  directPermissions TeamMemberDirectPermission[]

  @@id([projectId, projectUserId, teamId])
  @@unique([projectId, projectUserId, selected])
}

model TeamMemberDirectPermission {
  id             String  @id @default(uuid()) @db.Uuid
  projectId      String
  projectUserId  String  @db.Uuid
  teamId         String  @db.Uuid
  permissionDbId String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamMember TeamMember @relation(fields: [projectId, projectUserId, teamId], references: [projectId, projectUserId, teamId], onDelete: Cascade)

  // exactly one of [permissionId && permission] or [systemPermission] must be set
  permission       Permission?           @relation(fields: [permissionDbId], references: [dbId], onDelete: Cascade)
  systemPermission TeamSystemPermission?

  @@unique([projectId, projectUserId, teamId, permissionDbId])
  @@unique([projectId, projectUserId, teamId, systemPermission])
}

model Permission {
  // The ID of this permission, as is chosen by and exposed to the user. It is different from the database ID, which is randomly generated and only used internally.
  queryableId     String
  // The database ID of this permission. This is never exposed to any client and is only used to make sure the database has an ID column.
  dbId            String  @id @default(uuid()) @db.Uuid
  // exactly one of [projectConfigId && projectConfig] or [projectId && teamId && team] must be set
  projectConfigId String? @db.Uuid
  projectId       String?
  teamId          String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?

  // The scope of the permission. If projectConfigId is set, may be GLOBAL or TEAM; if teamId is set, must be TEAM.
  scope         PermissionScope
  projectConfig ProjectConfig?  @relation(fields: [projectConfigId], references: [id])
  team          Team?           @relation(fields: [projectId, teamId], references: [projectId, teamId])

  parentEdges                PermissionEdge[]             @relation(""ChildPermission"")
  childEdges                 PermissionEdge[]             @relation(""ParentPermission"")
  teamMemberDirectPermission TeamMemberDirectPermission[]

  isDefaultTeamCreatorPermission Boolean @default(false)
  isDefaultTeamMemberPermission  Boolean @default(false)

  @@unique([projectConfigId, queryableId])
  @@unique([projectId, teamId, queryableId])
}

enum PermissionScope {
  GLOBAL
  TEAM
}

enum TeamSystemPermission {
  UPDATE_TEAM
  DELETE_TEAM
  READ_MEMBERS
  REMOVE_MEMBERS
  INVITE_MEMBERS
}

model PermissionEdge {
  edgeId String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // exactly one of [parentPermissionDbId && parentPermission] or [parentTeamSystemPermission] must be set
  parentPermissionDbId       String?               @db.Uuid
  parentPermission           Permission?           @relation(""ParentPermission"", fields: [parentPermissionDbId], references: [dbId], onDelete: Cascade)
  parentTeamSystemPermission TeamSystemPermission?

  childPermissionDbId String     @db.Uuid
  childPermission     Permission @relation(""ChildPermission"", fields: [childPermissionDbId], references: [dbId], onDelete: Cascade)
}

model ProjectUser {
  projectId     String
  projectUserId String @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project                          Project                            @relation(""ProjectUsers"", fields: [projectId], references: [id])
  projectUserRefreshTokens         ProjectUserRefreshToken[]
  projectUserAuthorizationCodes    ProjectUserAuthorizationCode[]
  projectUserOAuthAccounts         ProjectUserOAuthAccount[]
  projectUserEmailVerificationCode ProjectUserEmailVerificationCode[]
  projectUserPasswordResetCode     ProjectUserPasswordResetCode[]
  projectUserMagicLinkCode         ProjectUserMagicLinkCode[]
  teamMembers                      TeamMember[]

  primaryEmail         String?
  primaryEmailVerified Boolean
  profileImageUrl      String?
  displayName          String?
  passwordHash         String?
  authWithEmail        Boolean

  serverMetadata Json?
  clientMetadata Json?

  selectedTeam   Team?   @relation(fields: [projectId, selectedTeamId], references: [projectId, teamId]) // TODO: remove in next release
  selectedTeamId String? @db.Uuid // TODO: remove in next release

  @@id([projectId, projectUserId])
}

model ProjectUserOAuthAccount {
  projectId             String
  projectUserId         String @db.Uuid
  projectConfigId       String @db.Uuid
  oauthProviderConfigId String
  providerAccountId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providerConfig OAuthProviderConfig @relation(fields: [projectConfigId, oauthProviderConfigId], references: [projectConfigId, id])
  projectUser    ProjectUser         @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)
  oauthTokens    OAuthToken[]

  email String?

  @@id([projectId, oauthProviderConfigId, providerAccountId])
}

model OAuthToken {
  id String @id @default(uuid()) @db.Uuid

  projectId             String
  oAuthProviderConfigId String
  providerAccountId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectUserOAuthAccount ProjectUserOAuthAccount @relation(fields: [projectId, oAuthProviderConfigId, providerAccountId], references: [projectId, oauthProviderConfigId, providerAccountId])

  refreshToken String
  scopes       String[]
}

model OAuthOuterInfo {
  id        String   @id @default(uuid()) @db.Uuid
  info      Json
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectUserRefreshToken {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken String    @unique
  expiresAt    DateTime?

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, refreshToken])
}

model ProjectUserAuthorizationCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorizationCode String   @unique
  redirectUri       String
  expiresAt         DateTime

  codeChallenge       String
  codeChallengeMethod String

  newUser                  Boolean
  afterCallbackRedirectUrl String?

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, authorizationCode])
}

model ProjectUserEmailVerificationCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code        String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  redirectUrl String

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, code])
}

model ProjectUserPasswordResetCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code        String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  redirectUrl String

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, code])
}

model ProjectUserMagicLinkCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code        String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  redirectUrl String
  newUser     Boolean

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, code])
}

//#region API keys

model ApiKeySet {
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  id        String   @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description          String
  expiresAt            DateTime
  manuallyRevokedAt    DateTime?
  publishableClientKey String?   @unique
  secretServerKey      String?   @unique
  superSecretAdminKey  String?   @unique

  @@id([projectId, id])
}

model EmailServiceConfig {
  projectConfigId String        @id @db.Uuid
  projectConfig   ProjectConfig @relation(fields: [projectConfigId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proxiedEmailServiceConfig  ProxiedEmailServiceConfig?
  standardEmailServiceConfig StandardEmailServiceConfig?

  emailTemplates EmailTemplate[]
}

enum EmailTemplateType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  MAGIC_LINK
}

model EmailTemplate {
  projectConfigId    String             @db.Uuid
  emailServiceConfig EmailServiceConfig @relation(fields: [projectConfigId], references: [projectConfigId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Json
  type    EmailTemplateType
  subject String

  @@id([projectConfigId, type])
}

model ProxiedEmailServiceConfig {
  projectConfigId    String             @id @db.Uuid
  emailServiceConfig EmailServiceConfig @relation(fields: [projectConfigId], references: [projectConfigId])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model StandardEmailServiceConfig {
  projectConfigId    String             @id @db.Uuid
  emailServiceConfig EmailServiceConfig @relation(fields: [projectConfigId], references: [projectConfigId])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  senderName  String
  senderEmail String
  host        String
  port        Int
  username    String
  password    String
}

//#endregion

//#region OAuth

// Exactly one of the xyzOAuthConfig variables should be set.
model OAuthProviderConfig {
  projectConfigId String        @db.Uuid
  projectConfig   ProjectConfig @relation(fields: [projectConfigId], references: [id])
  id              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(true)

  proxiedOAuthConfig       ProxiedOAuthProviderConfig?
  standardOAuthConfig      StandardOAuthProviderConfig?
  projectUserOAuthAccounts ProjectUserOAuthAccount[]

  @@id([projectConfigId, id])
}

model ProxiedOAuthProviderConfig {
  projectConfigId String              @db.Uuid
  providerConfig  OAuthProviderConfig @relation(fields: [projectConfigId, id], references: [projectConfigId, id])
  id              String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  type ProxiedOAuthProviderType

  @@id([projectConfigId, id])
  @@unique([projectConfigId, type])
}

enum ProxiedOAuthProviderType {
  GITHUB
  FACEBOOK
  GOOGLE
  MICROSOFT
  SPOTIFY
}

model StandardOAuthProviderConfig {
  projectConfigId String              @db.Uuid
  providerConfig  OAuthProviderConfig @relation(fields: [projectConfigId, id], references: [projectConfigId, id])
  id              String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  type         StandardOAuthProviderType
  clientId     String
  clientSecret String

  @@id([projectConfigId, id])
}

enum StandardOAuthProviderType {
  GITHUB
  FACEBOOK
  GOOGLE
  MICROSOFT
  SPOTIFY
}

//#endregion

```

### Environment & setup

- OS:  Windows
- Database: PostgreSQL
- Node.js version: v20.11.0


### Prisma Version

```
^5.9.1
```
",,
2381708533,24673,nextjs app deployed to vercel edge can't import prisma WASM module,"### Bug description

Hey all,

I recently created a new nextjs project from scratch and was planning to use prisma as always, however I faced an issue using it with vercel edge environment. This issue is valid only for prisma 5.16.x, because 5.15.x works well. I suspect this commit caused this issue https://github.com/prisma/prisma/commit/63793a19799e4b181d76aa06863de47983ac3763

Seems like a nextjs bundler can't import wasm module with default configuration. Please see steps to reproduce for more details and error log

### How to reproduce

1. Create a new nextjs project with `npx create-next-app@latest`
2. Configure prisma according to official guide https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-vercel
3. add `export const runtime = ""edge""` to your nextjs app, so it'll use an edge environment
4. Run it locally or deploy to vercel
5. See error
```
ModuleParseError: Module parse failed: Unexpected character '' (1:0)
The module seem to be a WebAssembly module, but module is not flagged as WebAssembly module for webpack.
BREAKING CHANGE: Since webpack 5 WebAssembly is not enabled by default and flagged as experimental feature.
You need to enable one of the WebAssembly experiments via 'experiments.asyncWebAssembly: true' (based on async modules) or 'experiments.syncWebAssembly: true' (like webpack 4, deprecated).
For files that transpile to WebAssembly, make sure to set the module type in the 'module.rules' section of the config (e. g. 'type: ""webassembly/async""').
(Source code omitted for this binary file)
```


Enabling `experiments.syncWebAssembly` in `next.config.mjs` fixes a problem
```next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack: (config, context) => {
    // console.log(config)
    config.experiments = {
      ...config.experiments,
      asyncWebAssembly: true,
    };
    return config;
  },
};

export default nextConfig;
```

### Expected behavior

I expected such setup to be working according to doc as it was in prisma 5.15.x

### Prisma information

no specific prisma.schema or prisma query is needed, since it's a build time issue, but I have `driverAdapters` feature enabled
```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}
```

### Environment & setup

- OS: MacOS and Vercel Edge environment
- Database: Neon/PostgreSQL
- Node.js version: v20.13.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.16.1
@prisma/client          : 5.16.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.13.1
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : driverAdapters
```
",,
2381222124,24667,"""prismaSchemaFolder"" doesn't exist","### Bug description

In my project I have this config for my prisma generator :  
`generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""prismaSchemaFolder""]
}`

But I have this error : 
`The preview feature ""prismaSchemaFolder"" is not known. Expected one of: deno, driverAdapters, fullTextIndex, fullTextSearch, metrics, multiSchema, postgresqlExtensions, tracing, views`

Can somebody tell me what happens ? I have the latest version of prisma and @prisma/client

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2392990157,24714,Huge performance loss in MySQL 5.7 after upgrade to Prisma 5.x due to `OFFSET ? and LIMIT ?`,"Recently, we upgraded our application from Prisma 4.7.1 to 5.12.1. Throughout test/qa environments, the system was stable and seemed to operate fine. In production, some queries revealed a massive performance loss. The one I'll describe below went from about 200ms to about 2min which results in huge CPU spikes and ultimately downtime in our production environment.

_Note: All my queries were ran against a production database instance with hundreds of GB of memory. The database is accessed over secured, remote connection which added a bit of round trip latency (maybe 100ms) to each query. Tables like `listings` are in the dozens of millions. All other tables are relatively low, either in the order of 10s or 1000s. Finally, I did modify some things in the schema either for clarity or to remove unnecessary information about our use case. I hope I didn't make any typos, but it's possible._

## Database: 

MySQL 5.7

## Tables:

```prisma
model Operator {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255) @unique(map: ""name_uq"")
  createdAt        DateTime          @default(now()) @map(""created_at"")
  updatedAt        DateTime          @default(now()) @updatedAt @map(""updated_at"")

  auctions         Auction[]
  locations        Location[]

  @@map(""operators"")
}

model ShoppingLocation {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255) @unique(map: ""name_uq"")
  createdAt     DateTime        @default(now()) @map(""created_at"")
  updatedAt     DateTime        @default(now()) @updatedAt @map(""updated_at"")

  locations     Location[]

  @@map(""shopping_locations"")
}

model Location {
  id                                Int                 @id @default(autoincrement())
  name                              String              @db.VarChar(255)
  operatorId                        Int                 @map(""operator_id"")
  shoppingLocationId                Int                 @map(""shopping_location_id"")
  createdAt                         DateTime            @default(now()) @map(""created_at"")
  updatedAt                         DateTime            @default(now()) @updatedAt @map(""updated_at"")
  
  operator                          Operator            @relation(fields: [operatorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: ""locations_operators_fk"")
  shoppingLocation                  ShoppingLocation?   @relation(fields: [shoppingLocationId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: ""locations_shopping_locations_fk"")
  listings                          Listing[]
  storageLocations                  StorageLocation[]

  @@map(""locations"")
}

model Auction {
  id                       Int            @id @default(autoincrement())
  title                    String         @db.VarChar(250)
  dateAdded                DateTime       @default(now()) @map(""date_added"")
  dateClosed               DateTime       @map(""date_closed"")
  marketStatus             String         @db.VarChar(16) @default(open) @map(""market_status"")
  updatedAt                DateTime       @default(now()) @updatedAt @map(""updated_at"")
  createdAt                DateTime       @default(now()) @map(""created_at"")
  operatorId               Int            @map(""operator_id"")
  locationId               Int            @map(""location_id"")

  location                 Location       @relation(fields: [locationId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: ""auctions_locations_fk"")
  operator                 Operator       @relation(fields: [operatorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: ""auctions_listings_fk"")
  listings                 Listing[]

  @@map(""auctions"")
}


model Listing {
  id                         Int               @id @default(autoincrement())
  title                      String            @db.VarChar(255)
  dateClosed                 DateTime          @map(""date_closed"")
  locationId                 Int               @default(1) @map(""location_id"")
  createdAt                  DateTime          @default(now()) @map(""created_at"")
  updatedAt                  DateTime          @default(now()) @updatedAt @map(""updated_at"")
  marketStatus               String            @db.VarChar(16) @map(""market_status"")
  auctionId                  Int               @map(""auction_id"")

  auction                    AuctionLot        @relation(fields: [auctionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: ""listings_auctions_fk"")
  location                   Location          @relation(fields: [locationId], references: [id], onUpdate: Restrict)

  @@index([dateClosed], map: ""date_closed_idx"")
  @@index([marketStatus], map: ""market_status_idx"")
  @@index([marketStatus, dateClosed], map: ""market_status_date_closed_idx"")
  @@map(""listings"")
}
```

## Prisma Code

```typescript
async function getAllAuctionsByShoppingLocationId(prisma: PrismaClient, shoppingLocationId: number, limit: number) {
  const auctions = await prisma.auction.findMany({
    orderBy: {
      dateClosed: 'asc',
    },
    select: {
      id: true,
      location: {
        select: {
          id: true,
          name: true,
        }
      },
      listings: {
        select: {
          id: true,
          auctionId: true,
          dateClosed: true,
        },
        orderBy: {
          dateClosed: 'asc',
        },
        take: 1,
      },
      operator: {
        select: {
          id: true,
          name: true,
        },
      },
    },
    take: limit,
    where: {
      marketStatus: 'open',
      location: {
        shoppingLocation: {
          id: shoppingLocationId,
        },
      },
    },
  });

  const auction_ids = auctions.map(record => record.id);

  return prisma.listing.groupBy({
    by: ['auction_id'],
    where: { auction_id: { in: auction_ids } },
    _count: true,
  });
```

## Prisma Queries (version 4.7.1):

```
================================================================================
Query prisma/prisma-engines#1 (199ms)
SELECT 
  `auctions`.`id`, 
  `auctions`.`location_id`, 
  `auctions`.`operator_id` 
FROM `auctions` 
WHERE (`auctions`.`market_status` = ? AND (`auctions`.`id`) IN (
  SELECT `t0`.`id` 
  FROM `auctions` AS `t0` 
  INNER JOIN `locations` AS `j0` ON (`j0`.`id`) = (`t0`.`location_id`) 
  WHERE (
    (`j0`.`id`) IN (
      SELECT `t1`.`id` 
      FROM `locations` AS `t1` 
      INNER JOIN `shopping_locations` AS `j1` ON (`j1`.`id`) = (`t1`.`shopping_location_id`) 
      WHERE (`j1`.`id` = ? AND `t1`.`id` IS NOT NULL)
    ) 
    AND `t0`.`id` IS NOT NULL
  )
)) ORDER BY `auctions`.`date_closed` ASC LIMIT ? OFFSET ?
--------------------------------------------------------------------------------
Query prisma/prisma-engines#2 (192ms)
SELECT `locations`.`id`, `locations`.`name` 
FROM `locations` 
WHERE `locations`.`id` IN (?)
--------------------------------------------------------------------------------
Query prisma/prisma-engines#3 (276ms)
SELECT 
  `listings`.`id`, 
  `listings`.`date_closed`, 
  `listings`.`auction_id` 
FROM `listings` 
WHERE `listings`.`auction_id` IN (?) 
ORDER BY `listings`.`date_closed` ASC
--------------------------------------------------------------------------------
Query prisma/prisma-engines#4 (217ms)
SELECT `operators`.`id`, `operators`.`name`
FROM `operators` 
WHERE `operators`.`id` IN (?)
--------------------------------------------------------------------------------
Query prisma/prisma-engines#5 (238ms)
SELECT 
  COUNT(*), 
  `listings`.`auction_id` 
FROM `listings` 
WHERE `listings`.`auction_id` IN (?) 
GROUP BY `listings`.`auction_id`
================================================================================
```

## Prisma Queries (v5.12.1)

```
================================================================================
Query prisma/prisma-engines#1 (190ms)
SELECT 
  `auctions`.`id`, 
  `auctions`.`location_id`, 
  `auctions`.`operator_id` 
FROM `auctions` 
LEFT JOIN `locations` AS `j1` ON (`j1`.`id`) = (`auctions`.`location_id`) 
LEFT JOIN `shopping_locations` AS `j2` ON (`j2`.`id`) = (`j1`.`shopping_location_id`) 
WHERE (
  `auctions`.`market_status` = ? 
  AND (`j2`.`id` = ? AND (`j2`.`id` IS NOT NULL) AND (`j1`.`id` IS NOT NULL))
) ORDER BY `auctions`.`date_closed` ASC 
LIMIT ? OFFSET ?
--------------------------------------------------------------------------------
Query prisma/prisma-engines#2 (192ms)
SELECT `locations`.`id`, `locations`.`name`
FROM `locations` 
WHERE `locations`.`id` IN (?)
--------------------------------------------------------------------------------
Query prisma/prisma-engines#3 (2m 5s)
SELECT 
  `listings`.`id`, 
  `listings`.`date_closed`, 
  `listings`.`auction_id` 
FROM `listings` 
WHERE `listings`.`auction_id` IN (?) 
ORDER BY `listings`.`date_closed` ASC 
LIMIT ? OFFSET ?
--------------------------------------------------------------------------------
Query prisma/prisma-engines#4 (217ms)
SELECT `operators`.`id`, `operators`.`name` 
FROM `operators` 
WHERE `operators`.`id` IN (?)
--------------------------------------------------------------------------------
Query prisma/prisma-engines#5 (238ms)
SELECT 
  COUNT(*), 
  `listings`.`auction_id` 
FROM `listings` 
WHERE `listings`.`auction_id` IN (?) 
GROUP BY `listings`.`auction_id`
================================================================================
```

## Summary

The queries are mostly identical, but in 5.12.1 Query 3 takes an enormous amount of time relatively speaking. Given this query is very actively used in our application, this caused our database to spin up to 100% CPU usage and locked the application layer out. The severity of this issue for us (and potentially other organizations) is why I'm going to such lengths to communicate it.

Apparently, the addition of LIMIT and OFFSET to the query forced MySQL to compute a different execution plan which avoids the correct index. I'm not sure I have a reasonable suggestion for this besides maybe [supporting query hints](https://github.com/prisma/prisma/issues/23012). I haven't seen much in the way of tooling in the Prisma ecosystem that allows for better debugging of generated queries. Prisma is a bit of a black box in this regard. We've built our own to assist us in debugging these types of issues using the query logger that can be passed to the PrismaClient, but it's pretty time consuming to both track down where the query came from and extract root causes. Then the only real solution is to essentially circumvent Prisma altogether by writing a raw query.

I will say scenarios like these don't have a great avenue for remediation and are difficult to know when they might occur. It certainly influences our organization's sentiment about relying on it. It makes us very head shy about upgrading. I wanted to do my part by passing information along to this team so there is some awareness of the issue. I'm not exactly doing this for the benefit of my organization, but more for the benefit of the product and the community. While I tend to support Prisma when looking into the ORM space, I think there is a serious transparency and performance visibility issue that should be considered of high importance if the goal is to gain mass adoption and for organizations to rely upon it. This is the biggest problem with Prisma in my eyes and it's why I consider no longer using it. I hope this comes across as constructive criticism, and I certainly recognize that it's on the organization to conduct proper performance testing. Prisma would provide a lot of value if it came with tooling to aid in the discovery and remediation of such issues.
",,
2380531309,24665,Weird errors in prisma when my RDS DB scales down,"### Bug description

I saw a very strange error on a brand new environment, for a table that has no rows in it.
```PrismaClientRustPanicError: 
Invalid `prisma.bannedEmail.count()` invocation:

Expected exactly one return row for aggregation query
```

I also got one copy of another error, 
```  ""stack"": ""PrismaClientUnknownRequestError: 
Invalid `prisma.runtimeDeployLog.findMany()` invocation:


Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(Server(MysqlError { code: 1210, message: \""Incorrect arguments to mysqld_stmt_execute\"", state: \""HY000\"" })), transient: false })
 at _n.handleRequestError (/app/node_modules/@prisma/client/runtime/library.js:123:7044)
 at _n.handleAndLogRequestError (/app/node_modules/@prisma/client/runtime/library.js:123:6188)
 at _n.request (/app/node_modules/@prisma/client/runtime/library.js:123:5896)
 at async l (/app/node_modules/@prisma/client/runtime/library.js:128:10871)
....
```

Doing some digging for bug report details, I realized the RDS aurora DB had autoscaled down from 2 -> 1 capacity units. 

During that test, I got a different error. This is one more bizarre because workspace does not have a field `instanceId`
```
PrismaClientKnownRequestError: 
Invalid `prisma.workspace.findFirst()` invocation:

Null constraint violation on the fields: (`instanceId`)
 at _n.handleRequestError (/app/node_modules/@prisma/client/runtime/library.js:123:6854)
 at _n.handleAndLogRequestError (/app/node_modules/@prisma/client/runtime/library.js:123:6188)
 at _n.request (/app/node_modules/@prisma/client/runtime/library.js:123:5896)
 at async l (/app/node_modules/@prisma/client/runtime/library.js:128:10871)
```

I don't know enough about prisma to comment on the possible cause, but smells like threads or stale sockets?

### How to reproduce

1. Use AWS aurora serverless RDS mysql
2. Scale to 2 capacity units
3. Run a steady query load (I did 1ish QPS), not sure it matters
4. Scale to 1 capacity unit

See errors logged.

### Expected behavior

Maybe a `FailedToConnect` error or somesuch. Definitely not an error for a field that isn't even in the table. Also, not sure why I got a 'Null constraint violation' attached to a `findFirst`

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Relevant exceprts, nothing fancy here


// Only table with instanceId
model MbRunnerMetricsLog {
  id           String   @id @default(cuid())
  outpostId    String
  instanceId   String
  instanceType String
  createdAt    DateTime @default(now())
  cpu          Float
  mem          Float
  hdd          Float
  vram         Float?

  @@index([outpostId, createdAt(sort: Desc)])
}

model BannedEmail {
  email     String   @id
  createdAt DateTime @default(now())
}

model Workspace {
  id                    String   @id @default(cuid())
  name                  String?  @unique
  createdAt             DateTime @default(now())
....
  @@index([autoJoinEmailDomain])
  @@index([nextAutoArchiveAt])
}


```

```ts
  prisma.$use(async (params, next) => {
    try {
      return await next(params)
    } catch (e) {
      if (e instanceof PrismaClientUnknownRequestError) {
        if (e.message.includes(""Cannot execute statement in a READ ONLY transaction."")) {
          error({ error: e, info: { message: ""Stuck in read-only transaction, disconnecting."" } })
          // Attempt to try connection and retry
          await prisma.$disconnect()
          return await next(params)
        } else if (e.message.includes(""Incorrect arguments to mysqld_stmt_execute"")) {
          error({ error: e, info: { message: ""Broken mysql connection, disconnecting."" } })
          // Attempt to try connection and retry
          await prisma.$disconnect()
          return await next(params)
        }
      }
      throw e
    }
  })

Usage:
```
export async function isBannedEmail(email: string): Promise<boolean> {
  const found = await prisma.bannedEmail.count({ where: { email: normalizeEmail(email) } })
  return found > 0
}
```

```


### Environment & setup

```
|+Name++++++++++++|+Version++++++++++++|
|-----------------|--------------------|
|+Node++++++++++++|+v20.14.0+++++++++++|+
|+OS++++++++++++++|+debian-openssl-3.0.x|
|+Prisma+Client+++|+5.10.2+++++++++++++|
|+Query+Engine++++|+5a9203d0590c951969e85a7d07215503f4672eb9|
|+Database++++++++|+mysql++++++++++++++|

```

### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
Preview Features        : tracing
```",,
2377670777,24660,$queryRaw ignores `schema` when using @prisma/adapter-pg,"Hi, I've been experimenting using the new `driverAdapters` preview feature with @prisma/adapter-pg so I can use oauth2 token login for Google Cloud SQL [which is not currently supported out of the box by prisma](https://github.com/prisma/prisma/issues/7869).

Our database does not use the `public` schema, rather it uses one called `staging`. When using the built in prisma queries, they succeed as expected. However, when I use `$queryRaw`, raw queries that previously didn't need to be prepended with the schema now fail.

This is my code to instantiate the prisma client:

``` typescript
import { PrismaPg } from ""@prisma/adapter-pg"";
import { PrismaClient } from ""@prisma/client"";
import { GoogleAuth } from ""google-auth-library"";
import { Pool } from ""pg"";

const auth = new GoogleAuth({
  scopes: [""https://www.googleapis.com/auth/sqlservice.login""],
});

const pool = new Pool({
  host: ""/cloudsql/REDACTED"",
  user: ""REDACTED"",
  password: async (): Promise<string> => {
    return (await auth.getAccessToken()) as string;
  },
  database: ""uat"",
  ssl: false,
  idleTimeoutMillis: 0,
  max: 5,
});

const adapter = new PrismaPg(pool, {
  schema: ""staging"",
});

export const prismaClient = new PrismaClient({
  adapter,
  log: [""info"", ""warn"", ""error""],
});
```

This raw query works without the PrismaPg adapter, but fails when I use the adapter:

```typescript
 await prismaClient.$queryRaw`select * from ""AccountingPeriod"" limit 1`;
```
It produces these logs:
![Screenshot 2024-06-27 at 10 40 29](https://github.com/prisma/prisma/assets/972022/b80984bf-6286-46bd-a6e1-b65c03fbcb96)


This raw query succeeds when using the PrismaPg adapter:

```typescript
 await prismaClient.$queryRaw`select * from staging.""AccountingPeriod"" limit 1`;
```

I'm happy to provide more information if needed!
",,
2377495162,24658, Prisma Seed Script Fails After Upgrading to v5.16.0 (DATABASE_URL Error),"### Bug description

After upgrading to `@prisma/client@5.16.0` and `prisma@5.16.0`, my Prisma seed script located in the `/prisma` folder stopped working. The script is executed using a simple command in my `package.json`:

```
""scripts"": {
    ...,
    ""seed_defaultData"": ""ts-node prisma/myFile.js""
},
```

When I run the script (`npm run seed_defaultData`), I now get the following error:

`PrismaClientInitializationError: error: Environment variable not found: DATABASE_URL.`.

Important Details:

- No Code Changes: I haven't made any changes to the seed script itself, my Prisma schema (schema.prisma), or my environment variables.
- Downgrading Works: Reverting back to `@prisma/client@5.15.0` and `prisma@5.15.0` resolves the issue and the seed script runs successfully.
- Possible Cause: I'm aware that Prisma v5.16.0 introduced changes related to the handling of the `/prisma` folder. Could this be causing the `DATABASE_URL` error in my seed script?







### How to reproduce

1. Install @prisma/client@5.16.0 and prisma@5.16.0.
2. Place a seed script (e.g., myFile.js) in the /prisma folder.
3. Define a script in package.json to execute the seed script.
4. Run the script using npm run <script_name>.


### Expected behavior

The seed script should run successfully, populating the database with data.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma

generator client {
       provider = ""prisma-client-js""
}

datasource db {
       provider = ""mysql""
       url      = env(""DATABASE_URL"")
}

model Language {
       id     Int      @id @default(autoincrement())
       name   String   @unique
       Cursus Cursus[]

       @@map(""language"")
}

// other models

```

seed script :
```ts

const { PrismaClient } = require('@prisma/client');

const prismaTest = new PrismaClient();

async function main() {
       const defaultLanguages = [
              { name: 'french' },
              { name: 'english' },
       ];

       // Start a transaction
       const transaction = await prismaTest.$transaction(
              async (prisma) => {
                     // Upsert languages
                     for (let i = 0; i < defaultLanguages.length; i++) {
                            const language = defaultLanguages[i];
                            await prisma.language.upsert({
                                   where: { name: language.name },
                                   update: {},
                                   create: language,
                            });
                     }

                     // Get the IDs of the 'french' and 'english' languages
                     const frenchLanguage = await prisma.language.findUnique({
                            where: { name: 'french' },
                     });

                     const englishLanguage = await prisma.language.findUnique({
                            where: { name: 'english' },
                     });

                     if (!frenchLanguage || !englishLanguage) {
                            throw new Error('Failed to find French or English language.');
                     }
      // Other private code

              }, {
              maxWait: 5000, // default: 2000
              timeout: 10000, // default: 5000
       });
}

main()
       .catch((e) => {
              console.error(e);
              process.exit(1);
       })
       .finally(async () => {
              await prismaTest.$disconnect();
       });

```


### Environment & setup

- OS: Windows
- Database: MySQL
- Node.js version: v20.9.0


### Prisma Version

```
prisma@5.16.0
@prisma/client@5.16.0
```
",,
2377280522,24657,Direct Query Support for Nested Field Extraction in Prisma,"## Problem

When querying related models in Prisma, the nested relations are returned as objects, which may not always be the desired output. For example, given the following models:

```prisma
model item {
  id      Int        @id @default(autoincrement())
  priceId Int
  price   item_price @relation(fields: [priceId], references: [id])
}

model item_price {
  id    Int    @id @default(autoincrement())
  price Int
  item  item[]
}
```

A query to fetch items along with their prices returns the following result:

```json
[
  {
    ""id"": 1,
    ""priceId"": 1,
    ""price"": {
      ""id"": 1,
      ""price"": 100
    }
  },
  {
    ""id"": 2,
    ""priceId"": 2,
    ""price"": {
      ""id"": 2,
      ""price"": 200
    }
  }
]
```

However, for certain use cases, it would be beneficial to directly extract specific fields from the related model and include them in the top-level object. For example, the desired output would be:

```json
[
  {
    ""id"": 1,
    ""priceId"": 1,
    ""price"": 100
  },
  {
    ""id"": 2,
    ""priceId"": 2,
    ""price"": 200
  }
]
```

## Suggested solution

It would be highly useful if Prisma could support direct nested field extraction in the query itself. This would simplify the process and reduce the need for additional mapping logic in the application code.

**Example API:**

An example of the proposed feature might look something like this:

```javascript
const items = await prisma.item.findMany({
  include: {
    price: {
      select: {
        price: true,
      },
    },
  },
  transform: {
    price: 'price.price',
  },
});
```

This would directly return the nested field `price` at the top level as shown in the desired output above.

## Alternatives

Currently, this can be achieved by prisma extension or manually mapping the results in the application code:
```typescript
export const prisma = new PrismaClient({
  log: log,
})
.$extends({
  result: {
    item: {
      price: {
        // @ts-expect-error -not error prisma issue with type.
        needs: { price: true },
        compute(item) {
          return item.price.price
        },
      },
    },
  },
})
```
Or
```javascript
const items = await prisma.item.findMany({
  include: {
    price: true,
  },
});

const formattedItems = items.map(item => ({
  id: item.id,
  priceId: item.priceId,
  price: item.price.price,
}));

console.log(formattedItems);
```

While this workaround is functional, having built-in support for this feature in Prisma would streamline the process and improve code readability.

## Additional context

Thank you for considering this feature request. Having this capability would greatly enhance the flexibility and usability of Prisma in handling complex queries and data transformations.

```[tasklist]
### Tasks
```",,
2375959774,24651,TypeScript says PrismaClient can't receive `omit` property (enabled in client),"Hello!

I've enabled `omitApi` like it is [said in the docs](https://www.prisma.io/docs/orm/prisma-client/queries/excluding-fields):

```
# schema.prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""omitApi""]
}
```

But when using the `omit` for globally hiding a field, TS complains and Prisma fails to build the client:

```ts
import { PrismaClient } from '@prisma/client';

export const prisma = new PrismaClient({
  omit: { user: { password: true } },
   // ^ here
});
```

TS error:

> Object literal may only specify known properties, and 'omit' does not exist in type 'Subset<PrismaClientOptions, PrismaClientOptions>'

Prima error:

> PrismaClientConstructorValidationError: Unknown property omit provided to PrismaClient constructor.

Obs: I regenerated the client and restarted the TS Server.

",,
2375721355,24648,`.$extends` prevents typescript documentation,"### Bug description

Adding doc comments on models/fields with `///` show in the intellisense, **until** the client is extended:

<details>
  <summary>Without Extension</summary>

  
![image](https://github.com/prisma/prisma/assets/51722130/c556173b-2e7a-42e6-9b74-0836ddb577b2)

</details>

<details>
  <summary>With Extension</summary>

![image](https://github.com/prisma/prisma/assets/51722130/35e3bcc6-dc62-478d-a59b-d93fa1e10f24)


</details>

### How to reproduce

1. Create a `schema.prisma` with a `model` with a documented field
2. Instantiate a new client
3. Use `$extends` to extend client
4. Hover over documented field, and see no documentation in intellisense

### Expected behavior

Extending the client should not break the type docs.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model user {
  /// `lastUpdated` is used to track the last time the user's profile was updated.
  ///
  /// This has the main benefit of allowing concurrent ops to check for race conditions.
  lastUpdated                  Int @default(0)
}
```

```ts
import { PrismaClient } from '@prisma/client';

function getExtendedClient() {
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: MONGOHQ_URL
      }
    }
  }).$extends({
    query: {
      user: {
        async update({ args, query }) {
          args.data.lastUpdated = Date.now();
          return query(args);
        },
        async updateMany({ args, query }) {
          args.data.lastUpdated = Date.now();
          return query(args);
        },
        async upsert({ args, query }) {
          const lastUpdated = Date.now();
          args.update.lastUpdated = lastUpdated;
          args.create.lastUpdated = lastUpdated;
          return query(args);
        },
        async create({ args, query }) {
          args.data.lastUpdated = Date.now();
          return query(args);
        },
        async createMany({ args, query }) {
          const data = args.data;
          const lastUpdated = Date.now();
          if (Array.isArray(data)) {
            data.forEach(data => {
              data.lastUpdated = lastUpdated;
            });
          } else {
            data.lastUpdated = lastUpdated;
          }

          return query(args);
        }
        // NOTE: raw ops are untouched, as it is meant to be a direct passthrough to mongodb
        // async findRaw({ model, operation, args, query }) {}
        // async aggregateRaw({ model, operation, args, query }) {}
      }
    }
  });

  const user = (await prisma.user.findMany())[0];

  user?.lastUpdated; // Hovering over should show intellisense

  return prisma;
}
```


### Environment & setup

- OS: Windows 11, WSL 2, Ubuntu 22.04
- Database: MongoDB
- Node.js version: 22.2.0


### Prisma Version

```
prisma                  : 5.5.2
@prisma/client          : 5.5.2
Current platform        : debian-openssl-3.0.x
Query Engine (Node-API) : libquery-engine aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a (at ../node_modules/.pnpm/@prisma+engines@5.5.2/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a (at ../node_modules/.pnpm/@prisma+engines@5.5.2/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.5.1-1.aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
Default Engines Hash    : aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
Studio                  : 0.494.0
```


Probably should go with: https://github.com/prisma/prisma/issues/18561",,
2375634326,24647,Relative paths in datasource URL handled differently with prismaSchemaFolder preview feature,"### Bug description

When using the _prismaSchemaFolder_ preview feature in an Nx workspace where the prisma related files are located in a library instead of the project root, the base dir used to resolve relative paths within the datasource URL differs between prisma CLI and runtime context.

### How to reproduce

I have an Nx workspace that has a structure like:

```
 ┣ apps
 ┃ ┗ …
 ┣ db
 ┃ ┣ certificate.pem
 ┃ ┗ …
 ┣ libs
 ┃ ┗ prisma-client
 ┃     ┣ prisma
 ┃     ┃ ┣ migrations
 ┃     ┃ ┗ schema
 ┃     ┃     ┣ item.prisma
 ┃     ┃     ┗ schema.prisma
 ┃     ┣ src
 ┃     ┗ …
 ┣ .env
 ┗ …
```

The lib _prisma-client_ contains the prisma directory and is imported in a NestJS application that resides under _apps_. The database URL for prisma is set in the .env file in the project root with

```sh
DATABASE_URL=""mysql://${MARIADB_USER}:${MARIADB_PASSWORD}@${MARIADB_SERVER}:${MARIADB_PORT}/${MARIADB_DATABASE}?sslmode=require&sslcert=../../../../db/certificate.pem""
```

Running e.g. the command `npx prisma db push` within _libs/prisma-client_ works. Note that the relative path of _sslcert_ starts on the level of the _schema.prisma_ file.

When starting the NestJS application it fails with the error:

> PrismaClientInitializationError: Can't reach database server at `localhost:3306`
> 
> Please make sure your database server is running at `localhost:3306`.

Changing the relative path within the .env file to `../../../db/certificate.pem` – that is one level less than before – and starting the app succeeds. But now of course the prisma CLI stops working as it cannot resolve that file anymore.

Going back to a single prisma schema file (i.e. not using _prismaSchemaFolder_ feature) fixes the observed discrepancy. Prisma CLI and starting the app are working with the same relative path.

### Expected behavior

The base dir for relative paths should be same regardless of going with a single _schema.prisma_ or using the _prismaSchemaFolder_ preview feature.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""prismaSchemaFolder""]
}

datasource mysql {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Item {
  id   Int    @id @default(autoincrement())
  name String
}
```


### Environment & setup

- OS: macOS
- Database: MariaDB
- Node.js version: v20.13.1


### Prisma Version

```
prisma                  : 5.16.0
@prisma/client          : 5.16.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.13.1
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../../../node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at ../../../node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0
Preview Features        : prismaSchemaFolder
```
",,
2375194901,24644,"""Invalid params: invalid type: map, expected a string"" when prisma push","### Bug description

Hello everyone , since i updated the prisma version to the new one (v5.16.0). I have a bug when i execute the prisma push command.
I'm under enterprise proxy and i downloaded locally the query/schema engines.

``` prisma
λ npm run prisma:push

> startup-manager@1.0.52 prisma:push
> dotenv -e .env.local -- npx prisma db push

Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": PostgreSQL database ""SUM-LOCAL"", schema ""public"" at ""url:49120""
Error: Error in RPC
 Request: {
  ""id"": 1,
  ""jsonrpc"": ""2.0"",
  ""method"": ""schemaPush"",
  ""params"": {
    ""force"": false,
    ""schema"": {
      ""files"": [
        {
          ""path"": ""C:\\ProgramData\\ESPDEV\\_PROJETS\\StartupManager\\prisma\\schema.prisma"",
          ""content"": ""\r\n// This is your Prisma schema file,\r\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\r\ngenerator client {\r\n  provider = \""prisma-client-js\""\r\n  binaryTargets = [\""native\"", \""rhel-openssl-1.1.x\""]\r\n}\r\ndatasource db {\r\n  provider = \""postgresql\""\r\n  url      = env(\""DATABASE_URL\"")\r\n}\r\n\r\nmodel User {\r\n  id    Int     @id @default(autoincrement())\r\n  email String  @unique\r\n  username  String\r\n  password String \r\n}\r\n""
        }
      ]
    }
  }
}
Response: {
  ""jsonrpc"": ""2.0"",
  ""error"": {
    ""code"": -32602,
    ""message"": ""Invalid params: invalid type: map, expected a string.""
  },
  ""id"": 1
}
Invalid params: invalid type: map, expected a string.
```

The bug is due to the prisma version because when i downgrade to the 5.9.1. It works successfully 

``` prisma
λ npm run prisma:push

> startup-manager@1.0.52 prisma:push
> dotenv -e .env.local -- npx prisma db push

Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": PostgreSQL database ""SUM-LOCAL"", schema ""public"" at ""url:49120""

Your database is now in sync with your Prisma schema. Done in 773ms

✔ Generated Prisma Client (v5.9.1) to .\node_modules\@prisma\client in 107ms
```


Did i miss a option to enable or it come from the lib itself ?

Thanks you !

### How to reproduce

Cant reproduce 

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""native"", ""rhel-openssl-1.1.x""]
}
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}


model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  username  String
  password String 
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.10.0


### Prisma Version

```
λ npm run prisma:v

> startup-manager@1.0.52 prisma:v
> dotenv -e .env.local -- npx prisma -v

Environment variables loaded from .env
prisma                  : 5.16.0
@prisma/client          : 5.16.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a (at query_engine-windows.dll.node, resolved by PRISMA_QUERY_ENGINE_LIBRARY)
Schema Engine           : schema-engine-cli aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a (at schema-engine-windows.exe, resolved by PRISMA_SCHEMA_ENGINE_BINARY)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0

```
",,
2373081693,24634,dotenv loading issue with PrismaClient,"### Bug description

In 5.16.0 release, my .env files are no longer loaded, leading to an error using Prisma Client.

```
error: Environment variable not found: DATABASE_URL.
  -->  schema.prisma:7
   |
 6 |   provider = ""postgresql""
 7 |   url      = env(""DATABASE_URL"")
```
Debug:
```
prisma:tryLoadEnv Environment variables not found at null +13ms
prisma:tryLoadEnv Environment variables not found at undefined +1ms
prisma:tryLoadEnv No Environment variables loaded +1ms
```

It's working with the previous release 5.15.1:
```
prisma:tryLoadEnv Environment variables not found at null +2ms
prisma:tryLoadEnv Environment variables loaded from /projectPath/.env +1ms
```

Note that env loading logic has been changed in  https://github.com/prisma/prisma/pull/24417

### How to reproduce

Any classic Prisma project should be concerned.
See Prisma information for a minimal reproducible case.

### Expected behavior

.env file in project root should be loaded when PrismaClient is used.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model test {
  id Int @id
}

```

```ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
await prisma.test.count();
```


### Environment & setup

- OS: Debian 11
- Node.js version: 20.15.0


### Prisma Version

```
prisma                  : 5.16.0
@prisma/client          : 5.16.0
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.15.0
Query Engine (Node-API) : libquery-engine 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 34ace0eb2704183d2c05b60b52fba5c43c13f303 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-24.34ace0eb2704183d2c05b60b52fba5c43c13f303
Default Engines Hash    : 34ace0eb2704183d2c05b60b52fba5c43c13f303
Studio                  : 0.502.0

```
",,
2371265835,24627,queryRaw removes camelCase of renamed columns,"### Bug description

When using `queryRaw` with postgres, columns in SELECT clause renamed using `as` have the camelCase in the name removed for some reason. 


### How to reproduce

<img width=""1131"" alt=""Screenshot 2024-06-25 at 01 00 54"" src=""https://github.com/prisma/prisma/assets/143812141/ff2087fe-9ce9-451b-bce4-afb509af6e32"">

```typescript
// prisma_client.ts
import { PrismaClient } from '@prisma/client';

const DB_URL = `postgres://user:password@localhost:5432/test_db`;
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: DB_URL,
    },
  },
});

prisma.$queryRaw`SELECT
  pb.column_a as colA,
  pb.column_b as colB,
  pb.column_c as colC
  FROM
  proving_a_bug pb`.then((data) => {
  console.log(JSON.stringify(data));
  })
```

```shell
$ npx ts-node prisma_client.ts
[{""cola"":""some text"",""colb"":10,""colc"":""44 as string""},{""cola"":""Moar text"",""colb"":12,""colc"":""not just ANY text""},{""cola"":""Simply just words"",""colb"":93,""colc"":""""}]
```

### Expected behavior

`queryRaw` should return objects with the name of the keys corresponding to the name of the columns in the select query honoring the renaming.

### Prisma information

Node.js v20.6.1
typescript: Version 5.4.3
```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.6.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at ../node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at ../node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```

### Environment & setup

OS: macOS
database : Postgres16

### Prisma Version

```

```
",,
2370667546,24624,"Cannot find module "".prisma/client/default"" from ""/app/node_modules/@prisma/client/default.js""","### Bug description

Hello

I tried to make a sveltekit app with Prisma and bun js adapter, the app is working normally in my local machine production and development server

But when I tried to deploy it to fly.io via docker I got this error:
```bash
2.200 vite v5.3.1 building SSR bundle for production...
2.230 transforming...
8.012 ✓ 713 modules transformed.
8.122 rendering chunks...
8.670 165 |     return this.#worker.postMessage(...args);
8.670 166 |   }
8.670 167 |   #onClose(e) {
8.670 168 |     this.#onExitPromise = e.code, this.emit(""exit"", e.code);
8.670 169 |   }
8.670 170 |   #onError(event) {
8.670                           ^
8.670 error: error: Cannot find module "".prisma/client/default"" from ""/app/node_modules/@prisma/client/default.js""
8.670  cause: {
8.670   ""isTrusted"": true
8.670 }
8.670
8.670       at #onError (node:worker_threads:170:21)
8.670
8.670 Bun v1.1.12 (Linux x64 baseline)
8.711 error: script ""build"" exited with code 1
```

I tried to change the output in schema.prisma to `../src/lib/server/database/generated/client` and imported it and I got this error in dev server:

```bash
53410 |       ssrModule,
53411 |       ssrImportMeta,
53412 |       ssrImport,
53413 |       ssrDynamicImport,
53414 |       ssrExportAll
53415 |     );
                                     ^
ReferenceError: Can't find variable: exports
      at anonymous (:1:26)
      at C:\Users\IslamZaoui\Desktop\elysiaSvelte\node_modules\vite\dist\node\chunks\dep-BcXSligG.js:53415:4
```

### How to reproduce

I ran `flyctl launch` to make new app in fly.io and it create this docker file to deploy my app:
```dockerfile
# syntax = docker/dockerfile:1

# Adjust BUN_VERSION as desired
ARG BUN_VERSION=1.1.12
FROM oven/bun:${BUN_VERSION}-slim as base

LABEL fly_launch_runtime=""SvelteKit/Prisma""

# SvelteKit/Prisma app lives here
WORKDIR /app

# Set production environment
ENV NODE_ENV=""production""


# Throw-away build stage to reduce size of final image
FROM base as build

# Install packages needed to build node modules
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential openssl pkg-config python-is-python3

# Install node modules
COPY --link .npmrc bun.lockb package.json ./
RUN bun install

# Generate Prisma Client
COPY --link prisma .
RUN bunx prisma generate

# Copy application code
COPY --link . .

# Build application
RUN bun run build

# Remove development dependencies
RUN rm -rf node_modules && \
    bun install --ci


# Final stage for app image
FROM base

# Install packages needed for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y openssl && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy built application
COPY --from=build /app/build /app/build
COPY --from=build /app/node_modules /app/node_modules
COPY --from=build /app/package.json /app

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD [ ""bun"", ""./build/index.js"" ]
```

when building the app I got that error in `bun run build`

### Expected behavior

_No response_

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
  output          = ""../src/lib/server/database/generated/client""
}

generator json {
  provider  = ""prisma-json-types-generator""
  namespace = ""PrismaJson""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""POSTGRES_PRISMA_URL"")
  directUrl = env(""POSTGRES_URL_NON_POOLING"")
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  hashedPassword String    @map(""password"")
  created        DateTime  @default(now())
  sessions       Session[]
}

model Session {
  id        String @id @default(uuid())
  userId    String
  expiresAt Int
  user      User   @relation(fields: [userId], references: [id])
}

model Movie {
  id        String   @id @default(uuid())
  title     String
  poster    String
  /// [Quality]
  qualities Json[]
  created   DateTime @default(now())
}

```

```ts
import pkg from 'pg';
import { PrismaPg } from '@prisma/adapter-pg';
import { PrismaClient } from './generated/client';
import { env } from '$env/dynamic/private';

const { Pool } = pkg;

const pool = new Pool({ connectionString: env.POSTGRES_URL });
const adapter = new PrismaPg(pool);
export const prisma = new PrismaClient({
	adapter
});
```


### Environment & setup

- OS: Windows 10 pro
- Database: Vercel PostgreSQL 
- Bun.js version: 1.1.12


### Prisma Version

```bash
prisma                  : 5.15.1
@prisma/client          : 5.15.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v22.2.0
Query Engine (Node-API) : libquery-engine 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules\@prisma\engines\query_engine-windows.dll.node)   
Schema Engine           : schema-engine-cli 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules\@prisma\engines\schema-engine-windows.exe)     
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.1-1.5675a3182f972f1a8f31d16eee6abf4fd54910e3
Default Engines Hash    : 5675a3182f972f1a8f31d16eee6abf4fd54910e3
Studio                  : 0.501.0
Preview Features        : driverAdapters
```
",,
2370177151,24622,Prisma Client: Unknown Argument ,"### Bug description

When attempting to create a record in the logTables model using Prisma Client, I encounter the following error: ""Unknown argument usuarioId. Available options are marked with ?"". The usuarioId field is defined in the Prisma schema, and querying the database with this field works.

### How to reproduce

I Call the api route and this error returns for me.

### Expected behavior

Based in the schemas, i need to not return the error, because the fields exist in both tables.

### Prisma information

```prisma
model QSMS06 {
  id               Int       @id @default(autoincrement())
  usuarioId        Int
  dtVerificacao    DateTime  @db.DateTime
  filialId         Int
  projetoId        Int
  nmEnvolvido      String    @db.NVarChar(150)
  departamentoId   Int
  qsmsCatRiscoId   Int
  desvio           String    @db.NVarChar(150)
  acaoTomada       String    @db.NVarChar(255)
  resolvido        Boolean
  justificativa    String    @db.NVarChar(255)
  dtPrazoAdequacao DateTime  @db.DateTime
  foto             Bytes?
  dtCriacao        DateTime? @default(now()) @db.DateTime
  dtAtualizacao    DateTime? @db.DateTime
  stAcao           String?
  dtAdequacao      DateTime? @db.DateTime
  observacao       String?
  FUNC01           FUNC01    @relation(fields: [departamentoId], references: [id], onUpdate: NoAction)
  EMPR01           EMPR01    @relation(fields: [filialId], references: [id], onUpdate: NoAction)
  EMPR03           EMPR03    @relation(fields: [projetoId], references: [id], onUpdate: NoAction)
  QSMS04           QSMS04    @relation(fields: [qsmsCatRiscoId], references: [id], onUpdate: NoAction)
  USER00           USER00    @relation(fields: [usuarioId], references: [id])
  QSMS06L          QSMS06L[]
}


model QSMS06L {
  id               Int       @id @default(autoincrement())
  aQsmsDesviosId   Int?
  usuarioId        Int?
  dtVerificacao    DateTime? @db.DateTime
  filialId         Int?
  projetoId        Int?
  nmEnvolvido      String?   @db.NVarChar(150)
  departamentoId   Int?
  qsmsCatRiscoId   Int?
  desvio           String?   @db.NVarChar(150)
  acaoTomada       String?   @db.NVarChar(255)
  resolvido        Boolean?
  justificativa    String?   @db.NVarChar(255)
  dtPrazoAdequacao DateTime?
  dtCriacao        DateTime? @db.DateTime
  dtAtualizacao    DateTime? @default(now()) @db.DateTime
  stAcao           String?
  acao             String?
  dtAdequacao      DateTime?
  observacao       String?
  QSMS06           QSMS06?   @relation(fields: [aQsmsDesviosId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  FUNC01           FUNC01?   @relation(fields: [departamentoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  EMPR01           EMPR01?   @relation(fields: [filialId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  EMPR03           EMPR03?   @relation(fields: [projetoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  QSMS04           QSMS04?   @relation(fields: [qsmsCatRiscoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  USER00           USER00?   @relation(fields: [usuarioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
```

TS
```ts
const updateDetour = async (id: number, payload: DetourUpdate): Promise<Detour> => {
  if (payload.dtAdequacao) {
    const isoDate = new Date(payload.dtAdequacao).toISOString();
    const pictureBuffer = Buffer.from(payload.foto!);

    const detour = await prisma.qSMS06.update({
      where: { id },
      data: {
        dtAdequacao: isoDate,
        observacao: payload.observacao,
        usuarioId: payload.usuarioId,
        dtAtualizacao: new Date()
      },
    });

    await prisma.qSMS06L.create({
      data: {
        ...payload,
        aQsmsDesviosId: id,
        acao: 'U',
        dtAdequacao: isoDate,
      },
    });

    const items = [
      { foto: pictureBuffer, aDesviosId: id, adequacao: true, usuarioId: 1 },
    ];

    for (const item of items) {
      const adequated = await prisma.qSMS07.create({ data: item });
      await prisma.qSMS07L.create({
        data: {
          aDesviosFotoId: adequated.id,
          acao: 'C',
          dtCriacao: new Date(),
          usuarioId: payload.usuarioId ? payload.usuarioId : 0,
        },
      });
    }
    return detourSchema.parse({ ...detour, foto: payload.foto ? [payload.foto[0].toString('base64')] : [] });
  } else {


    const detour = await prisma.qSMS06.update({
      where: { id },
      data: {
        ...payload,
        foto: payload.foto ? payload.foto[0] : null,
        stAcao: 'A',
        dtAtualizacao: new Date()
      },
    });

    await prisma.qSMS06L.create({
      data: {
        ...payload,
        aQsmsDesviosId: id,
        acao: 'U',
        stAcao: 'A',
        dtCriacao: detour.dtCriacao,
      },
    });
    return detourSchema.parse({ ...detour, foto: payload.foto ? [payload.foto[0].toString('base64')] : [] });
  }
};
```

### Environment & setup

- OS: Windows 11 
- Database: SQLServer
- Node.js version: v20.13.1


### Prisma Version

prisma                  : 5.15.1
@prisma/client          : 5.15.1


### Error
```
await app_1.prisma.qSMS06L.create({
       data: {
         usuarioId: 4,
         ~~~~~~~~~
         observacao: ""adequado"",
         dtAdequacao: ""2024-06-24T00:00:00.000Z"",
         aQsmsDesviosId: 22,
         acao: ""U"",
     ?   dtVerificacao?: DateTime | Null,
     ?   nmEnvolvido?: String | Null,
     ?   desvio?: String | Null,
     ?   acaoTomada?: String | Null,
     ?   resolvido?: Boolean | Null,
     ?   justificativa?: String | Null,
     ?   dtPrazoAdequacao?: DateTime | Null,
     ?   dtCriacao?: DateTime | Null,
     ?   dtAtualizacao?: DateTime | Null,
     ?   stAcao?: String | Null,
     ?   QSMS06?: QSMS06CreateNestedOneWithoutQSMS06LInput,
     ?   FUNC01?: FUNC01CreateNestedOneWithoutQSMS06LInput,
     ?   EMPR01?: EMPR01CreateNestedOneWithoutQSMS06LInput,
     ?   EMPR03?: EMPR03CreateNestedOneWithoutQSMS06LInput,
     ?   QSMS04?: QSMS04CreateNestedOneWithoutQSMS06LInput,
     ?   USER00?: USER00CreateNestedOneWithoutQSMS06LInput
       }
     })

Unknown argument `usuarioId`. Available options are marked with ?.
```

",,
2369879433,24620,"Uncaught TypeError: Failed to resolve module specifier "".prisma/client/index-browser"". Relative references must start with either ""/"", ""./"", or ""../"".","### Bug description

Uncaught TypeError: Failed to resolve module specifier "".prisma/client/index-browser"". Relative references must start with either ""/"", ""./"", or ""../"".

![image](https://github.com/prisma/prisma/assets/26525599/793235c8-77fb-46ec-95e4-1da0e4729bcd)


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2365397628,24604,Incorrect MongoDB array behavior when field is `null`,"### Bug description

There is no way to create a query on an array field set to `null`. I encountered this issue with MongoDB, but it may be present in other databases as well.

```ts
// assuming we have a `question` model with a String[] field called `foo`

// this returns 0 results
await prisma.question.findMany({
  where: {
    foo: { isEmpty: true }
  }
});

// this is a type error
await prisma.question.findMany({
  where: {
    foo: null
  }
});
```

In the database itself, the `foo` field could be an array of strings, but it could also be set to `null`, which is the default when creating a new question using Prisma and choosing not to specify that field.

### How to reproduce

1. Set up a model with an array field
2. Create a new record in that model, but don't explicitly set the array field
3. Try to create a query that returns all records that don't have the array field set

### Expected behavior

I would expect Prisma to treat `null` array values as an empty array so that I can query them with `{isEmpty: true}`. If that is not possible, then I would expect Prisma to allow me to query all documents that have that array field set to `null`, which I could combine with the previous query using an `OR` to get the desired behavior.

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing""]
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URI"")
}

model Question {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sameQuestionIds   String[]          @db.ObjectId
}
```

```ts
// the db already contains many values where `sameQuestionIds` is `null`.
// new questions that are created using Prisma still set `sameQuestionIds` to `null` when it's not explicitly set to an array.
// but this query will always return 0 results.
const questions = await prisma.question.findMany({
  where: {
    sameQuestionIds: { isEmpty: true }
  }
});
```


### Environment & setup

- OS: macOS
- Database: MongoDB
- Node.js version: 18.13.0


### Prisma Version

```
prisma                  : 5.15.1
@prisma/client          : 5.15.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.13.0
Query Engine (Node-API) : libquery-engine 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.1-1.5675a3182f972f1a8f31d16eee6abf4fd54910e3
Default Engines Hash    : 5675a3182f972f1a8f31d16eee6abf4fd54910e3
Studio                  : 0.501.0
Preview Features        : tracing
```
",,
2364898130,24600,[v5.15.0] bad type of `$extends`,"### Bug description

When i add `$extends` to PrismaClient type is breaking and not provide autocomplete of properties in javascript

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. Create project with provided code
2. Try co complete code after `$extends().`, for example refer to `test` table

### Expected behavior

`$extends` should return a valid `PrismaClient` type

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Test {
  id   String @id
}
```
```js
const { PrismaClient } = require(""@prisma/client"");

new PrismaClient().$extends();
```

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> macOS
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> MariaDB
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->20.13.1


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.13.1
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```",,
2364758761,24599,[@prisma/instrumentation] Version 15.14.0 onwards using non existing generic in InstrumentationNodeModuleDefinition form @opentelemetry/instrumentation Library,"### Bug description

When adding `@prisma/instrumentation` to a repository and using esbuild I was getting failed to bundle errors. The error message was the following:

```
node_modules/@prisma/instrumentation/dist/PrismaInstrumentation.d.ts:8:13 - error TS2315: Type 'InstrumentationNodeModuleDefinition' is not generic.

8     init(): InstrumentationNodeModuleDefinition<unknown>[];
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Found 1 error in node_modules/@prisma/instrumentation/dist/PrismaInstrumentation.d.ts:8
```

The `@opentelemtry/<PACKAGE>` packages in the `package.json` dependencies are the following:

```
  ""dependencies"": {
    ""@opentelemetry/api"": ""^1.8"",
    ""@opentelemetry/instrumentation"": ""^0.49 || ^0.50 || ^0.51 || ^0.52.0"",
    ""@opentelemetry/sdk-trace-base"": ""^1.22""
  },
```

Looking at the definitions directly in the `@opentelemetry/instrumentation` package, there is no support for a generic in `InstrumentationNodeModuleDefinition` on supported versions:

```typescript
export declare class InstrumentationNodeModuleDefinition implements InstrumentationModuleDefinition {
   ...
}
```

and 

```typescript
export interface InstrumentationModuleDefinition {
  ...
}
```

I checked all of the versions outlined in dependencies and none of them could support the generic.

[Link to file in repo](https://github.com/prisma/prisma/blob/main/packages/instrumentation/package.json)

I am currently explicitly running the following versions in my `package.json`:

```
""@opentelemetry/api"": ""^1.8.0"",
""@opentelemetry/sdk-trace-base"": ""^1.24.1"",
```

and `@opentelemetry/instrumentation@0.51.1` is being used as the implicit dependency in my dependency tree.

All of the dependencies seem to be in line minus `sdk-trace-base`, however the issue is with `@opentelemetry/instrumentation`. I have changed the version of the package multiple times to no success.

The only solution was to revert `@prisma/instrumentation` back to version 15.13.0 where everything worked again.

Current instrumentation file imports and relevant call to `registerInstrumentations`:

```typescript
import * as otel from '@opentelemetry/api';
import * as semcon from '@opentelemetry/semantic-conventions';
import * as logsapi from '@opentelemetry/api-logs';
import {
  LoggerProvider,
  SimpleLogRecordProcessor,
  ConsoleLogRecordExporter,
} from '@opentelemetry/sdk-logs';
import {
  ConsoleSpanExporter,
  NodeTracerProvider,
} from '@opentelemetry/sdk-trace-node';
import {
  BatchSpanProcessor,
  SimpleSpanProcessor,
} from '@opentelemetry/sdk-trace-base';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import { OTLPLogExporter } from '@opentelemetry/exporter-logs-otlp-http';
import { Resource } from '@opentelemetry/resources';

import { registerInstrumentations } from '@opentelemetry/instrumentation';
import { AwsLambdaInstrumentation } from '@opentelemetry/instrumentation-aws-lambda';
import { HttpInstrumentation } from '@opentelemetry/instrumentation-http';
import { DnsInstrumentation } from '@opentelemetry/instrumentation-dns';
import { NetInstrumentation } from '@opentelemetry/instrumentation-net';
import { WinstonInstrumentation } from '@opentelemetry/instrumentation-winston';
import { PrismaInstrumentation } from '@prisma/instrumentation';

/** Skipping rest of file */

registerInstrumentations({
  instrumentations: [
    new DnsInstrumentation(),
    new HttpInstrumentation(),
    new NetInstrumentation(),
    new AwsLambdaInstrumentation(),
    new WinstonInstrumentation(),
    new PrismaInstrumentation(),
  ],
});
```

### How to reproduce

- Install @prisma/instrumentation version 15.14.0 or over along with @opentelemetry/api at ^1.8.0""
and @opentelemetry/sdk-trace-base at version ^1.24.1
- Create otel intsrumentation file with the configuration above.
- Exclude all prisma and otel packages from esbuild bundler

```typescript
[
  '@prisma/client',
  '@opentelemetry/api',
  '@opentelemetry/api-logs',
  '@opentelemetry/resources',
  '@opentelemetry/semantic-conventions',
  '@opentelemetry/sdk-trace-base',
  '@opentelemetry/sdk-trace-node',
  '@opentelemetry/sdk-logs',
  '@opentelemetry/exporter-trace-otlp-http',
  '@opentelemetry/exporter-logs-otlp-http',
  '@opentelemetry/instrumentation-aws-lambda',
  '@opentelemetry/instrumentation-http',
  '@opentelemetry/instrumentation-dns',
  '@opentelemetry/instrumentation-net',
  '@opentelemetry/instrumentation-winston',
  '@opentelemetry/winston-transport',
  '@prisma/instrumentation',
  'winston',
]
```

- Bundle code

I suspect that this error might happen regardless of bundling as the generic does not exist in the supported versions of `@opentelemetry/instrumentation`

### Expected behavior

Code should be able to build and compile with the listed supported versions of `@opentelemetry/instrumentation` on version 15.14.0 onwards.

**Note:** Everything works with 15.13.0 and below and I have the exact same setup in another repository that worked because it was using 15.12.0.

### Prisma information

Issue is not with the client, as the client works properly, adding the base `prisma.schema` configuration here as it was asked.

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing""]
  binaryTargets   = [""native"", ""rhel-openssl-3.0.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""IS_PG_DB_URL"")
}
```

No errors using prisma client at all, excluding client use.


### Environment & setup

- OS: Ubuntu 22.04.4 LTS x86_64 
- Database: Amazon RDS Instance Postgres 16.1
- Node.js version: nodejs20.x

### Prisma Version

```
prisma                  : 5.15.1
@prisma/client          : 5.15.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.12.2
Query Engine (Node-API) : libquery-engine 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at ../../../.nvm/versions/node/v20.12.2/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at ../../../.nvm/versions/node/v20.12.2/lib/node_modules/prisma/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.1-1.5675a3182f972f1a8f31d16eee6abf4fd54910e3
Default Engines Hash    : 5675a3182f972f1a8f31d16eee6abf4fd54910e3
Studio                  : 0.501.0
```
",,
2364706101,24597,Prisma shouldn't just drop and re-create postgres schema to fix migration issues ,"### Bug description

When attempting prisma migrations in dev, 
and prisma detects a drift or a hard to reconcile change between the `prisma.schema` and the schema of the database, prisma migrate simply asks for a prompt to reset the database and apply all the migrations from scratch. 

This reset of the database is achieved by [dropping the existing public schema](https://github.com/prisma/prisma/blob/a1121f1a65cd246b3afabbbfb131ca24914c27c1/packages/migrate/src/SchemaEngine.ts#L248)  and [creating them from scratch](https://github.com/prisma/prisma-engines/blob/bd07760d57443d11e2a958fd18bf524bbac14fbd/schema-engine/connectors/sql-schema-connector/src/flavour/postgres.rs#L349), which messes up the permissions of the db users and roles. 


## Why is this a problem ? 

The recommended Postgres way to provision users and roles for the Postgres Docker is via [initialization scripts](https://github.com/docker-library/docs/blob/master/postgres/README.md#initialization-scripts) that is mounted into the container. 
The initialization script is run **only the first time a pgdata volume is mounted**. When stopping and starting the container or after changes are done (like the schema dropping and re-creating via `prisma migrate dev`) , the initalization script is **NOT RUN** , because the volume is already existing. 

This means that the existing users **ARE NOT** granted the same permissions they had on the previous schema, causing code to fail in mysterious ways due to permission issues.  

In projects with a large number of devs and frequent commits, it becomes a big problem when we have to keep resetting our local environments and running `grant xxx` permissions  manually. 

### How to reproduce

To confirm this, I ran `prisma migrate reset` (which seems to be using the same code as when running `prisma migrate dev` and it detects an irreconcilable migration drift)

```
output:
my_db=# select oid from pg_namespace where nspname='public';
  oid
-------
 17717
(1 row)
```

Run `npx prisma migrate reset`

```
my_db=# select oid from pg_namespace where nspname='public';
  oid
-------
 17990
(1 row)
```

### Expected behavior

1. Do not prompt users to reset the state of the database during `dev migrate` scenarios when detecting schema drifts. IMO, the right way to handle schema drifts is to fail early and ask users to fix up the schema changes (either using `prisma migrate dif ... --script`) 
(OR) 
2. provide a way to provision users and roles via prisma schema (OR) 
3. Do not fix schema drifts by dropping and re-creating postgres schemas. 

### Prisma information

Irrelevant here.


### Environment & setup

- OS: macOS
- Database: Postgres16
- Node.js version: v20.6.1


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.6.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0

```
",,
2363491316,24587,Prisma and OpenTelemetry: has no active context in prisma query event,"### Bug description

I am trying to log Prisma queries, but the active context is missing in the query event listener **$on('query')**. For example prisma middleware **$use()** works properly

```ts
@Injectable()
export class PrismaService extends PrismaClient<LogEvents, 'info' | 'warn' | 'error' | 'query'> implements OnModuleInit {
    constructor() {
        super({ log: [{ emit: 'event', level: 'query' }] });
    }

    public async onModuleInit(): Promise<void> {
        this.$on('query', () => {
            console.log(context.active()); // no context
            trace.getActiveSpan()?.addEvent('query', this.formatQuery(event.query, event.params));
        });
        await this.$connect();
    }
}
```

Init telemetry
```ts
// ...
const sdk = new NodeSDK({
        autoDetectResources: true,
        contextManager: new AsyncLocalStorageContextManager(),
        spanProcessors,
        metricReader,
        instrumentations: [
            new NestInstrumentation(),
            new HttpInstrumentation(),
            new ExpressInstrumentation(),
            new PrismaInstrumentation({ middleware: true }),
        ],
    });

sdk.start();
```
```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""tracing"", ""metrics""]
}
```

### How to reproduce

1. Run some query
2. See error


### Expected behavior

Using Priasma with OpenTelemetry and @prisma/instrumentation query event listener should have active telemetry context.

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""tracing"", ""metrics""]
}
```

```ts
@Injectable()
export class PrismaService extends PrismaClient<LogEvents, 'info' | 'warn' | 'error' | 'query'> implements OnModuleInit {
    constructor() {
        super({ log: [{ emit: 'event', level: 'query' }] });
    }

    public async onModuleInit(): Promise<void> {
        this.$on('query', event => {
            console.log(context.active()); // no context
            trace.getActiveSpan()?.addEvent('query', this.formatQuery(event.query, event.params));
        });
        await this.$connect();
    }
}
```


### Environment & setup

- OS: Linux Mint 20.2 Cinnamon
- Database: PostgreSQL
- Node.js version: 20.12.0


### Prisma Version

```
prisma                  : 5.3.1
@prisma/client          : 5.13.0
Current platform        : debian-openssl-1.1.x
Query Engine (Node-API) : libquery-engine 61e140623197a131c2a6189271ffee05a7aa9a59 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 61e140623197a131c2a6189271ffee05a7aa9a59 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.3.1-2.61e140623197a131c2a6189271ffee05a7aa9a59
Default Engines Hash    : 61e140623197a131c2a6189271ffee05a7aa9a59
Studio                  : 0.494.0
Preview Features        : metrics, tracing
```
",,
2361822606,24581,Log query params are not escaped,"### Bug description

When logging queries, the `params` field looks like a JSON, but the double-quotes are not escaped.

```typescript
prisma.$on(""query"", (query) => {
  console.log(query.params) // can't be json-parsed
})
```

This makes the query logging way less useful than it could be, as our logger is unable to distinguish params from each other.

### How to reproduce

I've created a minimal reproducible example

```
git clone https://github.com/sguillia/repro-prisma
cd repro-prisma
npm install
npx prisma generate
npx prisma migrate
npx ts-node src/index.ts
```

### Expected behavior

I expect `query.params` to be JSON-parsable, which it already the case for all queries that don't have double-quotes.

Expected output

```
[""\""\"""", 0]
```

Actual output

```
["""""""",0]
```

Having `query.params` as an array would also be fine.

### Prisma information

<details>
<summary>See demo repo. Click here to show anyway</summary>

```ts
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient({
  log: [
    {
      emit: ""event"",
      level: ""query"",
    },
  ],
});

prisma.$on(""query"", (query) => {
  console.log(query.params); // can't be json-parsed
});

async function main() {
  await prisma.demo.findMany({
    where: {
      id: `""""`,
    },
  });
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });

```

Prisma schema is irrelevant
```

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Demo {
  id String @unique
}

```

</details>

### Environment & setup

- OS: Ubuntu
- Database: PostgreSQL
- Node.js version: v18.14.0

### Prisma Version

```
prisma                  : 5.15.1
@prisma/client          : 5.15.1
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.14.0
Query Engine (Node-API) : libquery-engine 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.1-1.5675a3182f972f1a8f31d16eee6abf4fd54910e3
Default Engines Hash    : 5675a3182f972f1a8f31d16eee6abf4fd54910e3
Studio                  : 0.501.0prisma                  : 5.15.1
@prisma/client          : 5.15.1
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.14.0
Query Engine (Node-API) : libquery-engine 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 5675a3182f972f1a8f31d16eee6abf4fd54910e3 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.1-1.5675a3182f972f1a8f31d16eee6abf4fd54910e3
Default Engines Hash    : 5675a3182f972f1a8f31d16eee6abf4fd54910e3
Studio                  : 0.501.0
```
",,
2361680415,24580,"Generalize and Enhance Readability of ""RecordNotFound"" Error Message in Prisma Client","# **Generalize and Enhance Readability of ""RecordNotFound"" Error Message in Prisma Client**

**Description:**
Currently, when using Prisma Client's `findUniqueOrThrow` and other methods and no record is found, the error message returned is ""RecordNotFound"". While this message is functional, it could be more generalized and readable to improve the developer experience and aid in debugging.

**Request:**
Enhance the error message returned by Prisma Client in cases where no record is found. Instead of the specific ""RecordNotFound"" message, consider providing a more generalized and readable message such as ""No matching record found"" or ""Requested record not found"". This change would improve the clarity and usability of error messages.

**Impact:**
- **Improved Developer Experience:** More readable error messages help developers quickly understand and resolve issues.
- **Clarity and Generalization:** A generalized message is applicable to various contexts, making it more useful across different use cases.
- **Ease of Debugging:** Clear and concise error messages reduce the time required to diagnose and fix problems.

**Example:**

```typescript
const userData = await prisma.user.findUniqueOrThrow({
    where: {
        userId: payload.id,
        status: UserStatus.ACTIVE
    }
});
```

**Current Error Message:**
```
RecordNotFound
```

**Proposed Error Message:**
```
No matching record found
```

or

```
Requested record not found
```

or

```
User not found
```

**Additional Context:**
Generalizing the error message to something like ""No matching record found"" provides a clearer, more universal message that can be understood quickly. This is particularly useful in environments where rapid troubleshooting is necessary.

",,
2360381231,24574,Prisma is returning the DateTime in ISOstring(),"### Bug description

I have the createdAt and updatedAt properties in my entities inside my PostgreSQL database. 

Every time Prisma returns these properties, the values are being formatted to ISOString and it removes the timezone. 

I haven't found a way to return the date in the proper timezone and don't want to create a mapper for each entity, because it will cost a lot of changes. Can Prisma the DateTime return in the Brazil(UTC -3) timezone?

<img width=""510"" alt=""Screenshot 2024-06-18 at 14 32 32"" src=""https://github.com/prisma/prisma/assets/81987664/83375a7b-dc9f-4dc7-a284-94916e562e31"">

![Screenshot 2024-06-18 at 12 07 15](https://github.com/prisma/prisma/assets/81987664/593f55a6-6833-4a22-80ba-1109c4186a9c)

![Screenshot 2024-06-18 at 12 07 34](https://github.com/prisma/prisma/assets/81987664/698b223f-9fb0-4555-a503-2ca74e8826b9)


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior


### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(""created_at"") @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @map(""updated_at"") @db.Timestamptz()
  roleValue String   @map(""role_value"")
  name      String
  access    Access?
  role      Role     @relation(fields: [roleValue], references: [value])

  @@map(""users"")
}
```

```ts
async findAll({
    schoolId,
    role,
    name
  }: FindAllUsersParams): Promise<FindAllUsersReturn> {
    const args: PrismaTypes.UserFindManyArgs = {
      where: {
        roleValue: role,
        name: {
          contains: name,
          mode: ""insensitive""
        },
        access: {
          schoolId
        }
      }
    };

    const [users, total] = await this.prisma.$transaction([
      this.prisma.user.findMany(args),
      this.prisma.user.count({ where: args.where })
    ]);

    return {
      users: users as User[],
      total
    };
  }
```


### Environment & setup

- OS: MacOS
- Database: PostgreSQL
- Node.js version: 20


### Prisma Version

```
    ""prisma"": ""^5.12.1"",
    ""@prisma/client"": ""^5.12.1"",
```
",,
2360139012,24573,Cannot read properties of undefined (reading 'kind'),"### Bug description

Hello,

When attempting to create a ChatActivity object, an error occurs, preventing the process from completing. The error message indicates a TypeError related to reading the ‘kind’ property of an undefined object. This issue arises within the @prisma/client library, specifically in the runtime files during the mapping process. 

The bug consistently happens at the creation step, suggesting a potential issue with the data mapping or structure of the CreateChatActivityDto, most likely there is an issue with the `activityContent` field. Once I remove it from the dto, the creation is successful. `activityContent` is a JSON object, and has type `Json` in `schema.prisma`.

If any information is missing, let me know. I would kindly ask you to ignore my ignorance, as I am new to GitHub Issue reports 😃

## The Error
```
[Nest] 16668  - 06/18/2024, 4:32:40 PM   ERROR [ExceptionsHandler] Cannot read properties of undefined (reading 'kind')
TypeError: Cannot read properties of undefined (reading 'kind')
    at Ka (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:115:2921)
    at Ka (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:115:2938)
    at Array.map (<anonymous>)
    at Id (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:115:2832)
    at wn (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:114:2205)
    at Ga (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:114:308)
    at wn (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:114:2423)
    at Tn (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:115:6662)
    at In.handleRequestError (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:122:6533)
    at In.handleAndLogRequestError (/Users/daniel/Programmieren/Eigene Projekte/Academi.fy/backend/node_modules/@prisma/client/runtime/library.js:122:6211)
```

### How to reproduce

1. Install Nest.js with Prisma ORM
2. Setup Prisma with PostgreSQL and GraphQL:

```
generator client {
  provider = ""prisma-client-js""
}

generator nestgraphql {
  provider                              = ""node node_modules/prisma-nestjs-graphql""
  output                                = ""../src/@generated-types""
  fields_Validator_from                 = ""class-validator""
  fields_Validator_input                = true
  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = true
  purgeOutput                           = true
  noTypeId                              = true
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

3. Create the desired Model (ChatActivity in my case):

```prisma
model ChatActivity {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat   @relation(""ChatActivity"", fields: [chatId], references: [id])
  chatId String @db.Uuid

  executor   User   @relation(""UserChatActivity"", fields: [executorId], references: [id])
  executorId String @db.Uuid

  readBy User[] @relation(""ReadChatActivity"")

  answerTo   ChatActivity? @relation(""ChatActivityAnswer"", fields: [answerToId], references: [id])
  answerToId String?       @db.Uuid

  answeredBy ChatActivity[] @relation(""ChatActivityAnswer"")

  type            ChatActivityType
  activityContent Json

  starred Boolean @default(false)

  @@map(""activities"")
}
```

4. Try to create a new instance of said object in the database with the following dto structure:

```ts
import { Field, InputType } from '@nestjs/graphql';
import { ChatActivityType } from '@/@generated-types';
import {
  IsBoolean,
  IsEnum,
  IsObject,
  IsOptional,
  IsString,
} from 'class-validator';
import { GraphQLJSON } from 'graphql-type-json';

@InputType()
export class CreateChatActivityDto<T> {
  @Field(() => GraphQLJSON)
  @IsObject()
  activityContent: T;

  @Field(() => String, { nullable: true })
  @IsString()
  @IsOptional()
  answeredBy?: string;

  @Field(() => String, { nullable: true })
  @IsString()
  @IsOptional()
  answerTo?: string;

  @Field(() => String)
  @IsString()
  chat: string;

  @Field(() => String)
  @IsString()
  executor: string;

  @Field(() => [String], { nullable: true })
  @IsString()
  @IsOptional()
  readBy?: string[];

  @Field(() => ChatActivityType)
  @IsString()
  @IsEnum(ChatActivityType)
  type: ChatActivityType;

  @Field(() => Boolean, { nullable: true })
  @IsBoolean()
  @IsOptional()
  starred?: boolean;
}
```

### Expected behavior

An new instance of ChatActivity is supposed to be created in the database.

### Prisma information

## Prisma Schema
```prisma
generator client {
  provider = ""prisma-client-js""
}

generator nestgraphql {
  provider                              = ""node node_modules/prisma-nestjs-graphql""
  output                                = ""../src/@generated-types""
  fields_Validator_from                 = ""class-validator""
  fields_Validator_input                = true
  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = true
  purgeOutput                           = true
  noTypeId                              = true
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Badge {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  image       String
  name        String
  users       User[] @relation(""UserBadge"")

  @@map(""badges"")
}

model Blackboard {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authors    User[]          @relation(""BlackboardAuthor"")
  coverImage String?
  school     School          @relation(""SchoolBlackboard"", fields: [schoolId], references: [id])
  schoolId   String          @db.Uuid
  tags       BlackboardTag[] @relation(""BlackboardBlackboardTag"")
  targets    User[]          @relation(""BlackboardTarget"")
  text       String?
  title      String

  @@map(""blackboards"")
}

model BlackboardTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blackboards Blackboard[] @relation(""BlackboardBlackboardTag"")
  name        String       @unique

  @@map(""blackboard_tags"")
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activities ChatActivity[] @relation(""ChatActivity"")
  avatar     String?
  clubs      Club[]         @relation(""ClubChat"")
  courses    Course[]       @relation(""CourseChat"")
  name       String
  targets    UserChat[]     @relation(""ChatTarget"")
  type       ChatType

  @@map(""chats"")
}

model ChatActivity {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat   @relation(""ChatActivity"", fields: [chatId], references: [id])
  chatId String @db.Uuid

  executor   User   @relation(""UserChatActivity"", fields: [executorId], references: [id])
  executorId String @db.Uuid

  readBy User[] @relation(""ReadChatActivity"")

  answerTo   ChatActivity? @relation(""ChatActivityAnswer"", fields: [answerToId], references: [id])
  answerToId String?       @db.Uuid

  answeredBy ChatActivity[] @relation(""ChatActivityAnswer"")

  type            ChatActivityType
  activityContent Json

  starred Boolean @default(false)

  @@map(""activities"")
}

model Class {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses        Course[] @relation(""ClassCourse"")
  grade          Grade    @relation(""ClassGrade"", fields: [gradeId], references: [id])
  gradeId        String   @db.Uuid
  members        User[]   @relation(""ClassMember"")
  school         School   @relation(""ClassSchool"", fields: [schoolId], references: [id])
  schoolId       String   @db.Uuid
  specifiedGrade String?

  @@map(""classes"")
}

model Club {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar       String?
  chat         Chat?     @relation(""ClubChat"", fields: [chatId], references: [id])
  chatId       String?   @db.Uuid
  coverImage   String?
  description  String?
  events       Event[]   @relation(""ClubEvent"")
  leaders      User[]    @relation(""ClubLeader"")
  location     String?
  meetingDay   Day?
  meetingTime  String?
  members      User[]    @relation(""ClubMember"")
  name         String
  requirements Json[]
  school       School    @relation(""ClubSchool"", fields: [schoolId], references: [id])
  schoolId     String    @db.Uuid
  tags         ClubTag[] @relation(""ClubClubTag"")

  @@map(""clubs"")
}

model ClubTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubs Club[] @relation(""ClubClubTag"")
  name  String

  @@map(""club_tags"")
}

model Course {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat?   @relation(""CourseChat"", fields: [chatId], references: [id])
  chatId    String? @db.Uuid
  classes   Class[] @relation(""ClassCourse"")
  members   User[]  @relation(""CourseMember"")
  name      String
  subject   Subject @relation(""CourseSubject"", fields: [subjectId], references: [id])
  subjectId String  @db.Uuid
  teacher   User    @relation(""CourseTeacher"", fields: [teacherId], references: [id])
  teacherId String  @db.Uuid

  @@map(""courses"")
}

model Event {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubs       Club[]        @relation(""ClubEvent"")
  description String?
  endDate     DateTime
  host        String
  information Json[]
  location    String?
  school      School        @relation(""EventSchool"", fields: [schoolId], references: [id])
  schoolId    String        @db.Uuid
  startDate   DateTime
  subscribers User[]        @relation(""EventSubscriber"")
  tickets     EventTicket[] @relation(""EventEventTicket"")
  title       String

  @@map(""events"")
}

model EventTicket {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer    User     @relation(""EventTicketBuyer"", fields: [buyerId], references: [id])
  buyerId  String   @db.Uuid
  event    Event    @relation(""EventEventTicket"", fields: [eventId], references: [id])
  eventId  String   @db.Uuid
  price    Int
  saleDate DateTime

  @@map(""event_tickets"")
}

model Grade {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  Class[]    @relation(""ClassGrade"")
  level    GradeLevel
  school   School     @relation(""SchoolGrade"", fields: [schoolId], references: [id])
  schoolId String     @db.Uuid

  @@map(""grades"")
}

model School {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blackboards    Blackboard[] @relation(""SchoolBlackboard"")
  classes        Class[]      @relation(""ClassSchool"")
  clubs          Club[]       @relation(""ClubSchool"")
  events         Event[]      @relation(""EventSchool"")
  grades         Grade[]      @relation(""SchoolGrade"")
  members        User[]       @relation(""SchoolMember"")
  name           String       @unique
  setupAccount   SetupAccount @relation(""SchoolSetupAccount"", fields: [setupAccountId], references: [id])
  setupAccountId String       @unique @db.Uuid
  subjects       Subject[]    @relation(""SubjectSchool"")

  @@map(""schools"")
}

model SetupAccount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school     School? @relation(""SchoolSetupAccount"")
  schoolId   String? @db.Uuid
  schoolName String  @unique

  @@map(""setup_accounts"")
}

model Subject {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]    @relation(""CourseSubject"")
  school    School      @relation(""SubjectSchool"", fields: [schoolId], references: [id])
  schoolId  String      @db.Uuid
  shortName String
  type      SubjectType @unique

  @@map(""subjects"")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar                String?
  badges                Badge[]        @relation(""UserBadge"")
  blackboards           Blackboard[]   @relation(""BlackboardAuthor"")
  blackboardsReceived   Blackboard[]   @relation(""BlackboardTarget"")
  birthday              String?
  chatActivitiesCreated ChatActivity[] @relation(""UserChatActivity"")
  classes               Class[]        @relation(""ClassMember"")
  clubs                 Club[]         @relation(""ClubMember"")
  clubsAsLeader         Club[]         @relation(""ClubLeader"")
  courses               Course[]       @relation(""CourseMember"")
  coursesAsTeacher      Course[]       @relation(""CourseTeacher"")
  events                Event[]        @relation(""EventSubscriber"")
  eventTickets          EventTicket[]  @relation(""EventTicketBuyer"")
  firstName             String
  lastName              String
  readActivities        ChatActivity[] @relation(""ReadChatActivity"")
  schools               School[]       @relation(""SchoolMember"")
  type                  UserType
  userAccount           UserAccount    @relation(""UserUserAccount"", fields: [userAccountId], references: [id])
  userAccountId         String         @unique @db.Uuid
  userChats             UserChat[]     @relation(""UserUserChat"")

  @@map(""users"")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt     DateTime
  token         String      @unique
  userAccount   UserAccount @relation(""RefreshTokenUser"", fields: [userAccountId], references: [id])
  userAccountId String      @db.Uuid

  @@map(""refresh_tokens"")
}

model UserAccount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String? @unique
  password String
  user     User?   @relation(""UserUserAccount"")
  userId   String? @db.Uuid
  username String  @unique

  refreshTokens RefreshToken[] @relation(""RefreshTokenUser"")

  @@map(""user_accounts"")
}

model UserChat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat    @relation(""ChatTarget"", fields: [chatId], references: [id])
  chatId String  @db.Uuid
  hidden Boolean @default(false)
  pinned Boolean @default(false)
  read   Boolean @default(true)
  user   User    @relation(""UserUserChat"", fields: [userId], references: [id])
  userId String  @db.Uuid

  @@map(""user_chats"")
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum GradeLevel {
  G5
  G6
  G7
  G8
  G9
  G10
  G11
  G12
}

enum SubjectType {
  ART
  BIOLOGY
  CHEMISTRY
  COMPUTER_SCIENCE
  ECONOMICS
  ENGLISH
  ETHICS
  FRENCH
  GEOGRAPHY
  GERMAN
  HISTORY
  IMP
  ITALIAN
  LATIN
  MATHS
  MUSIC
  NWT
  PHYSICS
  POLITICS
  RELIGION
  SPANISH
  SPORT
}

enum UserType {
  ADMIN
  TEACHER
  STUDENT
}

enum ChatActivityType {
  MESSAGE_SEND
  MESSAGE_EDIT
  MESSAGE_DELETE
  MESSAGE_ANSWER
  ACTIVITY_STAR
  ACTIVITY_UNSTAR
  POLL_SEND
  POLL_EDIT
  POLL_DELETE
  POLL_VOTE
  POLL_UNVOTE
  POLL_CLOSE
  POLL_REOPEN
  POLL_RESULT
  CHAT_TARGET_ADD
  CHAT_TARGET_REMOVE
  CHAT_COURSE_ADD
  CHAT_COURSE_REMOVE
  CHAT_CLUB_ADD
  CHAT_CLUB_REMOVE
  CHAT_NAME_CHANGE

  CHAT_AVATAR_CHANGE
}

enum ChatType {
  GROUP
  PRIVATE
  COURSE
}
```

## Code interacting with Prisma Client
```ts
async processCreateChatActivity(
    dto: CreateChatActivityDto<any>,
  ): Promise<ChatActivity> {
    const chatActivity: ChatActivity = await this.prisma.chatActivity.create({
      data: {
          activityContent: dto.activityContent
          ? { ...dto.activityContent }
          : undefined,
        answeredBy: dto.answeredBy
          ? this.connectSingle(dto.answeredBy)
          : undefined,
        answerTo: dto.answerTo ? this.connectSingle(dto.answerTo) : undefined,
        chat: dto.chat ? this.connectSingle(dto.chat) : undefined,
        executor: dto.executor ? this.connectSingle(dto.executor) : undefined,
        readBy: dto.readBy ? this.connectArray(dto.readBy) : undefined,
        type: dto.type ? dto.type : undefined,
      },
      include: {
        ...chatActivityNesting,
      },
    });
    if (!chatActivity)
      throw new Error(`ChatActivity could not be created with data: ${dto}`);

    return chatActivity;
  }
  ```


### Environment & setup

- OS: MacOS Sonoma (ver. 14.5), also Windows 11 Home (ver. 10.0.22631; build 22631)
- Database: PostgreSQL
- Node.js version: v20.11.1

- Nest.js version: v10.3.2


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2358851118,24565,transaction: bulk ops already in a transaction should not be executed in a new sub transaction,"## Problem

Since prisma does not not support `createManyAndReturn()` for MySQL, one needs to find its own workaround. Reading the cluttered, really awefull transaction docs, one intentionally comes up with something like this:
```typescript
export async function createEvents(entry: NewEvent[]): Promise<number[]> {
...
	const getNewIds =
		'SELECT JSON_ARRAYAGG(id) AS val FROM event WHERE id >= LAST_INSERT_ID()';
	return prisma.$transaction(
		async (tx) => prisma.event.createMany({ data: entry }).then(bp => {
			if (bp.count === 0)
				return [];

			return tx.$queryRawUnsafe<{val: number[]}[]>(getNewIds)
				.then(res =>  res ? res[0]!.val : []);
		}),
		{ isolationLevel: Prisma.TransactionIsolationLevel.RepeatableRead }
	).catch((e: Error) => { throw normalizeException(e); });
}
```
This doesn't work because the `createMany()` gets executed in a different transaction and thus the intended transaction does not see the inserts. Therefore the result of `LAST_INSERT_ID()` stays the same and the related query `getNewIds` returns the wrong IDs.

To circumvent the shortcomings of `createMany()` I finally came up with the following pretty bloated solution:
```typescript
export async function createEvents(entry: NewEvent[]): Promise<number[]> {
...
	const getNewIds =
		'SELECT JSON_ARRAYAGG(id) AS val FROM event WHERE id >= LAST_INSERT_ID()';

	const values = new Array<string|null>(entry.length * 3);
	const query = new Array<string>(1 + entry.length * 3);
	var idx = 0;
	query[idx] = 'INSERT INTO `event` '
		+ ""(`sid`, `startAt`, `endAt`, `location`, `name`, `desc`) VALUES "";
	for (let i=0; i < entry.length; i++) {
		let e = entry[i]!;
		query[idx] += ""("" + e.sid + "",'"" + date2mysqlStr(e.startAt) + ""',""
			+ (e.endAt ? date2mysqlStr(e.endAt) + ""',"" : ""NULL,"");
		values[idx] = e.location;
		query[++idx] = "","";
		values[idx] = e.name;
		query[++idx] = "","";
		values[idx] = e.desc;
		query[++idx] = ""),"";
	}
	query[entry.length * 3] = "")"";

	return prisma.$transaction(async tx => {
			return tx.$executeRaw(Prisma.sql(query, ...values)).then(rows => {
				if (rows === 0)
					return [];

				return tx.$queryRawUnsafe<{val: number[]}[]>(getNewIds).then(res => {
					return res ? res[0]!.val : [];
				});
			});
		},
		{ isolationLevel: Prisma.TransactionIsolationLevel.RepeatableRead }
	).catch((e: Error) => { throw normalizeException(e); });
}
```

## Suggested solution
If a bulk operation gets invoked within a `Prisma.$transaction(...)`, it should not start a new transaction, but exec directly within the current transaction. This avoids a lot of pain and time wrt. finding a safe solution to ""emulate"" the bulk ops and finally may safe more or less resources when actually running the code. 

## Alternatives
Hmmm, perhaps provide a hook, which executes within the bulk op itself. But this sounds bad and probably increases the complexity of transactions even more as well as the shallow documented helpers around it.

Exposing a SQL safe string escape function would probably also help to make the use of prisma more safe.

## Additional context
Current behavior:
```
prisma:query SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
prisma:query BEGIN
prisma:query SELECT 1
prisma:query BEGIN
prisma:query INSERT INTO `event` (`location`,`name`,`sid`,`desc`,`endAt`,`startAt`) VALUES (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?)
prisma:query COMMIT
prisma:query SELECT JSON_ARRAYAGG(id) AS val FROM event WHERE id >= LAST_INSERT_ID()
prisma:query COMMIT
```

but should be:
```
prisma:query SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
prisma:query BEGIN
prisma:query INSERT INTO `event` (`location`,`name`,`sid`,`desc`,`endAt`,`startAt`) VALUES (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?), (?,?,?,?,?,?)
prisma:query SELECT JSON_ARRAYAGG(id) AS val FROM event WHERE id >= LAST_INSERT_ID()
prisma:query COMMIT
```

",,
2357938617,24562,prisma migrate * commands not working,"### Bug description

every npx prisma migrate * command runs until 
_prisma:getConfig config data retrieved without errors in getConfig Wasm_ 
and then does nothing any more, have waited 1 hour, no timeout, no error messages.


on every start of command there is a
_prepared statement ""s1"" already exists_
error in supabase log 

and then 

_connection received: host=::1 port=55796
connection authorized: user=authenticator database=postgres application_name=postgrest SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256)
connection received: host=::1 port=35112
connection authorized: user=supabase_admin database=postgres application_name=postgres_exporter_

forever with changing port number


### How to reproduce

```
export DEBUG=""*""
npx prisma migrate deploy  /dev / push  
```
 


### Expected behavior

something, at least a error message

### Prisma information

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Account {
  id                                         Int           @id @default(autoincrement())
  name                                       String        @db.VarChar(255)
  email                                      String        @unique
  balance                                    Int
  velocity                                   Int           @default(0)
  is_member                                  Boolean       @default(false)
  is_admin                                   Boolean       @default(false)
  is_bank                                    Boolean       @default(false)
  transactions_received                      Transaction[] @relation(""transaction_recipient"")
  transactions_sent                          Transaction[] @relation(""transaction_sender"")
  created_at                                 DateTime  @default(now())
  updated_at                                 DateTime  @default(now()) @updatedAt
}

model Transaction {
  id                                     Int     @id @default(autoincrement())
  amount                                 Int
  message                                String  @db.VarChar
  is_taxable                             Boolean @default(false)
  sender_id                              Int
  sender                                 Account @relation(""transaction_sender"", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recipient_id                           Int
  recipient                              Account @relation(""transaction_recipient"", fields: [recipient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  created_at                             DateTime  @default(now())
  updated_at                             DateTime  @default(now()) @updatedAt
}

```


### Environment & setup

Operating System        : windows 10
Node.js                 : v20.13.1

target: supabase postgres
react next app

.env:

DATABASE_URL=""postgres://postgres.xyz:[YOUR-PASSWORD]@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?pgbouncer=true""

DIRECT_URL=""postgres://postgres.xyz:[YOUR-PASSWORD]@aws-0-eu-central-1.pooler.supabase.com:5432/postgres

### Prisma Version

```
@prisma/client          : 5.15.0
```
",,
2355916833,24552,Running queries in Promise.all() leads to idle zombie database sessions,"### Bug description

So Below you see two instances of writing a logic. One uses `Promise.all()` parallelly and the other is sequential.

```ts
  @Get('/test/pa2')
  async testtest2() {
    const userId = 48;
    const collectionId = 170;

    const [variable1, variable2, variable3, variable4, variable5, variable6] =
      await Promise.all([
        this.flowService.isCollectionAttested(userId, collectionId),
        this.flowService.isCollectionFinished(userId, collectionId),
        this.flowService.hasThresholdVotes(collectionId, userId),
        this.flowService.isCollectionStarted(userId, collectionId),
        this.flowService.isCollectionFiltered(userId, collectionId),
        this.prismaService.projectInclusion.findFirst({
          where: { userId, project: { parentId: collectionId } },
        }),
      ]);
    return { variable1, variable2, variable3, variable4, variable5, variable6 };
  }

```

```ts
  @Get('/test/pa')
  async testtest() {
    const userId = 48;
    const collectionId = 170;

    const variable1 = await this.flowService.isCollectionAttested(
      userId,
      collectionId,
    );
    const variable2 = await this.flowService.isCollectionFinished(
      userId,
      collectionId,
    );
    const variable3 = await this.flowService.hasThresholdVotes(
      collectionId,
      userId,
    );
    const variable4 = await this.flowService.isCollectionStarted(
      userId,
      collectionId,
    );
    const variable5 = await this.flowService.isCollectionFiltered(
      userId,
      collectionId,
    );
    const variable6 = await this.prismaService.projectInclusion.findFirst({
      where: { userId, project: { parentId: collectionId } },
    });

    return { variable1, variable2, variable3, variable4, variable5, variable6 };
  }
```

Now here are the database sessions after calling the first version endpoint:

![Screenshot 2024-06-16 at 9 53 22 PM](https://github.com/prisma/prisma/assets/46849131/d4b0ed50-748a-44b1-b6ec-fe80445e32a3)

And now the second version:

![Screenshot 2024-06-16 at 9 56 53 PM](https://github.com/prisma/prisma/assets/46849131/11d42ebc-d079-4484-a228-63494858dadf)

And until I close my node.js application, these database sessions will stay idle.

### How to reproduce

You can see the codebase in here: https://github.com/GeneralMagicio/pw-backend

### Expected behavior

It's expected that the connections will be released. After 10-20 of these endpoints are called, PostgreSQL's maximum database session limit (i.e., `100`) will be reached.

### Prisma information

It's not needed I guess.

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 22.1.0


### Prisma Version

```
prisma: 5.0.0
```
",,
2355896433,24551,prisma-cli should correctly prompt the current loaded ENV file,"### Bug description

![image](https://github.com/prisma/prisma/assets/41910836/a169a53d-69e2-4e5c-9a7c-0a196ed67d22)
As shown in the screenshot above, I want to load the .env.development file, but the cli prompts that the .env file is being loaded. I thought there was an error, but in fact, the .env.development file was correctly loaded. I believe that this inconsistency can easily confuse many people. 

### How to reproduce

package.json
```json
{
  ""scripts"": {
      ""migrate:dev"": ""dotenv -e .env.development -- npx prisma migrate dev""
    }
}
```
.env
```env
DATABASE_URL=""mysql://xxx/prisma-test?schema=public""
```
.env.development
```env
DATABASE_URL=""mysql://xxx/prisma-test-dev?schema=public""
```
```bash
pnpm run migrate:dev 
```

### Expected behavior

I hope the cli can correctly prompt the currently loaded env file.


### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}
```

### Environment & setup

- OS: Windows
- Database: MySQL
- Node.js version: v20.12.2

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.12.2
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\.pnpm\@prisma+engines@5.15.0\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\.pnpm\@prisma+engines@5.15.0\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2354412840,24544,MySQL migration invalid default value @default(now()),"### Bug description

Error when migrate database MySQL:
When i use `@default(now())` it's error, but when i change to `@default(dbgenerated(""NOW()""))` it's success.

I look into the generated file, it generated `CURRENT_TIMESTAMP(3)` instead of `CURRENT_TIMESTAMP`.
```sql
-- CreateTable
CREATE TABLE `buggy` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(3),

    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
```

Logs:
```
prisma:getSchema Reading schema from single file /app/prisma/mysql/schema.prisma +0ms
prisma:schemaEngine:rpc SENDING RPC CALL {""id"":1,""jsonrpc"":""2.0"",""method"":""schemaPush"",""params"":{""force"":false,""schema"":{""files"":[{""path"":""/app/prisma/mysql/schema.prisma"",""content"":""// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \""prisma-client-js\""\n  output   = \""../../node_modules/@prisma/mysql/client\""\n}\n\ndatasource db {\n  provider = \""mysql\""\n  url      = env(\""MYSQL_DB_CONN_STRING\"")\n}\n\nmodel buggy {\n  id         Int       @id @default(autoincrement())\n  created_at DateTime  @default(now()) @db.Timestamp()\n}\n""}]}}} +4ms
prisma:schemaEngine:stderr {""timestamp"":""2024-06-15T01:57:18.919228101Z"",""level"":""INFO"",""fields"":{""message"":""Starting schema engine RPC server"",""git_hash"":""12e25d8d06f6ea5a0252864dd9a03b1bb51f3022""},""target"":""schema_engine""} +6ms
prisma:schemaEngine:rpc {
  ""jsonrpc"": ""2.0"",
  ""error"": {
    ""code"": 4466,
    ""message"": ""An error happened. Check the data field for details."",
    ""data"": {
      ""is_panic"": false,
      ""message"": ""Invalid default value for 'created_at'\n   0: sql_schema_connector::apply_migration::migration_step\n           with step=CreateTable { table_id: TableId(0) }\n             at schema-engine/connectors/sql-schema-connector/src/apply_migration.rs:21\n   1: sql_schema_connector::apply_migration::apply_migration\n             at schema-engine/connectors/sql-schema-connector/src/apply_migration.rs:10\n   2: schema_core::state::SchemaPush\n             at schema-engine/core/src/state.rs:461"",
      ""backtrace"": null
    }
  },
  ""id"": 1
} +30ms
Error: Error: Invalid default value for 'created_at'
   0: sql_schema_connector::apply_migration::migration_step
           with step=CreateTable { table_id: TableId(0) }
             at schema-engine/connectors/sql-schema-connector/src/apply_migration.rs:21
   1: sql_schema_connector::apply_migration::apply_migration
             at schema-engine/connectors/sql-schema-connector/src/apply_migration.rs:10
   2: schema_core::state::SchemaPush
             at schema-engine/core/src/state.rs:461

    at Object.<anonymous> (/app/node_modules/prisma/build/index.js:542:46)
    at bu.handleResponse (/app/node_modules/prisma/build/index.js:533:2867)
    at of.<anonymous> (/app/node_modules/prisma/build/index.js:538:524)
    at of.emit (node:events:519:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushObjectMode (node:internal/streams/readable:536:3)
    at Readable.push (node:internal/streams/readable:391:5)
    at of._pushBuffer (/app/node_modules/prisma/build/index.js:527:369)
    at of._transform (/app/node_modules/prisma/build/index.js:527:199)
    at Transform._write (node:internal/streams/transform:171:8)
```


### How to reproduce

Run `DEBUG=""*"" ./node_modules/.bin/prisma migrate dev `


### Expected behavior

Migration sql generated correctly and run successfully

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
model buggy {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamp()
}
```

Generated SQL:
```sql
-- CreateTable
CREATE TABLE `buggy` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(3),

    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
```
Look correct format mysql: https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html


### Environment & setup

- OS: Ubuntu 22.04 
- Database: MySQL 8.0
- Node.js version: v20.14.0
- Docker: v26.1.0

Dockerfile
```# Use an official Node.js runtime as the base image
FROM node:20.14-alpine3.19 as base

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./
COPY yarn.lock ./

# Copy the rest of the application code to the working directory
COPY . .

FROM base as install

# Install dependencies
RUN yarn install --frozen-lockfile

FROM install as test

RUN yarn test

FROM install as lint

RUN yarn lint

FROM install as build

RUN yarn build

CMD [""node"", ""dist/server.js""]
```
compose.yaml
```
services:
  api:
    build: .
    command: sh -c ""yarn && yarn mysql:migrate:dev""
    ports:
      - '${API_PORT}:${API_PORT}'
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      mysqldb:
        condition: service_healthy

  mysqldb:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: '${MYSQL_DB_PASS}'
      MYSQL_USER: ${MYSQL_DB_USER}
      MYSQL_PASSWORD: '${MYSQL_DB_PASS}'
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
    ports:
      - $MYSQL_DB_LOCAL_PORT:3306
    volumes:
      - mysql-db-data:/var/lib/mysql
    healthcheck:
      test: [""CMD"", ""mysqladmin"" ,""ping"", ""-h"", ""localhost""]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  mysql-db-data: {}
```
.env
```
API_PORT=3001

# MySQL
MYSQL_DB_USER=mysqluser
MYSQL_DB_PASS=somepassword
MYSQL_DB_NAME=authdb
MYSQL_DB_LOCAL_PORT=3306
MYSQL_DB_CONN_STRING=""mysql://mysqluser:somepassword@mysqldb:3306/authdb""
```


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : linux-musl-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2354268442,24541,prisma migrate dev fails with Error: P1017 (prisma > 5.9.1),"### Bug description

`prisma migrate dev` fails with `P1017: Server has closed the connection` for any `prisma` version after `5.9.1` 

This error happens even when the `prisma.schema` doesn't have any changes. 

**Reverting to `5.9.1` solves the issue.** 

```
> DEBUG=* yarn prisma migrate dev --create-only

prisma:schemaEngine:rpc SENDING RPC CALL {""id"":1,""jsonrpc"":""2.0"",""method"":""devDiagnostic"",""params"":{""migrationsDirectoryPath"":""/Users/<user>/src/<project>/prisma/migrations""}} +2ms
prisma:schemaEngine:stderr {""timestamp"":""2024-06-14T23:42:31.423091Z"",""level"":""INFO"",""fields"":{""message"":""Starting schema engine RPC server"",""git_hash"":""...""},""target"":""schema_engine""} +9ms
prisma:schemaEngine:stderr {""timestamp"":""2024-06-14T23:43:14.769293Z"",""level"":""ERROR"",""fields"":{""message"":""Error in PostgreSQL connection: Error { kind: Closed, cause: None }""},""target"":""quaint::connector::postgres::native""} +43348ms
prisma:schemaEngine:rpc {
  ""jsonrpc"": ""2.0"",
  ""error"": {
    ""code"": 4466,
    ""message"": ""An error happened. Check the data field for details."",
    ""data"": {
      ""is_panic"": false,
      ""message"": ""Server has closed the connection."",
      ""meta"": null,
      ""error_code"": ""P1017""
    }
  },
  ""id"": 1
} +2ms

Error: Error: P1017

Server has closed the connection.

    at Object.<anonymous> /Users/<user>/src/<project>/node_modules/prisma/build/index.js:525:8)
    at rc.handleResponse (/Users/<user>/src/<project>/node_modules/prisma/build/index.js:516:2821)
    at Pl.<anonymous> (/Users/<user>/src/<project>/node_modules/prisma/build/index.js:521:490)
    at Pl.emit (node:events:517:28)
    at addChunk (node:internal/streams/readable:368:12)
    at readableAddChunk (node:internal/streams/readable:341:9)
    at Readable.push (node:internal/streams/readable:278:10)
    at Pl._pushBuffer (/Users/<user>/src/<project>/node_modules/prisma/build/index.js:510:369)
    at Pl._transform (/Users/<user>/src/<project>/node_modules/prisma/build/index.js:510:199)
    at Transform._write (node:internal/streams/transform:175:8)
```

### How to reproduce

1. Install any `prisma` version above `5.9.1` 
2. Run `yarn prisma migrate dev` or `yarn prisma migrate dev --create-only`
3. See error


### Expected behavior

_No response_

### Prisma information

```prisma
// Add your schema.prisma

// no changes 
```


### Environment & setup

- OS: `macOS`
- Database: `PostgreSQL`
- Node.js version: `v18.19.0`


### Prisma Version

```
5.15.0
```
",,
2353932371,24540,Bug (D1 migrations): IDs of optional relations are lost quietly during migration,"### Bug description

(continues from #24539)

When I have an optional relation defined (using Cloudflare D1) with the default `onDelete: SetNull` and generate a migration to update a table, the relation ids are lost due to the migration deleting those rows.

### How to reproduce

Please follow the instructions in the readme here: https://github.com/hrueger/prisma-24540

### Expected behavior

Relation ids are kept or (if not possible), a big fat warning is printed when generating the migration (and also written to the .sql file).
Luckily, I caught that error in our staging environment, but it could have easily happend in production 😬

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  posts     Post[]
  // name      String @default(""Anonymous"") // uncomment this line
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}
```

### Environment & setup

- OS: MacOS
- Database: Cloudflare D1
- Node.js version: v21.6.1


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
Preview Features        : driverAdapters
```
",,
2353117639,24527,Not possible to omit optional fields in Mongo,"### Bug description

When defining some nested property as optional, TypeScript actually makes you pass `null` to it, and doesn't allow you to omit it.

### How to reproduce

For this prisma.schema:

```
type Nested {
  something   String?
}

type SomeType {
  nested Nested?
}
```

it generates TS types that look like

```
interface Nested {
  something: null | string
}
```


### Expected behavior

I'd expect these types to be generated:

```
interface Nested {
  something?: null | string
}
```

Explicitly passing `null` for optional fields spams db with these nulls, makes the api cumbersome to work with etc.

### Prisma information

see above

### Environment & setup

Macos, node 20

### Prisma Version

5.14.0",,
2349534452,24516,Edge runtime incompatibility error on `$on` or `$use` usage attempt,"### Bug description

I'm building an app with Next.js, NextAuth (JWT strategy) and CockroachDB. To avoid Next.js-related issus with connection pool exhaustion, I've attached prisma to the global object in dev environment [as the docs suggest](https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices). Everything was working fine until I encountered the need to extend the query logging level to include actual SQL parameters passed on the client call for debugging.

After trying the `client.$on(query)` solution suggested [in this discussion](https://github.com/prisma/prisma/issues/5026#issuecomment-759596097) and consulting with the [Prisma docs on logging](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/logging#event-based-logging), I am getting 
```
Server Error
Error: PrismaClient is not configured to run in Vercel Edge Functions or Edge Middleware. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters

If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report


Source
src/config/db/prismaClient.ts (18:9) @ $on

  16 |   ],
  17 | })
> 18 | client.$on('query', async e => {
     |       ^
  19 |   console.log(`${e.query} ${e.params}`)
  20 | })
  21 | return client
```

Am I missing something, or how logging is related to the environment? How do I implement parameter-encompassing logging?

### How to reproduce

1. Implement Next.js-compatible client init. setup [as per docs](https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices)
2. Add `$on` or `$use` method call to the client  
3. Start Next.js dev server
4. Access any page that is calling Prisma Client
5. See error


### Expected behavior

Event-based logging is working, I'm seeing full queries in the terminal

### Prisma information

Prisma Client initialisation file:
```ts
const getClient = () => {
  const client = new PrismaClient({
    log: [
      {
        emit: 'event',
        level: 'query',
      },
    ],
  })
  // client.$on('query', async e => {
  //  console.log(`${e.query} ${e.params}`)
  // })
  // ^^^ These lines are causing the error ^^^
  return client
}

const globalForPrisma = global as unknown as { prisma: PrismaClient }

export const prisma = globalForPrisma.prisma || getClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

export default prisma
```

### Environment & setup

- OS: macOS Sonoma 14.4, Apple M1 Chip 
- Database: Cockroach DB
- Node.js version: v18.17.1

The app is deployed to Vercel, but this may be subject to change.

### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.17.1
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2348738560,24511,internal error: entered unreachable code,"### Bug description

Unable to insert a trivial record in sqlite3. Getting the following exception:

```
thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:178:18:
internal error: entered unreachable code
stack backtrace:
   0:        0x1347b2243 - _napi_register_module_v1
   1:        0x133f1d27b - <unknown>
   2:        0x13478c38e - _napi_register_module_v1
   3:        0x1347b69c1 - _napi_register_module_v1
   4:        0x1347b624b - _napi_register_module_v1
   5:        0x1347b5e82 - _napi_register_module_v1
   6:        0x1347b7311 - _napi_register_module_v1
   7:        0x1347b6cbc - _napi_register_module_v1
   8:        0x1347b6c49 - _napi_register_module_v1
   9:        0x1347b6c36 - _napi_register_module_v1
  10:        0x134c25435 - _napi_register_module_v1
  11:        0x134c25517 - _napi_register_module_v1
  12:        0x134847c8e - _napi_register_module_v1
  13:        0x134735eee - _napi_register_module_v1
  14:        0x13475d87d - _napi_register_module_v1
  15:        0x13476d935 - _napi_register_module_v1
  16:        0x13452a2c2 - _napi_register_module_v1
  17:        0x134558cc5 - _napi_register_module_v1
  18:        0x13455b5ad - _napi_register_module_v1
  19:        0x133e057b0 - <unknown>
  20:        0x133e074c5 - <unknown>
  21:        0x133e251f1 - <unknown>
  22:        0x133e2298d - <unknown>
  23:        0x133e0ed89 - <unknown>
  24:        0x133e811e6 - <unknown>
  25:        0x133e47f9d - <unknown>
  26:        0x133e53fea - <unknown>
  27:        0x1347d0376 - _napi_register_module_v1
  28:        0x1347da1c6 - _napi_register_module_v1
  29:        0x1347cea1e - _napi_register_module_v1
  30:        0x1347ce47c - _napi_register_module_v1
  31:        0x1347d3f7d - _napi_register_module_v1
  32:        0x1347b89bb - _napi_register_module_v1
  33:     0x7ff8050e218b - __pthread_start
/Users/ketanpadegaonkar/code/meshtastic/meshtastic-map/node_modules/@prisma/client/runtime/library.js:122
`)}var Zi=({clientMethod:e,activeProvider:r})=>t=>{let n="""",i;if(Array.isArray(t)){let[o,...s]=t;n=o,i={values:Pt(s||[]),__prismaRawParameters__:!0}}else switch(r){case""sqlite"":case""mysql"":{n=t.sql,i={values:Pt(t.values),__prismaRawParameters__:!0};break}case""cockroachdb"":case""postgresql"":case""postgres"":{n=t.text,i={values:Pt(t.values),__prismaRawParameters__:!0};break}case""sqlserver"":{n=tl(t),i={values:Pt(t.values),__prismaRawParameters__:!0};break}default:throw new Error(`The ${r} provider does not support ${e}`)}return i?.values?sl(`prisma.${e}(${n}, ${i.values})`):sl(`prisma.${e}(${n})`),{query:n,parameters:i}},al={requestArgsToMiddlewareArgs(e){return[e.strings,...e.values]},middlewareArgsToRequestArgs(e){let[r,...t]=e;return new ie(r,t)}},ll={requestArgsToMiddlewareArgs(e){return[e]},middlewareArgsToRequestArgs(e){return e[0]}};function Xi(e){return function(t){let n,i=(o=e)=>{try{return o===void 0||o?.kind===""itx""?n??(n=ul(t(o))):ul(t(o))}catch(s){return Promise.reject(s)}};return{then(o,s){return i().then(o,s)},catch(o){return i().catch(o)},finally(o){return i().finally(o)},requestTransaction(o){let s=i(o);return s.requestTransaction?s.requestTransaction(o):s},[Symbol.toStringTag]:""PrismaPromise""}}}function ul(e){return typeof e.then==""function""?e:Promise.resolve(e)}var cl={isEnabled(){return!1},getTraceParent(){return""00-10-10-00""},async createEngineSpan(){},getActiveContext(){},runInChildSpan(e,r){return r()}},eo=class{isEnabled(){return this.getGlobalTracingHelper().isEnabled()}getTraceParent(r){return this.getGlobalTracingHelper().getTraceParent(r)}createEngineSpan(r){return this.getGlobalTracingHelper().createEngineSpan(r)}getActiveContext(){return this.getGlobalTracingHelper().getActiveContext()}runInChildSpan(r,t){return this.getGlobalTracingHelper().runInChildSpan(r,t)}getGlobalTracingHelper(){return globalThis.PRISMA_INSTRUMENTATION?.helper??cl}};function pl(e){return e.includes(""tracing"")?new eo:cl}function dl(e,r=()=>{}){let t,n=new Promise(i=>t=i);return{then(i){return--e===0&&t(r()),i?.(n)}}}var Zd=[""$connect"",""$disconnect"",""$on"",""$transaction"",""$use"",""$extends""],ml=Zd;function fl(e){return typeof e==""string""?e:e.reduce((r,t)=>{let n=typeof t==""string""?t:t.level;return n===""query""?r:r&&(t===""info""||r===""info"")?""info"":n},void 0)}var Cn=class{constructor(){this._middlewares=[]}use(r){this._middlewares.push(r)}get(r){return this._middlewares[r]}has(r){return!!this._middlewares[r]}length(){return this._middlewares.length}};var hl=k(ui());function Sn(e){return typeof e.batchRequestIdx==""number""}function Rn(e){return e===null?e:Array.isArray(e)?e.map(Rn):typeof e==""object""?Xd(e)?em(e):gr(e,Rn):e}function Xd(e){return e!==null&&typeof e==""object""&&typeof e.$type==""string""}function em({$type:e,value:r}){switch(e){case""BigInt"":return BigInt(r);case""Bytes"":return Buffer.from(r,""base64"");case""DateTime"":return new Date(r);case""Decimal"":return new Te(r);case""Json"":return JSON.parse(r);default:rr(r,""Unknown tagged value"")}}function gl(e){if(e.action!==""findUnique""&&e.action!==""findUniqueOrThrow"")return;let r=[];return e.modelName&&r.push(e.modelName),e.query.arguments&&r.push(ro(e.query.arguments)),r.push(ro(e.query.selection)),r.join("""")}function ro(e){return`(${Object.keys(e).sort().map(t=>{let n=e[t];return typeof n==""object""&&n!==null?`(${t} ${ro(n)})`:t}).join("" "")})`}var rm={aggregate:!1,aggregateRaw:!1,createMany:!0,createManyAndReturn:!0,createOne:!0,deleteMany:!0,deleteOne:!0,executeRaw:!0,findFirst:!1,findFirstOrThrow:!1,findMany:!1,findRaw:!1,findUnique:!1,findUniqueOrThrow:!1,groupBy:!1,queryRaw:!1,runCommandRaw:!0,updateMany:!0,updateOne:!0,upsertOne:!0};function to(e){return rm[e]}var An=class{constructor(r){this.options=r;this.tickActive=!1;this.batches={}}request(r){let t=this.options.batchBy(r);return t?(this.batches[t]||(this.batches[t]=[],this.tickActive||(this.tickActive=!0,process.nextTick(()=>{this.dispatchBatches(),this.tickActive=!1}))),new Promise((n,i)=>{this.batches[t].push({request:r,resolve:n,reject:i})})):this.options.singleLoader(r)}dispatchBatches(){for(let r in this.batches){let t=this.batches[r];delete this.batches[r],t.length===1?this.options.singleLoader(t[0].request).then(n=>{n instanceof Error?t[0].reject(n):t[0].resolve(n)}).catch(n=>{t[0].reject(n)}):(t.sort((n,i)=>this.options.batchOrder(n.request,i.request)),this.options.batchLoader(t.map(n=>n.request)).then(n=>{if(n instanceof Error)for(let i=0;i<t.length;i++)t[i].reject(n);else for(let i=0;i<t.length;i++){let o=n[i];o instanceof Error?t[i].reject(o):t[i].resolve(o)}}).catch(n=>{for(let i=0;i<t.length;i++)t[i].reject(n)}))}}get[Symbol.toStringTag](){return""DataLoader""}};var tm=L(""prisma:client:request_handler""),In=class{constructor(r,t){this.logEmitter=t,this.client=r,this.dataloader=new An({batchLoader:na(async({requests:n,customDataProxyFetch:i})=>{let{transaction:o,otelParentCtx:s}=n[0],a=n.map(p=>p.protocolQuery),l=this.client._tracingHelper.getTraceParent(s),u=n.some(p=>to(p.protocolQuery.action));return(await this.client._engine.requestBatch(a,{traceparent:l,transaction:nm(o),containsWrite:u,customDataProxyFetch:i})).map((p,d)=>{if(p instanceof Error)return p;try{return this.mapQueryEngineResult(n[d],p)}catch(f){return f}})}),singleLoader:async n=>{let i=n.transaction?.kind===""itx""?yl(n.transaction):void 0,o=await this.client._engine.request(n.protocolQuery,{traceparent:this.client._tracingHelper.getTraceParent(),interactiveTransaction:i,isWrite:to(n.protocolQuery.action),customDataProxyFetch:n.customDataProxyFetch});return this.mapQueryEngineResult(n,o)},batchBy:n=>n.transaction?.id?`transaction-${n.transaction.id}`:gl(n.protocolQuery),batchOrder(n,i){return n.transaction?.kind===""batch""&&i.transaction?.kind===""batch""?n.transaction.index-i.transaction.index:0}})}async request(r){try{return await this.dataloader.request(r)}catch(t){let{clientMethod:n,callsite:i,transaction:o,args:s,modelName:a}=r;this.handleAndLogRequestError({error:t,clientMethod:n,callsite:i,transaction:o,args:s,modelName:a})}}mapQueryEngineResult({dataPath:r,unpacker:t},n){let i=n?.data,o=n?.elapsed,s=this.unpack(i,r,t);return process.env.PRISMA_CLIENT_GET_TIME?{data:s,elapsed:o}:s}handleAndLogRequestError(r){try{this.handleRequestError(r)}catch(t){throw this.logEmitter&&this.logEmitter.emit(""error"",{message:t.message,target:r.clientMethod,timestamp:new Date}),t}}handleRequestError({error:r,clientMethod:t,callsite:n,transaction:i,args:o,modelName:s}){if(tm(r),im(r,i)||r instanceof Oe)throw r;if(r instanceof V&&om(r)){let l=El(r.meta);Tn({args:o,errors:[l],callsite:n,errorFormat:this.client._errorFormat,originalMethod:t,clientVersion:this.client._clientVersion})}let a=r.message;if(n&&(a=Ar({callsite:n,originalMethod:t,isPanic:r.isPanic,showColors:this.client._errorFormat===""pretty"",message:a})),a=this.sanitizeMessage(a),r.code){let l=s?{modelName:s,...r.meta}:r.meta;throw new V(a,{code:r.code,clientVersion:this.client._clientVersion,meta:l,batchRequestIdx:r.batchRequestIdx})}else{if(r.isPanic)throw new le(a,this.client._clientVersion);if(r instanceof B)throw new B(a,{clientVersion:this.client._clientVersion,batchRequestIdx:r.batchRequestIdx});if(r instanceof R)throw new R(a,this.client._clientVersion);if(r instanceof le)throw new le(a,this.client._clientVersion)}throw r.clientVersion=this.client._clientVersion,r}sanitizeMessage(r){return this.client._errorFormat&&this.client._errorFormat!==""pretty""?(0,hl.default)(r):r}unpack(r,t,n){if(!r||(r.data&&(r=r.data),!r))return r;let i=Object.values(r)[0],o=t.filter(a=>a!==""select""&&a!==""include""),s=Rn(Ii(i,o));return n?n(s):s}get[Symbol.toStringTag](){return""RequestHandler""}};function nm(e){if(e){if(e.kind===""batch"")return{kind:""batch"",options:{isolationLevel:e.isolationLevel}};if(e.kind===""itx"")return{kind:""itx"",options:yl(e)};rr(e,""Unknown transaction kind"")}}function yl(e){return{id:e.id,payload:e.payload}}function im(e,r){return Sn(e)&&r?.kind===""batch""&&e.batchRequestIdx!==r.index}function om(e){return e.code===""P2009""||e.code===""P2012""}function El(e){if(e.kind===""Union"")return{kind:""Union"",errors:e.errors.map(El)};if(Array.isArray(e.selectionPath)){let[,...r]=e.selectionPath;return{...e,selectionPath:r}}return e}var bl=""5.15.0"";var wl=bl;function xl(e){return e.map(r=>{let t={};for(let n of Object.keys(r))t[n]=Pl(r[n]);return t})}function Pl({prisma__type:e,prisma__value:r}){switch(e){case""bigint"":return BigInt(r);case""bytes"":return Buffer.from(r,""base64"");case""decimal"":return new Te(r);case""datetime"":case""date"":return new Date(r);case""time"":return new Date(`1970-01-01T${r}Z`);case""array"":return r.map(Pl);default:return r}}var Sl=k(Hi());var q=class extends Error{constructor(r){super(r+`

PrismaClientRustPanicError:
Invalid `prisma.message.create()` invocation in
/Users/ketanpadegaonkar/code/meshtastic/meshtastic-map/recorder/recorder.ts:17:26

  14
  15 client.on(""message"", async (topic: string, payload: Buffer) => {
  16   console.log(""Got message"", topic, payload)
→ 17   await prisma.message.create(
internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v22.2.0++++++++++++%7C+%0A%7C+OS++++++++++++++%7C+darwin+++++++++++++%7C%0A%7C+Prisma+Client+++%7C+5.15.0+++++++++++++%7C%0A%7C+Query+Engine++++%7C+12e25d8d06f6ea5a0252864dd9a03b1bb51f3022%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Ading+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0A%60%60%60%0A%0A%23%23+Client+Snippet%0A%60%60%60ts%0A%2F%2F+PLEASE+FILL+YOUR+CODE+SNIPPET+HERE%0A%60%60%60%0A%0A%23%23+Schema%0A%60%60%60prisma%0A%2F%2F+PLEASE+ADD+YOUR+SCHEMA+HERE+IF+POSSIBLE%0A%60%60%60%0A%0A%23%23+Prisma+Engine+Query%0A%60%60%60%0A%7B%22X%22%3Atrue%7D%7D%7D%0A%60%60%60%0A&title=internal+error%3A+entered+unreachable+code&template=bug_report.yml

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue.

    at In.handleRequestError (/Users/ketanpadegaonkar/code/meshtastic/meshtastic-map/node_modules/@prisma/client/runtime/library.js:122:7238)
    at In.handleAndLogRequestError (/Users/ketanpadegaonkar/code/meshtastic/meshtastic-map/node_modules/@prisma/client/runtime/library.js:122:6211)
    at In.request (/Users/ketanpadegaonkar/code/meshtastic/meshtastic-map/node_modules/@prisma/client/runtime/library.js:122:5919)
    at async l (/Users/ketanpadegaonkar/code/meshtastic/meshtastic-map/node_modules/@prisma/client/runtime/library.js:127:11167) {
  clientVersion: '5.15.0'
}
```

### How to reproduce

Create the schema and run the below typescript code


### Expected behavior

_No response_

### Prisma information

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Message {
  id      Int         @id   @default(autoincrement())
  time    DateTime
  topic   String
  message Bytes
}

```

```ts
import { PrismaClient } from ""@prisma/client"";
import mqtt from ""mqtt"";
const prisma = new PrismaClient();

async function main(): Promise<void> {
  const client = await mqtt.connect(""mqtt://mqtt.meshtastic.org"", {
    username: ""meshdev"",
    password: ""large4cats"",
  });

  client.on(""connect"", () => {
    client.subscribe(""#"");
  });

  client.on(""message"", async (topic: string, payload: Buffer) => {
    console.log(""Got message"", topic, payload)
    await prisma.message.create({
      data: {
        time: new Date(),
        topic: topic,
        message: payload,
      },
    });
  });
}

main().catch(console.error);

```


### Environment & setup

- OS: macOS Sonoma (14.5)
- Database: sqlite3 (`3.45.3 2024-04-15 13:34:05 8653b758870e6ef0c98d46b3ace27849054af85da891eb121e9aaa537f1e8355`)
- Node.js version: `v22.2.0`


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v22.2.0
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at ../node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at ../node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2347555054,24510,Missing generated Enum in typescript definition when Enum isn't used in Prisma table,"### Bug description

Normally, you can simply import Prisma enums as a typescript type like below:
```typescript
import type { MyEnum } from ""@prisma/client""
```
However, if the Enum isn't used in any Prisma table column, Prisma doesn't generate the typescript definitions for it. 

### How to reproduce

Using the attached Prisma schema file, or any Prisma file containing an Enum that isn't referenced by a table, run `npx prisma generate`.

Lastly, try importing both the Enum1 and Enum2 types 
```typescript
import { Enum1, Enum2 } from ""@prisma/client""
```
Enum2 will not exist in the typescript definition, and typescript will throw an error. 

<img width=""804"" alt=""Screenshot 2024-06-11 at 3 57 47 PM"" src=""https://github.com/prisma/prisma/assets/77520157/3001eee5-83ab-49e0-88ae-6c5df34c743f"">


### Expected behavior

Both Enum1 and Enum2 should exist in the Prisma typescript definition file, and both be able to be imported into my project, even though Enum2 was never used by any table defined in Prisma. 

### Prisma information

```prisma
generator client {
    provider      = ""prisma-client-js""
    binaryTargets = [""native""]
}

datasource db {
    provider = ""postgresql""
    url      = env(""DATABASE_URL"")
}

model MyTable {
    id      String @id
    column1 Enum1
}

enum Enum1 {
    value1
}

enum Enum2 {
    value2
}

```


```ts
import { Enum1, Enum2 } from ""@prisma/client""
```


### Environment & setup

- OS: Linux
- Database: PostgreSQL
- Node.js version: Node 20


### Prisma Version

```
v5.15.0
```",,
2347318299,24499,Type issue where field is not null,"### Discussed in https://github.com/prisma/prisma/discussions/20190

> <div type='discussions-op-text'>
> 
> <sup>Originally posted by **MarkForLoop** July 12, 2023</sup>
> I am trying to access the someID property of the items object where someID is not null 
> 
> However, the type of the someID property is not being inferred correctly, and I have to filter out the null values from the resulting array.
> 
> Here is the code snippet that I am using:
> ```
> const result = await ctx.prisma.example.findUnique({
>   where: {
>     id: input.id,
>   },
>   include: {
>     items: {
>       where: {
>         someID: { not: null },
>       },
>       select: { someID: true },
>     },
>   },
> });
> 
> if (result.items.length > 0) {
>   const someIDs = result.items.map((item) => item.someID);
> }
> ```
> 
> 
> As you can see, the someIDs array is inferred as (string | null)[] instead of string[]. 
> This is because the someID property can be null, and TypeScript infers the type of the resulting array as a union of string and null.
> 
> 1.  is this intended? 
> 2. If not how do I fix it?
> </div>",,
2346904878,24496,Prisma `Unsupported()` columns can be overwritten,"### Bug description

If an `Unsupported()` column is `GENERATED ALWAYS` (PostgreSQL), then after Prisma correctly adds that column, the next `prisma migrate dev` will incorrectly attempt to remove a `DEFAULT` value from that column.



### How to reproduce

Simple example:

```prisma
generator client {
    provider        = ""prisma-client-js""
    previewFeatures = [""fullTextSearch""]
}

datasource db {
    provider = ""postgresql""
    url      = env(""DATABASE_URL"")
}

model Post {
    id String @id
    text       String
    textSearch Unsupported(""tsvector GENERATED ALWAYS AS (to_tsvector('english', text)) STORED"")

    @@index([textSearch], type: Gin)
}
```

When you first run the `prisma migrate dev`, it works exactly as expected.

But then if you run `prisma migrate dev` _again_, it will produce the following spurious migration:

```sql
-- AlterTable
ALTER TABLE ""Post"" ALTER COLUMN ""textSearch"" DROP DEFAULT;
```

My guess is that the data Prisma is getting from the shadow database indicates that the `textSearch` column has a default value (it's `GENERATED`, after all!), which Prisma interprets to mean that it has a `DEFAULT` clause. 

My suggestion would be to have Prisma ignore `Unsupported()` columns unless the exact text within the quotes changes. If that's too hard, then looking for whatever indication that `GENERATED` exists in the `Unsupported()` column and using that to _not_ generate a `DROP DEFAULT` would work.

### Expected behavior

No spurious migrations? I always hate this field.

### Prisma information

The sample schema copied from the above, because it's asking for it again.

```prisma
generator client {
    provider        = ""prisma-client-js""
    previewFeatures = [""fullTextSearch""]
}

datasource db {
    provider = ""postgresql""
    url      = env(""DATABASE_URL"")
}

model Post {
    id String @id
    text       String
    textSearch Unsupported(""tsvector GENERATED ALWAYS AS (to_tsvector('english', text)) STORED"")

    @@index([textSearch], type: Gin)
}
```

### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.14.0


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2346430470,24494,`prisma:engine:db_query` span missing for `count`/`aggregate` with MongoDB,"<img width=""486"" height=""313"" src=""https://github.com/prisma/prisma/assets/4923335/3c3158f5-eab1-4c09-ac91-9e737498ae03"">

`prisma:engine:db_span` is missing for the following query with MongoDB:

```ts
await prisma.user.count();
```

with the following schema:

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing""]
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model User {
  id    String @id @default(cuid()) @map(""_id"")
  email String
}
```

It is present, however, for SQL databases (checked with SQLite).

See https://prisma-company.slack.com/archives/C02K05SHRAT/p1718110740399959?thread_ts=1717770657.956069&cid=C02K05SHRAT",,
2346187920,24492,`migrate diff` complains about schema not listed even though it is present,"### Bug description

When trying to run the prisma diff command an error is returned asking to supply the schema even though it already is present.

````prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema"", ""views"", ""relationJoins""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
  schemas  = [""adminpanel"", ""x"", ""logging"", ""y"", ""public"", ""sensitive_data""]
}


$ prisma migrate diff --from-url ""DB_URL"" --to-migrations ./prisma/migrations/
Error: P4002
````

> The schema of the introspected database was inconsistent: The schema of the introspected database was inconsistent: Cross schema references are only allowed when the target schema is listed in the schemas property of your datasource. `public.frontend_auth_session` points to `sensitive_data.user` in constraint `frontend_auth_session_user_id_fkey`. Please add `sensitive_data` to your `schemas` property and run this command again.

### How to reproduce

Running `prisma migrate diff --from-url ""DB_URL"" --to-migrations ./prisma/migrations/` with multiple migrations present, `multiSchema` flag enabled and 2 models referencing each other in different schemas. 

I have not tried to reproduce a minimal example yet

### Expected behavior

_No response_

### Prisma information

Full model can be shared upon request privately

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model frontend_auth_session {
  id             String      @id
  white_label_id String
  user_id        Int
  expire_at      DateTime
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  white_label    white_label @relation(fields: [white_label_id], references: [id], onDelete: NoAction, map: ""email_template_white_label_id_FK"")
  user           user        @relation(fields: [user_id], references: [id])
  booking        booking[]

  @@schema(""public"")
}

model user {
  id                                            Int                     @id @default(autoincrement())
  user_name                                     String                  @unique
  password                                      String
  first_name                                    String?
  last_name                                     String?
  image                                         String?
  password_reset_token                          String?
  adminpanel_access                             Boolean                 @default(false)
  active                                        Boolean                 @default(true)
  created_at                                    DateTime                @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime                @default(now()) @db.Timestamp(6)
  xxxx                                          xxxx[]
  frontend_auth_session                         frontend_auth_session[]
  booking_attachment                            booking_attachment[]
  booking_comment                               booking_comment[]
  usersonagencies_usersonagencies_user_idTouser usersonagencies[]       @relation(""usersonagencies_user_idTouser"")
  white_label                                   white_label[]

  @@index([user_name])
  @@schema(""sensitive_data"")
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS:  WSL2 Win
- Database:  PostgreSQL 15.6 (Ubuntu 15.6-1.pgdg20.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, 64-bit
- Node.js version: bun v1.1.12


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.15.0
@prisma/client          : 5.10.2
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
Preview Features        : multiSchema, views, relationJoins
```
",,
2345219728,24488,[Instrumentation] `registerInstrumentations` uses the global provider instead of the one passed in,"### Bug description

I want to sample the traces coming from from Prisma, but I do not want to sample the traces that we manually instrument via `wrapWithSpan`. When I call `registerInstrumentations` and pass a `tracerProvider` it is not used and Prisma instead uses the global provider.



I've also opened this as [an issue](https://github.com/open-telemetry/opentelemetry-js/issues/4783) on the opentelemetry package as I don't know where the fault lies

### How to reproduce

Create an open telemetry setup with 2 providers. Register one globally and pass the other as tracerProvider to registerInstrumentations

Then run a process which results in the instrumentation generating traces.


Our setup code here:
```ts
import * as api from ""@opentelemetry/api"";
import { AsyncHooksContextManager } from ""@opentelemetry/context-async-hooks"";
import { OTLPTraceExporter } from ""@opentelemetry/exporter-trace-otlp-http"";
import { registerInstrumentations } from ""@opentelemetry/instrumentation"";
import { Resource } from ""@opentelemetry/resources"";
import {
  BasicTracerProvider,
  BatchSpanProcessor,
  ConsoleSpanExporter,
  SimpleSpanProcessor,
  TraceIdRatioBasedSampler,
} from ""@opentelemetry/sdk-trace-base"";
import {
  SEMRESATTRS_DEPLOYMENT_ENVIRONMENT,
  SEMRESATTRS_SERVICE_NAME,
  SEMRESATTRS_SERVICE_VERSION,
} from ""@opentelemetry/semantic-conventions"";
import { PrismaInstrumentation } from ""@prisma/instrumentation"";
import { ReploError } from ""schemas/errors"";

import { gitSha, reploEnv } from ""../env"";

export function openTelemetrySetup() {
  // NOTE (Gabe 2024-05-07): a context manager is required to propagate the
  // context for span nesting
  const contextManager = new AsyncHooksContextManager().enable();
  api.context.setGlobalContextManager(contextManager);

  // NOTE (Gabe 2024-05-07): This uses OTEL_EXPORTER_OTLP_XXXX env vars for
  // configuration.
  const otlpTraceExporter = new OTLPTraceExporter();

  const defaultProvider = new BasicTracerProvider({
    resource: new Resource({
      [SEMRESATTRS_SERVICE_NAME]: ""replo-publisher"",
      [SEMRESATTRS_DEPLOYMENT_ENVIRONMENT]: reploEnv,
      [SEMRESATTRS_SERVICE_VERSION]: gitSha,
    }),
  });
  const sampledProvider = new BasicTracerProvider({
    // NOTE (Gabe 2024-05-07): Sampling is enabled here to limit the performance
    // impact.
    sampler: new TraceIdRatioBasedSampler(0.1),
    resource: new Resource({
      [SEMRESATTRS_SERVICE_NAME]: ""replo-publisher-prisma"",
      [SEMRESATTRS_DEPLOYMENT_ENVIRONMENT]: reploEnv,
      [SEMRESATTRS_SERVICE_VERSION]: gitSha,
    }),
  });

  if (reploEnv === ""production"") {
    sampledProvider.addSpanProcessor(new BatchSpanProcessor(otlpTraceExporter));
    defaultProvider.addSpanProcessor(new BatchSpanProcessor(otlpTraceExporter));
  } else {
    // NOTE (Gabe 2024-05-07): this can be uncommented to write traces to the
    // console during development.
    // const consoleExporter = new ConsoleSpanExporter();
    sampledProvider.addSpanProcessor(
      new SimpleSpanProcessor(new ConsoleSpanExporter()),
    );
    defaultProvider.addSpanProcessor(
      new SimpleSpanProcessor(new ConsoleSpanExporter()),
    );
  }

  defaultProvider.register();
  api.trace.setGlobalTracerProvider(defaultProvider);

  registerInstrumentations({
    instrumentations: [new PrismaInstrumentation()],
    // This sampledProvider is not used, instead the defaultProvider is
    tracerProvider: sampledProvider,
  });
}
const tracer = api.trace.getTracer(""replo-publisher"");

export async function wrapWithSpan<R>(
  fn: () => Promise<R>,
  name: string,
  parentContext: api.Context,
): Promise<R> {
  const span = tracer.startSpan(name, {}, parentContext);
  try {
    const result = await fn();
    span.setStatus({ code: api.SpanStatusCode.OK });
    return result;
  } catch (error: unknown) {
    let message: string | undefined;
    if (error instanceof ReploError) {
      message = error.message;
    }
    span.setStatus({
      code: api.SpanStatusCode.ERROR,
      message,
    });
    throw error;
  } finally {
    span.end();
  }
}

```

All of the prisma spans end up being written to the `defaultProvider` and looks like this:
```
{
  ""resource"": {
    ""attributes"": {
      ""service.name"": ""replo-publisher"",
      ""telemetry.sdk.language"": ""nodejs"",
      ""telemetry.sdk.name"": ""opentelemetry"",
      ""telemetry.sdk.version"": ""1.24.1"",
      ""deployment.environment"": ""development"",
      ""service.version"": undefined
    }
  },
  ""traceId"": ""c599bf0c727b33e92c689937a80fb7ec"",
  ""parentId"": ""c12bcce8d51f28c7"",
  ""traceState"": undefined,
  ""name"": ""prisma:engine:response_json_serialization"",
  ""id"": ""be557a7fb7e2ccb4"",
  ""kind"": 0,
  ""timestamp"": 1718071948974729,
  ""duration"": 17,
  ""attributes"": {},
  ""status"": { ""code"": 0 },
  ""events"": [],
  ""links"": []
}

```

### Expected behavior

The  Prisma instrumentation will only write to the provider passed as `tracerProvider`



### Prisma information

I don't believe this is relevant, but if desired I can share.

### Environment & setup

- OS: macOS
- Database: Postgres
- Node.js version: v20.12.1Ï


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.12.1
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
Preview Features        : metrics, tracing
```
",,
2342492900,24478,Update behavior inconsistent between 1-n and 1-1 relation queries,"### Bug description

When having a 1-n relationship, I can use [relation queries](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) to delete related records **IF ANY** with this code:

```typescript
async function thisWorks(id: string) {
  await prisma.profile.update({
    where: { id },
    data: {
      many: {
        deleteMany: {},
      }
    }
  });
  console.log("":) Deleting in 1-n worked!"")
}
```

But if I try to do a very similar query for 1-1 relations, it doesn't work:

```typescript
async function thisDoesntWork(id: string) {
  await prisma.profile.update({
    where: { id },
    data: {
      one: {
        delete: true,
      }
    }
  });
  console.log("":( Deleting in 1-1 DOESN'T work!"")
}
```

Yielding the following error:

```
PrismaClientKnownRequestError:
Invalid `prisma.profile.update()` invocation in
/Users/user/dev/prisma-sandbox/script.ts:25:24

  22 }
  23
  24 async function thisDoesntWork(id: string) {
→ 25   await prisma.profile.update(
An operation failed because it depends on one or more records that were required but not found. No 'ToOne' record was found for a nested delete on relation 'ProfileToToOne'.
    at In.handleRequestError (/Users/user/dev/prisma-sandbox/node_modules/@prisma/client/runtime/library.js:122:6877)
    at In.handleAndLogRequestError (/Users/user/dev/prisma-sandbox/node_modules/@prisma/client/runtime/library.js:122:6211)
    at In.request (/Users/user/dev/prisma-sandbox/node_modules/@prisma/client/runtime/library.js:122:5919)
    at async l (/Users/user/dev/prisma-sandbox/node_modules/@prisma/client/runtime/library.js:127:11167) {
  code: 'P2025',
  clientVersion: '5.14.0',
  meta: {
    modelName: 'Profile',
    cause: ""No 'ToOne' record was found for a nested delete on relation 'ProfileToToOne'.""
  }
}
```

Which is caused by the `one` record to be non-existing, which doesn't happen with `deleteMany` because it works independently of the relation to be populated or not.

Note: one workaround is to first fetch the record i want to update and check if the related record is set or not, but this requires one extra go to the db which is not optimal. My use-case (which I don't think is a corner-case) is receiving a form to update a `Profile` (that's why I used that name in my example) with the new self-containing data and the ID. I would like to set the new profile only based on the new data without having to go to the db to fetch the old data.

### How to reproduce

1. Clone and set up `https://github.com/peguerosdc/prisma-sandbox/tree/one-to-one-delete-issue`
2. Run the `script.ts` file with the `thisWorks` function to see the case for 1-n relations
3. Run the `script.ts` file with the `thisDoesntWork` function to see the case for 1-n relations
    - See the error
4. (optional) Run the `script.ts` file with the `thisIsTheWorkaround` function to see a workaround for 1-n relations, which would require one extra call to the db to fetch the corresponding record (assuming we are not creating the root record in the same function, which was only done for the purpose of this example and almost never happens in real life).

### Expected behavior

Considering the similarity both in the use case and in the API (note that `{deleteMany: {}}` is very similar to `{delete: true}`, as the analogous `{createMany: {}}` and `{create: {}}`), I would expect:

* prisma to behave the same for 1-1 and 1-n relation queries.
* prisma to let me delete records in 1-1 relations without having to worry if there is an existing record or not
* all similarities and differences to be documented

### Prisma information

### Schema

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

model Profile {
  id        String     @id @default(cuid())
  one       ToOne?
  many      ToMany[]
}

model ToOne {
  id         String    @id @default(cuid())
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String    @unique
}

model ToMany {
  id         String    @id @default(cuid())
  profile    Profile   @relation(fields: [profileId], references: [id])
  profileId  String
}
```

### Queries

```typescript
async function thisWorks(id: string) {
  await prisma.profile.update({
    where: { id },
    data: {
      many: {
        deleteMany: {},
      }
    }
  });
  console.log("":) Deleting in 1-n worked!"")
}

async function thisDoesntWork(id: string) {
  await prisma.profile.update({
    where: { id },
    data: {
      one: {
        delete: true,
      }
    }
  });
  console.log("":( Deleting in 1-1 DOESN'T work!"")
}

async function thisIsTheWorkaround(id: string) {
  const root = await prisma.profile.findUniqueOrThrow({
    where: { id },
    include: { one: true }
  })
  await prisma.profile.update({
    where: { id },
    data: {
      one: root.one ? {
        delete: true
      } : undefined
    }
  });
  console.log("":) Deleting in 1-1 works, but I need one extra go to the db!"")
}
```

### Environment & setup

- OS: macOS
- Database: I use PostgreSQL, but I have also reproduced it with SQLite
- Node.js version: v22.1.0

### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v22.1.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2341550559,24475,Prisma (v5.12 & v5.14 & v5.15) client has errors accessing `cockroachdb` when using with cloudflare workers and the new `driverAdapter` preview feature,"### Bug description

### Bug description

Prisma (v5.12 & v5.14 & v5.15 client has errors accessing cockroachdb when using with cloudflare workers and the new { previewFeatures = [""driverAdapters""] }.  All queries using the PrismaClient() will fail with error:

```
Cannot find module './query_engine_bg.js'
```
![Image](https://github.com/prisma/prisma/assets/183673/07bd2c23-eb9c-4a74-a424-43305505cc5e)


**NOTE:** the root cause of the bug is that there are 2 files: [query_engine_bg.js] & [query_engine_bg.wasm] that are missing from the directory [\node_modules.prisma\client]

_(if you copy the 2 missing files into this directory, then the PrismaClient() will work, and be able to query the database)_

### How to reproduce

You can use your own example: 
https://github.com/prisma/ecosystem-tests/tree/dev/driver-adapters-wasm/pg-cf-basic

change the provider to ""cockroachdb"", and the 2 missing files will not get produced (in the .prisma/client directory)

![image](https://github.com/prisma/prisma/assets/73307/9af52886-fcf9-452a-b809-5abd587c7415)

### Expected behavior

the 2 file below should appear in the direcotry .[..\pg-cf-basic\node_modules\.prisma\client]

**query_engine_bg.js
query_engine_bg.wasm**

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: windows 10
- Database: [PostgreSQL]
- Node.js version: v18.16.0

### Prisma Version

```
prisma 5.12.1   (or 51.4 or 5.15)
@prisma/client 5.12.1   (or 51.4 or 5.15)
@prisma/adapter-pg  5.12.1   (or 51.4 or 5.15)
```
",,
2341178766,24472,"Accelerate breaks ""PrismaClient is unable to run in this browser environment, or has been bundled for the browser""","### Bug description

Hi, I have a **Next.js** application using the **pages router**, prisma has been working delightfully until this date, I'm a big fan of it, but now that I'm implementing **@prisma/extension-accelerate**, it's breaking one single route, an ISR route, which is odd as I have almost the same implementation for a route alike

`lib/prisma.ts`:
```
import { PrismaClient } from ""@prisma/client"";

const prismaClientSingleton = () => {
  return new PrismaClient({ log: [""info"", ""warn""] });
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClientSingleton | undefined;
};

export const prisma = globalForPrisma.prisma ?? prismaClientSingleton();

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;

export default prisma;
```

With the previous prisma implementation, `http://localhost:3000/users/22` it's working fine, everything loads as expected, but if I add Accelerate to the Prisma Client [as recommended by Prisma](https://github.com/prisma/accelerate-nextjs-starter/blob/main/lib/db.ts), then run `pnpm prisma generate` and `pnpm dev`, the same route it's breaking somehow

`lib/prisma.ts` (with Accelerate):
```
import { PrismaClient } from ""@prisma/client"";
import { withAccelerate } from ""@prisma/extension-accelerate"";

const prismaClientSingleton = () => {
  return new PrismaClient({ log: [""info"", ""warn""] }).$extends(withAccelerate()); // <-- Accelerate
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClientSingleton | undefined;
};

export const prisma = globalForPrisma.prisma ?? prismaClientSingleton();

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;

export default prisma;
```

<img width=""1452"" alt=""image"" src=""https://github.com/prisma/prisma/assets/58494087/bd48c14e-2726-4a90-bf18-0fec87dfc54e"">

`pages/users/[slug].tsx`:
```
import React from ""react"";
import Head from ""next/head"";
import prisma from ""@/lib/prisma"";
import UserPreview, { getPublicUser } from ""@/components/User/Preview"";

const slug = ({
  user,
}: {
  user: Awaited<ReturnType<typeof getPublicUser>>;
}) => {
  return (
    // ...
    <UserPreview user={user} />
  );
};

export async function getStaticProps({ params }: { params: { slug: string } }) {
  const id = parseInt(params.slug, 16);

  if (Number.isNaN(id) || !id.isUnsignedInt())
    return {
      props: {
        user: null,
      },
    };

  const user = await getPublicUser({
    id,
    works: { some: { viewInBase: true } },
  });

  return {
    // * revalidate onDemand
    props: {
      user,
    },
  };
}

export async function getStaticPaths() {
  const usersWithWorks = await prisma.user.findMany({
    where: { works: { some: { viewInBase: true } } },
    select: { id: true },
  });

  const paths = usersWithWorks.map(({ id }) => ({
    params: { slug: id.toString(16) },
  }));

  return { paths, fallback: ""blocking"" };
}

export default slug;
```

`components/User/Preview/index.tsx` (getPublicUser functionality):
```
// ...
import { Prisma } from ""@prisma/client"";
import prisma from ""@/lib/prisma"";
// ...

const UserPreview = ({
  user,
}: {
  user?: Awaited<ReturnType<typeof getPublicUser>>;
}) => {
  const { data: session } = useSession();
  // ...
};

export const getPublicUser = async (where: Prisma.userWhereUniqueInput) => {
  const userUnique = prisma.user.findUniqueOrThrow({
    where,
    include: {
      entries: {
        take: -1,
        where: {
          OR: [{ needsVerification: false }, { approvedAt: { not: null } }],
        },
        // ...
  });
  
  // ...
  
  const [userPromise, workCountPromise, userRatingPromise] =
    await Promise.allSettled([
      userUnique,
      prisma.works.count({ where: { userId: where.id, viewInBase: true } }),
      userRating,
    ]);
    
  let user = null as unknown as Record<
    keyof Exclude<Awaited<typeof userUnique>, null>,
    any
  > & { rating?: BaseUserRating<number>; workCount: number };
  // * Sanitize non-serializable data, we could be using https://www.npmjs.com/package/superjson but for now vanilla is fine, no extra bundle size
  if (userPromise.status === ""fulfilled"") {
    user = userPromise.value as typeof user;
    user.createdAt = user.createdAt!.toISOString();
    // ...
    
  return user as
    | (Omit<
        NonNullable<Awaited<typeof userUnique>>,
        ""id"" | ""isActive"" | ""isAdmin"" | ""isBanned"" | ""isStaff""
      > & {
        workCount?: number | null;
        rating?: (typeof user)[""rating""];
      })
    | null;
};

export default UserPreview;
```

The weird thing for me, is that **I also have a page that's using the same functionality** `(http://localhost:3000/works/1t-Rust_Senior_Developer),` **but without being split into two files** (I need to do that for [slug]/user because there's also a profile page), and that **instead of being `pages/users/[slug].tsx` is `pages/works/[slug]/index.tsx`**, the works one **it's working just fine with or without Accelerate**

`pages/works/[slug]/index.tsx`
```
// ...
import prisma from ""@/lib/prisma"";
import { Prisma } from ""@prisma/client"";
// ...

const index = ({ work }: InferGetStaticPropsType<typeof getStaticProps>) => {
  // ...
};

export async function getStaticProps({ params }: { params: { slug: string } }) {
  const id = parseInt(params.slug.split(""-"")[0], 36);

  if (Number.isNaN(id) || !id.isUnsignedInt())
    return {
      props: {
        work: null,
      },
    };

  const workUnique = prisma.works.findUniqueOrThrow({
    where: { id, viewInBase: true },
    include: {
      entries: {
        take: -1,
        select: {
          // ...
        },
        where: {
          OR: [{ needsVerification: false }, { approvedAt: { not: null } }],
        },
      },
      // ...
      
    // ...
    const [workPromise, userRatingPromise, userFeedbackPromise] =
    await Promise.allSettled([workUnique, userRating, userFeedback]);
    
    if (workPromise.status === ""fulfilled"") {
    work = workPromise.value as typeof work;
    // * Sanitize non-serializable data, we could be using https://www.npmjs.com/package/superjson but for now vanilla is fine, no extra bundle size
    (work as any).createdAt = work.createdAt!.toISOString();
    // ...
    
  return {
    // * Revalidate OnDemand
    props: {
      work,
    },
  };
}

export async function getStaticPaths() {
  const works = await prisma.works.findMany({
    where: { viewInBase: true },
    select: { id: true },
  });

  // Get the paths we want to pre-render based on posts
  const paths = works.map(({ id }) => ({
    params: { slug: `${id.toString(36)}` },
  }));

  // We'll pre-render only these paths at build time.
  // { fallback: 'blocking' } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: ""blocking"" };
}

export default index;
```

**Dependencies**:
- ""next"": ""13.4.17"",
- ""@prisma/client"": ""5.15.0"",
- ""@prisma/extension-accelerate"": ""1.1.0"",

### How to reproduce

1. Create a Next.js project **with pages router**
2. Copy the implementation of PrismaClient **without Accelerate** 
3. Run `prisma generate`
4. Test a page with the same implementation as `/users/22` (pages/users/[slug].tsx)
5. Expect no issues
6. Replace the PrismaClient implementation **with Accelerate**
7. Run `prisma generate`
8. Test the same `/users/22` (pages/users/[slug].tsx) page
9. Expect to see the `PrismaClient is unable to run in this browser environment, or has been bundled for the browser` modal

### Expected behavior

Should work properly just as `/works/1t-Rust_Senior_Developer` (pages/works/[slug]/index.tsx)

### Prisma information

`schema.prisma`
```
datasource db {
  provider  = ""mysql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""tracing""]
}

generator photos {
  provider = ""prisma-pothos-types""
}
```

### Environment & setup

- OS: macOS (But also happening on Ubuntu)
- Database: MySQL
- Node.js version: >= 21


### Prisma Version

```
prisma                  : 5.16.0-dev.16
@prisma/client          : 5.15.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.5.0
Query Engine (Node-API) : libquery-engine 9ee8c029573a3ce47bd5f103da9feaf8b6f62c53 (at node_modules/.pnpm/@prisma+engines@5.16.0-dev.16/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 9ee8c029573a3ce47bd5f103da9feaf8b6f62c53 (at node_modules/.pnpm/@prisma+engines@5.16.0-dev.16/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.16.0-3.9ee8c029573a3ce47bd5f103da9feaf8b6f62c53
Default Engines Hash    : 9ee8c029573a3ce47bd5f103da9feaf8b6f62c53
Studio                  : 0.501.0
Preview Features        : tracing
```
",,
2340068318,24462,`update`: Compile-time error is missing if suppliying non-objects to `data` argument,"### Bug description

When user supplies non-object value (for example, `string`) as a `data` argument to update query, we are missing compile-time error. Runtime validation still works as expected.

### How to reproduce

1. Generate a client from provided schema
2. Copy provided snippet into the typescript project
3. Run `tsc` or open project in the editor
4. Observe lack of error on `data: 'foo'` line. 

### Expected behavior

`data` should only accept object types.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  output          = ""../node_modules/.prisma/client""
  previewFeatures = [""driverAdapters"", ""prismaSchemaFolder""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_POSTGRES_URI"")
}

model ExtractedDocument {
  id BigInt @id(@default(autoincrement())
  document_body Json @db.Json
}
```

```ts

import { PrismaClient } from './node_modules/.prisma/client'

const prisma = new PrismaClient()

async function main() {
  const result = await prisma.extractedDocument.update({
    where: {
      id: 10,
    },
    data: 'foo'
  })

}

void main()

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
5.16.0-dev.14

```
",,
2338298652,24453,Queries are getting executed sequentially even when using Interactive transactions API using Promise.all().,"### Bug description

I want to execute some updateMany/createMany calls in different tables concurrently, basically i want prisma to call them all in 1 go and commit all of them if all succeeds, or else rollback all of them if any one fails.

I thought of using interactive transactions API for executing this, and then call Promise.all() with all those transaction API calls, waiting for their result.

but when i console.log the way prisma is executing these queries, what i see in console is that prisma is executing these queries sequentially only, i see that it prints ->

```
rest-api:dev: Query: UPDATE ""public"".""contacts"" SET ""last_name"" = $1, ""description"" = $2, ""image_source"" = $3, ""starred"" = $4, ""company"" = $5, ""next_reminder_at"" = $6, ""last_seen_at"" = $7, ""job_title"" = $8 WHERE (""public"".""contacts"".""id"" = $9 AND 1=1) RETURNING ""public"".""contacts"".""id"", ""public"".""contacts"".""user_id"", ""public"".""contacts"".""first_name"", ""public"".""contacts"".""last_name"", ""public"".""contacts"".""description"", ""public"".""contacts"".""birthday"", ""public"".""contacts"".""legacy_location"", ""public"".""contacts"".""education"", ""public"".""contacts"".""job_title"", ""public"".""contacts"".""company"", ""public"".""contacts"".""image_source"", ""public"".""contacts"".""image_url"", ""public"".""contacts"".""starred"", ""public"".""contacts"".""last_seen_at"", ""public"".""contacts"".""last_reminder_at"", ""public"".""contacts"".""facebook"", ""public"".""contacts"".""linkedin"", ""public"".""contacts"".""twitter"", ""public"".""contacts"".""instagram"", ""public"".""contacts"".""created_at"", ""public"".""contacts"".""updated_at"", ""public"".""contacts"".""never_keep_in_touch"", ""public"".""contacts"".""telegram"", ""public"".""contacts"".""website"", ""public"".""contacts"".""next_reminder_at"", ""public"".""contacts"".""source"", ""public"".""contacts"".""is_archived"", ""public"".""contacts"".""birthday_year"", ""public"".""contacts"".""linkedin_data"", ""public"".""contacts"".""linkedin_enhance_date"", ""public"".""contacts"".""ignore_merge"", ""public"".""contacts"".""full_name"", ""public"".""contacts"".""business_card_url"", ""public"".""contacts"".""linkedin_companies"", ""public"".""contacts"".""linkedin_education"", ""public"".""contacts"".""linkedin_last_message_at"", ""public"".""contacts"".""linkedin_last_message_snippet"", ""public"".""contacts"".""linkedin_message_link""
rest-api:dev: Params: [""Sun"",""<p>new description</p><p><br></p><p><br></p><p>---</p><p><br></p><p><br></p><p>founder at Dex</p><p><br></p><p><br></p><p>---</p><p><br></p><p><br></p><p>Lebra-, Co-Founder</p>"",null,false,""Dex-Lightning"",null,""2024-06-04 21:06:45.757 UTC"",""Dex-Lightning Founder"",""f48f2d60-df41-4daf-a4bc-4319ee6ba93b""]
rest-api:dev: Duration: 563ms
rest-api:dev: Query: INSERT INTO ""public"".""contact_phone_numbers"" (""user_id"",""created_at"",""contact_id"",""phone_number"",""label"",""ranking"",""updated_at"") VALUES ($1,$2,$3,$4,$5,$6,$7) ON CONFLICT DO NOTHING
rest-api:dev: Params: [""gXkM2Ax2FbdiyR1WVQoe5ZFwouD2"",""2024-06-04 21:09:25.504 UTC"",""f48f2d60-df41-4daf-a4bc-4319ee6ba93b"",""8888888888"",null,-1,""2024-06-04 21:09:25.504 UTC""]
rest-api:dev: Duration: 547ms
rest-api:dev: Query: INSERT INTO ""public"".""contact_emails"" (""label"",""email"",""user_id"",""ranking"",""updated_at"",""created_at"",""contact_id"") VALUES ($1,$2,$3,$4,$5,$6,$7) ON CONFLICT DO NOTHING
rest-api:dev: Params: [null,""dex-lightning@gmail.com"",""gXkM2Ax2FbdiyR1WVQoe5ZFwouD2"",-1,""2024-06-04 21:09:25.504 UTC"",""2024-06-04 21:09:25.504 UTC"",""f48f2d60-df41-4daf-a4bc-4319ee6ba93b""]
rest-api:dev: Duration: 558ms
rest-api:dev: Query: INSERT INTO ""public"".""contacts_custom_fields"" (""contact_id"",""user_id"",""custom_field_id"") VALUES ($1,$2,$3) ON CONFLICT DO NOTHING
rest-api:dev: Params: [""f48f2d60-df41-4daf-a4bc-4319ee6ba93b"",""gXkM2Ax2FbdiyR1WVQoe5ZFwouD2"",""8a5ff124-a8dc-446f-bf39-ec9848b1983e""]
rest-api:dev: Duration: 543ms
rest-api:dev: Query: INSERT INTO ""public"".""groups_contacts"" (""contact_id"",""group_id"",""user_id"") VALUES ($1,$2,$3) ON CONFLICT DO NOTHING
rest-api:dev: Params: [""f48f2d60-df41-4daf-a4bc-4319ee6ba93b"",""11c7b912-1316-409d-9309-0f3e47948ff2"",""gXkM2Ax2FbdiyR1WVQoe5ZFwouD2""]
rest-api:dev: Duration: 553ms
```

which clearly indicates that it is getting executed sequentially 1 after the other and in total the API returns the reponse in around ~5 seconds whereas it should have returned it in ~1 second if it'd have executed them in parallel.

any guide/help here would be really useful.


### How to reproduce

use `prisma.$transaction()` interactive transaction API with Promise.all() inside it.

### Expected behavior

_No response_

### Prisma information

```
await prisma.$transaction(
      async (tx: Prisma.TransactionClient) => {
        ...
          await performUpdates(tx, targetId, userId, coalesceUpdates, missingEmails, missingPhoneNumbers, missingLegacyContactAddresses, missingCustomFields, missingGroupsContacts, uniqueRelations, mergeIds);
          },
          { timeout: 30000, maxWait: 60000 }
        );

          async function performUpdates(
              tx: Prisma.TransactionClient,
              targetId: string,
              userId: string,
              coalesceUpdates: Prisma.contactsUncheckedUpdateInput,
              missingEmails: ContactEmail[],
              missingPhoneNumbers: ContactPhoneNumber[],
              missingLegacyContactAddresses: LegacyContactAddress[],
              missingCustomFields: ContactsCustomField[],
              missingGroupsContacts: GroupsContact[],
              uniqueRelations: ContactRelation[],
              mergeIds: string[]
            ) {
              await Promise.all([
                tx.contacts.update({ where: { id: targetId }, data: coalesceUpdates }),
                missingPhoneNumbers.length ? tx.contact_phone_numbers.createMany({ data: missingPhoneNumbers.map((l) => ({ user_id: userId, contact_id: targetId, phone_number: l.phone_number, label: l.label })), skipDuplicates: true }) : Promise.resolve([]),
                missingEmails.length ? tx.contact_emails.createMany({ data: missingEmails.map((e) => ({ user_id: userId, contact_id: targetId, email: e.email.trim().substring(0, 319), label: e.label })), skipDuplicates: true }) : Promise.resolve([]),
                missingLegacyContactAddresses.length ? tx.legacy_contact_addresses.createMany({ data: missingLegacyContactAddresses.map((address) => ({ user_id: userId, contact_id: targetId, formatted: address.formatted, street: address.street, city: address.city, region: address.region, country: address.country, postal_code: address.postal_code, address_type: address.address_type })), skipDuplicates: true }) : Promise.resolve([]),
                missingCustomFields.length ? tx.contacts_custom_fields.createMany({ data: missingCustomFields.map((customField) => ({ user_id: userId, contact_id: targetId, custom_field_id: customField.custom_field_id })), skipDuplicates: true }) : Promise.resolve([]),
                missingGroupsContacts.length ? tx.groups_contacts.createMany({ data: missingGroupsContacts.map((group) => ({ user_id: userId, contact_id: targetId, group_id: group.group_id })), skipDuplicates: true }) : Promise.resolve([]),
                tx.timeline_items_contacts.updateMany({ where: { contact_id: { in: mergeIds }, user_id: userId }, data: { contact_id: targetId } }),
                tx.reminders_contacts.updateMany({ where: { contact_id: { in: mergeIds }, user_id: userId }, data: { contact_id: targetId } }),
                tx.contact_relations.createMany({
                  data: uniqueRelations,
                  skipDuplicates: true
                })
            ]);
}
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 19.1.0

### Prisma Version

```

```
",,
2337992048,24447,"Accelerate: ""Invalid client engine type, please use `library` or `binary`"" on Edge","### Bug description

   https://www.prisma.io/docs/accelerate/local-development
I tried to develop locally using this solution, but encountered errors.
    

### How to reproduce

```typescript
import { PrismaClient } from ""@prisma/client/edge"";
import { withAccelerate } from '@prisma/extension-accelerate';

const prismaClientSingleton = () => {
  return new PrismaClient({
    log: [""query"", ""info"", ""warn"", ""error""],
  }).$extends(withAccelerate())
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

const globalForPrisma = globalThis as unknown as {
  edge_prisma: PrismaClientSingleton | undefined;
};

const prisma = globalForPrisma.edge_prisma ?? prismaClientSingleton();

export const EdgePrisma = prisma;

if (process.env.NODE_ENV !== ""production"") globalForPrisma.edge_prisma = prisma;




```

> `middleware.ts`

```typescript
import { PrismaAdapter } from ""@auth/prisma-adapter"";
import NextAuth from ""next-auth"";
import { AuthConfig } from ""./auth.config"";
import { EdgePrisma } from ""./lib/prisma/edge"";



const {auth} = NextAuth({
    ...AuthConfig,
    adapter:PrismaAdapter(EdgePrisma)
}) 
export const middleware = auth

export const config = {
    matcher: [
        /*
         * Match all request paths except for the ones starting with:
         * - api (API routes)
         * - _next/static (static files)
         * - _next/image (image optimization files)
         * - favicon.ico (favicon file)
         */
        '/((?!sql|_next/static|_next/image|favicon.ico).*)',
      ],
  }
```


### Expected behavior

how to ressolve?

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v19.0.0
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\.pnpm\@prisma+engines@5.15.0\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules\.pnpm\@prisma+engines@5.15.0\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
```
",,
2336257709,24435,"Introspecting error with ""Microsoft SQL Server 2019"" database","### Bug description

When run `npx prisma db pull` against a SQL Server 2019 database, following error standing out ...

Oops, an unexpected error occurred!
Error in Schema engine.
Reason: [libs\user-facing-errors\src\quaint.rs:136:18] internal error: entered unreachable code



### How to reproduce

<!--
1. Go to the prisma example case 'https://github.com/prisma/prisma-examples/tree/latest/typescript/graphql-sdl-first'
2. Change the 'datasource' of the 'schema.prisma' against a 'Microsoft SQL Server 2019' database
3. Run `npx prisma db pull`
4. See error standing out as:

Oops, an unexpected error occurred!
Error in Schema engine.
Reason: [libs\user-facing-errors\src\quaint.rs:136:18] internal error: entered unreachable code

-->


### Expected behavior

The schema declaration of the 'schema.prisma' should be populated matching the tables defined in the database.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = env(""MSSQL_URL"")
}

```

```ts
(have not involved the prismaClient yet)
```


### Environment & setup

- OS: <!-- Windows -->
- Database: <!-- SQL Server -->
- Node.js version: <!-- v20.13.1-->


### Prisma Version

```
5.14.0
```
",,
2334411465,24419,Performance problems with batched `findUnique()`,"Extracted issue from https://github.com/prisma/prisma/issues/22902:

> I have run into performance issues with this due to our extension that adds soft delete support. Here's what our extension looks like:
> 
> ```
> const prisma = basePrisma.$extends({
>   name: ""Soft Delete"",
>   query: {
>     $allModels: {
>       findUnique: ({ args, query, model }) => {
>         return query({ ...args, where: { deletedAt: null, ...args.where } });
>       },
>       findUniqueOrThrow: ({ args, query, model }) => {
>         return query({ ...args, where: { deletedAt: null, ...args.where } });
>       },
>     },
>   },
> });
> ```
> 
> Concurrent queries that look like this are handled two different ways depending on whether the extension is enabled:
> ```
> prisma.myTable.findUniqueOrThrow({ where: { id: ""a"" } });
> prisma.myTable.findUniqueOrThrow({ where: { id: ""b"" } });
> prisma.myTable.findUniqueOrThrow({ where: { id: ""c"" } });
> prisma.myTable.findUniqueOrThrow({ where: { id: ""d"" } });
> ```
> 
> Without the extension, it becomes:
> ```
> select * from ""myTable"" where id in (""a"", ""b"", ""c"", ""d"");
> ```
> 
> With the extension, it becomes:
> ```
> select * from ""myTable"" where (id = ""a"" and ""isDeleted"" is null) or (id = ""b"" and ""isDeleted"" is null) or (id = ""c"" and ""isDeleted"" is null) or (id = ""d"" and ""isDeleted"" is null)
> ```
> 
> _Ideally_, it would be batched as:
> ```
> select * from ""myTable"" where id in (""a"", ""b"", ""c"", ""d"") and isDeleted is null;
> ```
> 
> Sometimes upwards of 2-3k of these queries are batched at once, and where the original or ideal query work just fine, the query where every id/isDeleted combination is specified explicitly causes our database to hang.

_Originally posted by @dickfickling in https://github.com/prisma/prisma/issues/22902#issuecomment-2038195911_

> Do you know why this is causing a performance problem? Generally the database _should_ be smart enough to use the same indexes in a query where `""isDeleted"" is null` is repeated multiple times. And just the additional characters in the query string also should not have any significant impact.
> 
> If you have an explicit reproduction, that would be amazing. Thanks!
> 
> ---
> 
> Aside from that, better and more readable queries are of course desirable, which this improvement would lead to.

_Originally posted by @janpio in https://github.com/prisma/prisma/issues/22902#issuecomment-2142224659_

> I haven't dug into the issue much, but here's a repo that displays the error on my machine: https://github.com/dickfickling/prisma_perf. To reproduce: `yarn infra`, `yarn push`, and `yarn go`
> 
> With this specific setup the error (`yarn go` just hangs forever) seems to crop up with queries for 5000-7000 records. We've reproduced it in our prod env with as few as 2000 records.

_Originally posted by @dickfickling in https://github.com/prisma/prisma/issues/22902#issuecomment-2145278597_

> Hm, that works fine for me:
> 
> ```
> yarn run v1.22.22
> $ dotenv -e .env.dev -- node --loader ts-node/esm src/index.ts
> prisma:query SELECT ""public"".""User"".""id"", ""public"".""User"".""firstName"", ""public"".""User"".""lastName"", ""public"".""User"".""email"", ""public"".""User"".""createdAt"", ""public"".""User"".""updatedAt"", ""public"".""User"".""deletedAt"" FROM ""public"".""User"" WHERE ((""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $1) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $2) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $3) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $4) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $5) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $6) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $7) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $8) OR (""public"".""User"".""deletedAt"" IS NUL [...] $9940) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9941) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9942) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9943) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9944) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9945) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9946) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9947) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9948) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9949) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9950) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9951) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9952) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9953) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9954) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9955) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9956) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9957) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9958) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9959) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9960) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9961) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9962) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9963) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9964) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9965) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9966) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9967) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9968) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9969) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9970) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9971) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9972) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9973) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9974) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9975) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9976) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9977) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9978) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9979) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9980) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9981) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9982) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9983) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9984) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9985) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9986) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9987) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9988) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9989) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9990) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9991) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9992) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9993) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9994) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9995) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9996) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9997) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9998) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $9999) OR (""public"".""User"".""deletedAt"" IS NULL AND ""public"".""User"".""id"" = $10000)) OFFSET $10001
> [
>   null,
>   {
>     id: 1,
>     firstName: '0',
>     lastName: '0',
>     email: '0@0.co',
>     createdAt: 2024-06-03T14:57:47.460Z,
>     updatedAt: 2024-06-03T14:57:47.460Z,
>     deletedAt: null
>   },
>   {
>     id: 2,
>     firstName: '1',
>     lastName: '1',
>     email: '1@1.co',
>     createdAt: 2024-06-03T14:57:47.460Z,
>     updatedAt: 2024-06-03T14:57:47.460Z,
>     deletedAt: null
>   },
>   [...]
>   {
>     id: 98,
>     firstName: '97',
>     lastName: '97',
>     email: '97@97.co',
>     createdAt: 2024-06-03T14:57:47.460Z,
>     updatedAt: 2024-06-03T14:57:47.460Z,
>     deletedAt: null
>   },
>   {
>     id: 99,
>     firstName: '98',
>     lastName: '98',
>     email: '98@98.co',
>     createdAt: 2024-06-03T14:57:47.460Z,
>     updatedAt: 2024-06-03T14:57:47.460Z,
>     deletedAt: null
>   },
>   ... 9900 more items
> ]
> Done in 12.50s.
> ```
> 
> Should this fail every time, or just sometimes?

_Originally posted by @janpio in https://github.com/prisma/prisma/issues/22902#issuecomment-2145426266_

> if you increase from 10k is there a number where the extended prisma with middleware stops working but the base prisma still works?
> 
> i think it's something to do with memory or CPU limits in parsing the query. for context i'm running postgres with 2gb of memory and 4vcpus
> 
> edit: at 10k it fails every time for me

_Originally posted by @dickfickling in https://github.com/prisma/prisma/issues/22902#issuecomment-2147361892_
            ",,
2333832912,24415,`wasm-edge-light-loader.js` importing `node:crypto` instead of using `globalThis.crypto`,"### Bug description

### Problem
When using Prisma in conjunction with NextAuth on the Next.js middleware, you'll see an error from the `wasm-edge-light-loader.js` as it attempts to import `node:crypto`.

This requires users currently to split up the NextAuth configuration file to exclude prisma from the configuration that's exported from the next.js middleware file:
```ts
// middleware.ts

/**
 * 1️⃣ NextAuth config split 
 * this splits the nextauth config so that we avoid prisma here (works ✅)
 * 
 * Uncomment this block & comment out line xx to see the error go away
 * 
 * */ 
import NextAuth from ""next-auth""
import { authConfig as authEdgeConfig } from ""./auth/config.edge"";
export const { auth: middleware } = NextAuth(authEdgeConfig)
```

![image](https://github.com/prisma/prisma/assets/18185649/99cbb212-9982-43bb-a403-71192f59e48b)
![image](https://github.com/prisma/prisma/assets/18185649/5f14c55b-5750-4855-801b-2985955202e5)

### How to reproduce

1. `gh repo clone p6l-richard/prisma-repro`
2. `cd prisma-repro`
3. `pnpm i`
4. `pnpm run turso` (to set up env vars)
5. `pnpm dev`
6. `Check the console`


### Expected behavior

Be able to define Prisma in NextAuth single configuration so that we can import it in the nextjs middleware:
```
// middleware.ts

/**
 * 2️⃣ Bundled NextAuth config
 * 
 * This includes the prisma adapter in the NextAuth config, which works but throws an error with the wasm-edge-light-loader.js
 */
export {auth as middleware} from ""./auth/config"";
```

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
    provider        = ""prisma-client-js""
    // This enables turso usage
    previewFeatures = [""driverAdapters""]
}

datasource db {
    provider = ""sqlite""
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = ""file:./dev.db""
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
```

```ts
import { createClient } from ""@libsql/client"";
import { PrismaLibSQL } from ""@prisma/adapter-libsql"";
import { PrismaClient } from ""@prisma/client"";

if (!process.env.TURSO_DATABASE_URL && !process.env.TURSO_AUTH_TOKEN) {
  throw new Error(""TURSO_DATABASE_URL and TURSO_AUTH_TOKEN must be set in the environment. You can run `pnpm turso` to the this up for you."");
}

const libsql = createClient({
  url: `${process.env.TURSO_DATABASE_URL}`,
  authToken: `${process.env.TURSO_AUTH_TOKEN}`,
});

const adapter = new PrismaLibSQL(libsql);

const createPrismaClient = () =>
  new PrismaClient({
    adapter,
    log: process.env.NODE_ENV === ""development"" ? [""query"", ""error"", ""warn""] : [""error""],
  });

const globalForPrisma = globalThis as unknown as {
  prisma: ReturnType<typeof createPrismaClient> | undefined;
};

export const db = globalForPrisma.prisma ?? createPrismaClient();

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = db;
```


### Environment & setup

- OS: macOS
- Database: Turso
- Node.js version: v20.14.0


### Prisma Version

```

```
",,
2333707371,24414,Creating and including a related object returns trimmed numbers with `relationJoins`,"### Bug description

With `relationJoins` enabled, if you crate an object with another related object and include their values, the floats of the related object will be truncated:

```
    const created = await prisma.main.create({
        data: {
            other: {
                create: {
                    num: 1.23456789101112131415161718192, 
                },
            },
        },
        include: {
            other: true,
        },
    });
```
And this has nothing to do with the accuracy, since fetching the object directly doesn't cause this issue:

```

    const other = created.other[0];

    const otherDB = await prisma.other.findUniqueOrThrow({
        where: {
            id: other.id,
        },
    });
    expect(other.num).toEqual(otherDB.num); // <-- doesn't work

``` 

### How to reproduce

Explained in https://github.com/TheMC47/prisma-bug-report:

1. Create an object and a related object in the same query, returning them both
2. Fetch the created object
3. Compare the floats

For the test case included in the repo:

```
 FAIL  ./test.spec.ts
  ✕ Test (49 ms)

  ● Test

    expect(received).toEqual(expected) // deep equality

    Expected: 1.234568
    Received: 1.2345679

      26 |         },
      27 |     });
    > 28 |     expect(other.num).toEqual(otherDB.num);
         |                       ^
      29 | });
      30 |

      at test.spec.ts:28:23
      at fulfilled (test.spec.ts:5:58)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        0.335 s, estimated 1 s
Ran all test suites.
```

### Expected behavior

They're the same

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model main {
  id    Int     @id @default(autoincrement())
  other other[]
}

model other {
  id      Int   @id @default(autoincrement())
  main_id Int?
  num     Float @db.Real
  main    main? @relation(fields: [main_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

test(""Test"", async () => {
    const prisma = new PrismaClient({
        log: [""error"", ""info"", ""query"", ""warn""],
    });

    const created = await prisma.main.create({
        data: {
            other: {
                create: {
                    num: 1.23456789101112131415161718192,
                },
            },
        },
        include: {
            other: true,
        },
    });

    const other = created.other[0];

    const otherDB = await prisma.other.findUniqueOrThrow({
        where: {
            id: other.id,
        },
    });
    expect(other.num).toEqual(otherDB.num);
});
```


### Environment & setup

- OS: Manjaro Linux
- Database: PostgreSQL 13
- Node.js version: 18.19.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.15.0
@prisma/client          : 5.15.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.19.1
Query Engine (Node-API) : libquery-engine 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-29.12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Default Engines Hash    : 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
Studio                  : 0.501.0
Preview Features        : relationJoins
```
",,
2330132783,24390,Why can't I access password in user? (ORM) (Postgres-Supabase),"### Bug description

Using the following query:
```
    const user = await prisma.user.findFirst({ where: { email: email } });

    console.log(""user:"", user);
```
Produces the following in the terminal:
```
user: { id: 5, email: 'user@nextmail.com', name: 'asdfvc', example: 'asdf' }
```
Even though my users table contains a password field and an entered password in my supabase and it is in sync with my schema. 

Interestingly enough, when I drop the example column and then push, and then run this:

```
    const user = await prisma.user.findFirst({
      where: { email: email },
      select: {
        id: true,
        email: true,
        password: true,
      },
    });
```

I get the following:

```
Failed to fetch user: PrismaClientValidationError: 
Invalid `prisma.user.findFirst()` invocation:

{
  where: {
    email: ""user@nextmail.com""
  },
  select: {
    id: true,
    email: true,
    password: true,
    ~~~~~~~~
?   name?: true,
?   example?: true
  }
}
```
Which means it's still expecting the example field. Why could that be?

Any thoughts on why the prisma query won't select password?

### How to reproduce

<!--
1. Create a database with the below schema
2. Query the password field from user and print
3. 4. See error
-->


### Expected behavior

The query should return a user with the password field

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model Service {
  id               Int      @id @default(autoincrement())
  html             String
  editor_state     String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  name             String
  slug             String
  card_title       String
  card_description String
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password String @default(""$2a$10$cQEFiUaWpFvVVO5AcV3QN.7ohJXxxOPouTxORiZP.mUhupwEpDnUy"")
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  name String
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: MacOS 14.4.1
- Database: PostgresSQL
- Node.js version: 20.12.2
- prisma/client:  ^5.14.0


### Prisma Version

```
5.14.0
```
",,
2329652304,24387,[Internal] Function tests: Enable query logging via CLI parameter,"It would be super convenient if one could easily enable query logging when running functional tests via a CLI flag, e.g. `--log-queries`, instead of having to modify the actual test file following this pattern:

https://github.com/prisma/prisma/blob/9a6634701af5fe99edfc6aacf870ba686d0e3522/packages/client/tests/functional/0-legacy-ports/optional-relation-filters/tests.ts#L3-L18",,
2329611298,24386, The edge runtime does not support Node.js 'crypto' module. - when trying to use `@prisma/adapter-pg` in Next.js middleware,"### Bug description

Why does a qualified error occur again in `nextjs`'s `middleware`?

### How to reproduce

```

generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]

} 
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
} 
```

### Expected behavior

Why did it go wrong when I wrote it completely according to the demo code?

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
 
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]

} 
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
} 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

```ts
import { PrismaPg } from '@prisma/adapter-pg';
import { PrismaClient } from ""@prisma/client"";
import { Pool } from 'pg';

const connectionString = `${process.env.DATABASE_URL}`

const prismaClientSingleton = () => {
    const pool = new Pool({ connectionString })
    const adapter = new PrismaPg(pool)
    return new PrismaClient({ adapter })
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClientSingleton | undefined;
};

const prisma = globalForPrisma.prisma ?? prismaClientSingleton();

export default prisma;

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;

```


### Environment & setup

- OS:  windows
- Database:  PostgreSQL
- Node.js version: v19.0.0


### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v19.0.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules\.pnpm\@prisma+engines@5.14.0\node_modules\@prisma\engines\query_engine-windows.dll.node)       
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules\.pnpm\@prisma+engines@5.14.0\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
Preview Features        : driverAdapters
```
",,
2328849028,24385,Prisma weird return type,"### Bug description

I've done a simple findFirstOrThrow query, and am getting this weird GetResult<...> type;

Am using zod-prisma;

![image](https://github.com/prisma/prisma/assets/153773731/ae08aa5b-5ede-4625-8246-ac3615184dcc)

### How to reproduce

After copying my schema.

Copy the query im making.

Expect error.


### Expected behavior

_No response_

### Prisma information

```prisma
datasource db {
    provider = ""mysql""
    url      = env(""DATABASE_URL"")
}

generator client {
    provider = ""prisma-client-js""
}

generator zod {
    provider  = ""zod-prisma""
    output    = ""../node_modules/@prisma/client/schemas""
    modelCase = ""camelCase""
    modelSuffix = ""Schema""
}

model Licence {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    alert       Int
    expiresAt   DateTime @map(""expires_at"")

    conditions Condition[]

    @@index([id, name])
    @@map(""licence"")
}

model Condition {
    id        Int      @id @default(autoincrement())
    name      String
    alert     Int
    expiresAt DateTime @map(""expires_at"")
    licenceId Int      @map(""licence_id"")
    order     Int

    licence Licence @relation(fields: [licenceId], references: [id], onDelete: Cascade)

    followUps         FollowUp[]
    internalDeadlines InternalDeadline[]

    @@index([id, name, licenceId])
    @@map(""condition"")
}

model InternalDeadline {
    id          Int      @id @default(autoincrement())
    expiresAt   DateTime @map(""expires_at"")
    conditionId Int      @map(""condition_id"")

    condition Condition @relation(fields: [conditionId], references: [id], onDelete: Cascade)

    @@index([id, conditionId])
    @@map(""internal_deadline"")
}

model FollowUp {
    id            Int      @id @default(autoincrement())
    expiresAt     DateTime @map(""expires_at"")
    conditionId   Int      @map(""condition_id"")
    estimatedCost String
    estimatedTime String   @map(""estimated_time"")
    realCost      String?
    realTime      String?  @map(""real_time"")
    order         Int

    checklists Checklist[]
    condition  Condition   @relation(fields: [conditionId], references: [id], onDelete: Cascade)

    @@index([id, conditionId])
    @@map(""follow_up"")
}

model Checklist {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    order       Int

    checklistItems ChecklistItem[]
    followUp       FollowUp[]

    @@index([id, name])
    @@map(""checklist"")
}

model ChecklistItem {
    id          Int    @id @default(autoincrement())
    name        String
    order       Int
    checklistId Int    @map(""checklist_id"")

    checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

    @@index([id, name, checklistId])
    @@map(""checklist_item"")
}
```

```ts
const licence = await db.licence.findFirstOrThrow({
  where: {
    id: parsedLicenceId,
  },
  include: {
    conditions: {
      orderBy: { order: ""asc"" },
      include: {
        followUps: {
          orderBy: { order: ""asc"" },
          include: {
            checklists: {
              orderBy: { order: ""asc"" },
              include: {
                checklistItems: {
                  orderBy: { order: ""asc"" },
                },
              },
            },
          },
        },
        internalDeadlines: true,
      },
    },
  },
});
```


### Environment & setup

- OS: Linux
- Database: Mysql 5.7
- Node.js version: v20.14.0


### Prisma Version

```
prisma: 5.13.0
@prisma/client: 4.16.2
```
",,
2328073845,24371,Foreign key constraint error message is unclear - without source model information,"### Bug description

[Case]
User: ""one"" side table.
Post: ""many"" side table.

When I tried to delete the user record which is referenced by the post table, the ambiguous error message is produced.

![image](https://github.com/prisma/prisma/assets/43071880/a596e961-b542-4ef4-b3cc-536fd154d76b)

### How to reproduce

Follow the quickstart guide and then try to delete the user record with an existing foreign key referenced by the post table.

### Expected behavior

**[Found Message]**
Foreign key constraint failed on the field: `authorId`   (It's hard to track the source model when you're working with 100+ models)
**[Expected Message]**
Foreign key constraint failed on the field: `authorId` **of `Post` model** (Now, you will be able to know the source model that cause the problem instantly).

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  // provider = ""postgresql""
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

```

```ts
// Add your code using Prisma Client
async function main() {
    try {
        await deleteUser();
    } catch (e) {
        console.error(e)
    } finally {
        await prisma.$disconnect()
    }
}

async function deleteUser() {
        const userDeletionResult = await prisma.user.deleteMany({
            where: { id: 2 }
        });
        console.log(""userDeletionResult: "", userDeletionResult);
}
```


### Environment & setup

- OS: Windows 11 Home
- Database: MySQL
- Node.js version: v21.5.0


### Prisma Version

```
5.14.0
```
",,
2328045437,24369,"Vercel Deployment to Edge functions fail with ""Error: The Edge Function ""index"" is referencing unsupported modules: 	- .prisma: .""","### Bug description

Starting with prisma version 5.11.0, deployment to Vercel fails when

1. Functions use `export const config = { runtime: 'edge' };` and
2. Enums are imported and used in that function, e.g. `import { UserStatus } from ""@prisma/client"";`  where `UserStatus` is a Prisma enum. probably the issue is not confined to enums, it will happen whenever imports form prisma/client are performed that are more than just pure types.

The error when deploying to vercel is:
```
build/server/edge-eyJydW50aW1lIjoiZWRnZSJ9/.vite/manifest.json  0.15 kB
16:43:47.009 | build/server/edge-eyJydW50aW1lIjoiZWRnZSJ9/index.js             3.57 kB
16:43:47.011 | ✓ built in 33ms
16:43:49.102 | Build Completed in /vercel/output [32s]
16:43:49.210 | Deploying outputs...
16:43:49.952 | Injected preview comments middleware, you can disable this in your project settings.

16:43:50.545 | Error: The Edge Function ""index"" is referencing unsupported modules:
16:43:50.545 | - .prisma: .

16:43:52.726
```

I think this error happens because  ""prisma"" ends up in the client bundle whereas it should stay in the server bundle. The same example is working fine in Prisma `5.10.2`, so something has changed in `@prisma/client@5.11.0` that's causing this trouble. I also tested with the latest Prisma `5.14.0` and the issue remains.

### How to reproduce

I setup 2 projects for comparison:

1. https://github.com/styxlab/remix-prisma-vercel-edge-5-10-2 (working)
2. https://github.com/styxlab/remix-prisma-vercel-edge-5-11-0 (failing)

Note that you have to deploy to Vercel in order to see the error (build is working fine on localhost).


### Expected behavior

No error during Vercel deploy.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  status  UserStatus?
}

```

```ts
import { UserStatus } from ""@prisma/client"";

export const config = { runtime: 'edge' };

export default function Index() {
   const status = UserStatus.ACTIVE;
    return (
      <h1>Prisma Test {status}</h1>
    );
  } 
```


### Environment & setup

- OS: Not sure what Vercel is using.
- Database: PostgreSQL,
- Node.js version: v20.10.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
Not relevant as this information is from my local machine.",,
2325867146,24353,Cant create a simple record using prisma and express,"### Bug description

i cant seam to create a simple object. my db connection works but i cant create any al new project object.
```ts
// prismaClient.ts
import { PrismaClient } from '@prisma/client';

console.log(process.env.DATABASE_URL);

const prisma = new PrismaClient();

export default prisma;


//project controller function express

private createProject = async (req: Request, res: Response) => {
        const { name, wbso, companyId } = req.body;
        
        console.log(""body"", req.body);

        const projectres = await prisma.project.create({ data: { name, wbso }  }).then((project) => {
            res.json(project);
        }).catch((error) => {
            console.log(""handler error "", error);
            res.status(500).json({ error: 'Failed to create project' });
        });

    };
```


### How to reproduce
```
/projects POST id:1 {}
body {}
handler error  17 | `;throw new Error(u)}else if(t===""warn""){let u=`Conflict for env var${s.length>1?""s"":""""} ${s.map(c=>H(c)).join("", "")} in ${X(a)} and ${X(l)}
18 | Env vars from ${X(l)} overwrite the ones from ${X(a)}
19 |       `;console.warn(`${fe(""warn(prisma)"")} ${u}`)}}}}function Go(e){if(Qu(e)){ti(`Environment variables loaded from ${e}`);let r=ni.default.config({path:e,debug:process.env.DOTENV_CONFIG_DEBUG?!0:void 0});return{dotenvResult:Qo(r),message:Ie(`Environment variables loaded from ${fr.default.relative(process.cwd(),e)}`),path:e}}else ti(`Environment variables not found at ${e}`);return null}function Jo(e,r){return e&&r&&fr.default.resolve(e)===fr.default.resolve(r)}function Qu(e){return!!(e&&qt.default.existsSync(e))}var Ho=""library"";function Ur(e){let r=Gu();return r||(e?.config.engineType===""library""?""library"":e?.config.engineType===""binary""?""binary"":Ho)}function Gu(){let e=process.env.PRISMA_CLIENT_ENGINE_TYPE;return e===""library""?""library"":e===""binary""?""binary"":void 0}var De;(r=>{let e;(b=>(b.findUnique=""findUnique"",b.findUniqueOrThrow=""findUniqueOrThrow"",b.findFirst=""findFirst"",b.findFirstOrThrow=""findFirstOrThrow"",b.findMany=""findMany"",b.create=""create"",b.createMany=""createMany"",b.createManyAndReturn=""crea | ... truncated 
20 | ${(0,Xo.default)(Wu(n),2)}
21 | }`}};function Hu(e){let r;if(e.length>0){let t=e.find(n=>n.fromEnvVar!==null);t?r=`env(""${t.fromEnvVar}"")`:r=e.map(n=>n.native?""native"":n.value)}else r=void 0;return r}function Wu(e){let r=Object.keys(e).reduce((t,n)=>Math.max(t,n.length),0);return Object.entries(e).map(([t,n])=>`${t.padEnd(r)} = ${Ku(n)}`).join(`
22 | `)}function Ku(e){return JSON.parse(JSON.stringify(e,(r,t)=>Array.isArray(t)?`[${t.map(n=>JSON.stringify(n)).join("", "")}]`:JSON.stringify(t)))}var Jr={};Fr(Jr,{error:()=>Zu,info:()=>zu,log:()=>Yu,query:()=>Xu,should:()=>es,tags:()=>Gr,warn:()=>li});var Gr={error:ue(""prisma:error""),warn:fe(""prisma:warn""),info:_e(""prisma:info""),query:ze(""prisma:query"")},es={warn:()=>!process.env.PRISMA_DISABLE_WARNINGS};function Yu(...e){console.log(...e)}function li(e,...r){es.warn()&&console.warn(`${Gr.warn} ${e}`,...r)}function zu(e,...r){console.info(`${Gr.info} ${e}`,...r)}function Zu(e,...r){console.error(`${Gr.error} ${e}`,...r)}function Xu(e,...r){console.log(`${Gr.query} ${e}`,...r)}function jt(e,r){if(!e)throw new Error(`${r}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`)}function rr(e,r){throw new Error(r)}function ci(e,r){return Object.prototype.hasOwnProperty.call(e,r)}var pi=(e,r)=>e.reduce((t,n)=>(t[r(n)]=n,t),{});function gr(e,r){let t={};for | ... truncated 

PrismaClientValidationError:
Invalid `prisma.project.create()` invocation:

{
  data: {
    wbso: undefined,
+   name: String
  }
}

Argument `name` is missing.
```

![image](https://github.com/prisma/prisma/assets/4798993/92554a03-1943-445e-870f-c4885681985a)


### Expected behavior

it should create a new record

### Prisma information
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//https://prisma-erd.simonknott.de/ for the ERD

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model User {
  id            Int                  @id @default(autoincrement())
  email         String               @unique
  active        Boolean              @default(true)
  firstname     String
  lastname      String
  salt          String?
  password      String?
  role          Role                 @default(USER)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  Timesheets    Timesheet[]
  Projects      Project[]
  Companies     Company[]
  managerId     Int?
  Manager       User?                @relation(""ManagerRelation"", fields: [managerId], references: [id])
  Employees     User[]               @relation(""ManagerRelation"")
  Reimbustments Reimbustment[]
  StandardHours StandardHoursOnUser?
}

model StandardHoursOnUser {
  id           Int      @id @default(autoincrement())
  regularHours Float
  wbsoHours    Float?
  specialHours Float
  sickHours    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       Int      @unique
  User         User     @relation(fields: [userId], references: [id])
}

model Timesheet {
  id          Int                    @id @default(autoincrement())
  date        DateTime
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  startDate   DateTime
  approved    Boolean
  userId      Int
  User        User?                  @relation(fields: [userId], references: [id])
  Workingdays WorkingdaysOnProject[]
}

model WorkingdaysOnProject {
  id           Int       @id @default(autoincrement())
  date         DateTime
  regularHours Float
  wbsoHours    Float?
  specialHours Float
  sickHours    Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  timesheetId  Int
  Timesheet    Timesheet @relation(fields: [timesheetId], references: [id])
  projectId    Int?
  Project      Project?  @relation(fields: [projectId], references: [id])
}

model Project {
  id            Int                    @id @default(autoincrement())
  name          String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  wbso          Boolean
  companyId     Int?
  Company       Company?               @relation(fields: [companyId], references: [id])
  Workingdays   WorkingdaysOnProject[]
  Reimbustments Reimbustment[]
  Users         User[]
}

model Reimbustment {
  id          Int      @id @default(autoincrement())
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      Float
  approved    Boolean
  description String
  receiptURL  String
  projectId   Int?
  Project     Project? @relation(fields: [projectId], references: [id])
  userId      Int
  User        User?    @relation(fields: [userId], references: [id])
}

model Company {
  id         Int       @id @default(autoincrement())
  name       String
  street     String
  postalCode String
  city       String
  country    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[]
  userId     Int?
  Contact    User?     @relation(fields: [userId], references: [id])
}
```

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


DATABASE_URL=""postgresql://stacker:stacker@localhost:5432/StackerAPI?schema=public""

API_SECRET_KEY=""mysecretkey""

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2325591609,24347,Add logical operators to `orderBy`,"## Problem

I would like to be able to sort / ordeBy fields in a different than lexical order.
Especially, I would like to sort enum fields by checking whether they have particular value.

**Use-case**:
Given set of data:
```
            id             |           title           |   status <-- This is an enum type
---------------------------+---------------------------+------------
 clu17el83000008lb2kef74wp | VP of Sales               | ACTIVE
 clwt7ocmo003lj2r5eg6ghmha | Chief Legal Officer       | ACTIVE
 clpiuevjn000008jn6i07d71g | Head of Finance           | ACTIVE
 g3cv38urw9c7dmtlih4j3k6a  | Head of Engineering       | OBSOLETE
 clw9dpg2r000308ml42fo35la | Senior DevOps Engineer    | PROCESSING
 g3cv38urw9c7dmtlih9mwds9  | Head of Legal Department  | OBSOLETE
 clpiuevjn000008jn6i07d72g | Technical Product Manager | LONGLISTED
```

Status column is an enum type.

In PostgreSQL I can do:

```postgresql
SELECT id, title, status FROM job ORDER BY status='OBSOLETE' ASC, created_at DESC;
```

This will order results by the newest (`created_at desc`) while keeping the OBSOLETE ones always at the bottom.

In Prisma, this is not possible without involving `$queryRaw`.

## Suggested solution

```typescript
prisma.job.findMany({
  where: { ... },
  orderBy: [
    {
      status: {
        equals: JobStatus.OBSOLETE,
        sort: 'asc'
      }
    },
    {
      createdAt: 'desc'
    }
  ]
})
```

## Alternatives

1. [$queryRaw](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries) - right now I have to use that feature but I would really appreciate being able to use the full power of Prisma.
2. [_relevance](https://www.prisma.io/docs/orm/prisma-client/queries/filtering-and-sorting#sort-by-relevance-postgresql) - I tried this feature but it only works with string columns and doesn't allow to use more than one word.
",,
2325528034,24346,`next build` shows warning about `@prisma/debug`: `A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.`,"### Bug description

When deploying the following project https://github.com/prisma/ecosystem-tests/tree/dev/driver-adapters-wasm/planetscale-vercel-nextjs-edgemw here is the output from `next build` with 10 warnings about `@prisma/debug`

```
[14:03:38.532] > next build
[14:03:38.532] 
[14:03:39.214]   ▲ Next.js 14.2.3
[14:03:39.215] 
[14:03:39.215]    Linting and checking validity of types ...
[14:03:39.420]    Creating an optimized production build ...
[14:03:46.546]  ⚠ Compiled with warnings
[14:03:46.546] 
[14:03:46.547] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.547] A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.
[14:03:46.547] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.547] 
[14:03:46.547] Import trace for requested module:
[14:03:46.547] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.547] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.547] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.547] 
[14:03:46.547] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.548] A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.
[14:03:46.548] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.548] 
[14:03:46.548] Import trace for requested module:
[14:03:46.548] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.548] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.548] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.548] 
[14:03:46.548] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.549] A Node.js API is used (process.stderr at line: 146) which is not supported in the Edge Runtime.
[14:03:46.549] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.549] 
[14:03:46.549] Import trace for requested module:
[14:03:46.549] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.549] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.549] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.549] 
[14:03:46.549] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.550] A Node.js API is used (process.stderr at line: 146) which is not supported in the Edge Runtime.
[14:03:46.550] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.550] 
[14:03:46.550] Import trace for requested module:
[14:03:46.550] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.550] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.550] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.550] 
[14:03:46.551] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.551] A Node.js API is used (process.stderr at line: 150) which is not supported in the Edge Runtime.
[14:03:46.551] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.551] 
[14:03:46.551] Import trace for requested module:
[14:03:46.551] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.551] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.552] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.552] 
[14:03:50.097]  ✓ Compiled successfully
```

<details>
<summary>Full logs</summary>

```
[14:03:18.885] Running build in Washington, D.C., USA (East) – iad1
[14:03:19.092] Retrieving list of deployment files...
[14:03:20.271] Downloading 13 deployment files...
[14:03:27.162] Restored build cache
[14:03:27.303] Running ""vercel build""
[14:03:28.249] Vercel CLI 34.2.3
[14:03:29.279] Detected `pnpm-lock.yaml` version 6 generated by pnpm 8
[14:03:29.324] Installing dependencies...
[14:03:31.002] Lockfile is up to date, resolution step is skipped
[14:03:31.373] Progress: resolved 1, reused 0, downloaded 0, added 0
[14:03:31.528] Packages: +8 -8
[14:03:31.533] ++++++++--------
[14:03:32.389] Progress: resolved 8, reused 0, downloaded 0, added 0
[14:03:33.110] Progress: resolved 8, reused 0, downloaded 8, added 8, done
[14:03:33.646] .../node_modules/@prisma/engines postinstall$ node scripts/postinstall.js
[14:03:34.710] .../node_modules/@prisma/engines postinstall: Done
[14:03:34.827] .../node_modules/prisma preinstall$ node scripts/preinstall-entry.js
[14:03:34.876] .../node_modules/prisma preinstall: Done
[14:03:34.928] .../node_modules/@prisma/client postinstall$ node scripts/postinstall.js
[14:03:35.549] .../node_modules/@prisma/client postinstall: Prisma schema loaded from prisma/schema.prisma
[14:03:35.900] .../node_modules/@prisma/client postinstall: ✔ Generated Prisma Client (v5.15.0-dev.50) to ./node_modules/.pnpm/@prisma+client@5.15.0-dev.50_prisma@5.15.0-dev.50/node_modules/@prisma/client in 36ms
[14:03:35.900] .../node_modules/@prisma/client postinstall: Start using Prisma Client
[14:03:35.901] .../node_modules/@prisma/client postinstall: ```
[14:03:35.901] .../node_modules/@prisma/client postinstall: import { PrismaClient } from '@prisma/client'
[14:03:35.901] .../node_modules/@prisma/client postinstall: const prisma = new PrismaClient()
[14:03:35.901] .../node_modules/@prisma/client postinstall: ```
[14:03:35.901] .../node_modules/@prisma/client postinstall: More information: https://pris.ly/d/client
[14:03:35.902] .../node_modules/@prisma/client postinstall: ┌─────────────────────────────────────────────────────────────┐
[14:03:35.902] .../node_modules/@prisma/client postinstall: │  Deploying your app to serverless or edge functions?        │
[14:03:35.902] .../node_modules/@prisma/client postinstall: │  Try Prisma Accelerate for connection pooling and caching.  │
[14:03:35.902] .../node_modules/@prisma/client postinstall: │  https://pris.ly/cli/--accelerate                           │
[14:03:35.903] .../node_modules/@prisma/client postinstall: └─────────────────────────────────────────────────────────────┘
[14:03:36.101] .../node_modules/@prisma/client postinstall: Done
[14:03:36.306] 
[14:03:36.306] dependencies:
[14:03:36.310] - @prisma/adapter-planetscale 5.15.0-dev.48
[14:03:36.311] + @prisma/adapter-planetscale 5.15.0-dev.50
[14:03:36.311] - @prisma/client 5.15.0-dev.48
[14:03:36.311] + @prisma/client 5.15.0-dev.50
[14:03:36.311] 
[14:03:36.311] devDependencies:
[14:03:36.311] - prisma 5.15.0-dev.48
[14:03:36.311] + prisma 5.15.0-dev.50
[14:03:36.312] 
[14:03:36.455] 
[14:03:36.456] > planetscale-vercel-nextjs-edgemw@ postinstall /vercel/path0
[14:03:36.456] > prisma generate
[14:03:36.456] 
[14:03:37.433] Prisma schema loaded from prisma/schema.prisma
[14:03:37.811] 
[14:03:37.811] ✔ Generated Prisma Client (v5.15.0-dev.50) to ./node_modules/.pnpm/@prisma+client@5.15.0-dev.50_prisma@5.15.0-dev.50/node_modules/@prisma/client in 36ms
[14:03:37.811] 
[14:03:37.811] Start using Prisma Client
[14:03:37.811] ```
[14:03:37.812] import { PrismaClient } from '@prisma/client'
[14:03:37.812] const prisma = new PrismaClient()
[14:03:37.812] ```
[14:03:37.812] 
[14:03:37.812] More information: https://pris.ly/d/client
[14:03:37.812] 
[14:03:37.812] ┌─────────────────────────────────────────────────────────────┐
[14:03:37.812] │  Deploying your app to serverless or edge functions?        │
[14:03:37.812] │  Try Prisma Accelerate for connection pooling and caching.  │
[14:03:37.812] │  https://pris.ly/cli/--accelerate                           │
[14:03:37.812] └─────────────────────────────────────────────────────────────┘
[14:03:37.812] 
[14:03:38.011] Done in 8.6s
[14:03:38.031] Detected Next.js version: 14.2.3
[14:03:38.040] Running ""pnpm run build""
[14:03:38.531] 
[14:03:38.531] > planetscale-vercel-nextjs-edgemw@ build /vercel/path0
[14:03:38.532] > next build
[14:03:38.532] 
[14:03:39.214]   ▲ Next.js 14.2.3
[14:03:39.215] 
[14:03:39.215]    Linting and checking validity of types ...
[14:03:39.420]    Creating an optimized production build ...
[14:03:46.546]  ⚠ Compiled with warnings
[14:03:46.546] 
[14:03:46.547] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.547] A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.
[14:03:46.547] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.547] 
[14:03:46.547] Import trace for requested module:
[14:03:46.547] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.547] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.547] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.547] 
[14:03:46.547] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.548] A Node.js API is used (process.stdout at line: 68) which is not supported in the Edge Runtime.
[14:03:46.548] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.548] 
[14:03:46.548] Import trace for requested module:
[14:03:46.548] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.548] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.548] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.548] 
[14:03:46.548] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.549] A Node.js API is used (process.stderr at line: 146) which is not supported in the Edge Runtime.
[14:03:46.549] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.549] 
[14:03:46.549] Import trace for requested module:
[14:03:46.549] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.549] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.549] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.549] 
[14:03:46.549] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.550] A Node.js API is used (process.stderr at line: 146) which is not supported in the Edge Runtime.
[14:03:46.550] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.550] 
[14:03:46.550] Import trace for requested module:
[14:03:46.550] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.550] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.550] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.550] 
[14:03:46.551] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.551] A Node.js API is used (process.stderr at line: 150) which is not supported in the Edge Runtime.
[14:03:46.551] Learn more: https://nextjs.org/docs/api-reference/edge-runtime
[14:03:46.551] 
[14:03:46.551] Import trace for requested module:
[14:03:46.551] ./node_modules/.pnpm/@prisma+debug@5.15.0-dev.50/node_modules/@prisma/debug/dist/index.js
[14:03:46.551] ./node_modules/.pnpm/@prisma+driver-adapter-utils@5.15.0-dev.50/node_modules/@prisma/driver-adapter-utils/dist/index.mjs
[14:03:46.552] ./node_modules/.pnpm/@prisma+adapter-planetscale@5.15.0-dev.50_@planetscale+database@1.18.0/node_modules/@prisma/adapter-planetscale/dist/index.mjs
[14:03:46.552] 
[14:03:50.097]  ✓ Compiled successfully
[14:03:50.098]    Collecting page data ...
[14:03:50.517]    Generating static pages (0/2) ...
[14:03:50.927]  ✓ Generating static pages (2/2)
[14:03:51.068]    Finalizing page optimization ...
[14:03:51.068]    Collecting build traces ...
[14:03:57.353] 
[14:03:57.373] Route (pages)                             Size     First Load JS
[14:03:57.374] ┌ ○ /404                                  180 B          78.3 kB
[14:03:57.374] └ ƒ /api                                  0 B            78.1 kB
[14:03:57.374] + First Load JS shared by all             78.1 kB
[14:03:57.374]   ├ chunks/framework-a85322f027b40e20.js  45.2 kB
[14:03:57.374]   ├ chunks/main-d0d7919c01510df0.js       32 kB
[14:03:57.374]   └ other shared chunks (total)           906 B
[14:03:57.375] 
[14:03:57.375] ƒ Middleware                              71.9 kB
[14:03:57.375] 
[14:03:57.375] ○  (Static)   prerendered as static content
[14:03:57.375] ƒ  (Dynamic)  server-rendered on demand
[14:03:57.375] 
[14:03:57.459] Traced Next.js server files in: 36.518ms
[14:03:57.496] Created all serverless functions in: 36.382ms
[14:03:57.708] Collected static files (public/, static/, .next/static): 2.745ms
[14:03:57.732] Build Completed in /vercel/output [29s]
[14:03:57.839] Deploying outputs...
[14:03:57.840] Injected preview comments into the build output, you can disable this in your project settings.
[14:04:06.237] 
[14:04:06.681] Deployment completed
[14:04:13.605] Uploading build cache [131.59 MB]...
[14:04:17.284] Build cache uploaded: 3.679s
```

</details>

### How to reproduce

- Deploy https://github.com/prisma/ecosystem-tests/tree/dev/driver-adapters-wasm/planetscale-vercel-nextjs-edgemw 
- Check the build logs on Vercel


### Expected behavior

No warning, or at least, less warnings.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
prisma                  : 5.15.0-dev.50
@prisma/client          : 5.15.0-dev.50
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.14.0
Query Engine (Node-API) : libquery-engine 64bb6b95cbf89b742d0a4cbcbebffc973942e7ad (at node_modules/.pnpm/@prisma+engines@5.15.0-dev.50/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 64bb6b95cbf89b742d0a4cbcbebffc973942e7ad (at node_modules/.pnpm/@prisma+engines@5.15.0-dev.50/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.15.0-16.64bb6b95cbf89b742d0a4cbcbebffc973942e7ad
Default Engines Hash    : 64bb6b95cbf89b742d0a4cbcbebffc973942e7ad
Studio                  : 0.500.0
Preview Features        : driverAdapters
```
",,
2324330332,24339,Prisma filtering list of relations not working ( logging correct return value inside log on server but appollo explorer & postman getting incorrect values),"### Bug description

I noticed this in my main project so downloaded the prisma example graphql-subscriptions from the github to see if I can reproduce and it appears to be happening their aswell. I'm trying to get the users and include only their posts which have published set to true. I've followed the steps outlined here - https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#filter-a-list-of-relations: https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#filter-a-list-of-relations and setup this query:

 
    t.nonNull.list.nonNull.field('allUsers2', {
      type: 'User',
      resolve: (_parent, _args, context: Context) => {
        return context.prisma.user.findMany({
          include: {
            posts: {
              where: {
                published: true
              }
            }
          }
        });
      },
    });
    
The result through postman and appollo explorer includes the posts with published true but weirdly when I console.log what the value should be inside of my server I get the correct response which has the filtered out published false posts. 

I tried doing it other methods like this:

    t.nonNull.list.nonNull.field('allUsers2', {
      type: 'User',
      resolve: async (_parent, _args, context: Context) => {
        const usersWithPosts = await context.prisma.user.findMany({
          include: {
            posts: true
          }
        });
        usersWithPosts.forEach(user => {
          user.posts = user.posts.filter(post => post.published);
        });
        console.log( usersWithPosts)
        return usersWithPosts;
      },
    });
    
    
    But I'm still running into the same issue

### How to reproduce

1. Download prisma example projects
2. Under typescript examples, open and install graphql-subscriptions example
3. Add additonal query:

.nonNull.list.nonNull.field('allUsers2', {
      type: 'User',
      resolve: (_parent, _args, context: Context) => {
        return context.prisma.user.findMany({
          include: {
            posts: {
              where: {
                published: true
              }
            }
          }
        });
      },
    });
    
    run query through postman or graphql explorer:
    
    query AllUsers2 {
  allUsers2 {
    id
    posts {
      id
      published
    }
    name
  }
}

posts with published true are returned when they shouldn't be. 
Add a console.log for theresults inside the project and notice how the correct values are returned.

### Expected behavior

Should be giving filtered results without posts that are published false

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

generator photon {
  provider = ""prisma-client-js""
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  published Boolean @default(false)
  title     String
  content   String?
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

```

```ts
import {
  makeSchema,
  mutationType,
  nonNull,
  objectType,
  queryType,
  stringArg,
  subscriptionType,
  intArg,
  arg,
  inputObjectType,
} from 'nexus'
import { Context } from './context'

const User = objectType({
  name: 'User',
  definition(t) {
    t.nonNull.int('id')
    t.string('name')
    t.nonNull.string('email')
    t.nonNull.list.nonNull.field('posts', {
      type: 'Post',
      resolve: (parent, _, context: Context) => {
        return context.prisma.user
          .findUnique({
            where: { id: parent.id || undefined },
          })
          .posts()
      },
    })
  },
})

const Post = objectType({
  name: 'Post',
  definition(t) {
    t.nonNull.int('id')
    t.nonNull.string('title')
    t.string('content')
    t.nonNull.boolean('published')
    t.field('author', {
      type: 'User',
      resolve: (parent, _, context: Context) => {
        return context.prisma.post
          .findUnique({
            where: { id: parent.id || undefined },
          })
          .author()
      },
    })
  },
})

export const Query = queryType({
  definition(t) {
    t.nonNull.list.nonNull.field('allUsers', {
      type: 'User',
      resolve: (_parent, _args, context: Context) => {
        return context.prisma.user.findMany()
      },
    })

    t.nonNull.list.nonNull.field('allUsers2', {
      type: 'User',
      resolve: (_parent, _args, context: Context) => {
        return context.prisma.user.findMany({
          include: {
            posts: {
              where: {
                published: true
              }
            }
          }
        });
      },
    });

    t.nonNull.field('allUsers3', {
      type: 'User',
      resolve: (_parent, _args, context: Context) => {
        return context.prisma.user.findFirst({
          include: { posts: {
            where: {
              published: true,
            }
          } },
        })
      },
    })

    t.nonNull.list.nonNull.field('feed', {
      type: 'Post',
      args: {
        searchString: stringArg(),
        skip: intArg(),
        take: intArg(),
      },
      resolve: (_parent, args, context: Context) => {
        const or = args.searchString
          ? {
              OR: [
                { title: { contains: args.searchString } },
                { content: { contains: args.searchString } },
              ],
            }
          : {}

        return context.prisma.post.findMany({
          where: {
            published: true,
            ...or,
          },
          take: args.take || undefined,
          skip: args.skip || undefined,
        })
      },
    })
  },
})

export const Mutation = mutationType({
  definition(t) {
    t.field('createDraft', {
      type: 'Post',
      args: {
        data: nonNull(
          arg({
            type: 'PostCreateInput',
          }),
        ),
        authorEmail: stringArg(),
      },
      resolve: async (_, args, context: Context) => {
        const newPost = await context.prisma.post.create({
          data: {
            title: args.data.title,
            content: args.data.content,
            author: {
              connect: { email: args.authorEmail },
            },
          },
        })

        // publish the subscription here
        context.pubsub.publish('newPost', newPost)
        return newPost
      },
    })

    t.field('togglePublishPost', {
      type: 'Post',
      args: {
        id: nonNull(intArg()),
      },
      resolve: async (_, args, context: Context) => {
        try {
          const post = await context.prisma.post.findUnique({
            where: { id: args.id || undefined },
          })

          if (!post.published) {
            // publish the subscription here
            context.pubsub.publish('postPublished', post)
          }

          return context.prisma.post.update({
            where: { id: args.id || undefined },
            data: { published: !post?.published },
          })
        } catch (e) {
          throw new Error(
            `Post with ID ${args.id} does not exist in the database.`,
          )
        }
      },
    })
  },
})

export const Subscription = subscriptionType({
  definition(t) {
    t.field('newPost', {
      type: 'Post',
      subscribe(_root, _args, ctx) {
        return ctx.pubsub.asyncIterator('newPost')
      },
      //@ts-ignore
      resolve(payload) {
        return payload
      },
    })

    t.field('postPublished', {
      type: 'Post',
      subscribe(_root, _args, ctx) {
        return ctx.pubsub.asyncIterator('postPublished')
      },
      //@ts-ignore
      resolve(payload) {
        return payload
      },
    })
  },
})

const PostCreateInput = inputObjectType({
  name: 'PostCreateInput',
  definition(t) {
    t.nonNull.string('title')
    t.string('content')
  },
})

export const schema = makeSchema({
  types: [User, Post, Query, Mutation, Subscription, PostCreateInput],
  outputs: {
    schema: __dirname + '/../schema.graphql',
    typegen: __dirname + '/generated/nexus.ts',
  },
  contextType: {
    module: require.resolve('./context'),
    export: 'Context',
  },
  sourceTypes: {
    modules: [
      {
        module: '@prisma/client',
        alias: 'prisma',
      },
    ],
  },
})

```


### Environment & setup

- OS: Windows
- Database: sqlite, but also experienced on postgresql
- Node.js version: Node.js v18.18.2


### Prisma Version

```
5.14.0
```
",,
2323721513,24338,$queryRaw + pg/neon driver adapter: Incorrect type inference for prepared statements,"### Bug description

When creating prepared statements on native drivers, we supply the types for placeholders ourself.
However, when using driver adapters we rely on Postgres inferring the types by itself. This works only with the query information and does not take supplied parameter values into account, so it is possible that inferred type won't match what supplied as a JS argument.

### How to reproduce

This code:
```ts
import { PrismaPg } from '@prisma/adapter-pg'
import pg from 'pg'

import { PrismaClient } from './node_modules/.prisma/client'

const pool = new pg.Pool({ connectionString: process.env.TEST_POSTGRES_URI })
const prisma = new PrismaClient({ adapter: new PrismaPg(pool) })

async function main() {
  await prisma.$queryRaw`select * from version() where LENGTH(""version"") > ${1.1}`
}

void main()
```

Fails with an error:

```
Raw query failed. Code: `22P02`. Message: `ERROR: invalid input syntax for integer: ""1.1""`
```

What happens here is: since we are comparing the placeholder value with `LENGTH`, postgres infers it's type to be integer where we actually send over float.

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
  output          = ""../node_modules/.prisma/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_POSTGRES_URI"")
}

model User {
  id String @id
}
```



### Environment & setup

- Database: postgresql + pg adapter


### Prisma Version

```
5.15.0-dev.48
```
",,
2322625261,24328,@default in the schema generate number | null type,"### Bug description

My schema.prisma contains a @default key for one column, but when I get my entity with `findUnique` the returned type is number | null, whereas with the @default decorator the value in the database is always defined

### How to reproduce

1. Use the following CompanySetting schema
2. Run the migrate command
3. Do a query to the model with the `findUnique method`

```
await this.prisma.company.findUnique({
      where: {
        id: id,
      },
      include: {
        companySettings: true,
      },
    });
```

### Expected behavior

_No response_

### Prisma information

```prisma

model Company {
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt @map(""updated_at"")
  id                 String               @id @default(uuid()) @db.Uuid
  companySettingsId  String               @unique @map(""company_settings_id"") @db.Uuid
  companySettings    CompanySettings      @relation(fields: [companySettingsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

}

model CompanySettings {
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt @map(""updated_at"")
  salesMarginRatio                 Float?        @map(""sales_margin_ratio"")
  processMarginRatio               Float?        @default(30) @map(""process_margin_ratio"")
}
```

```ts
prisma migrate dev
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v18.15.0


### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v18.15.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/.pnpm/@prisma+engines@5.14.0/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/.pnpm/@prisma+engines@5.14.0/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2321382764,24314,"Prisma invocation error, issue in findMany/count functions (Prisma, Supabase, NextJS14)","@prisma/client 5.14.0
prisma 5.14.0

```
//First problem

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getPermission, getUser } = getKindeServerSession();

  const [user, requiredPermission] = await Promise.all([
    getUser(),
    getPermission(""admin:perm""),
  ]);

// this is where it says prisma.cart.count is invalid invocation
  let cartCount = -1;
  try {
    cartCount =
      user != null
        ? await prisma.cart.count({ where: { kindeAuth: user?.id } })
        : -1;
  } catch (error) {
    console.error(error);
  }

  return (
    //
}

//Second problem

//during build it says prisma.product.findMany is invalid invocation
export async function generateStaticParams() {
  const data = await prisma.product.findMany();

  if (!data) {
    return [];
  }

  return data.map((product) => ({
    id: product.id,
  }));
}
```

I am very surprised I am getting these issues in Vercel after so long. I have been working on this for a while and never did I face this invocation issue, especially the cart one. I feel very stuck, everything went downhill today suddenly with this prisma errors, application client side exception error, 504 gateway vercel timeout etc

This is the repo I have: https://github.com/sparshak7/commerceStop
If anyone can help, it'd be great.. I am new to this

The schema of cart and product,

```
model Cart {
  id        String   @id
  kindeAuth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [id], references: [id])
  quantity  Int      @default(1)
}

model Product {
  id                     String      @id @default(uuid())
  name                   String
  price                  Int
  description            String
  image                  String?
  isAvailableForPurchase Boolean     @default(true)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  Cart                   Cart[]
  categories             String[]
  Purchased              Purchased[]
}
```

I'll also put the package.json

```
""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""prisma generate && next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint"",
    ""postinstall"": ""prisma generate""
  },
  ""dependencies"": {
    ""@kinde-oss/kinde-auth-nextjs"": ""^2.2.3"",
    ""@prisma/client"": ""^5.14.0"",
    ""@radix-ui/react-accordion"": ""^1.1.2"",
    ""@radix-ui/react-dialog"": ""^1.0.5"",
    ""@radix-ui/react-dropdown-menu"": ""^2.0.6"",
    ""@radix-ui/react-label"": ""^2.0.2"",
    ""@radix-ui/react-popover"": ""^1.0.7"",
    ""@radix-ui/react-slot"": ""^1.0.2"",
    ""@radix-ui/react-toast"": ""^1.1.5"",
    ""@radix-ui/react-tooltip"": ""^1.0.7"",
    ""@stripe/react-stripe-js"": ""^2.7.0"",
    ""@stripe/stripe-js"": ""^3.3.0"",
    ""@supabase/auth-helpers-nextjs"": ""^0.10.0"",
    ""class-variance-authority"": ""^0.7.0"",
    ""clsx"": ""^2.1.0"",
    ""lucide-react"": ""^0.372.0"",
    ""next"": ""14.2.2"",
    ""next-view-transitions"": ""^0.1.1"",
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""react-hot-toast"": ""^2.4.1"",
    ""react-icons"": ""^5.2.1"",
    ""stripe"": ""^15.3.0"",
    ""tailwind-merge"": ""^2.3.0"",
    ""tailwindcss-animate"": ""^1.0.7"",
    ""use-debounce"": ""^10.0.0"",
    ""zod"": ""^3.23.0""
  },
  ""devDependencies"": {
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.2.2"",
    ""postcss"": ""^8"",
    ""prisma"": ""^5.14.0"",
    ""tailwindcss"": ""^3.4.1"",
    ""typescript"": ""^5""
  }
```
",,
2340585816,24467,"Prisma invocation error, issue in findMany/count functions (Prisma, Supabase, NextJS14)","@prisma/client 5.14.0
prisma 5.14.0

```
//First problem

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getPermission, getUser } = getKindeServerSession();

  const [user, requiredPermission] = await Promise.all([
    getUser(),
    getPermission(""admin:perm""),
  ]);

// this is where it says prisma.cart.count is invalid invocation
  let cartCount = -1;
  try {
    cartCount =
      user != null
        ? await prisma.cart.count({ where: { kindeAuth: user?.id } })
        : -1;
  } catch (error) {
    console.error(error);
  }

  return (
    //
}

//Second problem

//during build it says prisma.product.findMany is invalid invocation
export async function generateStaticParams() {
  const data = await prisma.product.findMany();

  if (!data) {
    return [];
  }

  return data.map((product) => ({
    id: product.id,
  }));
}
```

I am very surprised I am getting these issues in Vercel after so long. I have been working on this for a while and never did I face this invocation issue, especially the cart one. I feel very stuck, everything went downhill today suddenly with this prisma errors, application client side exception error, 504 gateway vercel timeout etc

This is the repo I have: https://github.com/sparshak7/commerceStop
If anyone can help, it'd be great.. I am new to this

The schema of cart and product,

```
model Cart {
  id        String   @id
  kindeAuth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [id], references: [id])
  quantity  Int      @default(1)
}

model Product {
  id                     String      @id @default(uuid())
  name                   String
  price                  Int
  description            String
  image                  String?
  isAvailableForPurchase Boolean     @default(true)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  Cart                   Cart[]
  categories             String[]
  Purchased              Purchased[]
}
```

I'll also put the package.json

```
""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""prisma generate && next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint"",
    ""postinstall"": ""prisma generate""
  },
  ""dependencies"": {
    ""@kinde-oss/kinde-auth-nextjs"": ""^2.2.3"",
    ""@prisma/client"": ""^5.14.0"",
    ""@radix-ui/react-accordion"": ""^1.1.2"",
    ""@radix-ui/react-dialog"": ""^1.0.5"",
    ""@radix-ui/react-dropdown-menu"": ""^2.0.6"",
    ""@radix-ui/react-label"": ""^2.0.2"",
    ""@radix-ui/react-popover"": ""^1.0.7"",
    ""@radix-ui/react-slot"": ""^1.0.2"",
    ""@radix-ui/react-toast"": ""^1.1.5"",
    ""@radix-ui/react-tooltip"": ""^1.0.7"",
    ""@stripe/react-stripe-js"": ""^2.7.0"",
    ""@stripe/stripe-js"": ""^3.3.0"",
    ""@supabase/auth-helpers-nextjs"": ""^0.10.0"",
    ""class-variance-authority"": ""^0.7.0"",
    ""clsx"": ""^2.1.0"",
    ""lucide-react"": ""^0.372.0"",
    ""next"": ""14.2.2"",
    ""next-view-transitions"": ""^0.1.1"",
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""react-hot-toast"": ""^2.4.1"",
    ""react-icons"": ""^5.2.1"",
    ""stripe"": ""^15.3.0"",
    ""tailwind-merge"": ""^2.3.0"",
    ""tailwindcss-animate"": ""^1.0.7"",
    ""use-debounce"": ""^10.0.0"",
    ""zod"": ""^3.23.0""
  },
  ""devDependencies"": {
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.2.2"",
    ""postcss"": ""^8"",
    ""prisma"": ""^5.14.0"",
    ""tailwindcss"": ""^3.4.1"",
    ""typescript"": ""^5""
  }
```
",,
2319992688,24305,Command `npx prisma migrate dev` failing with no error messages,"### Bug description

Well, i started a project here and i was trying to set up my first table on my schema

I have already used Prisma in the past and worked fine, but today, on the latest version, it's not working

For some reason, i cannot run my npx prisma migrate dev, but the error is empty, so i can't search for the errors properly to find a solution.

This is what comes from my `npx prisma -v` command:

```
prisma                  : 5.14.0
@prisma/client          : Not found
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.13.1
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```

I found some stuff related with open ssl, i will point up some commands and etc to maybe help

which openssl returns:
/home/linuxbrew/.linuxbrew/bin/openssl

schema:

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Account {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String

  @@map(""accounts"")
}
```

.env:

```
DATABASE_URL=""postgresql://root:root@localhost:5432/jwtauth?schema=public""
```

my docker container is up and my table is created, i have already checked those

![image](https://github.com/prisma/prisma/assets/97119763/6f31571e-ca5e-4b18-938e-14b7a74bfd70)
![image](https://github.com/prisma/prisma/assets/97119763/10d86c38-a062-4b13-b492-7a696e4d509d)

can someone please help?

### How to reproduce

I don't think there is a way to reproduce this because i think the problem is with my machine

This is what i got when i run `npx run migrate dev`
![image](https://github.com/prisma/prisma/assets/97119763/795d5025-ef89-4a48-bfed-a80824ab53b4)

### Expected behavior

_No response_

### Prisma information

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Account {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String

  @@map(""accounts"")
}
```

### Environment & setup

- OS: Pop OS
- Database: PostgreSQL
- Node.js version: 20.13.1


### Prisma Version: 5.14
",,
2318278643,24296,Proper type support for discriminated union JSON field types where the discriminator is another scalar field,"## Problem

Prisma models with a `Json` field that contains structured data of which depends on the value of another scalar field on that model are unable to take advantage of [Typescript's built-in narrowing of discriminated union types](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#discriminated-unions) to accurately narrow the Json field type. 

Instead of trying to describe in further detail with abstract wording I've built a little scenario below to demonstrate the issue.

__TL;DR__
The following code cannot be made to correctly narrow the type of `item.config` based on the `item.type`. (Continue reading for context.)

```typescript
const item = await prisma.item.findFirst();
if (item.type === 'ChecklistItem'){
  // Typescript errors b/c it does not know what specific type `item.config` is.
  item.config.listItems.map(..);  // <-- I would like this to not cause a Typescript error.
}
```

### Example scenario
We have a few tables in our database that follow a structure like this:

```prisma
model Item {
  id                 String   @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  type               ItemType
  name               String
  config             Json     @default(""{}"")
}

enum ItemType {
  Amount
  Checkbox
  Checklist
}
```

When we query for items the `config` JSON is essentially completely un-typed.

If this were raw Typescript, I would often make types similar to the following to get the functionality I want:
```typescript
interface CoreItemFields {
  id: string;  
  name: string;
}

interface AmountItem extends CoreItemFields {
  type: 'Amount';
  config: {
    initialAmount?: number;
    min?: number;
    max?: number;
  }
}

interface CheckboxItem extends CoreItemFields {
  type: 'Checkbox';
  config: {
    initialState?: 'CHECKED' | 'UNCHECKED'
  }
}

interface CheckboxItem extends CoreItemFields {
  type: 'ChecklistItem';
  config: {
    listItems: {name: string}[]
  }
}

type Item = AmountItem | CheckboxItem | ChecklistItem
```

This makes life easy when we want to perform operations on items. If we haven't checked the type yet, then `config` is the full union of all possible config types, but if we have a type guard, then `config` is automatically narrowed to the config type of the item type we are working with. e.g.

```typescript
// When using manually constructed discriminated union types

const item: Item = getItem();

// Typescript is not happy here b/c `listItems` is not present on all possible config types.
// This is ok.
item.config.listItems.map(..);

if (item.type === 'ChecklistItem'){
  // Typescript is happy here when using manually constructed discriminated union types.
  // This is great!
  item.config.listItems.map(..);
}
```

Unfortunately when done with Prisma I am unable to get the functionality above:

```typescript
// When using prisma model

const item = await prisma.item.findFirst();
if (item.type === 'ChecklistItem'){
  // Typescript errors b/c it does not know what specific type this is, even if we specify union types using `prisma-json-types-generator` (see below)
  item.config.listItems.map(..);  // <-- I would like this to not cause a Typescript error.
}
```
## Suggested solution

I don't have a very clear idea of the best way to achieve this, I was hoping to accomplish it initially with a Prisma extension, but computed fields don't really accomplish it since this union type discrimination needs to be specified for the whole model object, not just the affected field.

## Alternatives

We are already using `prisma-json-types-generator` to specify custom types for Json prisma fields, but since each Item type has a different `config` object shape we are still left with a large union of config types that isn't properly discriminated based on the type field.

I imagine I could wrap every Prisma item result in a helper function that accomplishes this, but the only way I can imagine accomplishing this would really diminish the experience of using Prisma as expected and would likely often be omitted resulting in the existing bad behavior. This is especially true since items are often loaded as a collection through relationships of other models, making it more challenging to streamline the typing on my end.
",,
2317898811,24294,`createManyAndReturn()` not getting recognized/available,"### Bug description

When I try to implement createManyAndReturn in my code after updating to 5.14.0 the ts types and autocomplete is not available. When I looked at the compiled code I do see references to it but its not available to me.

I have tried to wipe my node_modules and restarted my vscode and everything and still not available. All the other methods work.

<img width=""731"" alt=""image"" src=""https://github.com/prisma/prisma/assets/6380855/12362d41-3751-4d70-a512-646510cce130"">


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. Setup a nodejs serverless project
2. Install prisma 5.14.0
3. Create a model and run generate
4. Attempt to do a createAndMany and notice vscode is not showing it. Even other editors I tried like intellij didnt find it

### Expected behavior

It should find createManyAndReturn

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
export async function createInventoryDevices(devices: any): Promise<any> {
  const createdCount = await prisma.deviceInventory.createManyAndReturn({})
}
```


### Environment & setup

- OS: macOS
- Database: postgres
- Node.js version: 18.16.0

### Prisma Version

```
5.14.0
```
",,
2317739871,24293,Bug (D1): PrismaClientKnownRequestError: Foreign key constraint failed on the field: `foreign key`,"### Bug description

When using Cloudflare D1 and performing an action which would break a foreign key constraint, the field in the error message and in the meta object is always `foreign key` instead of the actual field. This makes debugging those errors very difficult, especially when you have big tables with huge constraints.

Here's an example error:
```
PrismaClientKnownRequestError: Invalid `prisma.user.deleteMany()` invocation: Foreign key constraint failed on the field: `foreign key`

{
    ""name"": ""PrismaClientKnownRequestError"",
    ""code"": ""P2003"",
    ""clientVersion"": ""5.14.0"",
    ""meta"": {
        ""modelName"": ""User"",
        ""field_name"": ""foreign key""
    }
}
```

### How to reproduce

Please checkout my minimal reproduction: https://github.com/hrueger/prisma-24293

### Expected behavior

```
PrismaClientKnownRequestError: Invalid `prisma.user.deleteMany()` invocation: Foreign key constraint failed on the field: `posts`

{
    ""name"": ""PrismaClientKnownRequestError"",
    ""code"": ""P2003"",
    ""clientVersion"": ""5.14.0"",
    ""meta"": {
        ""modelName"": ""User"",
        ""field_name"": ""posts""
    }
}
```

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

```

```ts
await prisma.post.create({
	data: {
		title: ""Hello World"" + Math.random(),
		author: {
			create: {
				email: ""test@test.de"",
				name: ""Test Test""
			}
		}
	}
});
await prisma.user.deleteMany();
```


### Environment & setup

- OS: macOS
- Database: Cloudflare D1
- Node.js version: v21.6.1


### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
Preview Features        : driverAdapters
```",,
2317660569,24292,Adding an `enum` field on a model and removing an `enum` value at the same time generates a failing migration (Postgresql),"### Bug description

When adding an enum field on a model and removing an enum value at the same time, Prisma will generate a migration in two steps:

1. `AlterEnum` to replace the enum with a new enum with the new values, using a postgres transaction
2. `AlterTable` to add the field with that enum on the model

However, the `AlterEnum` step tries to replace the enum type of the field that is created in the `AlterTable`, resulting in an SQL error.

### How to reproduce

See reproduction repository here: https://github.com/Errorname/prisma-alter-enum-error (steps in readme)

### Expected behavior

The generated `AlterEnum` step transaction should not try to replace the type of the field that is not yet created.

### Prisma information

See reproduction repository here: https://github.com/Errorname/prisma-alter-enum-error

### Environment & setup

- OS: macOS
- Database: Postgresql
- Node.js version: 20.10.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2317654450,24291,internal error: entered unreachable code,"### Bug description

Prisma panics on a valid query. The query has always been working fine but I don't just understand what's wrong. Also,  all other queries work just fine. This is the Prisma call I made:
```
const studentDetails = {
          full_name: data.data.fullname,
          email: data.data.email,
          matric_number: data.data.student_number,
          department: data.data.department.name,
          level: data.data.level.name,
        };

        await this.databaseService.students.create({
          data: studentDetails,
        });
```
As seen, it is a simple create query. The data to be saved in the db are being pulled from an external API. I really don't know what's wrong.


This is the error:

```
PrismaClientRustPanicError:
Invalid `this.databaseService.students.create()` invocation in
C:\Users\abdul\Desktop\fyp folder\app\backend\src\modules\auth\auth.service.ts:125:50

  122   level: '300',
  123 };
  124
→ 125 return await this.databaseService.students.create(
internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

Should not panic. I expected a student's credentials to be stored under the students table in the database.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model students {
  student_id    Int            @id @default(autoincrement())
  matric_number String         @unique
  full_name     String
  email         String         @unique
  department    String
  level         String
  registrations registrations?
}

model admins {
  admin_id Int    @id @default(autoincrement())
  username String @unique
  password String
}

model skills {
  skill_id      Int            @id @default(autoincrement())
  skill_name    String
  description   String
  trainer       trainers       @relation(fields: [trainer_id], references: [trainer_id])
  trainer_id    Int            @unique
  slots         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  registrations registrations[]
}

model trainers {
  trainer_id   Int     @id @default(autoincrement())
  trainer_name String
  email        String
  phone_number String
  skill        skills?
}

model registrations {
  registration_id Int      @id @default(autoincrement())
  student         students @relation(fields: [student_id], references: [student_id])
  student_id      Int      @unique
  skill           skills   @relation(fields: [skill_id], references: [skill_id])
  skill_id        Int
  date_registered DateTime @default(now())
}
```

```ts
const studentDetails = {
          full_name: data.data.fullname,
          email: data.data.email,
          matric_number: data.data.student_number,
          department: data.data.department.name,
          level: data.data.level.name,
        };

        await this.databaseService.students.create({
          data: studentDetails,
        });
```


### Environment & setup

- OS: Windows
- Database: SQLite
- Node.js version: v21.5.0


### Prisma Version

```
5.13.0
```
",,
2317149932,24289,Invalid `this.prisma.vehicle.update()` invocation,"### Bug description

I'm getting and exeption at the moment of traying to update a field wich is category wich is an array of strings

this is my model in my schema

```
model Vehicle {
  id               String       @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  plate            String
  brand            String
  model            String
  year             Int
  type             String
  freezer          Boolean?     @default(false)
  rides            Int          @default(0)
  category         String[]     
  categorySelected String[]     
  uidDriver        String       @db.Uuid
  vehicleVerified  String?      @default(""'unConfirmed'::text"")
  Ride             Ride[]
  UserDriver       UserDriver   @relation(fields: [uidDriver], references: [uid], onDelete: NoAction, onUpdate: NoAction)
  VehicleFile      VehicleFile?
}
```


 [Nest] 12296  - 25/05/2024, 12:07:08 p. m.   ERROR [ModificationsService] Error updating vehicle category: 
Invalid `this.prisma.vehicle.update()` invocation in
  ```
202 try {
→ 203   return await this.prisma.vehicle.update({
          where: {
            id: ""fc3b3258-81c6-421a-815f-44a379ff62e2""
          },
          data: {
            category: [
              {
                vehicleId: ""fc3b3258-81c6-421a-815f-44a379ff62e2"",
                category: ""SafyFlash""
              }
            ]
          }
        })

Argument `category`: Invalid value provided. Expected VehicleUpdatecategoryInput or String, provided Object.  
```        

this is the code where I´m getting the exeption:
  ```
 async updateCategoryVehicle(vehicleId: string, categoryName: string) {
    Logger.log('Actualizando la categoria del vehiculo', 'ModificationsService');
  
    const vehicle = await this.prismaRepositoryConsultas.getVehicleInfo(vehicleId);
    if (!vehicle) return { message: 'No se encontro el vehiculo' };
  
    let newCategory: string[] = [];
    const vehicleCategories = vehicle.category;
    Logger.log('Categorias del vehiculo: ' + vehicleCategories.length, 'ModificationsService');
  
    if (vehicleCategories.length > 0) {
      for (let category of vehicleCategories) {
        if (categoryName !== category) {
          newCategory.push(category);
        }
      }
    }
    
    // Agregar la nueva categoría al array
    newCategory.push(categoryName);
  
    Logger.log('nuevas categorias del vehiculo: ' + newCategory.length, 'ModificationsService');
    try {
      return await this.prisma.vehicle.update({
        where: {
          id: vehicle.id,
        },
        data: {
          category: newCategory, // Pasar array de strings directamente
        },
      });
    } catch (error) {
      Logger.error('Error al actualizar la categoria del vehiculo: ' + error.message, 'ModificationsService');
      return { message: 'Error al actualizar la categoria del vehiculo: ' + error.message, status: 500 };
    }
  }
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
    ""@prisma/client"": ""^5.12.1"",
    ""prisma"": ""^5.12.1"",

```
",,
2317089972,24288,Adding `enum` value as part of data migration breaks running servers ,"### Bug description

When a migration is run in a CI/CD pipeline which adds a value to an enum and performs a data migration to insert records with this enum value, it causes running application to fail because Prisma Client does not recognize the new value.

This has caused a few outages in my application, where we use [Casl](https://casl.js.org/v4/en/guide/intro)'s Subject enum for permissions, and we often add user permissions/policies as part of a data migration when adding a new Subject, which causes downtime every time as users permissions are retrieved from DB for each requests.

### How to reproduce

1. Clone https://github.com/pimmee/prisma-enum-during-migration-bug
2. Run `make run`
3. See error `Value 'B' not found in enum 'MyEnum'`


### Expected behavior

To avoid this issue from causing downtime during a migration, could Prisma Client simply ignore returning rows where the Enum type is unknown instead of throwing error?

Perhaps this can be configured in Prisma Client options?

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->

Schema running on backend:

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id     String   @id @default(uuid())
  values MyEnum[]
}

enum MyEnum {
  A
}
```

Code modified and run as a migration in CI/CD:

```prisma
enum MyEnum {
  A
  B
}
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.9.0

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.9.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2316705272,24285,`@prisma/instrumentation` Type Error: `'InstrumentionNodeModuleDefintion' is not generic`,"### Bug description

Installing latest Prisma cause TS type error: `'InstrumentionNodeModuleDefintion' is not generic`

Here's the definition inside the installed package (`..../PrismaInstrumentation.d.ts`):
```ts
declare class PrismaInstrumentation extends InstrumentationBase {
    constructor(config?: Config);
    init(): InstrumentationNodeModuleDefinition<unknown>[];
    enable(): void;
    disable(): void;
    isEnabled(): boolean;
}
```

### How to reproduce

Installation step from https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/opentelemetry-tracing should be sufficient:

```bash
npm install prisma@latest --save-dev
npm install @prisma/client@latest --save
npm install @prisma/instrumentation@latest --save
```
and ensure `skipLibCheck` inside tsconfig are set to false.
### Expected behavior

either `InstrumentationNodeModuleDefinition` class implements a generic type or the init() type should not have `unknown` as its type declaration

### Prisma information

N/A

### Environment & setup

OS: Windows 11 + Ubuntu 20.04

### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.12.2
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
Preview Features        : tracing
```
",,
2315389561,24283,PANIC: internal error: entered unreachable code,"### Bug description

I am unable to connect to an mssql server. I've been playing around with the connection url a bit and now that I think it's correct I get this wierd bug. This happens both when code connects the db, or when I run a command like ""pnpm prisma db push""

Error: Schema engine error:
Performing a TLS handshake
Trusting the server certificate without validation.
TLS handshake successful
Login failed for user 'sa'.
[libs/user-facing-errors/src/quaint.rs:125:18] internal error: entered unreachable code



### How to reproduce

I've provided a script below that let's you create an mssql docker container.
Initialize a plain t3 project:
> npm create t3-app@latest

And then in the prisma.schema you put the url 
```typescript
    url = ""sqlserver://localhost:1433;database=master;user=sa;password=TestPassword123456;encrypt=true;trustServerCertificate=true;""
```

Then you can do anyhing that would connect to the database and it should give this error.

### Expected behavior

_No response_

### Prisma information


```prisma
datasource db {
    provider = ""sqlserver""
    url =""sqlserver://localhost:1433;database=master;user=sa;password=TestPassword123456;encrypt=true;trustServerCertificate=true;""
}
```


### Environment & setup

- OS:  Ubuntu
- Database: MSSQL docker
```sh
SCRIPT_DIR=""$(cd ""$(dirname ""${BASH_SOURCE[0]}"")"" && pwd)""
VOLUME_PATH=""${SCRIPT_DIR}/mssql_data""
CONTAINER_NAME=""amigo""
IMAGE_NAME=""mcr.microsoft.com/mssql/server""
SA_PASSWORD=""TestPassword123456""
PORT=1433
DATABASE=""master""

# Function to check if the container exists
container_exists() {
    docker ps -a --format '{{.Names}}' | grep -Eq ""^${CONTAINER_NAME}\$""
}

# Function to check if the container is running
container_running() {
    docker ps --format '{{.Names}}' | grep -Eq ""^${CONTAINER_NAME}\$""
}

# Create the volume directory if it doesn't exist
if [ ! -d ""$VOLUME_PATH"" ]; then
    echo ""Creating volume directory at $VOLUME_PATH""
    mkdir -p ""$VOLUME_PATH""
fi

# Adjust permissions to ensure the mssql user can write to the directory
echo ""Adjusting permissions for $VOLUME_PATH""
sudo chown -R 10001:0 ""$VOLUME_PATH"" # 10001 is the UID for the mssql user in the container


# Check if the container exists
if container_exists; then
    echo ""Container ${CONTAINER_NAME} already exists.""
    if container_running; then
        echo ""Container ${CONTAINER_NAME} is already running.""
    else
        echo ""Starting container ${CONTAINER_NAME}...""
        docker start ${CONTAINER_NAME}
    fi
else
    echo ""Creating and starting container ${CONTAINER_NAME}...""
    docker run -e 'ACCEPT_EULA=Y' -e ""SA_PASSWORD=${SA_PASSWORD}"" -p ${PORT}:1433 --name ${CONTAINER_NAME} -v ${VOLUME_PATH}:/var/opt/mssql ${IMAGE_NAME}
fi
```
- Node.js version: v18.19.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.14.0
@prisma/client          : 5.10.2
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/.pnpm/@prisma+engines@5.14.0/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/.pnpm/@prisma+engines@5.14.0/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2311867229,24266,[Feature Request]: Add `findManyAndCount` Support,"## Problem

I want to findMany and count but looks like the model types force me to duplicate the where objects, which is not **very nice**. This is common when you want to make your own pagination.

```ts
const db = await prisma.paymentNotification.findMany({
  where: {
    OR: [
      {
        order_number: {
          equals: c.req.query(""search"") || """",
          mode: ""insensitive"",
        },
      },
      {
        fullname: {
          equals: c.req.query(""search"") || """",
          mode: ""insensitive"",
        },
      },
      {
        order: {
          net_price: { equals: Number(c.req.query(""search"")) || 0 },
        },
      },
      {
        order: {
          bankAccount: {
            bank: {
              bank_name: {
                equals: c.req.query(""search"") || """",
                mode: ""insensitive"",
              },
            },
          },
        },
      },
      {
        status: {
          equals: c.req.query(""search"") || """",
          mode: ""insensitive"",
        },
      },
    ],
    ...(status
      ? {
          status,
        }
      : {}),
  },
  include: {
    order: {
      include: {
        bankAccount: {
          include: {
            bank: true,
          },
        },
      },
    },
  },
  orderBy: {
    id: ""desc"",
  },
  skip: page > 0 ? page - 1 : 0,
  take: limit,
});

const count = await prisma.paymentNotification.count({
  where: {
    OR: [
      {
        order_number: {
          equals: c.req.query(""search"") || """",
          mode: ""insensitive"",
        },
      },
      {
        fullname: {
          equals: c.req.query(""search"") || """",
          mode: ""insensitive"",
        },
      },
      {
        order: {
          net_price: { equals: Number(c.req.query(""search"")) || 0 },
        },
      },
      {
        order: {
          bankAccount: {
            bank: {
              bank_name: {
                equals: c.req.query(""search"") || """",
                mode: ""insensitive"",
              },
            },
          },
        },
      },
      {
        status: {
          equals: c.req.query(""search"") || """",
          mode: ""insensitive"",
        },
      },
    ],
    ...(status
      ? {
          status,
        }
      : {}),
  },
});
```

## Suggested solution

I'm thinking of using transactions to fix this

```ts
import { Prisma } from '@prisma/client';
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

const findAll = async (userId: String) => {
  const query: Prisma.paymentNotificationFindManyArgs = {
      where: {
        OR: [
          {
            order_number: {
              equals: c.req.query(""search"") || """",
              mode: ""insensitive"",
            },
          },
          {
            fullname: {
              equals: c.req.query(""search"") || """",
              mode: ""insensitive"",
            },
          },
          {
            order: {
              net_price: { equals: Number(c.req.query(""search"")) || 0 },
            },
          },
          {
            order: {
              bankAccount: {
                bank: {
                  bank_name: {
                    equals: c.req.query(""search"") || """",
                    mode: ""insensitive"",
                  },
                },
              },
            },
          },
          {
            status: {
              equals: c.req.query(""search"") || """",
              mode: ""insensitive"",
            },
          },
        ],
        ...(status
          ? {
              status,
            }
          : {}),
      },
      include: {
        order: {
          include: {
            bankAccount: {
              include: {
                bank: true,
              },
            },
          },
        },
      },
      orderBy: {
        id: ""desc"",
      },
      skip: page > 0 ? page - 1 : 0,
      take: limit,
  };
  const [paymentNotification, count] = await prisma.$transaction([
    prisma.paymentNotification.findMany(query),
    prisma.paymentNotification.count({ where: query.where })
  ]);

  return {
    pagination: {
      total: count
    },
    data: paymentNotification
  };
};
```

But you guys know, the typescript looks unintuitive, Because I need to import the `paymentNotificationFindManyArgs` types.

And also, it's nice seperate database requests to handle both,

How about just create a new abstraction to findMany and also get the count from `where` query in one database request?

## Alternatives

As you can see from above, this is the current alternative:

```ts
  const [paymentNotification, count] = await prisma.$transaction([
    prisma.paymentNotification.findMany(query),
    prisma.paymentNotification.count({ where: query.where })
  ]);
```

## Additional context

Something like this would perform better

```
SELECT COUNT(*) OVER (), c.*
FROM CUSTOMER c 
WHERE c.Name like 'foo%';
```
",,
2310516598,24262,Breaking change? `Int` switched to being `Int32` for MongoDB,"### Bug description

We updated an app from prisma **5.8.1** to **5.14.0** and suddenly had to deal with integer overflows.

Turns out Prismas `Int` turns into `Int32` with the new version.

We fixed this by adding `@db.Long`.

I'm just wondering: Was this intended? This effectively was a breaking change in a minor.

### How to reproduce

1. Have a prisma schema for mongodb that includes a `Int`
2. Save a big value like `15552000000`

### Expected behavior

Gets saved as Int64 (Long)

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model User {
  id    String @id @default(auto()) @map(""_id"") @db.ObjectId

  ageInMilliseconds Int      @default(31104000000) // default is 1 year in milliseconds
}
```

```ts
await prisma.user.create({
  ageInMilliseconds: 15552000000
});
```


### Environment & setup

- OS: Linux
- Database: MongoDB
- Node.js version: v22.2.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v22.2.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2309657843,24258,"It was possible to create a child record in a 1:1 relationship only with the id of the parent, but not anymore","### Bug description

I have just upgraded prisma from `5.4.1` to `5.14.0` and before I was able to create related queries in a 1:1 relationship by creating the child and referencing the parent using its id, like this:

```ts
await prisma.profile.create({
    data: {
      name: ""name"",
      userId: ""id"",
    },
  });
```

In this example, there is a 1:1 relationship between `User` and `Profile` (see the schema below).

After upgrading, I am not able to do it anymore because typescript complains that the `userId` is not enough but I need to pass the full `user` object. The error is the following:

```
Type '{ name: string; userId: string | undefined; }' is not assignable to type 'Exact<(Without<ProfileCreateInput, ProfileUncheckedCreateInput> & ProfileUncheckedCreateInput) | (Without<...> & ProfileCreateInput), (Without<...> & ProfileUncheckedCreateInput) | (Without<...> & ProfileCreateInput)>'.
  Property 'user' is missing in type '{ name: string; userId: string | undefined; }' but required in type '{ userId?: undefined; id?: Exact<string | undefined, string | undefined>; name: string; email: string; user: { ...; }; }'.ts(2322)
index.d.ts(15093, 5): 'user' is declared here.
index.d.ts(6040, 5): The expected type comes from property 'data' which is declared here on type '{ select?: Exact<ProfileSelect<InternalArgs & { result: {}; model: {}; query: {}; client: {}; }> | null | undefined, ProfileSelect<InternalArgs & { result: {}; model: {}; query: {}; client: {}; }> | null | undefined>; include?: Exact<...>; data: Exact<...>; }'
```

Is this intended? I was not able to find it in the changelog.

### How to reproduce

1. Init prisma with the schema I am sharing
2. copy and paste my query in an environment with a ts server
3. see the error

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model User {
  id            String    @id @default(cuid())
  profile       Profile?
}

model Profile {
  id            String     @id @default(cuid())
  name          String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String     @unique
}
```

```ts
await prisma.profile.create({
    data: {
      name: ""name"",
      userId: ""id"",
    },
  });
```


### Environment & setup

- OS: macos
- Database: postrgresql
- Node.js version: v22.1.0

### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v22.1.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
Preview Features        : postgresqlExtensions
```
",,
2309225956,24249,getting prisma errors when running AnythingLLMDesktop.AppImage on Artix linux,"### Bug description

```
./AnythingLLMDesktop.AppImage
[Preferences] preference config stored at /home/changed/.config/anythingllm-desktop/config.json
[19653:0521/232222.044608:ERROR:object_proxy.cc(590)] Failed to call method: org.freedesktop.DBus.Properties.Get: object_path= /org/freedesktop/portal/desktop: org.freedesktop.DBus.Error.InvalidArgs: No such interface “org.freedesktop.portal.FileChooser”
[19653:0521/232222.046442:ERROR:select_file_dialog_linux_portal.cc(274)] Failed to read portal version property
[19653:0521/232222.316442:ERROR:object_proxy.cc(590)] Failed to call method: org.freedesktop.portal.Settings.Read: object_path= /org/freedesktop/portal/desktop: org.freedesktop.DBus.Error.UnknownMethod: No such interface “org.freedesktop.portal.Settings” on object at path /org/freedesktop/portal/desktop

prisma:warn Prisma doesn't know which engines to download for the Linux distro ""artix"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
prisma:warn Prisma doesn't know which engines to download for the Linux distro ""artix"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": SQLite database ""anythingllm.db"" at ""file:/home/changed/.config/anythingllm-desktop/storage/anythingllm.db""

Error: Schema engine exited. Error: Could not find schema-engine binary. Searched in:
- /tmp/.mount_AnythiuDeEHS/resources/backend/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x
- /tmp/.mount_AnythiuDeEHS/resources/backend/node_modules/prisma/schema-engine-debian-openssl-1.1.x
- /tmp/.mount_AnythiuDeEHS/resources/backend/node_modules/schema-engine-debian-openssl-1.1.x
- /tmp/.mount_AnythiuDeEHS/resources/backend/node_modules/prisma/runtime/schema-engine-debian-openssl-1.1.x
prisma:warn Prisma doesn't know which engines to download for the Linux distro ""artix"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
Prisma schema loaded from prisma/schema.prisma
prisma:warn Prisma doesn't know which engines to download for the Linux distro ""artix"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
Error: 
EROFS: read-only file system, unlink '/tmp/.mount_AnythiuDeEHS/resources/backend/node_modules/.prisma/client/index.js'
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2308049077,24248,Prisma Migrate HEAD against canonical branch,"## Problem
I would like to be able to automatically create migrations based off of schema changes, without regard to any local databases. The reason being that I would like to know for certain what schema changes belong in a PR, and I shouldn't need to fuss with an actual local database to do it. I have it set up to run against my `release` branch (many would use the `master` branch. It might make sense to use `from` and `to` git hashes (possibly with file path as well).

## Suggested solution
I have implemented this in userland, so this is not a huge deal for me. However, it would be nice to have it included in Prisma.
```ts
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import mkdirp from 'mkdirp';
import yargs from 'yargs';
import * as changeCase from 'change-case';

const { name, assertNoChanges } = yargs(process.argv.slice(2))
  .option('name', {
    type: 'string',
    default: null,
  })
  .option('assertNoChanges', {
    type: 'boolean',
    default: false,
  })
  .check(args => args.name || args.assertNoChanges)
  .parseSync();

const APP_ROOT = process.env.APP_ROOT;
if (!APP_ROOT) throw new Error('APP_ROOT is required');

const TEMP_PATH = path.join(APP_ROOT, 'tmp');
const PRISMA_PATH = 'prisma/schema.prisma';

const NEW_PRISMA_PATH = path.join(APP_ROOT, PRISMA_PATH);
const OLD_PRISMA_PATH = path.join(TEMP_PATH, 'schema.prisma');

const file = execSync(`git show origin/release:${PRISMA_PATH}`).toString();

mkdirp.sync(TEMP_PATH);
fs.writeFileSync(OLD_PRISMA_PATH, file, 'utf8');

const command = `prisma migrate diff --from-schema-datamodel ${OLD_PRISMA_PATH} --to-schema-datamodel ${NEW_PRISMA_PATH} --script`;
const migration = execSync(command).toString().trim() + '\n';

if (migration.match(/This is an empty migration/)) {
  console.log('No schema changes found. Exiting.');
  process.exit(0);
}

if (assertNoChanges) {
  const diff = execSync(
    'git diff HEAD:prisma/migrations origin/release:prisma/migrations',
    { cwd: process.env.APP_ROOT }
  ).toString();
  if (!diff)
    throw new Error(
      'Changes to the schema were detected, but no change to the migrations were found'
    );

  process.exit(0);
}

const MIGRATIONS_DIR = path.join(APP_ROOT, 'prisma/migrations');
const existingMigrations = fs
  .readdirSync(MIGRATIONS_DIR)
  .filter(existingName => {
    const absolutePath = path.join(MIGRATIONS_DIR, existingName);
    return fs.statSync(absolutePath).isDirectory();
  });

const isValid = (newName: string) =>
  existingMigrations.findIndex(existingName => existingName >= newName) === -1;

const generateMigrationName = () => {
  const timestamp = new Date().toISOString().replace(/\D/g, '').slice(0, 14);
  if (!name) throw new Error('name is required');

  const snakeName = changeCase.snakeCase(name);
  return `${timestamp}_${snakeName}`;
};

const migrationName = generateMigrationName();
if (!isValid(migrationName))
  throw new Error(`The migration name ""${migrationName}"" is invalid`);

const migrationDirectory = path.join(MIGRATIONS_DIR, migrationName);
mkdirp.sync(migrationDirectory);

const filePath = path.join(migrationDirectory, 'migration.sql');
fs.writeFileSync(filePath, migration, 'utf8');
```

## Alternatives
We can continue to do this sort of thing in userland.

",,
2306065363,24241,Runtime error that occurs in `findUnique()` when unique constraint is composed of one field,"### Bug description

After configuring the schema as shown below(Prisma information), the `userId` set as a `unique constraint` was mapped to whereArgs of `findUnique()`. There is no type error or compile error, but the following error occurs at runtime.

```
PrismaClientValidationError: 
Invalid `this.readOnlyPrisma.test.findUnique()` invocation in
/Users/test/Workspace/test_monorepo/dist/apps/api/src/test/test.v3.service.js:1302:73

  1299 getTest(userId) {
  1300     var _a;
  1301     return __awaiter(this, void 0, void 0, function* () {
→ 1302         const test = yield this.readOnlyPrisma.test.findUnique({
                 where: {
                   userId: 1219,
               ?   id?: Int,
               ?   AND?: TestWhereInput | TestWhereInput[],
               ?   OR?: TestWhereInput[],
               ?   NOT?: TestWhereInput | TestWhereInput[],
               ?   createdAt?: DateTimeFilter | DateTime,
               ?   updatedAt?: DateTimeFilter | DateTime,
               ?   score?: IntFilter | Int,
               ?   user?: UserRelationFilter | UserWhereInput,
               ?   history?: TestHistoryListRelationFilter
                 },
                 select: {
                   score: true
                 }
               })

Argument `where` of type TestWhereUniqueInput needs at least one of `id` or `Test_userId_unique_constraint` arguments. Available options are marked with ?.
    at Tn (/Users/test/Workspace/test_monorepo/node_modules/@prisma/client/runtime/library.js:115:6855)
    at In.handleRequestError (/Users/test/Workspace/test_monorepo/node_modules/@prisma/client/runtime/library.js:122:6510)
    at In.handleAndLogRequestError (/Users/test/Workspace/test_monorepo/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (/Users/test/Workspace/test_monorepo/node_modules/@prisma/client/runtime/library.js:122:5896)
    at async l (/Users/test/Workspace/test_monorepo/node_modules/@prisma/client/runtime/library.js:127:11167)
```

The `Test_userId_unique_constraint` mentioned here does not currently exist in `TestWhereUniqueInput`. (Please refer to the prisma information below). As a result, a type error occurs when trying to apply `Test_userId_unique_constraint` to the where condition only. (As a result of my testing, `id` and `Test_userId_unique_constraint` are not set to Where condition. If you pass it together, the type error seems to be avoided. However, I don't want to use the unique condition while passing the id like this). In fact, if you use `userId`(defined as unique), the type error does not occur. However, as mentioned earlier, a more serious runtime error occurs.

### How to reproduce

Please check prisma information part

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
model Test {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt DateTime              @updatedAt @db.Timestamptz(3)
  userId    Int
  user      User                  @relation(fields: [userId], references: [id])
  score     Int                   @default(0)
  history   TestHistory[]

  @@unique([userId], name: ""Test_userId_unique_constraint"")
  @@index([createdAt])
}
```

```ts
// Add your code using Prisma Client
const test = await this.readOnlyPrisma.test.findUnique({
      where: {
        userId, // <--- occured here
      },
      select: {
        score: true,
      },
    });
```
```ts
// index.d.ts
export type TestWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    userId?: number;
    AND?: TestWhereInput | TestWhereInput[];
    OR?: TestWhereInput[];
    NOT?: TestWhereInput | TestWhereInput[];
    createdAt?: DateTimeFilter<'Test'> | Date | string;
    updatedAt?: DateTimeFilter<'Test'> | Date | string;
    score?: IntFilter<'Test'> | number;
    user?: XOR<UserRelationFilter, UserWhereInput>;
    history?: TestHistoryListRelationFilter;
  },
  'id' | 'Test_userId_unique_constraint'
>;
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.10.0


### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
```
",,
2303650398,24235,internal error: entered unreachable code,"### Bug description

I ran my nextjs 14 server and executed a function which triggers a lot of transactions with p-limit. I used Neon all the time during development, everything worked as usual. Then, i switched to sqlite on dev, which instantly triggered this error:

```
thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:178:18:
internal error: entered unreachable code
[00:39:58.551] ERROR: uploadStocks (database_error): symbolBatch=ZOOZ, error=
Invalid `prisma.stock.upsert()` invocation:

internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
```
This error also appeared shortly after:
```
[00:40:04.431] ERROR: uploadStocks (database_error): symbolBatch=AEACW, error=
Invalid `prisma.stock.upsert()` invocation:

Error in connector: Error querying the database: Error code 1: SQL error or missing database
```
### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

Execute function without any errors

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  // previewFeatures = [""driverAdapters""]
}

// Development
datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

model Log {
  id        String   @id @default(cuid())
  level     String
  message   String
  timestamp DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default(""USER"")
  biography      String    @default(""My beautiful biography."")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  portfolios   Portfolio[]
  recentStocks UserRecentStocks[]

  stripeCustomerId       String?   @unique @map(name: ""stripe_customer_id"")
  stripeSubscriptionId   String?   @unique @map(name: ""stripe_subscription_id"")
  stripePriceId          String?   @map(name: ""stripe_price_id"")
  stripeCurrentPeriodEnd DateTime? @map(name: ""stripe_current_period_end"")
}

model Portfolio {
  id        String   @id @default(cuid())
  title     String
  isPublic  Boolean  @default(false)
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks StockInPortfolio[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model StockInPortfolio {
  id        String   @id @default(cuid())
  price     Decimal
  quantity  Decimal  @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, stockId])
  @@index([portfolioId])
  @@index([stockId])
}

model UserRecentStocks {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([userId, stockId])
  @@index([userId])
  @@index([stockId])
}

model Stock {
  id                                    String   @id @default(cuid())
  symbol                                String   @unique
  eye                                   Int?
  beta                                  Float?
  mktCap                                Float?
  range                                 String?
  companyName                           String
  currency                              String?
  cik                                   String?
  isin                                  String?
  cusip                                 String?
  exchange                              String?
  exchangeShortName                     String?
  industry                              String?
  website                               String?
  description                           String? // @db.Text
  ceo                                   String?
  sector                                String?
  country                               String?
  fullTimeEmployees                     String?
  address                               String?
  city                                  String?
  state                                 String?
  zip                                   String?
  dcfDiff                               Float?
  dcf                                   Float?
  image                                 String
  isEtf                                 Boolean?
  isActivelyTrading                     Boolean?
  isFund                                Boolean?
  dividendYielTTM                       Float?
  dividendYielPercentageTTM             Float?
  peRatioTTM                            Float?
  pegRatioTTM                           Float?
  payoutRatioTTM                        Float?
  currentRatioTTM                       Float?
  quickRatioTTM                         Float?
  cashRatioTTM                          Float?
  daysOfSalesOutstandingTTM             Float?
  daysOfInventoryOutstandingTTM         Float?
  operatingCycleTTM                     Float?
  daysOfPayablesOutstandingTTM          Float?
  cashConversionCycleTTM                Float?
  grossProfitMarginTTM                  Float?
  operatingProfitMarginTTM              Float?
  pretaxProfitMarginTTM                 Float?
  netProfitMarginTTM                    Float?
  effectiveTaxRateTTM                   Float?
  returnOnAssetsTTM                     Float?
  returnOnEquityTTM                     Float?
  returnOnCapitalEmployedTTM            Float?
  netIncomePerEBTTTM                    Float?
  ebtPerEbitTTM                         Float?
  ebitPerRevenueTTM                     Float?
  debtRatioTTM                          Float?
  debtEquityRatioTTM                    Float?
  longTermDebtToCapitalizationTTM       Float?
  totalDebtToCapitalizationTTM          Float?
  interestCoverageTTM                   Float?
  cashFlowToDebtRatioTTM                Float?
  companyEquityMultiplierTTM            Float?
  receivablesTurnoverTTM                Float?
  payablesTurnoverTTM                   Float?
  inventoryTurnoverTTM                  Float?
  fixedAssetTurnoverTTM                 Float?
  assetTurnoverTTM                      Float?
  operatingCashFlowPerShareTTM          Float?
  freeCashFlowPerShareTTM               Float?
  cashPerShareTTM                       Float?
  operatingCashFlowSalesRatioTTM        Float?
  freeCashFlowOperatingCashFlowRatioTTM Float?
  cashFlowCoverageRatiosTTM             Float?
  shortTermCoverageRatiosTTM            Float?
  capitalExpenditureCoverageRatioTTM    Float?
  dividendPaidAndCapexCoverageRatioTTM  Float?
  priceBookValueRatioTTM                Float?
  priceToBookRatioTTM                   Float?
  priceToSalesRatioTTM                  Float?
  priceEarningsRatioTTM                 Float?
  priceToFreeCashFlowsRatioTTM          Float?
  priceToOperatingCashFlowsRatioTTM     Float?
  priceCashFlowRatioTTM                 Float?
  priceEarningsToGrowthRatioTTM         Float?
  priceSalesRatioTTM                    Float?
  enterpriseValueMultipleTTM            Float?
  priceFairValueTTM                     Float?
  dividendPerShareTTM                   Float?
  targetHigh                            Float?
  targetLow                             Float?
  targetConsensus                       Float?
  targetMedian                          Float?
  peersList                             String?
  createdAt                             DateTime @default(now())
  updatedAt                             DateTime @updatedAt

  errorMessage String?

  portfolios  StockInPortfolio[]
  financials  Financials[]
  recentUsers UserRecentStocks[]
}

model Financials {
  id                                       String   @id @default(cuid())
  date                                     String
  symbol                                   String
  reportedCurrency                         String?
  cik                                      String?
  fillingDate                              String?
  calendarYear                             String
  period                                   String?
  revenue                                  Float?
  costOfRevenue                            Float?
  grossProfit                              Float?
  grossProfitRatio                         Float?
  researchAndDevelopmentExpenses           Float?
  generalAndAdministrativeExpenses         Float?
  sellingAndMarketingExpenses              Float?
  sellingGeneralAndAdministrativeExpenses  Float?
  otherExpenses                            Float?
  operatingExpenses                        Float?
  costAndExpenses                          Float?
  interestIncome                           Float?
  interestExpense                          Float?
  depreciationAndAmortization              Float?
  ebitda                                   Float?
  ebitdaratio                              Float?
  operatingIncome                          Float?
  operatingIncomeRatio                     Float?
  totalOtherIncomeExpensesNet              Float?
  incomeBeforeTax                          Float?
  incomeBeforeTaxRatio                     Float?
  incomeTaxExpense                         Float?
  netIncome                                Float?
  netIncomeRatio                           Float?
  eps                                      Float?
  epsdiluted                               Float?
  weightedAverageShsOut                    Float?
  weightedAverageShsOutDil                 Float?
  cashAndCashEquivalents                   Float?
  shortTermInvestments                     Float?
  cashAndShortTermInvestments              Float?
  netReceivables                           Float?
  inventory                                Float?
  otherCurrentAssets                       Float?
  totalCurrentAssets                       Float?
  propertyPlantEquipmentNet                Float?
  goodwill                                 Float?
  intangibleAssets                         Float?
  goodwillAndIntangibleAssets              Float?
  longTermInvestments                      Float?
  taxAssets                                Float?
  otherNonCurrentAssets                    Float?
  totalNonCurrentAssets                    Float?
  otherAssets                              Float?
  totalAssets                              Float?
  accountPayables                          Float?
  shortTermDebt                            Float?
  taxPayables                              Float?
  deferredRevenue                          Float?
  otherCurrentLiabilities                  Float?
  totalCurrentLiabilities                  Float?
  longTermDebt                             Float?
  deferredRevenueNonCurrent                Float?
  deferredTaxLiabilitiesNonCurrent         Float?
  otherNonCurrentLiabilities               Float?
  totalNonCurrentLiabilities               Float?
  otherLiabilities                         Float?
  capitalLeaseObligations                  Float?
  totalLiabilities                         Float?
  preferredStock                           Float?
  commonStock                              Float?
  retainedEarnings                         Float?
  accumulatedOtherComprehensiveIncomeLoss  Float?
  othertotalStockholdersEquity             Float?
  totalStockholdersEquity                  Float?
  totalEquity                              Float?
  totalLiabilitiesAndStockholdersEquity    Float?
  minorityInterest                         Float?
  totalLiabilitiesAndTotalEquity           Float?
  totalInvestments                         Float?
  totalDebt                                Float?
  netDebt                                  Float?
  deferredIncomeTax                        Float?
  stockBasedCompensation                   Float?
  changeInWorkingCapital                   Float?
  accountsReceivables                      Float?
  accountsPayables                         Float?
  otherWorkingCapital                      Float?
  otherNonCashItems                        Float?
  netCashProvidedByOperatingActivities     Float?
  investmentsInPropertyPlantAndEquipment   Float?
  acquisitionsNet                          Float?
  purchasesOfInvestments                   Float?
  salesMaturitiesOfInvestments             Float?
  otherInvestingActivites                  Float?
  netCashUsedForInvestingActivites         Float?
  debtRepayment                            Float?
  commonStockIssued                        Float?
  commonStockRepurchased                   Float?
  dividendsPaid                            Float?
  otherFinancingActivites                  Float?
  netCashUsedProvidedByFinancingActivities Float?
  effectOfForexChangesOnCash               Float?
  netChangeInCash                          Float?
  cashAtEndOfPeriod                        Float?
  cashAtBeginningOfPeriod                  Float?
  operatingCashFlow                        Float?
  capitalExpenditure                       Float?
  freeCashFlow                             Float?
  currentRatio                             Float?
  quickRatio                               Float?
  cashRatio                                Float?
  daysOfSalesOutstanding                   Float?
  daysOfInventoryOutstanding               Float?
  operatingCycle                           Float?
  daysOfPayablesOutstanding                Float?
  cashConversionCycle                      Float?
  grossProfitMargin                        Float?
  operatingProfitMargin                    Float?
  pretaxProfitMargin                       Float?
  netProfitMargin                          Float?
  effectiveTaxRate                         Float?
  returnOnAssets                           Float?
  returnOnEquity                           Float?
  returnOnCapitalEmployed                  Float?
  netIncomePerEBT                          Float?
  ebtPerEbit                               Float?
  ebitPerRevenue                           Float?
  debtRatio                                Float?
  debtEquityRatio                          Float?
  longTermDebtToCapitalization             Float?
  totalDebtToCapitalization                Float?
  interestCoverage                         Float?
  cashFlowToDebtRatio                      Float?
  companyEquityMultiplier                  Float?
  receivablesTurnover                      Float?
  payablesTurnover                         Float?
  inventoryTurnover                        Float?
  fixedAssetTurnover                       Float?
  assetTurnover                            Float?
  operatingCashFlowPerShare                Float?
  freeCashFlowPerShare                     Float?
  cashPerShare                             Float?
  payoutRatio                              Float?
  operatingCashFlowSalesRatio              Float?
  freeCashFlowOperatingCashFlowRatio       Float?
  cashFlowCoverageRatios                   Float?
  shortTermCoverageRatios                  Float?
  capitalExpenditureCoverageRatio          Float?
  dividendPaidAndCapexCoverageRatio        Float?
  dividendPayoutRatio                      Float?
  priceBookValueRatio                      Float?
  priceToSalesRatio                        Float?
  priceEarningsRatio                       Float?
  priceToFreeCashFlowsRatio                Float?
  priceToOperatingCashFlowsRatio           Float?
  priceCashFlowRatio                       Float?
  priceEarningsToGrowthRatio               Float?
  priceSalesRatio                          Float?
  dividendYield                            Float?
  enterpriseValueMultiple                  Float?
  priceFairValue                           Float?
  revenuePerShare                          Float?
  netIncomePerShare                        Float?
  bookValuePerShare                        Float?
  tangibleBookValuePerShare                Float?
  shareholdersEquityPerShare               Float?
  interestDebtPerShare                     Float?
  marketCap                                Float?
  enterpriseValue                          Float?
  peRatio                                  Float?
  pocfratio                                Float?
  pfcfRatio                                Float?
  pbRatio                                  Float?
  ptbRatio                                 Float?
  evToSales                                Float?
  enterpriseValueOverEBITDA                Float?
  evToOperatingCashFlow                    Float?
  evToFreeCashFlow                         Float?
  earningsYield                            Float?
  freeCashFlowYield                        Float?
  debtToEquity                             Float?
  debtToAssets                             Float?
  netDebtToEBITDA                          Float?
  incomeQuality                            Float?
  salesGeneralAndAdministrativeToRevenue   Float?
  researchAndDdevelopementToRevenue        Float?
  intangiblesToTotalAssets                 Float?
  capexToOperatingCashFlow                 Float?
  capexToRevenue                           Float?
  capexToDepreciation                      Float?
  stockBasedCompensationToRevenue          Float?
  grahamNumber                             Float?
  roic                                     Float?
  returnOnTangibleAssets                   Float?
  grahamNetNet                             Float?
  workingCapital                           Float?
  tangibleAssetValue                       Float?
  netCurrentAssetValue                     Float?
  investedCapital                          Float?
  averageReceivables                       Float?
  averagePayables                          Float?
  averageInventory                         Float?
  daysSalesOutstanding                     Float?
  daysPayablesOutstanding                  Float?
  daysOfInventoryOnHand                    Float?
  roe                                      Float?
  capexPerShare                            Float?
  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  errorMessage String?

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([stockId, calendarYear])
  @@index([stockId])
  @@index([calendarYear])
}
```


```ts
let uploadedSymbols = 0
const limit = pLimit(10)

await Promise.all(
  symbolBatches.map((batch) =>
    limit(async () => {
      const symbolsBatchString = batch.join(',')
      const [profileResponse, stockPeerResponse] = await Promise.all([
        fetch(
          `${FMP_API_URL}v3/profile/${symbolsBatchString}?apikey=${env.FMP_API_KEY}`,
          { cache: 'no-cache' }
        ),
        fetch(
          `${FMP_API_URL}v4/stock_peers?symbol=${symbolsBatchString}&apikey=${env.FMP_API_KEY}`,
          { cache: 'no-cache' }
        ),
      ])

      if (!profileResponse.ok || !stockPeerResponse.ok) {
        logger.error(
          'uploadStocks (fetch_error): error=Failed to fetch profile or stock peer data.'
        )
        return { error: 'Internal server error.' }
      }

      const profileData = await profileResponse.json()
      const stockPeerData = await stockPeerResponse.json()

      const upserts = profileData
        .map((data: Stock) => {
          const peersList = findPeersList(stockPeerData, data)
          const newStock = {
            ...data,
            peersList,
            price: undefined,
            volAvg: undefined,
            lastDiv: undefined,
            changes: undefined,
            phone: undefined,
            ipoDate: undefined,
            defaultImage: undefined,
            isAdr: undefined,
            targetHigh: undefined,
            targetLow: undefined,
            targetConsensus: undefined,
            targetMedian: undefined,
          }

          return db.stock.upsert({
            select: {
              id: true,
              symbol: true,
              financials: true,
            },
            where: { symbol: data.symbol },
            update: newStock,
            create: newStock,
          })
        })
        .filter(Boolean)

      try {
        const results = await db.$transaction(upserts)
        uploadedSymbols += results.length
        logger.info(
          'uploadStocks (uploaded_batch): includes=[%s, %s] symbolCount=%s',
          batch[0],
          batch[1],
          results.length
        )
      } catch (err) {
        if (err instanceof Error) {
          logger.error(
            'uploadStocks (database_error): symbolBatch=%s, error=%s',
            batch[0],
            err.message
          )
        }
      }
    })
  )
)
```


### Environment & setup

- OS: macOS
- Database: SQLite
- Node.js version: v20.0.0


### Prisma Version

```
5.14.0
```
",,
2301010339,24224,Remove validate call after format in CLI,"We currently perform another validation check on the formatted schema in the CLI which can then reject the whole format if that then doesn't pass validation.

Source: [cli/src/Format.ts#L58-L61](https://github.com/prisma/prisma/blob/942dba4c741d66788aedb4d3f4d5e938d14b9eea/packages/cli/src/Format.ts#L58-L61)

We do not do this second check in our VS Code extension, there we only run format and let the engines handle it. This second validate check can lead to confusing validation errors being emit:
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model song {
  id           String    @id
  artist       String?
  title        String?
  Artist       artist?   @relation(fields: [artist], references: [id])


  @@index([artist], name: ""artist_csbqvaulkkx3n7a_idx"")
}

model artist {
  id           String    @id
  name         String?
  song         String?

  @@index([song], name: ""song_pl7n5ch9hvpmdxp_idx"")
}
```

<img width=""426"" alt=""image"" src=""https://github.com/prisma/prisma/assets/29753584/609a83c8-84a0-4312-9a2a-fbab03633635"">

The schema from which this validation error was raised is never shown to you and so we plan to remove this second `validate` call",,
2298980607,24215,resetting database data,"### Bug description

every time I do npx prisma migrate dev even without having made any changes of any kind, without even inserting records into the database, it asks me to reset the database



Drift detected: Your database schema is not in sync with your migration history.

The following is a summary of the differences between the expected database schema given your migrations files, and the actual schema of the database.

It should be understood as the set of changes to get from the expected schema to the actual schema.

[*] Changed the `course` table
  [-] Removed foreign key on columns (course_CategoryId)
  [-] Removed foreign key on columns (creatorId)
  [-] Removed foreign key on columns (teacherId)

[*] Changed the `course_module` table
  [-] Removed foreign key on columns (courseId)

[*] Changed the `course_resources` table
  [-] Removed foreign key on columns (courseId)

[*] Changed the `team_company` table
  [-] Removed foreign key on columns (teamManagerId)

[*] Changed the `team_member` table
  [-] Removed foreign key on columns (teamId)
  [-] Removed foreign key on columns (userId)

[*] Changed the `ticket` table
  [-] Removed foreign key on columns (createdByUserId)
  [-] Removed foreign key on columns (recipientId)

[*] Changed the `ticket_message` table
  [-] Removed foreign key on columns (senderId)
  [-] Removed foreign key on columns (ticketId)

[*] Changed the `transactions` table
  [-] Removed foreign key on columns (userId)

[*] Changed the `user_course_module_progression` table
  [-] Removed foreign key on columns (moduleId)
  [-] Removed foreign key on columns (userId)

[*] Changed the `user_subsciption` table
  [-] Removed foreign key on columns (subscriptionId)
  [-] Removed foreign key on columns (userId)

? We need to reset the MySQL database ""...."" at ""localhost:3306""
Do you want to continue? All data will be lost. » (y/N)

### How to reproduce

<--- npx prisma migrate dev --->

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model User {
  id                             Int                              @id @default(autoincrement())
  email                          String                           @unique
  username                       String                           @unique
  firstname                      String?
  lastname                       String?
  avatar                         String?
  role                           Role                             @default(USER)
  ban                            Boolean                          @default(false)
  ticketsCreatedByUser           Ticket[]                         @relation(""CreatedByUser"")
  ticketsReceivedByUser          Ticket[]                         @relation(""ReceivedByUser"")
  User_Course_Module_Progression User_Course_Module_Progression[]
  User_Subsciption               User_Subsciption[]
  Transactions                   Transactions[]
  Ticket_Message                 Ticket_Message[]
  CourseCreator                  Course[]                         @relation(""Creator"")
  CourseTeacher                  Course[]                         @relation(""Teacher"")
  Team_Company                   Team_Company[]                   @relation(""TeamManager"")
  TeamMember                     Team_Member[]                    @relation(""TeamMember"")
}

model User_Course_Module_Progression {
  id       Int           @id @default(autoincrement())
  userId   Int
  moduleId Int
  dataOpen DateTime      @default(now()) @db.Timestamp(0)
  module   User          @relation(fields: [userId], references: [id])
  user     Course_Module @relation(fields: [moduleId], references: [id])
}

model User_Subsciption {
  id             Int           @id @default(autoincrement())
  userId         Int
  startDate      DateTime      @default(now()) @db.Timestamp(0)
  expireDate     DateTime      @db.Timestamp(0)
  User           User          @relation(fields: [userId], references: [id])
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int?
}

model Subscription {
  id               Int                @id @default(autoincrement())
  name             String             @default(""Free"")
  level            Int                @default(0)
  User_Subsciption User_Subsciption[]
}

model Course {
  id                Int                @id @default(autoincrement())
  title             String?
  description       Json?
  caption           String?
  image             String?
  creation_date     DateTime           @default(now()) @db.Timestamp(0)
  type              CourseType         @default(ASYNC)
  linkMeet          String?
  modules           Course_Module[]
  teacherId         Int?
  creatorId         Int?
  Teacher           User?              @relation(""Teacher"", fields: [teacherId], references: [id])
  Creator           User?              @relation(""Creator"", fields: [creatorId], references: [id])
  Course_Category   Course_Category?   @relation(fields: [course_CategoryId], references: [id])
  course_CategoryId Int?
  Certificate       String?
  Course_Resources  Course_Resources[]
}

model Course_Resources {
  id       Int     @id @default(autoincrement())
  courseId Int
  name     String?
  path     String?
  type     String?
  Course   Course  @relation(fields: [courseId], references: [id])
}

model Team_Company {
  id            Int           @id @default(autoincrement())
  name          String
  teamManagerId Int
  TeamManager   User?         @relation(""TeamManager"", fields: [teamManagerId], references: [id])
  Team_Member   Team_Member[]
}

model Team_Member {
  id          Int           @id @default(autoincrement())
  userId      Int
  teamId      Int
  TeamCompany Team_Company? @relation(fields: [teamId], references: [id])
  TeamMember  User?         @relation(""TeamMember"", fields: [userId], references: [id])
}

model Course_Category {
  id     Int      @id @default(autoincrement())
  title  String
  Course Course[]
}

model Course_Module {
  id                             Int                              @id @default(autoincrement())
  courseId                       Int
  title                          String?
  content                        Json?
  order                          Int?
  type                           ModulesType?
  Course                         Course                           @relation(fields: [courseId], references: [id])
  User_Course_Module_Progression User_Course_Module_Progression[]
}

model Transactions {
  id            Int         @id @default(autoincrement())
  userId        Int
  amount        Float
  creation_date DateTime    @default(now()) @db.Timestamp(0)
  serviceId     Int
  typeId        ServiceType
  User          User        @relation(fields: [userId], references: [id])
}

model Ticket {
  id              Int              @id @default(autoincrement())
  createdByUserId Int
  recipientId     Int
  creation_date   DateTime         @default(now()) @db.Timestamp(0)
  createdByUser   User             @relation(""CreatedByUser"", fields: [createdByUserId], references: [id])
  recipient       User             @relation(""ReceivedByUser"", fields: [recipientId], references: [id])
  userId          Int?
  Ticket_Message  Ticket_Message[]
}

model Ticket_Message {
  id            Int      @id @default(autoincrement())
  ticketId      Int
  senderId      Int
  creation_date DateTime @default(now()) @db.Timestamp(0)
  message       String   @db.Text()
  Ticket        Ticket   @relation(fields: [ticketId], references: [id])
  Sender        User     @relation(fields: [senderId], references: [id])
}

enum CourseType {
  SYNC
  ASYNC
}

enum ServiceType {
  SUBSCRIPTION
  LIVECOURSE
}

enum ModulesType {
  VIDEO
  QUIZ
  SLIDE
}

enum Role {
  USER
  TEAMMANAGER
  TEACHER
  ADMIN
}
```


### Environment & setup

Database Mysql locahost

### Prisma Version

5.14.0",,
2298371282,24210,PrismaClientInitializationError,"### Bug description

I am recentlly working on next js 14 project. For backent i choose prisma orm with supabase as a database.
Now i follow each and every step of prisma.
on Server off  (npm run dev )
All steps working fine prisma generate / prisma migrate . each and everything working fine.
But on Server on in my web app where i user prisma its throw an error that 
Prisma Client is not initialized and since my server is on npx prisma generate  also show an Error :

```
  EPERM:  operation not permitted, unlink 'C:\Users\zainn\Desktop\redit\reddit\node_modules\.prisma\client\query_engine-windows.dll.node .
```


I uses this code for generating prisma client . in my next js as i know its best practises

```typescript
import { PrismaClient } from ""@prisma/client"";

const prismaClientSingleton = () => {
  return new PrismaClient();
};

declare global {
  var prismaGlobal: undefined | ReturnType<typeof prismaClientSingleton>;
}

const prisma = globalThis.prismaGlobal ?? prismaClientSingleton();

export default prisma;

if (process.env.NODE_ENV !== ""production"") globalThis.prismaGlobal = prisma;
```

Then  i fetch prisma from here to use it but its throw error how to resolve this issue guide me.....

MAIN ERROR THAT IS SHOWING :

```
 ⨯ PrismaClientInitializationError: 
Invalid `prisma.user.findUnique()` invocation:

Can't reach database server at `aws-0-ap-south-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-ap-south-1.pooler.supabase.com:6543`.
    at In.handleRequestError (C:\Users\zainn\Desktop\redit\reddit\node_modules\@prisma\client\runtime\library.js:122:7177)
    at In.handleAndLogRequestError (C:\Users\zainn\Desktop\redit\reddit\node_modules\@prisma\client\runtime\library.js:122:6211)       
    at In.request (C:\Users\zainn\Desktop\redit\reddit\node_modules\@prisma\client\runtime\library.js:122:5919)
    at async l (C:\Users\zainn\Desktop\redit\reddit\node_modules\@prisma\client\runtime\library.js:127:11167)
    at async GET (webpack-internal:///(rsc)/./src/app/api/auth/creation/route.ts:24:18)
    at async C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:53446
    at async e_.execute (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:44747)
    at async e_.handle (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:54700)
    at async doRender (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\base-server.js:1377:42)
    at async cacheEntry.responseCache.get.routeKind (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\base-server.js:1599:28)
    at async DevServer.renderToResponseWithComponentsImpl (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\base-server.js:1507:28)
    at async DevServer.renderPageComponent (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\base-server.js:1924:24)  
    at async DevServer.renderToResponseImpl (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\base-server.js:1962:32) 
    at async DevServer.pipeImpl (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\base-server.js:920:25)
    at async NextNodeServer.handleCatchallRenderRequest (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\next-server.js:272:17)
    at async DevServer.handleRequestImpl (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\base-server.js:816:17)     
    at async C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\dev\next-dev-server.js:339:20
    at async Span.traceAsyncFn (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\trace\trace.js:154:20)
    at async DevServer.handleRequest (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\dev\next-dev-server.js:336:24)
    at async invokeRender (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\lib\router-server.js:174:21)
    at async handleRequest (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\lib\router-server.js:353:24)
    at async requestHandlerImpl (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\lib\router-server.js:377:13)
    at async Server.requestListener (C:\Users\zainn\Desktop\redit\reddit\node_modules\next\dist\server\lib\start-server.js:141:13) {
  clientVersion: '5.14.0',
  errorCode: undefined
}
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
5.14.0
```
",,
2297963384,24208,Bug: Migrations not compatible with D1,"### Bug description

Generated migrations for D1 (following [this guide](https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1#migration-workflows)) are not compatible with D1. When changing a table with relations, foreign keys are disabled and re-enabled with `PRAGMA foreign_keys=OFF;` and `PRAGMA foreign_keys=ON;`.
However, [D1 seems to need `PRAMGA defer_foreign_keys=ON;` and `PRAGMA defer_foreign_keys=OFF;`](https://developers.cloudflare.com/d1/reference/database-commands/#pragma-defer_foreign_keys--onoff) (also notice the swapped `ON` and `OFF`).

When applied, the migration fails with `✘ [ERROR] FOREIGN KEY constraint failed`.

### How to reproduce

Minimal reproduction: https://github.com/hrueger/prisma-24208

### Expected behavior

Migrations are generated with `PRAGMA defer_foreign_keys` instead so that the migration can be applied.

### Prisma information

```prisma

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  posts     Post[]
  // rename this field, let's say to `newField`
  oldField  String?
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}
```

### Environment & setup

- OS: macOS
- Database: Cloudflare D1 / SQLite
- Node.js version: 21.6.1


### Prisma Version

```
prisma                  : 5.14.0
@prisma/client          : 5.14.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli e9771e62de70f79a5e1c604a2d7c8e2a0a874b48 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-25.e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Default Engines Hash    : e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
Studio                  : 0.500.0
Preview Features        : driverAdapters
```
",,
2297860779,24204,"Error seeding DB via Prisma command, possible invocation error","### Bug description

While running `npx prisma db seed` on my Next.js app (to seed a Postgre db hosted on Vercel) I receive the following error message:

```
Start seeding ...
PrismaClientInitializationError:
Invalid `prisma.eventoEvent.upsert()` invocation in
C:\Training\evento\prisma\seed.ts:259:45

  256 console.log(`Start seeding ...`);
  257
  258 for (const event of events) {
→ 259   const result = await prisma.eventoEvent.upsert(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
    at ni.handleRequestError (C:\Training\evento\node_modules\@prisma\client\runtime\library.js:124:7090)
    at ni.handleAndLogRequestError (C:\Training\evento\node_modules\@prisma\client\runtime\library.js:124:6206)
    at ni.request (C:\Training\evento\node_modules\@prisma\client\runtime\library.js:124:5926)
    at async l (C:\Training\evento\node_modules\@prisma\client\runtime\library.js:129:10023) {
  clientVersion: '5.6.0',
  errorCode: undefined
}

An error occurred while running the seed command:
Error: Command failed with exit code 1: ts-node --compiler-options {""module"":""CommonJS""} prisma/seed.ts
```

### How to reproduce

1. Go to https://github.com/allthingsSmitty/evento
2. Download project code
3. Run `npm init` to get all dependencies
4. Run `npx prisma db seed`
5. See error

> [!Note]
>My `.env` variables that connect to Vercel's postgres db with secret password aren't included in the project. Not sure how to best get that to you. 

### Expected behavior

Expecting to see a response that the seeding of the db has completed successfully.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""POSTGRES_PRISMA_URL"") // uses connection pooling
  directUrl = env(""POSTGRES_URL_NON_POOLING"") // uses a direct connection
}

model EventoEvent {
  id            Int      @id @default(autoincrement())
  name          String
  slug          String   @unique
  city          String
  location      String
  date          DateTime
  organizerName String
  imageURL      String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

```

```ts
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient();

const events = [
  {
    id: 1,
    name: ""DJ Practice Session"",
    slug: ""dj-practice-session"",
    city: ""Austin"",
    location: ""Austin Music Hall"",
    date: ""2030-10-12T00:00:00.000Z"",
    organizerName: ""DJ Inc."",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Join us for an immersive DJ practice session at the DJ Beats Workshop! Whether you're a beginner aspiring to spin the decks or an experienced DJ looking to refine your skills, this event is tailored just for you. Dive into the world of beats, mixes, and electronic rhythms under the guidance of seasoned DJs and music producers. Showcase your skills during our open decks session. Share your favorite tracks, experiment with live remixing, and receive applause and feedback from a supportive audience."",
  },
  {
    id: 2,
    name: ""Harmony Festival"",
    slug: ""harmony-festival"",
    city: ""Austin"",
    location: ""Austin Convention Center"",
    date: ""2030-11-15T00:00:00.000Z"",
    organizerName: ""Music Enthusiasts LLC"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Harmony Festival is a celebration of all music genres, bringing together musicians, artists, and music enthusiasts from around the world. Experience a day filled with live performances, interactive workshops, and a vibrant atmosphere of creativity and harmony. Join us for an unforgettable musical journey!"",
  },
  {
    id: 3,
    name: ""3D Animation Workshop"",
    slug: ""3d-animation-workshop"",
    city: ""Austin"",
    location: ""Austin Convention Center"",
    date: ""2030-12-08T00:00:00.000Z"",
    organizerName: ""3D Animators Inc."",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Dive into the captivating world of 3D animation at our exclusive 3D Animation Masterclass! Whether you're an aspiring animator, a student studying animation, or a professional looking to enhance your skills, this workshop offers a unique opportunity to learn from industry experts and elevate your animation prowess."",
  },
  {
    id: 4,
    name: ""Rock the City Concert"",
    slug: ""rock-the-city-concert"",
    city: ""Austin"",
    location: ""Austin Music Hall"",
    date: ""2030-11-18T00:00:00.000Z"",
    organizerName: ""Rock On Productions"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Get ready to rock out at Rock the City Concert! Experience electrifying performances by top rock bands, enjoy high-energy music, and immerse yourself in an unforgettable night of pure rock and roll."",
  },
  {
    id: 5,
    name: ""Artisan Craft Fair"",
    slug: ""artisan-craft-fair"",
    city: ""Seattle"",
    location: ""Seattle Exhibition Center"",
    date: ""2030-12-01T00:00:00.000Z"",
    organizerName: ""Craftsmanship Guild"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Discover unique handmade crafts and artworks at the Artisan Craft Fair. Meet talented artisans, shop for one-of-a-kind items, and support local craftsmanship. Join us for a day of creativity and craftsmanship."",
  },
  {
    id: 6,
    name: ""Jazz Fusion Night"",
    slug: ""jazz-fusion-night"",
    city: ""Austin"",
    location: ""Austin Jazz Lounge"",
    date: ""2030-11-29T00:00:00.000Z"",
    organizerName: ""Groove Masters Productions"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Indulge in the smooth melodies and rhythmic beats of jazz fusion at Jazz Fusion Night. Experience world-class jazz performances, savor delicious cocktails, and immerse yourself in the soulful ambiance of live jazz music."",
  },
  {
    id: 7,
    name: ""Indie Music Showcase"",
    slug: ""indie-music-showcase"",
    city: ""Austin"",
    location: ""Austin Indie Spot"",
    date: ""2030-11-25T00:00:00.000Z"",
    organizerName: ""Indie Vibes Records"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Discover the next big indie artists at the Indie Music Showcase. Experience live performances by emerging talents, support independent music, and be part of a vibrant community of music enthusiasts and artists."",
  },
  {
    id: 8,
    name: ""Global Food Festival"",
    slug: ""global-food-festival"",
    city: ""Seattle"",
    location: ""Seattle Waterfront Park"",
    date: ""2030-10-30T00:00:00.000Z"",
    organizerName: ""Foodie Ventures Inc."",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Embark on a culinary journey around the world at the Global Food Festival. Delight your taste buds with international cuisines, cooking demonstrations, and food tastings. Experience the flavors of different cultures in one delicious event."",
  },
  {
    id: 9,
    name: ""Tech Innovators Summit"",
    slug: ""tech-innovators-summit"",
    city: ""Seattle"",
    location: ""Seattle Convention Center"",
    date: ""2030-11-15T00:00:00.000Z"",
    organizerName: ""InnovateTech Inc."",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""The Tech Innovators Summit is where visionaries, entrepreneurs, and tech enthusiasts converge. Explore the latest technological advancements, attend insightful keynotes from industry leaders, and participate in hands-on workshops. Connect with innovators, pitch your ideas, and be a part of shaping the future of technology."",
  },
  {
    id: 10,
    name: ""Enchanted Garden Gala"",
    slug: ""enchanted-garden-gala"",
    city: ""Austin"",
    location: ""Austin Museum of Art"",
    date: ""2030-12-02T00:00:00.000Z"",
    organizerName: ""Cultural Garden Society"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Step into a world of wonder at the Enchanted Garden Gala, a magical evening of art, music, and fantasy. Explore enchanting garden installations, experience live performances by world-class musicians and dancers, and indulge in gourmet delicacies. Dress in your most glamorous attire and immerse yourself in a night of elegance and enchantment."",
  },
  {
    id: 11,
    name: ""Comedy Extravaganza"",
    slug: ""comedy-extravaganza"",
    city: ""Austin"",
    location: ""Austin Laugh Factory"",
    date: ""2030-11-06T00:00:00.000Z"",
    organizerName: ""Laugh Productions"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Prepare for a night of laughter with top comedians from around the world. Enjoy stand-up, improv, and sketches that will have you in stitches!"",
  },
  {
    id: 12,
    name: ""Science and Space Expo"",
    slug: ""science-space-expo"",
    city: ""Seattle"",
    location: ""Seattle Science Center"",
    date: ""2030-10-29T00:00:00.000Z"",
    organizerName: ""Cosmic Explorers Society"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Explore the wonders of science and space at this interactive expo. Engage in hands-on experiments, meet scientists, and learn about the mysteries of the universe."",
  },
  {
    id: 13,
    name: ""Fashion Runway"",
    slug: ""fashion-runway"",
    city: ""Austin"",
    location: ""Austin Fashion Week Venue"",
    date: ""2030-11-12T00:00:00.000Z"",
    organizerName: ""Chic Trends Agency"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Witness the latest trends on the runway. Top designers will showcase their collections, setting the stage for the future of fashion."",
  },
  {
    id: 14,
    name: ""Culinary Masterclass"",
    slug: ""culinary-masterclass"",
    city: ""Seattle"",
    location: ""Seattle Epicurean Institute"",
    date: ""2030-12-02T00:00:00.000Z"",
    organizerName: ""Gourmet Chefs Society"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Join renowned chefs for a culinary journey. Learn cooking techniques, taste exquisite dishes, and elevate your skills in the art of gastronomy."",
  },
  {
    id: 15,
    name: ""Film Buffs Symposium"",
    slug: ""film-buffs-symposium"",
    city: ""Austin"",
    location: ""Austin Film Institute"",
    date: ""2030-11-08T00:00:00.000Z"",
    organizerName: ""Cinema Society"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""A gathering for film enthusiasts! Screen classic movies, engage in discussions with filmmakers, and gain insights into the world of cinema."",
  },
  {
    id: 16,
    name: ""Literary Salon"",
    slug: ""literary-salon"",
    city: ""Seattle"",
    location: ""Seattle & Co. Bookstore"",
    date: ""2030-12-15T00:00:00.000Z"",
    organizerName: ""Words Society"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Celebrate the written word at this literary gathering. Listen to readings by acclaimed authors, participate in book discussions, and embrace the magic of storytelling."",
  },
  {
    id: 17,
    name: ""Wellness Expo"",
    slug: ""wellness-expo"",
    city: ""Austin"",
    location: ""Austin Convention Center"",
    date: ""2030-11-30T00:00:00.000Z"",
    organizerName: ""Wellness Warriors Inc."",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Immerse yourself in the world of fitness and well-being. Attend fitness classes, learn about nutrition, and explore holistic approaches to health."",
  },
  {
    id: 18,
    name: ""Digital Art Symposium"",
    slug: ""digital-art-symposium"",
    city: ""Seattle"",
    location: ""Seattle Art Gallery"",
    date: ""2030-11-01T00:00:00.000Z"",
    organizerName: ""Tech Creatives Collective"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Discover the intersection of technology and art. Experience digital art installations, attend VR workshops, and meet digital artists pushing creative boundaries."",
  },
  {
    id: 19,
    name: ""Dance Fusion Festival"",
    slug: ""dance-fusion-festival"",
    city: ""Austin"",
    location: ""Austin Street Dance Studio"",
    date: ""2030-11-28T00:00:00.000Z"",
    organizerName: ""Rhythm Revolution"",
    imageURL:
      ""https://images.unsplash.com/photo-1642178225043-f299072af862?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=100"",
    description:
      ""Experience a blend of dance styles from around the world. Participate in dance workshops, watch electrifying performances, and dance the night away."",
  },
];

async function main() {
  console.log(`Start seeding ...`);

  for (const event of events) {
    const result = await prisma.eventoEvent.upsert({
      where: { id: event.id },
      update: {},
      create: event,
    });
    console.log(`Created event with id: ${result.id}`);
  }

  console.log(`Seeding finished.`);
}

console.log(JSON.stringify(events, null, 2));

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });

```


### Environment & setup

- OS: Windows
- Database: PostgreSQL (on Vercel)
- Node.js version: 21.6.2


### Prisma Version

```
5.6.0
```
",,
2297253111,24201, Install fail! Error: [prisma@5.14.0 › @prisma/engines@5.14.0] Can't find package @prisma/engines's version: 5.14.0 ,"### Bug description

 > [6/9] RUN cnpm install:                                                                                                                                                                  
9.786 ✖ Install fail! Error: [prisma@5.14.0 › @prisma/engines@5.14.0] Can't find package @prisma/engines's version: 5.14.0                                                                  
9.787 Error: [prisma@5.14.0 › @prisma/engines@5.14.0] Can't find package @prisma/engines's version: 5.14.0                                                                                  
9.787     at resolve (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/download/npm.js:118:11)                                                                                  
9.787     at async module.exports (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/download/npm.js:22:19)                                                                      
9.787     at async module.exports (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/download/index.js:19:10)
9.787     at async _install (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/install_package.js:122:16)
9.787     at async install (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/install_package.js:23:12)
9.787     at async mapper (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/install_package.js:270:9)
9.787 npminstall version: 7.12.0
9.787 npminstall argv: /usr/local/bin/node /usr/local/lib/node_modules/cnpm/node_modules/npminstall/bin/install.js --fix-bug-versions --china --userconfig=/root/.cnpmrc --disturl=https://cdn.npmmirror.com/binaries/node --registry=https://registry.npmmirror.com

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
 ""@prisma/client"": ""5.13.0"",
""prisma"": ""^5.13.0"",
```
",,
2297167094,24199,"When using `pnpm` and deploying Prisma Client to Heroku, it fails at runtime with `Cannot find module '.prisma/client'`","### Bug description

Here is the error, from our `platforms (heroku, library, ubuntu-20.04)` test.
https://github.com/prisma/ecosystem-tests/actions/runs/9091632780/job/24986713804#step:8:4114
```
2024-05-15T07:36:15.186332+00:00 app[web.1]: > heroku@1.0.0 start
2024-05-15T07:36:15.186333+00:00 app[web.1]: > node index.js
2024-05-15T07:36:15.186333+00:00 app[web.1]: 
2024-05-15T07:36:15.297904+00:00 app[web.1]: Example app listening on port 45358!
2024-05-15T07:36:15.599760+00:00 heroku[web.1]: State changed from starting to up
2024-05-15T07:36:17.599044+00:00 app[web.1]: node:internal/modules/cjs/loader:1145
2024-05-15T07:36:17.599061+00:00 app[web.1]: const err = new Error(message);
2024-05-15T07:36:17.599065+00:00 app[web.1]: ^
2024-05-15T07:36:17.599065+00:00 app[web.1]: 
2024-05-15T07:36:17.599065+00:00 app[web.1]: Error: Cannot find module '.prisma/client'
2024-05-15T07:36:17.599066+00:00 app[web.1]: Require stack:
2024-05-15T07:36:17.599066+00:00 app[web.1]: - /app/index.js
2024-05-15T07:36:17.599072+00:00 app[web.1]: at Module._resolveFilename (node:internal/modules/cjs/loader:1145:15)
2024-05-15T07:36:17.599073+00:00 app[web.1]: at Function.resolve (node:internal/modules/helpers:190:19)
2024-05-15T07:36:17.599078+00:00 app[web.1]: at /app/index.js:12:53
2024-05-15T07:36:17.599079+00:00 app[web.1]: at Layer.handle [as handle_request] (/app/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:95:5)
2024-05-15T07:36:17.599080+00:00 app[web.1]: at next (/app/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:149:13)
2024-05-15T07:36:17.599081+00:00 app[web.1]: at Route.dispatch (/app/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/route.js:119:3)
2024-05-15T07:36:17.599081+00:00 app[web.1]: at Layer.handle [as handle_request] (/app/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/layer.js:95:5)
2024-05-15T07:36:17.599082+00:00 app[web.1]: at /app/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:284:15
2024-05-15T07:36:17.599082+00:00 app[web.1]: at Function.process_params (/app/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:346:12)
2024-05-15T07:36:17.599083+00:00 app[web.1]: at next (/app/node_modules/.pnpm/express@4.19.2/node_modules/express/lib/router/index.js:280:10) {
2024-05-15T07:36:17.599083+00:00 app[web.1]: code: 'MODULE_NOT_FOUND',
2024-05-15T07:36:17.599083+00:00 app[web.1]: requireStack: [ '/app/index.js' ]
2024-05-15T07:36:17.599083+00:00 app[web.1]: }
2024-05-15T07:36:17.599086+00:00 app[web.1]: 
2024-05-15T07:36:17.599090+00:00 app[web.1]: Node.js v20.13.1
```

### How to reproduce

See https://github.com/prisma/ecosystem-tests/tree/dev/platforms/heroku

### Expected behavior

It should work (it was working before)

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->

### Environment & setup

- OS: Linux
- Database: NA
- Node.js version: 20.13.1


### Prisma Version

5.15.0-dev.5 for example, but all versions should be affected as it's not a regression from Prisma's side but a change in the buildpack used by Heroku.
",,
2295879540,24185,I'm using using prisma in auth.config.ts and Its giving vercel edge errors,"### Bug description

I'm just created a server function to find a user by email using prisma client and it's giving me this error.
[Error: PrismaClient is unable to run in Vercel Edge Functions or Edge Middleware. As an alternative, try Accelerate: https://pris.ly/d/accelerate.

Please either fix it or remove this for one's that are not using the vercel edge functions. You can ask when installing the prisma to choose whether use with vercel edge functions or not, If someone wants to use he will select yes, if someone don't really need these edge function then this error message should not be appeared to them

Please consider fixing it as soon as possible

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

This should work fine without this weird vercel edge function or middleware error message to trash the console

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.9.0


### Prisma Version

```
I'm using the latest version 5.14.0
```
",,
2295876674,24184,internal error: entered unreachable code,"### Bug description

got a PrismaClientRustPanicError 

```
at In.request (/usr/src/app/node_modules/.prisma/sqlite/runtime/library.js:122:5896)\n    at async l (/usr/src/app/node_modules/.prisma/sqlite/runtime/library.js:127:11167)\n    at async main (/usr/src/app/build/cmd/debit.js:66:13)"",""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.13.0""}
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2295410628,24182,Types broken on void clients (no models),"### Bug description

Due to the change introduced yesterday by https://github.com/prisma/prisma/pull/24160, void clients can now be created (yay!!). However, they aren't complete typescript-wise. The prismaClient.$extends API will throw typescript errors when used.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2294889763,24180,Prisma Migrate removes the results of custom migrations in the next `migrate dev` run,"### Bug description

For a multitude of different reasons users need to use custom SQL for unsupported Prisma features. One such feature I am trying to implement is native full text search, which requires me to add a tsvector column to my table and a GIN index. The [documentation](https://www.prisma.io/docs/orm/prisma-migrate/workflows/unsupported-database-features#customize-a-migration-to-include-an-unsupported-feature) outlines how to customize a migration, which has worked for me. However, I am now trying to create another table, and when I try to create a migration for it, the generated migration drops my custom column and index. 

Since my development database was populated with test data, I was able to catch on as Prisma warned of its attempt to push these changes onto the database itself. However, without data in dev, there is no warning and the migration is generated straight away. If deployed to production, this would wipe out the data I had, which is not really acceptable. 

I believe that Prisma should a) warn of destructive actions like dropping columns/indices before generating migrations and b) not have this issue of dropping in the first place. Thoughts? 

### How to reproduce

1. Create migration with given schema
2. Generate a new migration without applying it with `prisma migrate dev --create-only`
3. Add the given SQL into the empty migration
4. Apply migration
5. Optionally edit the schema in some way
6. Create migration for changes (if no changes, a migration with only the drop commands are created)

### Expected behavior

Prisma shouldn't drop my custom migration

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
    provider = ""postgresql""
    url      = env(""DB_URL"")
}
generator client {
    provider = ""prisma-client-js""
}
model Video {
    id        Int         @id @default(autoincrement())
    title     String
    alttitle  String
    summary   String
}
```
```sql
ALTER TABLE ""Video"" ADD search tsvector GENERATED ALWAYS AS 
    (setweight(to_tsvector('english', title), 'A') || ' ' || 
    setweight(to_tsvector('english', alttitle), 'B') || ' ' ||
    to_tsvector('english', summary)) STORED;

CREATE INDEX idx_search ON ""Video"" USING GIN(search);
```

### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: 18.17.1


### Prisma Version

```
5.13.0
```
",,
2294398002,24179,VSCode Autocomplete Not Functioning When Extending Prisma Schema,"### Bug description

While extending Prisma, the autocomplete feature in Visual Studio Code (VSCode) is not functioning correctly. 




### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

1. Save the below code in the file 

```
import { PrismaClient } from '@prisma/client'
// export const db = new PrismaClient()

export const db = new PrismaClient().$extends({
  result: {
    organizationEmail: {
      emailAddress: {
        needs: { email: true, domain: { select: { domain: true } } },
        compute(email) {
          return `${email.email}@${email.domain.domain}`
        }
      }
    }
  }
})

const main = async () => {
    await db.
}

main()
```

2. Run the prisma generate 
3. Write a code snippet with await db. and press Ctrl (or Command on Mac) + Space to trigger autocomplete
4. Observe that the autocomplete feature is not working as expected.

Check the below screenshot
![Screenshot 2024-05-14 at 10 04 24 AM](https://github.com/prisma/prisma/assets/13059766/ce7bc54c-6dd7-4cb6-91f3-d138e45f47fd)

### Expected behavior

The autocomplete feature should suggest relevant fields, models, and other Prisma schema elements, facilitating easier and more accurate schema extensions. It should display the autocomplete suggestions as shown in the below screenshot.

![Screenshot 2024-05-14 at 10 13 31 AM](https://github.com/prisma/prisma/assets/13059766/4f1f5b71-addf-4b46-ac4c-0589dc4485b1)


### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```
```
model Organization {
  id                    Int      @id @default(autoincrement()) /// Organization Id
  name                  String /// Organization name
  sitename              String   @unique ///represents a unique identifier for a organization site
  subdomain             String? ///represents a subdomain in a domain hierarchy
  domain                String? ///it represents the main identifier of a location
  customPortalDomain    String?  @map(""custom_portal_domain"") ///it refers to the  workplace of the customer
  customCustomerDomain  String?  @map(""custom_customer_domain"") ///it refers to the end customer of the customer

  @@map(""organizations"")
}
```



### Environment & setup

- OS: macOS <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: PostgreSQL <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: v20.10.0 <!--[Run `node -v` to see your Node.js version]-->
- Vscode Prisma Extension Version: 5.13.1


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/prisma/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/prisma/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0

```",,
2292494623,24171,Support for manually managing prepared statements,"## Problem

Currently, Prisma ORM prepares queries dynamically each time a CRUD operation is performed on a table. This can result in unnecessary overhead, while in complex queries e.g. nesting relations and selecting fields, it can significantly reduce the performance. especially when the same query is executed multiple times with different values it does not make sense to build the query on each execution when only a few fixed parameters are changed.

## Comparison with Existing Feature:

Drizzle ORM: drizzle-orm provides support for prepared statement which can be used to prebuild queries to use later with dynamic parameters. below snipped from the official docs.

```

import { sql } from ""drizzle-orm"";

const p1 = db
  .select()
  .from(customers)
  .where(eq(customers.id, sql.placeholder('id')))
  .prepare(""p1"")
await p1.execute({ id: 10 }) // SELECT * FROM customers WHERE id = 10
await p1.execute({ id: 12 }) // SELECT * FROM customers WHERE id = 12
const p2 = db
  .select()
  .from(customers)
  .where(sql`lower(${customers.name}) like ${sql.placeholder('name')}`)
  .prepare(""p2"");
await p2.execute({ name: '%an%' }) // SELECT * FROM customers WHERE name ilike '%an%'

```

Similar to prisma.$queryRaw, prepared statements offer the advantage of dynamic query execution. However, they provide 100% type safety just like prisma's ordinary table methods.

## Suggested solution

Introduce support for prepared statements in Prisma ORM. Prepared statements act as pre-defined query templates that can be constructed once and reused with varying parameters. This approach can improve query performance and simplify code complexity.
For the above feature I expect a similar FluentApi to build a prepared statement or alternatively expected syntax can be :

```
const findUserPrepared = prisma.users.prepare((options: { username: string }, prepare) => {
  return prepare.findUnique({
    where: {
      username: options.username
    }
  });
});

// This function should have prepared query something like this ""SELECT id, username, password, firstName, lastName from users where username='${options.username}'"" and have as strongly typed return type as prisma.users.findUnique({where:{username:""kavya""}})
findUserPrepared({ username: ""kavya"" }).then((user) => {
  user.id
  user.username
  // Handle user data
});

```





",,
2291450453,24164,"Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got","### Bug description

I am using prisma and mongodb. Reading about it. It seems that there is a problem when it comes to id and ObjectId creating a conflict between JSON and BSON.

The error message I get is... 
```
 ⨯ PrismaClientKnownRequestError: 
Invalid `prisma.user.create()` invocation:


Inconsistent column data: Malformed ObjectID: provided hex string representation must be exactly 12 bytes, instead got: ""clw3v5mxf0000bcnozfh4f95w"", length 25 for the field 'id'.
    at async $$ACTION_0 (./actions/signup.ts:41:5)
digest: ""1066896185""
 POST /sign-up 500 in 522ms
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

I am expecting a new user to be saved from a user registration (auth) page, in Mongodb. But it will not accept the Id.

signup.ts
```
""use server"";
import { SignupSchema } from ""@/schemas/auth-schemas"";

import * as z from ""zod"";
import bcrypt from ""bcrypt"";
import { db } from ""@/lib/db"";
// import { ObjectId } from 'bson'

export const signup =  async (values: z.infer<typeof SignupSchema>) => {
    const validatedFields = SignupSchema.safeParse(values);

    if (!validatedFields.success) {
        return { error: ""Invalid credentials!"" };
    }

const { email, password, name } = validatedFields.data;
const hashedPassword = await bcrypt.hash(password, 10);
// const id = new ObjectId()

const existingUser = await db.user.findUnique({
    where: {
        email,
    }
});

if (existingUser) {
    return { error: ""An account for that email already exists!""};
}

await db.user.create({
    data: {
        name,
        email,
        password: hashedPassword,
    },
});


// TODO: Send verifcation token email

    return { success: ""MYVOC account created!"" }
};

```
### Prisma information

```
import { ObjectId } from 'bson'

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}
const id = new ObjectId()

model User {
  id            String          @id @default(cuid()) @map(""_id"") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map(""_id"") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
```

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2291395662,24163,Run Prisma on docker use elysia/Bun js,"### Bug description

I got err when run my app that use prisma as orm, for my case I was success generate prisma but somehow at runtime doesn't success initial  prisma and got this err message:

```
Init prisma connection
elysia-app-1  | Error Connecting to Prisma:  38 | var clientVersion = version;
elysia-app-1  | 39 |
elysia-app-1  | 40 | // src/scripts/default-index.ts
elysia-app-1  | 41 | var PrismaClient = class {
elysia-app-1  | 42 |   constructor() {
elysia-app-1  | 43 |     throw new Error(
elysia-app-1  |                ^
elysia-app-1  | error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
elysia-app-1  | In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
elysia-app-1  |       at new PrismaClient (/app/node_modules/.prisma/client/default.js:43:11)
elysia-app-1  |       at prismaConnection (/app/src/dependency-injection/dependency-injection.init.ts:13:34)
elysia-app-1  |       at new Application (/app/src/dependency-injection/dependency-injection.ts:30:57)
elysia-app-1  |       at /app/src/dependency-injection/dependency-injection.ts:66:20
elysia-app-1  |
elysia-app-1  | 38 | var clientVersion = version;
elysia-app-1  | 39 |
elysia-app-1  | 40 | // src/scripts/default-index.ts
elysia-app-1  | 41 | var PrismaClient = class {
elysia-app-1  | 42 |   constructor() {
elysia-app-1  | 43 |     throw new Error(
elysia-app-1  |                ^
elysia-app-1  | error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
elysia-app-1  | In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
elysia-app-1  |       at new PrismaClient (/app/node_modules/.prisma/client/default.js:43:11)
elysia-app-1  |       at prismaConnection (/app/src/dependency-injection/dependency-injection.init.ts:13:34)
elysia-app-1  |       at new Application (/app/src/dependency-injection/dependency-injection.ts:30:57)
elysia-app-1  |       at /app/src/dependency-injection/dependency-injection.ts:66:20
```

But before that I was success build the image: 
```
 => [elysia-app internal] load build definition from Dockerfile                                                                                                                                                                  0.0s
 => => transferring dockerfile: 594B                                                                                                                                                                                             0.0s 
 => [elysia-app internal] load metadata for docker.io/oven/bun:latest                                                                                                                                                           10.1s 
 => [elysia-app auth] oven/bun:pull token for registry-1.docker.io                                                                                                                                                               0.0s
 => [elysia-app internal] load .dockerignore                                                                                                                                                                                     0.0s
 => => transferring context: 2B                                                                                                                                                                                                  0.0s 
 => [elysia-app 1/9] FROM docker.io/oven/bun:latest@sha256:6ffc613400a5b69c0b0f0e1d5d954b1656b928f4b254a340dc1fd03377dd7151                                                                                                      0.0s 
 => [elysia-app internal] load build context                                                                                                                                                                                     0.1s 
 => => transferring context: 8.16kB                                                                                                                                                                                              0.0s 
 => CACHED [elysia-app 2/9] WORKDIR /app                                                                                                                                                                                         0.0s
 => CACHED [elysia-app 3/9] COPY package.json .                                                                                                                                                                                  0.0s 
 => CACHED [elysia-app 4/9] COPY bun.lockb .                                                                                                                                                                                     0.0s 
 => CACHED [elysia-app 5/9] COPY tsconfig.json .                                                                                                                                                                                 0.0s 
 => [elysia-app 6/9] COPY prisma prisma                                                                                                                                                                                          0.1s 
 => [elysia-app 7/9] COPY src src                                                                                                                                                                                                0.1s
 => [elysia-app 8/9] RUN bun install --frozen-lockfile --production                                                                                                                                                              8.3s
 => [elysia-app 9/9] RUN bunx prisma generate                                                                                                                                                                                    1.8s
 => [elysia-app] exporting to image                                                                                                                                                                                              0.9s
 => => exporting layers                                                                                                                                                                                                          0.8s
 => => writing image sha256:8af836ddbe513ee17b2b4c978cc033a451acec6b01f33e72d9c5199b398532ed                                                                                                                                     0.0s
 => => naming to docker.io/library/be-assignment-elysia-app 
```

this my dockerfile 
```
FROM oven/bun:latest
# Set working directory
WORKDIR /app

# Copy package.json and bun.lockb for dependency installation
COPY package.json .
COPY bun.lockb .

# Copy other necessary files
COPY tsconfig.json .
COPY prisma prisma
COPY src src

# Install dependencies using bun
RUN bun install --frozen-lockfile --production

# Set NODE_ENV to production
ENV NODE_ENV production

# Generate Prisma client
RUN bunx prisma generate

# Expose port
EXPOSE 3000

# Define the command to run your application
CMD [""bun"", ""src/index.ts""]

```

### How to reproduce

<!--
1. run docker compose up and create image at this dockerfile
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2291193773,24159,Unable to require libquery_engine-debian-openssl-3.0.x.so.node,"### Bug description

Using Prisma ORM with rage mp server. It's compiling to js file. On windows all works perfect. On ubuntu 22.04 i got:

```
PrismaClientInitializationError:
Invalid `prisma.service.findMany()` invocation:


Unable to require(`/media/amazon/linux/node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/libquery_engine-debian-openssl-3.0.x.so.node`).
The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements

Details: /media/amazon/linux/node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/libquery_engine-debian-openssl-3.0.x.so.node: undefined symbol: napi_create_promise
    at In.handleRequestError (/media/amazon/linux/packages/server/index.js:31027:19)
    at In.handleAndLogRequestError (/media/amazon/linux/packages/server/index.js:31005:16)
    at In.request (/media/amazon/linux/packages/server/index.js:30996:16)
    at l (/media/amazon/linux/packages/server/index.js:31396:21)
    at loadServices (/media/amazon/linux/packages/server/index.js:95560:20)
    at App.init (/media/amazon/linux/packages/server/index.js:98668:7) {
  clientVersion: '5.13.0',
  errorCode: undefined
}
```

### How to reproduce

Install ubuntu 22.04 jammy.
Install all system requirements as on documentation required.
Build simple typescript project.
Try to run and see error.

### Expected behavior

Prisma works as on Windows, bcs on windows it's works perfect with ragemp server.

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""debian-openssl-3.0.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator json {
  provider = ""prisma-json-types-generator""
}
```

```ts
import { PrismaClient } from '@prisma/client'

export const prisma = new PrismaClient()

const services = await prisma.service.findMany()

    services.map((serviceLocal, index) => {
        const service = items[serviceLocal.name]
        service.load(
            serviceLocal.position as PositionEx & { radius?: number },
            index,
        )
    })

    logger.success(`Services loaded: ${Object.keys(items).length}`)
```


### Environment & setup

- OS: Ubuntu 22.04 jammy
- Database: PostgreSQL
- Node.js version: v18.20.2

```
root@amazon-project:/media/amazon# gcc --version
gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
Copyright (C) 2021 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```

```
root@amazon-project:/media/amazon# openssl version
OpenSSL 3.0.2 15 Mar 2022 (Library: OpenSSL 3.0.2 15 Mar 2022)
```

```
root@amazon-project:/media/amazon# sudo apt install zlib1g
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
zlib1g is already the newest version (1:1.2.11.dfsg-2ubuntu9.2).
0 upgraded, 0 newly installed, 0 to remove and 2 not upgraded.
```


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.20.2
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0

```
",,
2290542902,24155,"ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: ""42P05"", message: ""prepared statement \""s0\"" already exists"", severity: ""ERROR"", detail: None, column: None, hint: None }), transient: false })] ","### Bug description

ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: ""42P05"", message: ""prepared statement \""s0\"" already exists"", severity: ""ERROR"", detail: None, column: None, hint: None }), transient: false })] 


  15 async migrateClient(client: FirebaseFirestore.DocumentData){
  16     try {
  17         const phoneNumber = client.phoneNumber.includes('+') ? parseInt(client.phoneNumber.replace('+', ''), 10) : parseInt(client.phoneNumber);   
→ 18         const clientExists = await this.prisma.userInfo.findUnique(
Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: ""42P05"", message: ""prepared statement \""s0\"" already exists"", severity: ""ERROR"", detail: None, column: None, hint: None }), transient: false })] Error checking if client exists


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[Windows ...]-->
- Database: <!--[PostgreSQL on supabase]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
    ""@prisma/client"": ""^5.12.1"",

```
",,
2289945053,24152, Error Thrown When Sorting Field Is Not Selected,"Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v20.10.0           | 
| OS              | darwin-arm64       |
| Prisma Client   | 5.3.1              |
| Query Engine    | 61e140623197a131c2a6189271ffee05a7aa9a59|
| Database        | sqlserver          |



## Logs
```
PrismaClientRustPanicError:
Invalid `client.post.findMany()` invocation in
/build/index.js

  61         })];
  62 case 1:
  63     id = (_a.sent()).id;
→ 64     return [4 /*yield*/, client.post.findMany(
no entry found for key

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
```

## Client Snippet
```ts
  await client.user.create({
    data: {
      posts: {
        createMany: {
          data: Array(4000).fill({title: 'post'}),
        }
      }
    }
  });

  await client.post.findMany({
    where: { authorId: { in: Array.from(Array(4000).keys()) }},
    select: {id: true, title: true},
    orderBy: {createdAt: 'asc'},
  });

```

## Schema
```prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider          = ""sqlserver""
  url               = env(""DATABASE_URL"")
  shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
}

model User {
  id       Int      @id @default(autoincrement())
  posts    Post[]
}

model Post {
  id        Int    @id @default(autoincrement())
  title     String
  author    User   @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}
```

## Description

I've noticed that whenever a query is split (due to the maximum parameter constraint of 2100 in SQL Server), Prisma attempts to perform an in-memory sort. 
However, if the field being sorted is not selected, an error is thrown. 

To fix this issue, I had to always include the field used for sorting in the selected fields.

",,
2288775037,24146,"In ""prisma"" mode, executing prisma db pull results in the loss of generated fields.","### Bug description

 In ""prisma"" mode, executing prisma db pull will throw an error: ""Error validating: The argument fields must refer only to existing fields. The following fields do not exist in this model: xxId.""

### How to reproduce


1.

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider     = ""mysql""
  url          = env(""MY_SQL_URL"")
  relationMode = ""prisma""
}

model File {
  id               String   @id @db.VarChar(20)
  User             User[]

  @@map(""file"")
}

model User {
  id         String    @id @db.VarChar(20)
  file       File?     @relation(references: [id], fields: [fileId])
  fileId     String?   @db.VarChar(20)

  @@map(""user"")
  @@index([fileId])
}
```

2. `prisma db pull`
3. 
```
model File {
  id               String   @id @db.VarChar(20)
  User             User[]

  @@map(""file"")
}

model User {
  id         String    @id @db.VarChar(20)
 file       File?     @relation(fields: [fileId], references: [id])

  @@map(""user"")
}
```

### Expected behavior

```
model File {
  id               String   @id @db.VarChar(20)
  User             User[]

  @@map(""file"")
}

model User {
  id         String    @id @db.VarChar(20)
  file       File?     @relation(references: [id], fields: [fileId])
  fileId     String?   @db.VarChar(20)

  @@map(""user"")
  @@index([fileId])
}
```

I hope the generated 'fileId' field will not be deleted.

### Prisma information

Error validating: The argument fields must refer only to existing fields. The following fields do not exist in this model: fileId

### Environment & setup

- OS: macos
- Database: mysql 8.2.0
- Node.js version: v20.10.0


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2286837594,24136,Raw query returning a bigint for an int field,"### Bug description

When using `prisma.$queryRaw` to query data, columns of the `Int.Unsigned` type in MySQL will be converted to and returned as the Bigint type.

### How to reproduce

Table Structure & Example Data:
```sql
CREATE TABLE `folder` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL,
  `pid` int unsigned NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `idx_pid` (`pid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_bin;

INSERT INTO `folder` (`id`, `name`, `pid`) VALUES
(1, 'folder-1', 0),
(2, 'folder-2', 0),
(3, 'folder-3', 0),
(4, 'folder-1-1', 1),
(5, 'folder-1-2', 1),
(6, 'folder-2-1', 2),
(7, 'folder-2-2', 2),
(8, 'folder-3-1', 3),
(9, 'folder-3-2', 3);
```

Execute the following query:
```ts
const list = await prisma.$queryRaw`
  WITH RECURSIVE folder_cte AS (
    SELECT id, name, pid
      FROM folder
      WHERE id IN (5, 7)
    UNION ALL
      SELECT f.id, f.name, f.pid
        FROM folder f
        INNER JOIN folder_cte fc ON f.id = fc.pid
  )
  SELECT DISTINCT * FROM folder_cte ORDER BY id ASC;
`
```

Returns rows:
```js
[
  { ""id"": 1n, ""name"": ""folder-1"", ""pid"": 0n },
  { ""id"": 2n, ""name"": ""folder-2"", ""pid"": 0n },
  { ""id"": 5n, ""name"": ""folder-1-2"", ""pid"": 1n },
  { ""id"": 7n, ""name"": ""folder-2-2"", ""pid"": 2n },
]
```

### Expected behavior

Int.Unsigned is 4-byte (32-bit). According to the [documentation](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#raw-query-type-mapping), it should return a `Number` type, not a `BigInt`.

Expected returns rows:
```js
[
  { ""id"": 1, ""name"": ""folder-1"", ""pid"": 0 },
  { ""id"": 2, ""name"": ""folder-2"", ""pid"": 0 },
  { ""id"": 5, ""name"": ""folder-1-2"", ""pid"": 1 },
  { ""id"": 7, ""name"": ""folder-2-2"", ""pid"": 2 },
]
```

### Prisma information

```prisma
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""rhel-openssl-1.0.x""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Folder {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @db.VarChar(64)
  pid       Int      @default(0) @db.UnsignedInt

  @@index([pid], map: ""idx_pid"")
  @@map(""folder"")
}
```

```ts
const prisma = new PrismaClient({
  datasourceUrl: `MY_DATASOURCE_URL`,
  log: ['warn', 'error'],
})
```


### Environment & setup

- OS: macOS
- Database: MySQL@8.0
- Node.js version: v16.19.0


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v16.19.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2285913452,24130,@prisma/extension-pulse is not exported from package,"### Bug description

I want to use Prisma Pulse, but when i import (and ofcourse i installed the package with NPM) the package. I get the following error.

`./lib/db.ts:2:0
Module not found: Package path . is not exported from package /node_modules/@prisma/extension-pulse (see exports field in /node_modules/@prisma/extension-pulse/package.json)`

I've checked the node_modules and @prisma/extension-pulse is in there

<img width=""173"" alt=""image"" src=""https://github.com/prisma/prisma/assets/1499770/cb3c8c2f-d2da-439e-b83f-ebce1001b669"">


I'm. using NextJS 14.1.4 and Prisma 5.13.0 and @prisma/extension-pulse 1.0.2

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information
```prisma
// prisma/schema.prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Team                  Team[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text()
  access_token      String? @db.Text()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text()
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Team {
  id     String @id @default(cuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
```

### Environment & setup

NextJS 14.1.4

### Prisma Version

Prisma 5.13.0
Pulse 1.0.2",,
2285885142,24129,::INET column type not supported when creating,"### Bug description

Related to https://github.com/prisma/prisma/issues/17929#issuecomment-1436315705

Inserting a inet column type triggers an error. Both for `create` and `createMany`

```
Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(Error { kind: ToSql(0), cause: Some(AddrParseError(Ip)) }), transient: false })
    at In.handleRequestError (node_modules/@prisma/client/runtime/library.js:122:7044)
    at In.handleAndLogRequestError 
    at In.request 
    at async l
    at async retrieve 
    at async runJob{
```

### How to reproduce

Create a table with the inet type

```
model Subnet {
  id      String @id @default(cuid())
  subnet  String @db.Inet
}
```

Insert into the table

```
 await prisma.subnet.create({ data: { subnet: ""0.0.0.0/8"" } });
```

An error is thrown



### Expected behavior

Prisma inserts correctly

### Prisma information

Schema
```
model Subnet {
  id      String @id @default(cuid())
  subnet  String @db.Inet
}
```

Query

```
 await prisma.subnet.create({ data: { subnet: ""0.0.0.0/8"" } });
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL 16.2
- Node.js version: v21.6.2


### Prisma Version

```
5.13.0
```
",,
2285497526,24123,"Error: Could not parse schema engine response: SyntaxError: Unexpected token '/', ""/data/data""... is not valid JSON","### Bug description

I run 
` npx prisma migrate dev`
And it return 

```
┌──(rizekishimaro@localhost)-[~/social-api]
└─$ npx prisma migrate dev
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": MySQL database ""defaultdb"" at ""mysql-203202d9-jokerlove2671-fe7a.f.aivencloud.com:12040""

Error: Could not parse schema engine response: SyntaxError: Unexpected token '/', ""/data/data""... is not valid JSON
```

I was running in termux without root

### How to reproduce

<!--
1. Go to 'my project'
2. Change 'nothing'
3. Run 'npx prisma migrate'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model User {
  id             Int             @id @unique @default(autoincrement())
  name           String          @db.VarChar(255)
  password       String
  email          String          @unique @db.VarChar(255)
  picture        String?
  isActive       Boolean         @default(false)
  comments       Comment[]
  videos         Video[]
  createdAt      DateTime        @default(now())
  commentRatings CommentRating[]
  videoRatings   VideoRating[]
  subscribers    Subscriber[]    @relation(""subscriber"")
  subscriptions  Subscriber[]    @relation(""channel"")
  activationCode ActivationCode?
}

model ActivationCode {
  id        Int       @id @unique @default(autoincrement())
  code      String    @unique
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
}

enum Provider {
  google
  facebook
  // add other providers as needed
}

model Comment {
  id            Int             @id @default(autoincrement())
  content       String
  author        User            @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime        @default(now())
  CommentRating CommentRating[]
}

model CommentRating {
  id        Int     @id @default(autoincrement())
  likes     Int
  dislikes  Int
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
  User      User?   @relation(fields: [userId], references: [id])
  userId    Int?
}

model VideoRating {
  id       Int   @id @default(autoincrement())
  likes    Int
  dislikes Int
  video    Video @relation(fields: [videoId], references: [id])
  videoId  Int
  User     User? @relation(fields: [userId], references: [id])
  userId   Int?
}

model Video {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  url         String        @unique
  author      User          @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime      @default(now())
  ratings     VideoRating[]
}

model Subscriber {
  id           Int  @id @default(autoincrement())
  subscriberId Int
  channelId    Int
  subscriber   User @relation(""subscriber"", fields: [subscriberId], references: [id])
  channel      User @relation(""channel"", fields: [channelId], references: [id])
}
```

```ts
import { Injectable, OnModuleInit } from ""@nestjs/common"";
import { PrismaClient } from ""@prisma/client"";

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    console.log(""Connected To Database...."");
    await this.$connect();
  }
}
```


### Environment & setup

- OS: <!--[Termux(android)]-->
- Database: <!--MariaDB]-->
- Node.js version: <!--[v21.6.2]-->


### Prisma Version

```
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Environment variables loaded from .env
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Error: Unable to require(`/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node`).
The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements

Details: dlopen failed: ""/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node"" is for EM_X86_64 (62) instead of EM_AARCH64 (183)
    at Hee (/data/data/com.termux/files/home/social-api/node_modules/prisma/build/index.js:295:116)
    at Gqe (/data/data/com.termux/files/home/social-api/node_modules/prisma/build/index.js:295:269)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
Error: Command failed with exit code 1: /data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version
/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x[1]: ELF: inaccessible or not found
/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x[2]: syntax error: unexpected ')'
    at Lwe (/data/data/com.termux/files/home/social-api/node_modules/prisma/build/index.js:5:57)
    at /data/data/com.termux/files/home/social-api/node_modules/prisma/build/index.js:5:10625
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async Gqe (/data/data/com.termux/files/home/social-api/node_modules/prisma/build/index.js:295:343) {
  shortMessage: 'Command failed with exit code 1: /data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version',
  command: '/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version',
  escapedCommand: '""/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x"" --version',
  exitCode: 1,
  signal: undefined,
  signalDescription: undefined,
  stdout: '',
  stderr: '/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x[1]: \x7FELF\x02\x01\x01\x03: inaccessible or not found\n' +
    ""/data/data/com.termux/files/home/social-api/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x[2]: syntax error: unexpected ')'"",
  failed: true,
  timedOut: false,
  isCanceled: false,
  killed: false
}
prisma                  : 5.13.0
@prisma/client          : 5.12.1
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : android
Architecture            : arm64
Node.js                 : v21.6.2
Query Engine (Node-API) : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```

```[tasklist]
### Tasks
```
",,
2285432269,24120,Sort by Enum Field(s) alphabetically,"## Problem

Today sorting by enum field(s) means order data by its integer value. There are cases when data needs to be ordered by the String defined by the enum
In PostGres this is possible through the modifier ""::text"", for example : ORDER BY myEnumField::text

## Suggested solution

Associate a new SortOrderEnum class to enum fields, where a property sortMode can define if sort by Name or Value of the enum

",,
2284990446,24116,Multiple nested query calls rather than joins,"### Bug description

You create separate nested queries rather than joins which adds to network latency when calling remote db! What JOINS returned in 24ms, and 421ms on remote db calls,  with prisma it takes 87ms on local, and 3s on remote db calls. 

### How to reproduce

1. Connect to remote db
2. Create 1-n and n-n relations
3. Insert dumb data, and query data where multiple tables are involved and join/nested query is required
4. See your average response time to be 1-3s when multiple tables are involved.

### Expected behavior

_No response_

### Prisma information


schema

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql"" // Adjust based on your DB (MySQL, SQLite, etc.)
  url      = env(""DATABASE_URL"")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String
  userOrganizations  UserOrganization[]
}

model Organization {
  id                   Int                  @id @default(autoincrement())
  name                 String
  userOrganizations    UserOrganization[]
  organizationPermissions OrganizationPermission[]
  formalities          Formality[]
}

model Permission {
  id                   Int                  @id @default(autoincrement())
  permissionName       String
  organizationPermissions OrganizationPermission[]
}

model UserOrganization {
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  @@id([userId, organizationId]) // Composite primary key
}

model OrganizationPermission {
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  Int
  permission      Permission   @relation(fields: [permissionId], references: [id])
  permissionId    Int

  @@id([organizationId, permissionId]) // Composite primary key
}

model Formality {
  id             Int         @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  violated       Boolean     @default(false)
`}`
```
 


Query: 
```
const result = await prisma.user.findUnique({
    where: { id: userId },
    select: {
      userOrganizations: {
        select: {
          organization: {
            select: {
              name: true,
              formalities: {
                where: {
                  violated: false
                },
                select: {
                  id: true,
                  violated: true
                }
              },
              organizationPermissions: {
                where: {
                  permission: {
                    permissionName: {
                      in: ['read_formalities', 'read_organization_metadata']
                    }
                  }
                },
                select: {
                  permission: {
                    select: {
                      permissionName: true
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  });
```

### Environment & setup

- OS: Debian
- Database: PostgreSQL
-  Node.js version: 20.11.1


### Prisma Version

```
5.12.1
```
",,
2284658964,24114,bug ,"### Bug description

    throw new Error(
          ^

Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (C:\Users\laksh\OneDrive\Desktop\new\realastate\server\node_modules\.prisma\client\default.js:43:11)
    at file:///C:/Users/laksh/OneDrive/Desktop/new/realastate/server/lib/prisma.js:10:16
    at Modul

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

    ""@prisma/client"": ""^5.13.0"",
",,
2282858282,24095,Prisma does not work with bun alpine docker image.,"### Bug description

When I try to run prisma on oven/bun docker image(bun runtime official image), I got the following error.
```
PrismaClientInitializationError: Unable to require(`/home/bun/app/node_modules/.prisma/client/libquery_engine-linux-musl-arm64-openssl-3.0.x.so.node`).
2024-05-07 18:57:17 The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements
2024-05-07 18:57:17 
2024-05-07 18:57:17 Details: /usr/lib/libc.so: invalid ELF header
2024-05-07 18:57:17       at new e (/home/bun/app/node_modules/@prisma/client/runtime/library.js:22:1872)
2024-05-07 18:57:17       at /home/bun/app/node_modules/@prisma/client/runtime/library.js:111:10219
2024-05-07 18:57:17 
2024-05-07 18:57:17 Bun v1.1.7 (Linux arm64)
```

### How to reproduce

1. run docker image oven/bun:1.1.7-alpine and enter it 
2. setup Nest.js + GraphQL + apollo
3. run prisma migrate + generate. Those are successful.
4. When I start container, I got the error above.
5. Actualy when I ran prisma -v to get version I got the same error.

### Expected behavior

work properly without the error

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  // email String  @unique
  name  String?
}
```

### Environment & setup

- host PC OS: macOS
- host PC chip: apple sillicon(M2)
- docker OS: alpine. It's on docker for Mac.
- Database: PostgreSQL
- Node.js version: I use bun instead.


### Prisma Version

```
prisma + prisma client version is 5.13.0
```
",,
2282469391,24091,PrismaClient is unable to run in this browser environment,"### Bug description

Uncaught (in promise) Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2282451037,24090, PrismaClient is unable to run in this browser environment,"### Bug description

index-browser.js:177 
 Uncaught (in promise) Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2282111981,24088,"With prisma client, Deploy failed in the cloudflare dashboard but success in the cli.","### Bug description

I use prisma orm in cloudflare worker environment, but deploy failed in the cloudflare dashboard and deploy success in the cli.
According the tech support from cloudflare, this worker script size is too large.
```
deploy_worker_failed:Your Functions script is over the 1 MiB size limit (workers.api.error.script_too_large)
```

### How to reproduce

Will you try this branch [https://github.com/iflamed/hono-react-ssr-shadcn-ui/tree/prisma-debug](https://github.com/iflamed/hono-react-ssr-shadcn-ui/tree/prisma-debug), Follow these command below will deploy success  in the cli, but failed on the cloudflare dashboard.
```
npm run install
npx prisma generate
npm run deploy
```

### Expected behavior

Deploy success in cloudflare dashboard.

### Prisma information

*schema.prisma*
```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

```typescript
const adapter = new PrismaD1(c.env.DB)
const prisma = new PrismaClient({ adapter }) // this line will result deploy failed.
```

### Environment & setup

- OS: Cloudflare Pages
- Database: Cloudflare D1
- Node.js version: Cloudflare worker

### Prisma Version

```
""@prisma/adapter-d1"": ""^5.13.0"",
""@prisma/client"": ""^5.13.0"",
```
",,
2281561847,24086,Setting a default value for an array field repeats it on every subsequent migration,"### Bug description

Title.

### How to reproduce

Add something like the schema provided, migrate, make changes and migrate again (Or migrate and it'll think there was a change)

### Expected behavior

It shouldn't repeat, as it was not changed.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator kysely {
    provider            = ""prisma-kysely""
    output              = ""./""
    fileName            = ""types.ts""
    decimalTypeOverride = ""number""
}

datasource db {
    provider = ""postgresql""
    url      = env(""DATABASE_URL"")
}

model Mouse {
    id               String       @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
    polling          Int[]        @default([125]) @db.SmallInt
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @default(now())
}
```

### Environment & setup

- OS: Ubuntu 22.04.4 LTS
- Database: PostgreSQL
- Node.js version: 20.12.2


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : Not found
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.12.2
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2279560284,24078,@prisma/client: TypeError: zn is not a function,"### Bug description

Application crashes when launched with this trace:
```
/home/alex/projects/example-prisma-app/node_modules/@prisma/client/runtime/library.js:16
      `;console.warn(`${fe(""warn(prisma)"")} ${u}`)}}}}function Uo(e){if(Vu(e)){zn(`Environment variables loaded from ${e}`);let r=Zn.default.config({path:e,debug:process.env.DOTENV_CONFIG_DEBUG?!0:void 0});return{dotenvResult:Bo(r),message:Ie(`Environment variables loaded from ${fr.default.relative(process.cwd(),e)}`),path:e}}else zn(`Environment variables not found at ${e}`);return null}function Qo(e,r){return e&&r&&fr.default.resolve(e)===fr.default.resolve(r)}function Vu(e){return!!(e&&$t.default.existsSync(e))}var Go=""library"";function Ur(e){let r=Bu();return r||(e?.config.engineType===""library""?""library"":e?.config.engineType===""binary""?""binary"":Go)}function Bu(){let e=process.env.PRISMA_CLIENT_ENGINE_TYPE;return e===""library""?""library"":e===""binary""?""binary"":void 0}var Gu=k(ei());var M=k(require(""path"")),Ju=k(ei()),vf=L(""prisma:engines"");function Yo(){return M.default.join(__dirname,""../"")}var Tf=""libquery-engine"";M.default.join(__dirname,""../query-engine-darwin"");M.default.join(__dirname,""../query-engine-darwin-arm64"");M.default.join(__dirname,""../query-engine-debian-openssl-1.0.x"");M.default.join(__dirname,""../query-engine-debian-openssl-1.1.x"");M.default.join(__dirname,""../query-engine-debian-openssl-3.0.x"");M.default.join(__dirname,""../query-engine-linux-static-x64"");M.default.join(__dirname,""../query-engine-linux-static-arm64"");M.default.join(__dirname,""../query-engine-rhel-openssl-1.0.x"");M.default.join(__dirname,""../query-engine-rhel-openssl-1.1.x"");M.default.join(__dirname,""../query-engine-rhel-openssl-3.0.x"");M.default.join(__dirname,""../libquery_engine-darwin.dylib.node"");M.default.join(__dirname,""../libquery_engine-darwin-arm64.dylib.node"");M.default.join(__dirname,""../libquery_engine-debian-openssl-1.0.x.so.node"");M.default.join(__dirname,""../libquery_engine-debian-openssl-1.1.x.so.node"");M.default.join(__dirname,""../libquery_engine-debian-openssl-3.0.x.so.node"");M.default.join(__dirname,""../libquery_engine-linux-arm64-openssl-1.0.x.so.node"");M.default.join(__dirname,""../libquery_engine-linux-arm64-openssl-1.1.x.so.node"");M.default.join(__dirname,""../libquery_engine-linux-arm64-openssl-3.0.x.so.node"");M.default.join(__dirname,""../libquery_engine-linux-musl.so.node"");M.default.join(__dirname,""../libquery_engine-linux-musl-openssl-3.0.x.so.node"");M.default.join(__dirname,""../libquery_engine-rhel-openssl-1.0.x.so.node"");M.default.join(__dirname,""../libquery_engine-rhel-openssl-1.1.x.so.node"");M.default.join(__dirname,""../libquery_engine-rhel-openssl-3.0.x.so.node"");M.default.join(__dirname,""../query_engine-windows.dll.node"");var ri=k(require(""fs"")),zo=L(""chmodPlusX"");function ti(e){if(process.platform===""win32"")return;let r=ri.default.statSync(e),t=r.mode|64|8|1;if(r.mode===t){zo(`Execution permissions of ${e} are fine`);return}let n=t.toString(8).slice(-3);zo(`Have to call chmodPlusX on ${e}`),ri.default.chmodSync(e,n)}function ni(e){let r=e.e,t=a=>`Prisma cannot find the required \`${a}\` system library in your system`,n=r.message.includes(""cannot open shared object file""),i=`Please refer to the documentation about Prisma's system requirements: ${Kn(""https://pris.ly/d/system-requirements"")}`,o=`Unable to require(\`${Ie(e.id)}\`).`,s=pr({message:r.message,code:r.code}).with({code:""ENOENT""},()=>""File does not exist."").when(({message:a})=>n&&a.includes(""libz""),()=>`${t(""libz"")}. Please install it and try again.`).when(({message:a})=>n&&a.includes(""libgcc_s""),()=>`${t(""libgcc_s"")}. Please install it and try again.`).when(({message:a})=>n&&a.includes(""libssl""),()=>{let a=e.platformInfo.libssl?`openssl-${e.platformInfo.libssl}`:""openssl"";return`${t(""libssl"")}. Please install ${a} and try again.`}).when(({message:a})=>a.includes(""GLIBC""),()=>`Prisma has detected an incompatible version of the \`glibc\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({message:a})=>e.platformInfo.platform===""linux""&&a.includes(""symbol not found""),()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \`${e.platformInfo.binaryTarget}\` binaryTarget by default. ${i}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i}`);return`${o}
                                                                                                                                                                                                                                                                                                                                             ^
TypeError: zn is not a function
    at Uo (/home/alex/projects/example-prisma-app/node_modules/@prisma/client/runtime/library.js:16:334)
    at Br (/home/alex/projects/example-prisma-app/node_modules/@prisma/client/runtime/library.js:7:1922)
    at Nl (/home/alex/projects/example-prisma-app/node_modules/@prisma/client/runtime/library.js:128:1105)
    at Object.<anonymous> (/home/alex/projects/example-prisma-app/node_modules/.prisma/client/index.js:183:1)
    at Module._compile (node:internal/modules/cjs/loader:1369:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1427:10)
    at Object.require.extensions.<computed> [as .js] (/home/alex/projects/example-prisma-app/node_modules/ts-node/src/index.ts:1608:43)
    at Module.load (node:internal/modules/cjs/loader:1206:32)
    at Function.Module._load (node:internal/modules/cjs/loader:1022:12)
    at Module.require (node:internal/modules/cjs/loader:1231:19)
```

### How to reproduce

```
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient()

const task = () => {
  await prisma.$connect()
  await prisma.gS_Accruals.create({...})
    .finally(() => {
      prisma.$disconnect()
    })
}
```

```
node --env-file=.env -r ts-node/register script.ts
```

### Expected behavior

Appication executed :)

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Ubuntu server
- Database: SQlite
- node -v: v20.12.2

### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.12.2
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2277399398,24070,`$on` is missing on the extended client,"### Bug description

After applying a query extension to the client, it's not possible to add event listeners to it anymore.

### How to reproduce

1. Create a client
2. Apply an extension
3. `$on` method is not present, neither in types nor at run time

### Expected behavior

Client extensions shouldn't remove any methods from the client.

### Prisma information

```ts
  const prisma = new PrismaClient({
    log: [{ emit: ""event"", level: ""query"" }],
  }).$extends({
    query: {
      $allOperations({ query, args }) {
        return query(args);
      },
    },
  });

  prisma.$on(""query"", (e) => console.log(e));
```


### Environment & setup

- OS: macOS
- Database: SQLite
- Node.js version: v22.1.0


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v22.1.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2276719535,24068,Cannot migrate changes on Multi Schema setup for SQL Server,"### Bug description

When trying to migrate a Schema that is mapped to the non default schema in SQL Server.
I am getting an error where the migration tries to find the table on the default schema dbo. It is not honoring the custom schema the table is placed in. 

Change I am trying to migrate is make the id property unique and add the NVarChar(450)

Schema

```prisma
model Report {
  id                  String  @id @unique @db.NVarChar(450)
  title               String
  description         String
  chartType           String? // ""line"" | ""bar"" | ""pie""
  certificationStatus String // ""certified"" | ""pending"" | ""uncertified""
  queryMapping        String

  metric        CertifiedMetricVersion @relation(fields: [metricId], references: [Id])
  metricId      Int
  ReportVersion ReportVersion[]

  @@map(""Report"")
  @@schema(""cm"")
}
```


```
PS D:\r\report-boi> npx prisma migrate dev
Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": SQL Server database, schemas ""cd, cm, gs, sql, ts""

Error: P1014

The underlying table for model `dbo.Report` does not exist.
```

### How to reproduce

Create a schema with a custom schema in SQL Server and try migrating a change.

### Expected behavior

Migration should find the right table and generate the migration scripts needed to make the migration possible.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider          = ""sqlserver""
  url               = env(""DATABASE_URL"")
  shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
  schemas           = [""cd"", ""cm"", ""gs"", ""sql"", ""ts""]
}

model Report {
  id                  String  @id @unique @db.NVarChar(450)
  title               String
  description         String
  chartType           String? // ""line"" | ""bar"" | ""pie""
  certificationStatus String // ""certified"" | ""pending"" | ""uncertified""
  queryMapping        String

  metric        CertifiedMetricVersion @relation(fields: [metricId], references: [Id])
  metricId      Int
  ReportVersion ReportVersion[]

  @@map(""Report"")
  @@schema(""cm"")
}

```

```ps
PS D:\r\report-boi> npx prisma migrate dev
Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": SQL Server database, schemas ""cd, cm, gs, sql, ts""

Error: P1014

The underlying table for model `dbo.Report` does not exist.
```


### Environment & setup

- OS: Windows 
- Database: SQL Server
- Node.js version: v18.19.0


### Prisma Version

```
PS D:\r\report-boi> prisma -v
Environment variables loaded from .env
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at C:\ProgramData\nvm\v18.19.0\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at C:\ProgramData\nvm\v18.19.0\node_modules\prisma\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
Preview Features        : multiSchema
```
",,
2276442457,24066,Broken `ModelCreateArgs` being generated for relations in `data`,"### Bug description
[Internal Reproduction](https://github.com/prisma/reproductions/tree/main/broken-nested-relation-query)

the create arg type for `b` is brokenly generated as undefined rather than actually something along the lines of:
```ts
b: { connect | connectOrCreate | create }

// where
connect: { ...fields }

connectOrCreate: { ...fields }

create: { ...fields }
```

### How to reproduce

1. Generate the mentioned schema
2. Try to complete `b` in the `create` for `a`
<!-- 3. -->
4. See undefined

### Prisma information


```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model A {
  id Int @id
  b  B   @relation(fields: [id], references: [id])
}

model B {
  id Int @id
  a  A?
}

```

```ts
import { PrismaClient } from '.prisma/client'

async function main() {
  const prisma = new PrismaClient()

  await prisma.a.create({
    data: {
      id: 1,
      // ! For some reason, the types for b aren't generated correctly
      // ! on a very simple 1:1 relation.
      // ! <|> -> b: undefined
      // ! b: {
      // !   <|> nothing is offered here, no create, connectOrCreate, or connect
      // ! }
    },
  })
}

void main().catch((e) => {
  console.log(e.message)
  process.exit(1)
})

```


### Environment & setup

- OS: MacOS
- Database: This happens for all databases
- Node.js version: v21.7.3 (this doesn't seem to matter)

### Prisma Version

```
❯ pnpm prisma -v

prisma                  : 0.0.0
@prisma/client          : 0.0.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.7.3
Query Engine (Node-API) : libquery-engine 612a7f7142ab73baf44704be23cbac7b7df1f7fc (at ../../../packages/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 612a7f7142ab73baf44704be23cbac7b7df1f7fc (at ../../../packages/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.14.0-9.612a7f7142ab73baf44704be23cbac7b7df1f7fc
Default Engines Hash    : 612a7f7142ab73baf44704be23cbac7b7df1f7fc
Studio                  : 0.500.0
```",,
2275231930,24063,Generated columns (MySQL),"## Problem

It is currently not clear how to setup prisma schema to allow for generated mysql columns. Assume we have the following column migration

```sql
-- AlterTable
ALTER TABLE `LineItem` ADD COLUMN `total` DECIMAL(13, 4) GENERATED ALWAYS AS (`price`*`count`) STORED NOT NULL AFTER `count`;
```

The question then is how do you setup a schema so that `total` would not be required when creating this record. If your schema is

```prisma
model LineItem {
  id Int @id @default(autoincrement())
  price Decimal @db.Decimal(13, 4)
  count Int
  total Decimal @db.Decimal(13, 4)
}
```

then `lineItem.create(...)` will require you to set total to something and mysql query will crash because you are not allowed to set/update generated columns. If your schema is 

```prisma
model LineItem {
  id Int @id @default(autoincrement())
  price Decimal @db.Decimal(13, 4)
  count Int
  total Decimal? @db.Decimal(13, 4)
}
```

then in your query responses total will potentially be undefined, which is better but we are using typescript and it is a pain to check if a column is set when we know there is no way it isn't set. Finally, I did found a way that does work

```prisma
model LineItem {
  id Int @id @default(autoincrement())
  price Decimal @db.Decimal(13, 4)
  count Int
  total Decimal @db.Decimal(13, 4) @default(dbgenerated())
}
```

This, however, feels like a hack that might stop working at some point in the future. If the above is the intended way to achieve my usecase then I guess this is not a feature request, but it would be good if someone confirmed this approach will continue to work in the future.

## Suggested solution

Assuming the above is not intended to work then I would be happy with anything basic like an option to mark column as db generated, e.g.

```prisma
model LineItem {
  id Int @id @default(autoincrement())
  price Decimal @db.Decimal(13, 4)
  count Int
  total Decimal @db.Decimal(13, 4) @db.generated()
}
```

The above would be good enough for my usecase.

## Alternatives

there is also an option to provide complete support for generated columns, e.g.

```prisma
@db.generated(""GENERATED ALWAYS AS (`price`*`count`) STORED"")
```

this would just be an extension of the above solution.
 
## Additional context

I have looked into the `Computed Fields` feature, unfortunatelly I cannot use that approach due to existing databases depending on this column :(.
",,
2274982839,24061,Migrations started using significantly more memory in 5.13.0 and crash with OOM,"### Bug description

Our migrations have started to fail with OOM error even for smaller databases with a limited amount of migrations.

This may be related to some specific functionality that we use - CockroachDB, multischema support or ULID identifiers. Example schema that fail during migration is included.

Downgrading to 5.12.1 has fixed the issue.

Increasing amount of memory available for the deployment job from 128 MBs to 512 MBs also helps, but that is not an ideal solution.

### How to reproduce

Generate migrations and run `prisma migrate deploy`

Note that this works fine on developer machines, but fail during actual deployment to staging/live environments. In order to reproduce, ensure that you have 128 MBs of memory or less during the execution.

### Expected behavior

Migrations pass successfully

### Prisma information

```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider     = ""cockroachdb""
  url          = env(""DATABASE_URL"")
  relationMode = ""prisma""
  schemas      = [""serviceschema""]
}

/// -----------------------------------------------------------------------------------------------------
/// Content
/// -----------------------------------------------------------------------------------------------------

model TranslationContext {
  id                     String   @id @default(dbgenerated(""gen_random_ulid()"")) @db.Uuid
  createdAt              DateTime @default(now()) @map(""created_at"") @db.Timestamptz()
  otherField             Json? @map(""other_field"")
  someField              Json?     @map(""some_field"")

  segments Segment[]

  @@map(""translation_context"")
  @@schema(""serviceschema"")
}

model Segment {
  jobId                String   @map(""job_id"") @db.Uuid
  id                   String   @default(dbgenerated(""gen_random_ulid()"")) @db.Uuid
  externalId           String   @map(""external_id"") @db.String(128)
  contentUnitId        String   @map(""content_unit_id"") @db.String(128)
  tenantId             String   @map(""tenant_id"") //@db.(16) Enum
  ownerId              String   @map(""owner_id"") @db.String(128)
  originCorrelationId  String   @map(""origin_correlation_id"") @db.String(128)
  translationContextId String?  @map(""translation_context_id"") @db.Uuid
  translationContext   TranslationContext? @relation(fields: [translationContextId], references: [id])
  description          String?
  position             Int
  targetLocale         String   @map(""target_locale"") @db.String(16)
  translatedValue      String?  @map(""translated_value"")
  sourceValue          String   @map(""source_value"")
  someField            String?  @map(""some_field"")
  field                Float?   @map(""field"")
  createdAt            DateTime @default(now()) @map(""created_at"") @db.Timestamptz()

  @@id([jobId, id])
  @@unique([ownerId, originCorrelationId, targetLocale, tenantId, externalId, someField])
  @@index([translationContextId])
  @@map(""segment"")
  @@schema(""serviceschema"")
}
```

### Environment & setup

- OS: Debian Bookworm
- Database: CockroachDB: cockroachdb/cockroach:latest-v23.2
- Node.js version: node:20.11.1-bookworm-slim

### Prisma Version

```
5.13.0
```
",,
2274871914,24058,Typescript throw error when abstracting nested select,"### Bug description

It is very easy to reproduce this, I don't know if it work as intended or not.

So I have this simple prisma schema, basically just a 3 relation table, A have B children, B have C children. All have 1 to many relationship.
```prisma
model A {
  id   Int    @id @default(autoincrement())
  col1 String @db.VarChar
  col2 String @db.VarChar

  listB B[]
}

model B {
  id   Int    @id @default(autoincrement())
  col1 String @db.VarChar
  col2 String @db.VarChar
  baId Int?

  aData A?  @relation(fields: [baId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listC C[]
}

model C {
  id   Int    @id @default(autoincrement())
  col1 String @db.VarChar
  col2 String @db.VarChar
  cbId Int?

  bData B? @relation(fields: [cbId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
```

then in my typescript, I keep it simple:
```typescript
import { Prisma, PrismaClient } from '@prisma/client'

export const db = new PrismaClient()

const selectA: Prisma.ASelect = {
  id: true,
  col1: true,
  col2: true
}

const selectB: Prisma.BSelect = {
  id: true,
  col1: true,
  col2: true,
  aData: {
    select: selectA
  }
}

const selectC: Prisma.CSelect = {
  id: true,
  col1: true,
  col2: true,
  bData: {
    select: selectB
  }
}

const query1 = await db.c.findMany({
  select: selectC
})

const result1 = query1[0].bData.aData //error
const result2 = query1[0].bData?.baId

const query2 = await db.c.findMany({
  select: {
    id: true,
    col1: true,
    col2: true,
    bData: {
      select: {
        id: true,
        col1: true,
        col2: true,
        aData: {
          select: {
            id: true,
            col1: true,
            col2: true
          }
        }
      }
    }
  }
})

const result3 = query2[0].bData?.aData
const result4 = query2[0].bData?.baId //error
```

**Result 1 throwing typescript error because aData is not exist in that type, while result2 works even though I'm not specifying it in the selectB. While the result 3 and 4 is working normally.**
I'm scratching my head because it seems both query have same select but it throw different error in typescript. I tried to separate abstract selection and place it in the same files as my typeBox declaration so I can quickly check that my query will have same output as my type and can reuse select multiple times in multiple query.

### How to reproduce

<!--
1. Create a variable for storing `select`, and nested it with another variable.
2. Use that select variable in prisma query instead.
-->


### Expected behavior

Select working normally, typescript not throwing any error like in the query2

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model A {
  id   Int    @id @default(autoincrement())
  col1 String @db.VarChar
  col2 String @db.VarChar

  listB B[]
}

model B {
  id   Int    @id @default(autoincrement())
  col1 String @db.VarChar
  col2 String @db.VarChar
  baId Int?

  aData A?  @relation(fields: [baId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listC C[]
}

model C {
  id   Int    @id @default(autoincrement())
  col1 String @db.VarChar
  col2 String @db.VarChar
  cbId Int?

  bData B? @relation(fields: [cbId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listD D[]
}

model D {
  id   Int    @id @default(autoincrement())
  col1 String @db.VarChar
  col2 String @db.VarChar
  dcId Int?

  cData C? @relation(fields: [dcId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
```

```ts
import { Prisma, PrismaClient } from '@prisma/client'

export const db = new PrismaClient()

const selectA: Prisma.ASelect = {
  id: true,
  col1: true,
  col2: true
}

const selectB: Prisma.BSelect = {
  id: true,
  col1: true,
  col2: true,
  aData: {
    select: selectA
  }
}

const selectC: Prisma.CSelect = {
  id: true,
  col1: true,
  col2: true,
  bData: {
    select: selectB
  }
}

const query1 = await db.c.findMany({
  select: selectC
})

const result1 = query1[0].bData.aData
const result2 = query1[0].bData?.baId

const query2 = await db.c.findMany({
  select: {
    id: true,
    col1: true,
    col2: true,
    bData: {
      select: {
        id: true,
        col1: true,
        col2: true,
        aData: {
          select: {
            id: true,
            col1: true,
            col2: true
          }
        }
      }
    }
  }
})

const result3 = query2[0].bData?.aData
const result4 = query2[0].bData?.baId
```


### Environment & setup

- OS: Windows
- Database: Postgresql
- Node.js version: 20.10.0


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2273413342,24055,Enhance Type Safety of the AtLeast Utility Type for More Accurate Type Inference,"## Problem

The current implementation of the AtLeast type in Prisma, which is primarily used in WhereUniqueInput with multiple fields, exhibits the following issues:

Type Inference Accuracy: The type inference results in unexpected compounded types, leading to potential runtime errors and decreased predictability of the codebase.
Compatibility Issues: There are compatibility issues with other type utilities, which reduce consistency and code stability across the project.

## Suggested solution

I suggest modifying the AtLeast utility type to improve type inference accuracy and enhance type safety as follows:

```ts
type In<T, U> = T extends U ? true : false;

type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | ({ [P in keyof O as In<P, K> extends true ? P : never]-?: O[P] } & O)
    : never
>;
```

This modification aims to eliminate unnecessary complications in type intersections and enhance compatibility with stricter type checks, ensuring that the type system remains robust and predictable.

### Example of the Problem
The current implementation of the AtLeast type can lead to nonsensical type intersections. For instance, consider the following TypeScript definitions and the resulting type inference:


```ts
type User = {
  id: string; // id
  region: string;
  nick_name: string;
  /// ... other
};
type UserRegionNickNameUnique = {
  region: string;
  nick_name: string;
};

type UserWhereInput = {
  id?: string;
  region_nick_name_unique?: UserRegionNickNameUnique;
  /// ... other
};

// Current type inference result
type UserWhereUniqueInput = ({
    id: string;
} & UserWhereInput) | ({
    region_nick_name_unique: UserRegionNickNameUnique;
} & UserWhereInput) | ({
    id: string | UserRegionNickNameUnique;
    region_nick_name_unique: string | UserRegionNickNameUnique;
} & UserWhereInput);  

```

- before type inference result 
<img width=""913"" alt=""스크린샷 2024-05-01 오후 9 11 16"" src=""https://github.com/prisma/prisma/assets/63547292/feffef73-59b1-403e-9f68-3f3c510e9c3f"">

- after type inference result 
<img width=""539"" alt=""스크린샷 2024-05-01 오후 6 53 25"" src=""https://github.com/prisma/prisma/assets/63547292/328bd1b6-6fe8-4188-8dd1-26d9a1bf3be3"">



",,
2273022735,24054,Less restrictive JSON types on create/insert,"## Problem

When using the Prisma client (with Postgres in my case) to update data in the database, I've frequently been slowed down by the more restrictive types of the insert and create functions. For example, given the model

```prisma
model MyModel {
  id String  @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  myData    Json?   @db.Json
}
```

And attempting to insert data that follows the type

```typescript
interface CustomData {
    customKey: number
}

interface MyCustomModelInterface {
    id?: string;
    myData: CustomData;
}
```

You are often met with a message like
```
Types of property 'myData' are incompatible.
        Type 'CustomData' is not assignable to type 'NullableJsonNullValueInput | InputJsonValue'.
          Type 'CustomData' is not assignable to type 'InputJsonObject'.
            Index signature for type 'string' is missing in type 'CustomData'
```

Even though CustomData _does_ satisfy the requirements for the JSON field (on retrieval/return I understand there is no guarantee of the structure, but on insert there should be a guarantee)

## Suggested solution

If possible, `.insert` and `.create` (along with the types `MyModelCreateWithout...` etc) should ideally be able to allow types that satisfy the requirements of the JSON field instead of strictly requiring that it matches every possible JSON type. While I understand this is likely a TypeScript limitation, potentially there could be investigation into alternative solutions?

## Alternatives

Potentially allow declaration and/or validation of JSON fields coming from the database (although this could contradict the goal of the Json field type).

## Additional context

N/A
",,
2272210092,24040,P1001 when attempting to connect to database,"### Bug description

Hi all,

when trying to connect to my MariaDB-Server using Prisma.IO I always get the following error message:

```log
Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": MySQL database ""app_wk_event"" at ""192.168.101.65:3306""

Error: P1001: Can't reach database server at `192.168.101.65`:`3306`
```

I have no problem connecting to the server using MySQL from the command line or using other software such as DBeaver CE.

I've checked all URLs and other credentials and even changed the password to one that does not require %-encoding. 

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
```
npx prisma migrate dev --name init
```

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
    provider    = ""prisma-client-js""
}

datasource db {
    provider    = ""mysql""
    url         = env(""DATABASE_URL"")
}

/// A user of the webapplication
model User {
    ....
}
```

```ts
DATABASE_URL = ""mysql://<user>:<pass>@192.168.101.65:3306/app_wk_event""
```

```ts
const {PrismaClient} = require('@prisma/client');
const prisma = new PrismaClient({ log: ['query', 'info', 'warn'] });
```


### Environment & setup

- OS: Dev on Windows 11, VS Code 1.88.1
- Database: MariaDB 10.6.11 running inside Docker 20.10.21 on Debian 10 Buster
- Node.js version: 20.10.0


 - Docker Stack:
```yaml
version: '3'

volumes:
  mariadb:
    driver: local

networks:
    db:
        driver: bridge

services:
  mariadb:
    image: mariadb:10.6
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: <SUPERPASS>
      MYSQL_USER:  <USER>
      MYSQL_PASSWORD: <PASS>
    ports:
        - ""3306:3306""
    volumes:
     - mariadb:/var/lib/mysql
    networks:
      db:

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - ""4080:80""
    environment:
      - PMA_HOST=mariadb
      - PMA_PORT=3306 
    networks:
      db:
```

### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2271739688,24033,[Prisma 4] Connection hanging indefinitely on queries and operations under preassure,"### Bug description

Hello, I have nodejs server that has a lot of traffic and has a lot of continuing write/read operation on the database.
I am using Prisma 4 version with a Postgres database: I'm actually using @prisma/client 4.10.1 and having no problems. 

Upgrading to the last released Prisma 4 version instead I have a problem: after 1-2 hours the connection to the database start to hang indefinitely to new queries and operations. I don't get any timeout error, the Promise just hang indefinitely until I have the necessity to restart the server because with time always more queries/operations begin to hang indefinitely blocking my server internal operations.

My question is: is there any known issue after Prisma 4.10.1 version that provides this type of problem?",,
2271519855,24032,Wrong typing when trying to connect models with a unique constraint on an optional field,"### Bug description

We have a model that has an optional field that has to be unique. When trying to use the `connect` keyword we get a TS error that the optional field does not have the right type.

A full reproduction repo can be found here: https://github.com/vdhpieter/prisma-partial-uniqueness-bug

### How to reproduce

These reproductions start from a reproduction repo after following: https://www.prisma.io/docs/getting-started/quickstart

1. Make the optional `name` field unique in your schema for the User model:

https://github.com/vdhpieter/prisma-partial-uniqueness-bug/blob/c23577bc4a6050d6132f032a45b2ccb63ebd7f45/prisma/schema.prisma#L16

2. Create an user

https://github.com/vdhpieter/prisma-partial-uniqueness-bug/blob/c23577bc4a6050d6132f032a45b2ccb63ebd7f45/script.ts#L6-L8

3. Create a Post and connect it to the previously created user

https://github.com/vdhpieter/prisma-partial-uniqueness-bug/blob/c23577bc4a6050d6132f032a45b2ccb63ebd7f45/script.ts#L10-L13

4. See the following TS error (also visible when running `npm run start`)

https://github.com/vdhpieter/prisma-partial-uniqueness-bug/blob/c23577bc4a6050d6132f032a45b2ccb63ebd7f45/script.ts#L14-L21


### Expected behavior

I can use connect with models that have optional unique fields.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String? @unique
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

```

```ts
  const user = await prisma.user.create({
    data: { email: ""new-user@prisma.io"" },
  });

  prisma.post.create({
    data: {
      title: ""A Very good post"",
      author: { connect: user },
    },
  });
```


### Environment & setup

- OS: macOS
- Database: SQLite
- Node.js version: 20.7.0


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.7.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2270798369,24025,Runs locally but displayed this error when deployed,"### Bug description

/home/ubuntu/pena/node_modules/.prisma/client/default.js:43
    throw new Error(
    ^

Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/ubuntu/pena/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/ubuntu/pena/api/auth/auth.service.js:6:16)
    at Module._compile (node:internal/modules/cjs/loader:1369:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1427:10)
    at Module.load (node:internal/modules/cjs/loader:1206:32)
    at Module._load (node:internal/modules/cjs/loader:1022:12)
    at Module.require (node:internal/modules/cjs/loader:1231:19)
    at require (node:internal/modules/helpers:179:18)
    at Object.<anonymous> (/home/ubuntu/pena/api/auth/auth.controller.js:1:35)
    at Module._compile (node:internal/modules/cjs/loader:1369:14)

Node.js v20.12.2

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

When i run locally i get no issues at all but the above error pops up on my Amazon ec2 instance (Ubuntu)

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Amazon ec2 instance (Ubuntu)
- Database: PostgreSQL
- Node.js version:20.12.2


### Prisma Version

```

```
5.13.0",,
2270441168,24022,Add a way to programmatically check if a field is nullable,"## Problem
I want to programmatically check if a field is nullable or not.

I want to integrate a third party filter with a query using an dynamic order by, something like:
```typescript
private prepareOrderBy(filter: ThirdPartyFilter): Prisma.MyEntityOrderByWithRelationInput {
  if (filter.sortBy) {
    return filter.sortBy.reduce((orderByAcm, sortByField) => {
      orderByAcm[sortByField.field] = {
        sort: sortByField.desc ? Prisma.SortOrder.desc : Prisma.SortOrder.asc,
        nulls: sortByField.nullsLast ? Prisma.NullsOrder.last : Prisma.NullsOrder.first,
      };
      return orderByAcm;
    }, {} as Prisma.MyEntityOrderByWithRelationInput);
  }
  return { createdAt: Prisma.SortOrder.desc };
}
```
The problem is that the order by typing depends if the field is nullable or not (so that we can include de null last or first thing):
```typescript
export type MyEntityOrderByWithRelationInput = {
  nonNullableField?: SortOrder
  nullableField?: SortOrderInput | SortOrder
}
```

And there is no way to know if the field is nullable or not programmatically, so I cant make it 100% dynamic. 

## Suggested solution

Maybe add on the [FieldRef interface](https://github.com/prisma/prisma/blob/1a64abcf4854f0688a846613f514b86de87c5661/packages/client/src/runtime/core/types/exported/FieldRef.ts#L4) a field to check if the field is required:
```typescript
/**
 * A reference to a specific field of a specific model
 */
export declare interface FieldRef<Model, FieldType> {
    readonly modelName: Model;
    readonly name: string;
    readonly typeName: FieldType;
    readonly isList: boolean;
    readonly isNullable: boolean; // <-- new field
}
```

That way I could check with `prismaClient.myEntity.fields[sortByField.field].isNullable`
",,
2269589955,24018,Cannot download prisma engines while prisma generate due to 404 Error,"### Bug description

We got same error from both prisma generate and prisma version

root@0abec131dcb6:/workspaces/DPT-CM-MONOREPO-NEW-V2# prisma version 
prisma:warn Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures. If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture ""armv7l"".
> Downloading Prisma engines for Node-API for linux-arm-openssl-3.0.x [                    ] 0%Error: Failed to fetch sha256 checksum at https://binaries.prisma.sh/all_commits/b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b/linux-arm-openssl-3.0.x/schema-engine.gz.sha256 - 404 Not Found

If you need to ignore this error (e.g. in an offline environment), set the PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING environment variable to a truthy value.
Example: PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1


OS: Docker node:22.0.0 on Mac M1 Chip with Sonoma 14.4.1 
Node.js version: v22.0.0

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

Should be able to show a version of prisma.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider        = ""prisma-client-js""
  binaryTargets   = [""native"", ""darwin-arm64"", ""linux-musl"", ""debian-openssl-3.0.x"", ""linux-arm64-openssl-3.0.x""]
  previewFeatures = [""orderByNulls""]
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: MacOS Somona 14.4.1 (Apple Silicon)
- Node.js version: Docker node:22.0.0


### Prisma Version

```
 ""prisma"": ""5.13.0"",
```
",,
2269517789,24014,"Prisma query using `contains` and `mode: ""insensitive""` errors","### Bug description

I am using Prisma in Express Javascript project.

Prisma version 5.12.1 (both prisma and @prisma/client)

Schema

```
model Image {
  id   String @id @unique
  code String @unique

  name String
  path String

  @@index([code])
}
```

Query in Express

	const query = {
		name: { contains: search, mode: 'insensitive' },
	};

	const results = await prisma.images.findMany({
		where: query,
		orderBy: {code: 'asc'},
		skip: 0,
		take: 10,
	});

Without the mode: ""insensitive"", the query is working fine.
With the mode: ""insensitive"", the query will hit this error below.

```
Invalid prisma.image.findMany() invocation:

{
where: {
code: {
contains: ""LOGO"",
mode: ""insensitive"",
~~~~
? equals?: String | StringFieldRefInput,
? in?: String[],
? notIn?: String[],
? lt?: String | StringFieldRefInput,
? lte?: String | StringFieldRefInput,
? gt?: String | StringFieldRefInput,
? gte?: String | StringFieldRefInput,
? startsWith?: String | StringFieldRefInput,
? endsWith?: String | StringFieldRefInput,
? not?: String | NestedStringFilter
}
},
orderBy: {
code: ""asc""
},
skip: 0,
take: 10
}

Unknown argument mode. Did you mean lte? Available options are marked with ?.
```


Similar issue have been raised here https://github.com/prisma/prisma/issues/18413
However, that is TypeScript project. so i am thinking if this still able to work on Javascript project.
",,
2269051663,24013,Feature request: Override generated SQL,"## Problem

This problem is related to multi-tenant set up with Prisma. A few Microsoft SQL servers with a lot of databases in each server. The problem can be described in various places:
* #2077
  * See last comment made by me here to get a more in-depth description of the problem and explored options.
* #20375

## Suggested solution

I would love to extend how the SQL is generated. My specific use case feels relatively easy, however it might have different impacts depending on which database type you are using. I'm using Microsoft SQL server. I would love something like this:
```typescript:
    const extendedClient = client.$extends({
        sql: {
          getTableName(tableName: string) {
            return `${databaseName}..${tableName}`;
          },
        },
    });
```

## Alternatives

As you can see in my comment in #2077, I've tried some workarounds, but none of them are efficient enough.

## Additional context

I'm using Microsoft SQL server and I understand that the suggested solution might not work for all types of databases and dialects.
",,
2268913306,24012,"AWS Lambda: @prisma/client did not initialize yet. Please run \""prisma generate\"" and try to import it again.","### Bug description

I'm trying to configure Prisma on our backend to replace typeorm. It works fine locally, but when i deploy it, i have the following error: @prisma/client did not initialize yet. Please run \""prisma generate\"" and try to import it again.
I've listed directory content, and i can see that `libquery_engine-rhel-openssl-1.0.x.so.node` and `schema.prisma` are present in `./node_modules/.prisma/client`. I'm lost here, and we are about to cancel the migration to Prisma.

Anyone has an idea of what could cause this error ?

### How to reproduce

1. push repository to github to trigger deployment via circle ci
2. install: 
``` shell
npm ci
npx prisma generate
```
3. deploy:
```shell
npx serverless deploy --stage develoment
```

4. init Prisma client with the following config:

```typescript
new PrismaClient({
        log: ['info', 'warn', 'error'],
        datasources: {
          db: {
            url: postgres://login:password@foo.bar.us-east-1.rds.amazonaws.com:5432/mydatabase_development?timezone=UTC,
          },
        },
      })

```

and get this:

```
    ""error"": {
            ""stack"": ""Error: @prisma/client did not initialize yet. Please run \""prisma generate\"" and try to import it again.\nIn case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report\n    at new PrismaClient (/var/task/node_modules/.prisma/client/default.js:43:11)\n    at Function.getInstance (webpack://ramdam-front-exposition-api/src/database/prisma/client.ts:11:34)\n    at getPrismaClient (webpack://ramdam-front-exposition-api/src/database/prisma/client.ts:24:54)\n    at <anonymous> (webpack://ramdam-front-exposition-api/src/api/users/controllers/get-me.ts:35:35)\n    at Generator.next (<anonymous>)\n    at fulfilled (webpack://ramdam-front-exposition-api/src/api/users/controllers/delete-me.ts:20:2)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)""
```

### Expected behavior

prisma to be intialized

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->


```ts
new PrismaClient({
        log: ['info', 'warn', 'error'],
        datasources: {
          db: {
            url: postgres://login:password@foo.bar.us-east-1.rds.amazonaws.com:5432/mydatabase_development?timezone=UTC,
          },
        },
      })
```


### Environment & setup

- OS: AWS lambda
- Database: Postgres
- Node.js version: node18

```
INIT_START Runtime Version: nodejs:18.v28	Runtime Version ARN: arn:aws:lambda:us-east-1::runtime:b475b23763329123d9e6f79f51886d0e1054f727f5b90ec945fcb2a3ec09afdd
```

### Prisma Version

```
    ""@prisma/client"": ""^5.13.0"",
    ""prisma"": ""^5.13.0"",
```    
",,
2268575032,24010,`prefer_socket` doesn't work when connect OceanBase with prisma,"### Bug description

- OceanBase is a MySQL compatible database and doesn't support `@@socket` variable. https://github.com/oceanbase/oceanbase/issues/1936
- When connect OceanBase with prisma, `prefer_socket` is configured and doesn't work with following error:

```
Error: Schema engine error:
Unknown system variable 'socket'
```

![image](https://github.com/oceanbase/oceanbase/assets/14918822/e2ee9418-3235-4e31-8873-ebff0eded9fe)

Related prisma issue:
- https://github.com/prisma/prisma/issues/18508
- https://github.com/prisma/prisma/issues/6207

### How to reproduce

- Clone reproducible repo: https://github.com/dengfuping/prisma-oceanbase-test
- isntall node and npm: https://nodejs.org/en
- run script `npm install`
- Configure oceanbase connect string in `.env.local` file
- run script `npx prisma migrate dev --name init`

### Expected behavior

`prefer_socket` works and connect OceanBase with prisma should be success.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> macOS
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> MySQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> v21.6.2


### Prisma Version

```
5.12.1
```",,
2267013087,23999,types are broken,"### Bug description

After importing 
`import { Prisma } from '@prisma/client';`
 and using model with enums  
 `async function onSubmit(data: Prisma.IssueUncheckedCreateInput) {`
  my typescript stopped work, I no longer get type highlighting and errors
  
  
![image](https://github.com/prisma/prisma/assets/106311891/94246b3b-be62-47cb-ae54-bad84f6c3a6a)
https://github.com/FullmetalBober/ProgressHub/blob/main/components/issues/CreateIssueModal.tsx#L46

### How to reproduce

<!--
1. Define model with enum variable
2. Generate @prisma/client
3. Import type from that model
4. Now your typescript not working
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

generator zod {
  provider                  = ""zod-prisma-types""
  output                    = ""./zod""
  createRelationValuesTypes = true
  useTypeAssertions         = true
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

/// @zod.strip()
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// @zod.strip()
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @zod.strip()
model User {
  id            String             @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  name          String?
  /// @zod.string.trim().min(1).max(255)
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMembers[]
  issues        Issue[]
}

/// @zod.strip()
model Workspace {
  id      String             @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  name    String             @unique
  image   String?
  members WorkspaceMembers[]
  issues  Issue[]
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

/// @zod.strip()
model WorkspaceMembers {
  id          String    @id @default(cuid())
  role        Role
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
}

enum Status {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum Priority {
  NO_PRIORITY
  URGENT
  HIGH
  MEDIUM
  LOW
}

/// @zod.strip()
model Issue {
  id          String    @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  title       String
  /// @zod.string.trim().min(1).max(255)
  description String    @default("""")
  status      Status    @default(BACKLOG)
  priority    Priority  @default(NO_PRIORITY)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  assigneeId  String
  assignee    User      @relation(fields: [assigneeId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

/// @zod.strip()
model Comment {
  id        String   @id @default(cuid())
  /// @zod.string.trim().min(1).max(255)
  body      String
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.7.0
- Typescript version: 5.4.5


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.7.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules\.pnpm\@prisma+engines@5.13.0\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules\.pnpm\@prisma+engines@5.13.0\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2266197553,23993,Prisma Client Doesn't Recognize Accelerate,"### Bug description

I'm using NextAuth for authentication and using Prisma to manage it. I switched to Prisma Accelerate because I wanted to access db stuff within the middleware.

So I went, and I extended it with Accelerate, and I get this error:
```
 PrismaClient is not configured to run in Vercel Edge Functions or Edge Middleware. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
```

### How to reproduce

Setup the database connection like this 
```ts 
import { PrismaClient } from ""@prisma/client"";
import { withAccelerate } from ""@prisma/extension-accelerate"";

declare global {
  var prisma: any | undefined;
}

export const db =
  globalThis.prisma || new PrismaClient().$extends(withAccelerate());

if (process.env.NODE_ENV !== ""production"") globalThis.prisma = db;
```

### Expected behavior

Middleware should be working with Accelerate and Prisma should be able to detect it. 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @unique @default(cuid())
  name                  String
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  banner                String?
  password              String?
  accountTypeId         Int                    @default(1)
  bio                   String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  articles              Article[]

  following Follow[] @relation(""Following"")
  followers Follow[] @relation(""FollowedBy"")

  blocking  Block[] @relation(""Blocking"")
  blockedBy Block[] @relation(""BlockedBy"")

  accountType AccountType @relation(fields: [accountTypeId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  stream      Stream?
  dislikes    DisLike[]
  createdAt   DateTime    @default(now())
  ban         Ban?
  videos      Video[]
}

model Stream {
  id        String  @id @default(cuid())
  name      String  @db.Text
  thumbnail String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelay         Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  description String? @db.Text

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation(name: ""Following"", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: ""FollowedBy"", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId, followingId], name: ""unique_follow"")
}

model Block {
  id        String @id @default(cuid())
  blockerId String
  blockedId String

  blocker User @relation(name: ""Blocking"", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: ""BlockedBy"", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockedId, blockerId])
  @@index([blockedId, blockerId], name: ""unique_block"")
}

model AccountType {
  id   Int    @id @unique @default(autoincrement())
  name String @unique
  User User[]
}

model Ban {
  id        String   @id @default(cuid())
  userId    String
  reason    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Article {
  id        String    @id @default(cuid())
  title     String    @unique
  thumbnail String?
  content   Json?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  dislikes  DisLike[]
  comments  Comment[]
  summary   String    @default("""") @db.Text
}

model Video {
  id           String @id @default(cuid())
  title        String
  description  String @db.Text
  videoUrl     String
  thumbnailUrl String

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  likes    Like[]
  dislikes DisLike[]
  comments Comment[]
}

model VisibilityType {
  id   Int    @id @unique @default(autoincrement())
  name String @unique
}

model Like {
  id String @id @default(cuid())

  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?

  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model DisLike {
  id String @id @default(cuid())

  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?

  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model Comment {
  id String @id @default(cuid())

  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  content  String
  parent   Comment?  @relation(name: ""Parent"", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children Comment[] @relation(""Parent"")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id String @id @default(cuid())

  namespace String
  event     Json?
  count     Int
}

```

```ts
import bcrypt from ""bcrypt-edge"";
import type { NextAuthConfig } from ""next-auth"";
import Credentials from ""next-auth/providers/credentials"";
import Google from ""next-auth/providers/google"";

import { LoginSchema } from ""@/schemas"";
import { getUserByEmail } from ""@/data/user"";

export default {
  providers: [
    Credentials({
      async authorize(credentials) {
        const validatedFields = LoginSchema.safeParse(credentials);

        if (validatedFields.success) {
          const { email, password } = validatedFields.data;

          const user = await getUserByEmail(email);
          if (!user || !user.password) return null;

          const passwordsMatch = bcrypt.compareSync(password, user.password);

          if (passwordsMatch) return user;
        }

        return null;
      },
    }),
    Google({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
} satisfies NextAuthConfig;

```


### Environment & setup

- OS: Windows & Ubuntu
- Database: PostgreSQL
- Node.js version: v21.7.3


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v21.7.3
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```",,
2265516468,23990,How to exclude fields from method return value based on query parameters?,"### Discussed in https://github.com/prisma/prisma/discussions/23947

<div type='discussions-op-text'>

<sup>Originally posted by **Cat7373** April 24, 2024</sup>
### Question

My model is defined as follows:

```prisma
model User {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  password String
  regionId Int
  role     Role
  addtime  DateTime
  regUid   Int?
  lock     Boolean
}
```

When querying using findMany, the return value is defined as follows:

```typescript
const r = await prisma.user.findMany({ omit: { password: true } })
```

![image](https://github.com/prisma/prisma/assets/9296576/91727dca-6bfa-44b7-b34b-4cab20e2289a)

As you can see, there is no password field.

---

I'm trying to write a general utility method whose return value is deduced as follows:

```typescript
async function testQuery<M, A extends Prisma.Args<M, 'findMany'>>(model: M, queryParams: A) {
  return await (model as any).findMany({ ...queryParams }) as Result<M, A, 'findMany'>
}

const r = await testQuery(usePrisma().user, { omit: { password: true } })
```

![image](https://github.com/prisma/prisma/assets/9296576/97c47913-c03f-43a3-a0b9-de415133a78b)

As you can see, the password field was not successfully excluded.

Please help, how to define the parameters and return values of testQuery so that parameter exclusion can be handled correctly, thank you.



### How to reproduce (optional)

_No response_

### Expected behavior (optional)

_No response_

### Information about Prisma Schema, Client Queries and Environment (optional)

<!-- Paste your Prisma schema below. Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""omitApi""]
}

datasource db {
  provider          = ""mysql""
  url               = env(""DATABASE_URL"")
  shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
}

enum Role {
  ADMIN
  USER
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  password String
  regionId Int
  role     Role
  addtime  DateTime
  regUid   Int?
  lock     Boolean
}
```


- OS: MacOS
- Database: MySQL
- Node.js version: v21.7.3


```
Environment variables loaded from .env
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.7.3
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
Preview Features        : omitApi
```
</div>",,
2265292757,23987,Improvements to the `$queryRaw` function's type signature,"## Problem

Using `$queryRaw` currently gives you no type safety at all. This is frustrating in a number of scenarios, where it would be perfectly possible to get the information without compromising on type accuracy.

Here are some examples:

```ts
const rows = await postgres.$queryRaw`SELECT ""id"" FROM ""User"" WHERE ""email"" = ${email}`
const emailExists = rows.length > 0 // ERROR: cannot read property length of unknown
```

```ts
const rows = await postgres.$queryRaw`SELECT ""name"" FROM ""User""`

for (const row of rows) { // ERROR: cannot iterate over unknown
  console.log(row)
}
```

There is also some frustration when specifying the type of the rows using the functions type parameters. `$queryRaw` will always return an array, yet it's possible to use the type parameters to specify something that isn't an array:

```ts
// The problem starts here, in order to work with Prisma 5.x you need to specify Array<{ name: string }> as the type parameter, not just the object
const rows = `await postgres.$queryRaw<{ name: string }>`SELECT ""name"" FROM ""User""`

for (const row of rows) { // ERROR: cannot iterate over object
  console.log(row)
}
```

## Suggested solution

I propose that we change the function signature as follows:

```diff
- $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>
+ $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T[]>
```

This would make all the examples above work.

Note that this would be a breaking change, since users of the current type parameter already specifies the extra `Array<...>` that would be superfluous after this change.

## Alternatives

Another alternativ would be to go one step further, as discussed in #15263. However, my experience with `Record` is that it's not always desired, since it can potentially lead to some problems when trying to do guarded type casts. I think that this would need additional investigation before pursuing:

```diff
- $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>
+ $queryRaw<T extends Record<string, unknown> = Record<string, unknown>>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T[]>
```

-----

Another alternative would be to remove the ability to specify a type parameter. I actually would prefer this solution since the current disguises a type assertion, and is even listed as a [common misstake in the DefinitelyTyped guide](https://github.com/DefinitelyTyped/DefinitelyTyped?tab=readme-ov-file#common-mistakes).

This is especially problematic for serious organizations that use linting to disallow unsafe type casts, since this usage cannot be checked by the linter.

```diff
- $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>
+ $queryRaw(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<unknown[]>
```

For current users, this would be slightly more work to update, but the upside would be that they would be made aware of their unchecked type assertions! It would be something like this:

```diff
- await postgres.$queryRaw<Array<{ id: string }>>`SELECT ""id"" FROM ""User""`
+ await postgres.$queryRaw`SELECT ""id"" FROM ""User""` as Array<{ id: string }>
```

Personally, I think that this would be the best approach. But unfortunately, when maintaining types, I've seen a lot of pushback from users that prefer things to be easy rather than correct. And since this would be a (slightly) larger change for current users, I'm including it as an alternative instead of the main proposal.

## Additional context

Related bug: https://github.com/prisma/prisma/issues/15263
",,
2264995529,23977,"@prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.","### Bug description


![image](https://github.com/prisma/prisma/assets/85681437/8cd0bb6c-6ecd-425e-abf8-143ff7546ea5)



### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2264427170,23973,Type inference broken for aggregation queries when extension is turned on.,"### Bug description

When an extension is turned on (have attempted this with multiple extensions) it causes aggregation queries to show types that are not fully ""computed"" or ""reduced"" as compared to when an extension is off.


### How to reproduce

Instally any extension, e.g. [prisma-kysely](https://github.com/eoin-obrien/prisma-extension-kysely)

Attempt to run any aggregation query:
`await snapshotDb.snapshotRecord.aggregate({_count:true})`

Type shown by VSCode:
<img width=""748"" alt=""image"" src=""https://github.com/prisma/prisma/assets/8183188/5816acae-da25-4132-b76e-f628f9e517ea"">

### Expected behavior

<img width=""749"" alt=""image"" src=""https://github.com/prisma/prisma/assets/8183188/c3f06400-72e3-4858-b7e5-e30c16358aa5"">

## Prisma Schema

```
model SnapshotRecord {
  id String @default(cuid()) @id
}
```

### Environment & setup

Node.js v20.11.0

### Prisma Version

""@prisma/client"": ""5.13.0""
""prisma"": ""5.13.0"",
""prisma-extension-kysely"": ""2.1.0"",
""prisma-kysely"": ""1.8.0"",",,
2263197248,23964,Using a edge driver have typescript typings issues,"> [!TIP]
> Solution TLDR; You just need to regenerate prisma (`npx prisma generate`) after adding 
>```
>generator client {
>  provider = ""prisma-client-js""
>  previewFeatures = [""driverAdapters""]
>}
>```

### Bug description

Typescript typings are missing `driver` field.

### How to reproduce

1. Read [this](https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-vercel#vercel-postgres)

2. Try this code sample:

```tsx
import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { PrismaNeon } from '@prisma/adapter-neon'
import { Pool } from '@neondatabase/serverless'

export const runtime = 'edge'

export async function GET(request: Request) {
  const neon = new Pool({ connectionString: process.env.POSTGRES_PRISMA_URL })
  const adapter = new PrismaNeon(neon)
  const prisma = new PrismaClient({ adapter })

  const users = await prisma.user.findMany()

  return NextResponse.json(users, { status: 200 })
}
```

3. Take a look at TypeScript Yielding on `const prisma = new PrismaClient({ adapter })`

Currently the type are this way:

```ts
export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default ""colorless""
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }
```

### Expected behavior

No yield

### Prisma information

See above

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.11.1


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../../../Library/Caches/pnpm/dlx/32qs76zfpdzhrg4l3y6ui3zucu/18f14995f26-179a7/node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at ../../../../Library/Caches/pnpm/dlx/32qs76zfpdzhrg4l3y6ui3zucu/18f14995f26-179a7/node_modules/.pnpm/@prisma+engines@5.13.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
Preview Features        : driverAdapters        
```",,
2263139071,23962,why can't create data with spread operator,"### Bug description

I have a json request like this example
```
{
  ""tmGroupId"": ""2af23e15-5c34-48c0-a876-c5e511ec047b"",
  ""tmHospitalId"": ""5ba21c7b-8962-4b43-a90a-8be6a977772e"",
  ""vendorId"": 2,
  ""poDate"": ""2024-09-01"",
  ""orderBy"": ""febri"",
  ""dueDate"": ""2024-09-01"",
  ""reqNumber"": ""RR-1233"",
  ""storeId"": 1,
  ""address"": ""testing"",
  ""notes"": ""testing"",
  ""discount"": null,
  ""dicountType"": null,
  ""total"": 10000,
  ""createdBy"": ""febri"",
  ""updatedBy"": ""febri"",
  ""document"": null,
  ""signatures"": null,
  ""items"": [
    {
      ""itemType"": ""CONSUMABLE"",
      ""itemId"": 459,
      ""qty"": 10,
      ""unitId"": 10,
      ""conversion"": 10,
      ""unitPrice"": 10,
      ""discount"": null,
      ""totalPrice"": 10000,
      ""createdBy"": ""febri"",
      ""updatedBy"": ""febri""
    }
  ]
}
```

When I want to insert with the spread operator like the code below it always produces an error
```
const poCreate = await prisma.purchaseOrder.create({
  data: {
    poNumber: poNumber,
    ...body,
  },
});
```
        
but if i like this it works
```
const poCreate = await prisma.purchaseOrder.create({
    data: {
      poNumber: poNumber,
      purchaseRequestId: body.purchaseRequestId,
      tmGroupId: body.tmGroupId,
      tmHospitalId: body.tmHospitalId,
      vendorId: body.vendorId,
      poDate: body.poDate,
      orderBy: body.orderBy,
      dueDate: body.dueDate,
      reqNumber: body.reqNumber,
      storeId: body.storeId,
      address: body.address,
      notes: body.notes,
      discount: body.discount,
      discountType: body.discountType,
      total: body.total,
      createdBy: body.createdBy,
      updatedBy: body.updatedBy,
    },
  });
```
  
  even though the body data has been validated with DTO and the fields and data types are all the same
  here is the error
  
  prisma:error 
Invalid `prisma.purchaseOrder.create()` invocation in
/Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:53

  96 const poNumber = await prisma.purchaseOrder.generatePoNumber(
  97   body.tmGroupId,
  98 );
→ 99 const poCreate = await prisma.purchaseOrder.create({
       data: {
         poNumber: ""PR24042500001"",
         tmGroupId: ""2af23e15-5c34-48c0-a876-c5e511ec047b"",
         ~~~~~~~~~
         tmHospitalId: ""5ba21c7b-8962-4b43-a90a-8be6a977772e"",
         vendorId: 2,
         poDate: new Date(""2024-09-01T00:00:00.000Z""),
         orderBy: ""febri"",
         dueDate: new Date(""2024-09-01T00:00:00.000Z""),
         reqNumber: ""RR-1233"",
         storeId: 1,
         address: ""testing"",
         notes: ""testing"",
         discount: null,
         dicountType: null,
         total: 10000,
         createdBy: ""febri"",
         updatedBy: ""febri"",
         document: null,
         signatures: [
           {
             userId: ""8b34795a-3240-4e41-b812-aa8e5084292a"",
             signatureUrl: ""https://klinik-tangerang-selatan.s3.ap-southeast-1.amazonaws.com/8b34795a-3240-4e41-b812-aa8e5084292a/sign/aespirkutkouulop.png"",
             userPosition: ""Manager PO"",
             fullName: ""Muhammad Faisal"",
             notes: ""123456""
           }
         ],
         items: [
           {
             itemType: ""CONSUMABLE"",
             itemId: 459,
             qty: 10,
             unitId: 10,
             conversion: 10,
             unitPrice: 10,
             discount: null,
             totalPrice: 10000,
             createdBy: ""febri"",
             updatedBy: ""febri""
           }
         ],
     ?   id?: String,
     ?   discountType?: EnumPurchaseOrderDiscountType | Null,
     ?   poNonVendor?: Boolean | Null,
     ?   status?: EnumPurchaseOrderStatus,
     ?   active?: EnumPurchaseOrderPaymentActive,
     ?   createdAt?: DateTime | Null,
     ?   updatedAt?: DateTime | Null,
     ?   tmGroup?: TmGroupsCreateNestedOneWithoutPurchaseOrderInput,
     ?   hospital?: TmHospitalsCreateNestedOneWithoutPurchaseOrderInput,
     ?   vendor?: VendorCreateNestedOneWithoutPurchaseOrderInput,
     ?   store?: StoreDepotsCreateNestedOneWithoutPurchaseOrderInput,
     ?   purchaseRequest?: PurchaseRequestCreateNestedOneWithoutPurchaseOrderInput,
     ?   goodReceived?: GoodReceivedCreateNestedManyWithoutPurchaseOrderInput,
     ?   invoice?: InvoiceCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderItems?: PurchaseOrderItemsCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderSignatures?: PurchaseOrderSignaturesCreateNestedManyWithoutPurchaseOrderInput,
     ?   procurementDocuments?: ProcurementDocumentsCreateNestedManyWithoutReferencePOInput
       }
     })

Unknown argument `tmGroupId`. Did you mean `tmGroup`? Available options are marked with ?.
[Nest] 77940  - 04/25/2024, 4:29:50 PM     LOG Query: ROLLBACK [] 54ms
[Nest] 77940  - 04/25/2024, 4:29:50 PM   ERROR [ExceptionsHandler] 
Invalid `prisma.purchaseOrder.create()` invocation in
/Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:53

  96 const poNumber = await prisma.purchaseOrder.generatePoNumber(
  97   body.tmGroupId,
  98 );
→ 99 const poCreate = await prisma.purchaseOrder.create({
       data: {
         poNumber: ""PR24042500001"",
         tmGroupId: ""2af23e15-5c34-48c0-a876-c5e511ec047b"",
         ~~~~~~~~~
         tmHospitalId: ""5ba21c7b-8962-4b43-a90a-8be6a977772e"",
         vendorId: 2,
         poDate: new Date(""2024-09-01T00:00:00.000Z""),
         orderBy: ""febri"",
         dueDate: new Date(""2024-09-01T00:00:00.000Z""),
         reqNumber: ""RR-1233"",
         storeId: 1,
         address: ""testing"",
         notes: ""testing"",
         discount: null,
         dicountType: null,
         total: 10000,
         createdBy: ""febri"",
         updatedBy: ""febri"",
         document: null,
         signatures: [
           {
             userId: ""8b34795a-3240-4e41-b812-aa8e5084292a"",
             signatureUrl: ""https://klinik-tangerang-selatan.s3.ap-southeast-1.amazonaws.com/8b34795a-3240-4e41-b812-aa8e5084292a/sign/aespirkutkouulop.png"",
             userPosition: ""Manager PO"",
             fullName: ""Muhammad Faisal"",
             notes: ""123456""
           }
         ],
         items: [
           {
             itemType: ""CONSUMABLE"",
             itemId: 459,
             qty: 10,
             unitId: 10,
             conversion: 10,
             unitPrice: 10,
             discount: null,
             totalPrice: 10000,
             createdBy: ""febri"",
             updatedBy: ""febri""
           }
         ],
     ?   id?: String,
     ?   discountType?: EnumPurchaseOrderDiscountType | Null,
     ?   poNonVendor?: Boolean | Null,
     ?   status?: EnumPurchaseOrderStatus,
     ?   active?: EnumPurchaseOrderPaymentActive,
     ?   createdAt?: DateTime | Null,
     ?   updatedAt?: DateTime | Null,
     ?   tmGroup?: TmGroupsCreateNestedOneWithoutPurchaseOrderInput,
     ?   hospital?: TmHospitalsCreateNestedOneWithoutPurchaseOrderInput,
     ?   vendor?: VendorCreateNestedOneWithoutPurchaseOrderInput,
     ?   store?: StoreDepotsCreateNestedOneWithoutPurchaseOrderInput,
     ?   purchaseRequest?: PurchaseRequestCreateNestedOneWithoutPurchaseOrderInput,
     ?   goodReceived?: GoodReceivedCreateNestedManyWithoutPurchaseOrderInput,
     ?   invoice?: InvoiceCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderItems?: PurchaseOrderItemsCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderSignatures?: PurchaseOrderSignaturesCreateNestedManyWithoutPurchaseOrderInput,
     ?   procurementDocuments?: ProcurementDocumentsCreateNestedManyWithoutReferencePOInput
       }
     })

Unknown argument `tmGroupId`. Did you mean `tmGroup`? Available options are marked with ?.
PrismaClientValidationError: 
Invalid `prisma.purchaseOrder.create()` invocation in
/Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:53

  96 const poNumber = await prisma.purchaseOrder.generatePoNumber(
  97   body.tmGroupId,
  98 );
→ 99 const poCreate = await prisma.purchaseOrder.create({
       data: {
         poNumber: ""PR24042500001"",
         tmGroupId: ""2af23e15-5c34-48c0-a876-c5e511ec047b"",
         ~~~~~~~~~
         tmHospitalId: ""5ba21c7b-8962-4b43-a90a-8be6a977772e"",
         vendorId: 2,
         poDate: new Date(""2024-09-01T00:00:00.000Z""),
         orderBy: ""febri"",
         dueDate: new Date(""2024-09-01T00:00:00.000Z""),
         reqNumber: ""RR-1233"",
         storeId: 1,
         address: ""testing"",
         notes: ""testing"",
         discount: null,
         dicountType: null,
         total: 10000,
         createdBy: ""febri"",
         updatedBy: ""febri"",
         document: null,
         signatures: [
           {
             userId: ""8b34795a-3240-4e41-b812-aa8e5084292a"",
             signatureUrl: ""https://klinik-tangerang-selatan.s3.ap-southeast-1.amazonaws.com/8b34795a-3240-4e41-b812-aa8e5084292a/sign/aespirkutkouulop.png"",
             userPosition: ""Manager PO"",
             fullName: ""Muhammad Faisal"",
             notes: ""123456""
           }
         ],
         items: [
           {
             itemType: ""CONSUMABLE"",
             itemId: 459,
             qty: 10,
             unitId: 10,
             conversion: 10,
             unitPrice: 10,
             discount: null,
             totalPrice: 10000,
             createdBy: ""febri"",
             updatedBy: ""febri""
           }
         ],
     ?   id?: String,
     ?   discountType?: EnumPurchaseOrderDiscountType | Null,
     ?   poNonVendor?: Boolean | Null,
     ?   status?: EnumPurchaseOrderStatus,
     ?   active?: EnumPurchaseOrderPaymentActive,
     ?   createdAt?: DateTime | Null,
     ?   updatedAt?: DateTime | Null,
     ?   tmGroup?: TmGroupsCreateNestedOneWithoutPurchaseOrderInput,
     ?   hospital?: TmHospitalsCreateNestedOneWithoutPurchaseOrderInput,
     ?   vendor?: VendorCreateNestedOneWithoutPurchaseOrderInput,
     ?   store?: StoreDepotsCreateNestedOneWithoutPurchaseOrderInput,
     ?   purchaseRequest?: PurchaseRequestCreateNestedOneWithoutPurchaseOrderInput,
     ?   goodReceived?: GoodReceivedCreateNestedManyWithoutPurchaseOrderInput,
     ?   invoice?: InvoiceCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderItems?: PurchaseOrderItemsCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderSignatures?: PurchaseOrderSignaturesCreateNestedManyWithoutPurchaseOrderInput,
     ?   procurementDocuments?: ProcurementDocumentsCreateNestedManyWithoutReferencePOInput
       }
     })

Unknown argument `tmGroupId`. Did you mean `tmGroup`? Available options are marked with ?.
    at Tn (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:115:5888)
    at In.handleRequestError (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:122:6510)
    at In.handleAndLogRequestError (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:122:5896)
    at l (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:127:11167)
    at /Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:26
    at Proxy._transactionWithCallback (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:127:9534)
    at PurchaseOrderController.createPurchaseOrder (/Users/febri/Documents/repository/core-inventory/src/app/v1/controllers/purchase.order.controller/purchase.order.controller.ts:97:5)
    at /Users/febri/Documents/repository/core-inventory/node_modules/@nestjs/core/router/router-execution-context.js:46:28
    at /Users/febri/Documents/repository/core-inventory/node_modules/@nestjs/core/router/router-proxy.js:9:17
[Nest] 77940  - 04/25/2024, 4:29:50 PM     LOG ::1 - - [25/Apr/2024:09:29:50 +0000] ""POST /inventory/v1/purchase-order HTTP/1.1"" 500 52 ""http://localhost:3000/inventory"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36""

[Nest] 77940  - 04/25/2024, 4:32:17 PM     LOG Query: SELECT 1 [] 13ms
[Nest] 77940  - 04/25/2024, 4:32:17 PM     LOG Query: BEGIN [] 15ms
[Nest] 77940  - 04/25/2024, 4:32:17 PM     LOG Query: SELECT 1 [] 15ms
[Nest] 77940  - 04/25/2024, 4:32:17 PM     LOG Query: SELECT ""public"".""purchase_request"".""id"", ""public"".""purchase_request"".""prDate"", ""public"".""purchase_request"".""prNumber"", ""public"".""purchase_request"".""orderBy"", ""public"".""purchase_request"".""notes"", ""public"".""purchase_request"".""active""::text, ""public"".""purchase_request"".""status""::text, ""public"".""purchase_request"".""approvedDate"", ""public"".""purchase_request"".""approvedBy"", ""public"".""purchase_request"".""createdBy"", ""public"".""purchase_request"".""updatedBy"", ""public"".""purchase_request"".""createdAt"", ""public"".""purchase_request"".""updatedAt"", ""public"".""purchase_request"".""userIdApprovedBy"", ""public"".""purchase_request"".""tmHospitalId"", ""public"".""purchase_request"".""tmGroupId"", ""public"".""purchase_request"".""vendorId"" FROM ""public"".""purchase_request"" WHERE (""public"".""purchase_request"".""tmGroupId"" = $1 AND ""public"".""purchase_request"".""createdAt"" >= $2 AND ""public"".""purchase_request"".""createdAt"" <= $3) ORDER BY ""public"".""purchase_request"".""prNumber"" DESC LIMIT $4 OFFSET $5 [""2af23e15-5c34-48c0-a876-c5e511ec047b"",""2024-04-24 17:00:00 UTC"",""2024-04-25 16:59:59.999 UTC"",1,0] 31ms
prisma:error 
Invalid `prisma.purchaseOrder.create()` invocation in
/Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:53

  96 const poNumber = await prisma.purchaseOrder.generatePoNumber(
  97   body.tmGroupId,
  98 );
→ 99 const poCreate = await prisma.purchaseOrder.create({
       data: {
         poNumber: ""PR24042500001"",
         tmGroupId: ""2af23e15-5c34-48c0-a876-c5e511ec047b"",
         ~~~~~~~~~
         tmHospitalId: ""5ba21c7b-8962-4b43-a90a-8be6a977772e"",
         vendorId: 2,
         poDate: new Date(""2024-09-01T00:00:00.000Z""),
         orderBy: ""febri"",
         dueDate: new Date(""2024-09-01T00:00:00.000Z""),
         reqNumber: ""RR-1233"",
         storeId: 1,
         address: ""testing"",
         notes: ""testing"",
         discount: null,
         dicountType: null,
         total: 10000,
         createdBy: ""febri"",
         updatedBy: ""febri"",
         document: null,
         signatures: null,
         items: [
           {
             itemType: ""CONSUMABLE"",
             itemId: 459,
             qty: 10,
             unitId: 10,
             conversion: 10,
             unitPrice: 10,
             discount: null,
             totalPrice: 10000,
             createdBy: ""febri"",
             updatedBy: ""febri""
           }
         ],
     ?   id?: String,
     ?   discountType?: EnumPurchaseOrderDiscountType | Null,
     ?   poNonVendor?: Boolean | Null,
     ?   status?: EnumPurchaseOrderStatus,
     ?   active?: EnumPurchaseOrderPaymentActive,
     ?   createdAt?: DateTime | Null,
     ?   updatedAt?: DateTime | Null,
     ?   tmGroup?: TmGroupsCreateNestedOneWithoutPurchaseOrderInput,
     ?   hospital?: TmHospitalsCreateNestedOneWithoutPurchaseOrderInput,
     ?   vendor?: VendorCreateNestedOneWithoutPurchaseOrderInput,
     ?   store?: StoreDepotsCreateNestedOneWithoutPurchaseOrderInput,
     ?   purchaseRequest?: PurchaseRequestCreateNestedOneWithoutPurchaseOrderInput,
     ?   goodReceived?: GoodReceivedCreateNestedManyWithoutPurchaseOrderInput,
     ?   invoice?: InvoiceCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderItems?: PurchaseOrderItemsCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderSignatures?: PurchaseOrderSignaturesCreateNestedManyWithoutPurchaseOrderInput,
     ?   procurementDocuments?: ProcurementDocumentsCreateNestedManyWithoutReferencePOInput
       }
     })

Unknown argument `tmGroupId`. Did you mean `tmGroup`? Available options are marked with ?.
[Nest] 77940  - 04/25/2024, 4:32:17 PM     LOG Query: ROLLBACK [] 13ms
[Nest] 77940  - 04/25/2024, 4:32:17 PM   ERROR [ExceptionsHandler] 
Invalid `prisma.purchaseOrder.create()` invocation in
/Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:53

  96 const poNumber = await prisma.purchaseOrder.generatePoNumber(
  97   body.tmGroupId,
  98 );
→ 99 const poCreate = await prisma.purchaseOrder.create({
       data: {
         poNumber: ""PR24042500001"",
         tmGroupId: ""2af23e15-5c34-48c0-a876-c5e511ec047b"",
         ~~~~~~~~~
         tmHospitalId: ""5ba21c7b-8962-4b43-a90a-8be6a977772e"",
         vendorId: 2,
         poDate: new Date(""2024-09-01T00:00:00.000Z""),
         orderBy: ""febri"",
         dueDate: new Date(""2024-09-01T00:00:00.000Z""),
         reqNumber: ""RR-1233"",
         storeId: 1,
         address: ""testing"",
         notes: ""testing"",
         discount: null,
         dicountType: null,
         total: 10000,
         createdBy: ""febri"",
         updatedBy: ""febri"",
         document: null,
         signatures: null,
         items: [
           {
             itemType: ""CONSUMABLE"",
             itemId: 459,
             qty: 10,
             unitId: 10,
             conversion: 10,
             unitPrice: 10,
             discount: null,
             totalPrice: 10000,
             createdBy: ""febri"",
             updatedBy: ""febri""
           }
         ],
     ?   id?: String,
     ?   discountType?: EnumPurchaseOrderDiscountType | Null,
     ?   poNonVendor?: Boolean | Null,
     ?   status?: EnumPurchaseOrderStatus,
     ?   active?: EnumPurchaseOrderPaymentActive,
     ?   createdAt?: DateTime | Null,
     ?   updatedAt?: DateTime | Null,
     ?   tmGroup?: TmGroupsCreateNestedOneWithoutPurchaseOrderInput,
     ?   hospital?: TmHospitalsCreateNestedOneWithoutPurchaseOrderInput,
     ?   vendor?: VendorCreateNestedOneWithoutPurchaseOrderInput,
     ?   store?: StoreDepotsCreateNestedOneWithoutPurchaseOrderInput,
     ?   purchaseRequest?: PurchaseRequestCreateNestedOneWithoutPurchaseOrderInput,
     ?   goodReceived?: GoodReceivedCreateNestedManyWithoutPurchaseOrderInput,
     ?   invoice?: InvoiceCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderItems?: PurchaseOrderItemsCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderSignatures?: PurchaseOrderSignaturesCreateNestedManyWithoutPurchaseOrderInput,
     ?   procurementDocuments?: ProcurementDocumentsCreateNestedManyWithoutReferencePOInput
       }
     })

Unknown argument `tmGroupId`. Did you mean `tmGroup`? Available options are marked with ?.
PrismaClientValidationError: 
Invalid `prisma.purchaseOrder.create()` invocation in
/Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:53

  96 const poNumber = await prisma.purchaseOrder.generatePoNumber(
  97   body.tmGroupId,
  98 );
→ 99 const poCreate = await prisma.purchaseOrder.create({
       data: {
         poNumber: ""PR24042500001"",
         tmGroupId: ""2af23e15-5c34-48c0-a876-c5e511ec047b"",
         ~~~~~~~~~
         tmHospitalId: ""5ba21c7b-8962-4b43-a90a-8be6a977772e"",
         vendorId: 2,
         poDate: new Date(""2024-09-01T00:00:00.000Z""),
         orderBy: ""febri"",
         dueDate: new Date(""2024-09-01T00:00:00.000Z""),
         reqNumber: ""RR-1233"",
         storeId: 1,
         address: ""testing"",
         notes: ""testing"",
         discount: null,
         dicountType: null,
         total: 10000,
         createdBy: ""febri"",
         updatedBy: ""febri"",
         document: null,
         signatures: null,
         items: [
           {
             itemType: ""CONSUMABLE"",
             itemId: 459,
             qty: 10,
             unitId: 10,
             conversion: 10,
             unitPrice: 10,
             discount: null,
             totalPrice: 10000,
             createdBy: ""febri"",
             updatedBy: ""febri""
           }
         ],
     ?   id?: String,
     ?   discountType?: EnumPurchaseOrderDiscountType | Null,
     ?   poNonVendor?: Boolean | Null,
     ?   status?: EnumPurchaseOrderStatus,
     ?   active?: EnumPurchaseOrderPaymentActive,
     ?   createdAt?: DateTime | Null,
     ?   updatedAt?: DateTime | Null,
     ?   tmGroup?: TmGroupsCreateNestedOneWithoutPurchaseOrderInput,
     ?   hospital?: TmHospitalsCreateNestedOneWithoutPurchaseOrderInput,
     ?   vendor?: VendorCreateNestedOneWithoutPurchaseOrderInput,
     ?   store?: StoreDepotsCreateNestedOneWithoutPurchaseOrderInput,
     ?   purchaseRequest?: PurchaseRequestCreateNestedOneWithoutPurchaseOrderInput,
     ?   goodReceived?: GoodReceivedCreateNestedManyWithoutPurchaseOrderInput,
     ?   invoice?: InvoiceCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderItems?: PurchaseOrderItemsCreateNestedManyWithoutPurchaseOrderInput,
     ?   purchaseOrderSignatures?: PurchaseOrderSignaturesCreateNestedManyWithoutPurchaseOrderInput,
     ?   procurementDocuments?: ProcurementDocumentsCreateNestedManyWithoutReferencePOInput
       }
     })

Unknown argument `tmGroupId`. Did you mean `tmGroup`? Available options are marked with ?.
    at Tn (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:115:5888)
    at In.handleRequestError (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:122:6510)
    at In.handleAndLogRequestError (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:122:5896)
    at l (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:127:11167)
    at /Users/febri/Documents/repository/core-inventory/src/app/v1/services/purchase.order.service/purchase.order.service.ts:99:26
    at Proxy._transactionWithCallback (/Users/febri/Documents/repository/core-inventory/node_modules/@prisma/client/runtime/library.js:127:9534)
    at PurchaseOrderController.createPurchaseOrder (/Users/febri/Documents/repository/core-inventory/src/app/v1/controllers/purchase.order.controller/purchase.order.controller.ts:97:5)
    at /Users/febri/Documents/repository/core-inventory/node_modules/@nestjs/core/router/router-execution-context.js:46:28
    at /Users/febri/Documents/repository/core-inventory/node_modules/@nestjs/core/router/router-proxy.js:9:17


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v21.7.1


### Prisma Version

```
5.12.0
```
",,
2262126336,23957,`findUnique()` batching exceeding parameter binding limits,"### Bug description

While querying large datasets leveraging `findUnique` to prevent GraphQL N+1s, we're experiencing parameter binding errors due to the amount of bound parameters created in the batched query.

This causes the graphql query hitting these resolvers to fail.

Error: 
```
prisma.account.findUnique(
  Assertion violation on the database: `too many bind variables in prepared statement, expected maximum of 32767, 
  received 150656`
```

### How to reproduce

1. With over 33000 rows in the table you're querying
2. Perform 33000 individual entity.findUnique() queries in a `Promise.all`, simulating a large GQL N+1
3. Expect parameter binding error after surpassing your Postgres variable binding limit.


### Expected behavior

Potentially split queries that would exceed the bound param limit into multiple batches.

### Prisma information

Schema: Unrelated

Code: 
```
    const accountIds = await prisma.account
        .findMany({
            select: { id: true },
            where: {
                companyId: redacted,
            },
        })
        .then((result) => result.map(({ id }) => id));

    await Promise.all(
        accountIds.map((id) =>
            prisma.account.findUnique({
                where: {
                    id,
                },
            })
        )
    );
```

### Environment & setup

- OS: macOS, Windows, Debian, CentOS
- Database: PostgreSQL
- Node.js version: `v20.11.1`


### Prisma Version

```
prisma                  : 5.7.1
@prisma/client          : 5.7.1
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5 (at node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5 (at node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.7.1-1.0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
Default Engines Hash    : 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
Studio                  : 0.495.0
Preview Features        : metrics, relationJoins
```
",,
2262123432,23956,Bug prisma/client,"### Bug description

Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
at new PrismaClient (/var/task/node_modules/.prisma/client/default.js:43:11)
at Object.<anonymous> (/var/task/src/controllers/SessionController.js:5:16)
at Module._compile (node:internal/modules/cjs/loader:1369:14)
at Object.Module._extensions..js (node:internal/modules/cjs/loader:1427:10)
at Module.load (node:internal/modules/cjs/loader:1206:32)
at Function.Module._load (node:internal/modules/cjs/loader:1022:12)
at /opt/rust/nodejs.js:1:11597
at Function.Qt (/opt/rust/nodejs.js:1:11967)
at Function.Q.e.<computed>.K._load (/opt/rust/nodejs.js:1:11567)
at Module.require (node:internal/modules/cjs/loader:1231:19)
Node.js process exited with exit status: 1. The logs above can help with debugging the issue.
INIT_REPORT Init Duration: 627.86 ms	Phase: invoke	Status: error	Error Type: Runtime.ExitError
Unknown application error occurred

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2261903670,23955,Source map issue in generated client (5.13.0),"### Bug description

This used to work perfectly till Prisma 5.11.0
When I generate client using `prisma generate` command, the generated client has now started giving this issue.

## Source Map Issue (Compile time) 
When building (transpiling) my project which has generated prisma client, the below mentioned error shows up. 
**Workaround**
To stop this error from showing up - disable generation of source map in `.swcrc` or `tsconfig.json`
**Error log** 
```shell
ERROR  failed to read input source map: failed to parse inline source map url
index-browser.js.map

Caused by:
    relative URL without a base
    at /usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/swc-0.274.0/src/lib.rs:386

  ERROR  failed to read input source map: failed to parse inline source map url
edge.js.map

Caused by:
    relative URL without a base
    at /usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/swc-0.274.0/src/lib.rs:386

  ERROR  failed to read input source map: failed to parse inline source map url
library.js.map

Caused by:
    relative URL without a base
    at /usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/swc-0.274.0/src/lib.rs:386

  ERROR  failed to read input source map: failed to parse inline source map url
edge-esm.js.map

Caused by:
    relative URL without a base
    at /usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/swc-0.274.0/src/lib.rs:386

  ERROR  failed to read input source map: failed to parse inline source map url
react-native.js.map

Caused by:
    relative URL without a base
    at /usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/swc-0.274.0/src/lib.rs:386

  ERROR  failed to read input source map: failed to parse inline source map url
wasm.js.map

Caused by:
    relative URL without a base
    at /usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/swc-0.274.0/src/lib.rs:386
```

### How to reproduce

<!--
1. Add a prisma model in your project
2. Use the latest prisma and prisma client version 5.13.0
3. Run `npx prisma generate --schema=path_to_schema.prisma`
4. Build your project using tsc or swc
5. You will see the error log pasted above
-->


### Expected behavior

There should be no source mapping errors about relative URL like shown in the above error log.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql"" // or ""mysql"", ""sqlite"", ""sqlserver"" etc.
  url      = env(""POSTGRES_URL"")
}

generator client {
  provider = ""prisma-client-js""
  output   = ""./prisma-clients/lending_service_db""
  previewFeatures = [""metrics""]
}

model User {
  id               Int               @id @default(autoincrement())
  pan_number            String            @unique ///@encrypted
  // password         String            ///@encrypted
  // name             String?
  loanApplications LoanApplication[]
}

model LoanApplication {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         String          // e.g. ""pending"", ""approved"", ""rejected""
  amount         Float
  interest       Float
  duration       Int
  bank_name      String
  userId         Int             // Foreign key to associate with User
  // loanProductId  Int             // Foreign key to associate with LoanProduct
  user           User            @relation(fields: [userId], references: [id])
  // loanProduct    LoanProduct     @relation(fields: [loanProductId], references: [id])
}
```

```ts
N/A
```


### Environment & setup

- OS: Ubuntu
- Database: Postgres
- Node.js version: 21.5.0
- Prisma and client version: 5.13.0


### Prisma Version

```
prisma                  : 5.13.0
@prisma/client          : 5.13.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v21.5.0
Query Engine (Node-API) : libquery-engine b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.13.0-23.b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Default Engines Hash    : b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
Studio                  : 0.500.0
```
",,
2261224540,23951,`Promise.all` in interactive `$transaction` unexpectedly merges operations,"### Discussed in https://github.com/prisma/prisma/discussions/23845

<div type='discussions-op-text'>

<sup>Originally posted by **@ArthurMelin** April 10, 2024</sup>
### Bug description

We found some weird behavior when using Promise.all inside interactive transactions.
The two queries inside the Promise.all get merged together.

### How to reproduce

Inside an interactive $transaction, make two findUnique queries, each for a different unique field, batched together with a Promise.all (to hopefully reduce impact of network latency).

### Expected behavior

Two queries should be made. The result of Promise.all should contain the result of each one.

Instead, only one query is made with a merge of the where conditions of both operations. The result of Promise.all contains the result of the query and a null.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client_js {
  provider      = ""prisma-client-js""
  output        = ""../node/prisma""
  binaryTargets = [""debian-openssl-1.1.x"", ""debian-openssl-3.0.x"", ""linux-musl""]
}

// ...

model User {
  user_id            String    @id @default(uuid())
  email              String    @unique
  // ...
  stripe_customer_id String?   @unique
}
```

```ts
await this.db.$transaction(async (tx) => {
  const [userMatch, customerMatch] = await Promise.all([
      tx.user.findUnique({ where: { user_id }),
      tx.user.findUnique({ where: { stripe_customer_id }}),
  ]);
  console.log(""userMatch"", userMatch);
  console.log(""customerMatch"", customerMatch);
});
```

<details>
<summary>Debug logs</summary>
<pre>
prisma:query BEGIN
prisma:client Prisma Client call: +473ms
prisma:client prisma.user.findUnique({
  where: {
    user_id: ""805aa449-3120-458b-9bf9-0c3beef0d47e""
  }
}) +0ms
prisma:client Generated request: +0ms
prisma:client {
  ""modelName"": ""User"",
  ""action"": ""findUnique"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""user_id"": ""805aa449-3120-458b-9bf9-0c3beef0d47e""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
prisma:client Prisma Client call: +0ms
prisma:client prisma.user.findUnique({
  where: {
    stripe_customer_id: ""cus_PtSOvgsLPWntH7""
  }
}) +0ms
prisma:client Generated request: +0ms
prisma:client {
  ""modelName"": ""User"",
  ""action"": ""findUnique"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""stripe_customer_id"": ""cus_PtSOvgsLPWntH7""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
prisma:client:libraryEngine requestBatch +1ms
prisma:query SELECT ""public"".""user"".""user_id"", ""public"".""user"".""enabled"", ""public"".""user"".""email"", ""public"".""user"".""email_confirmed"", ""public"".""user"".""roles"", ""public"".""user"".""created_at"", ""public"".""user"".""last_login"", ""public"".""user"".""stripe_customer_id"" FROM ""public"".""user"" WHERE (""public"".""user"".""user_id"" = $1 OR ""public"".""user"".""stripe_customer_id"" = $2) OFFSET $3
userMatch {
  user_id: '805aa449-3120-458b-9bf9-0c3beef0d47e',
  enabled: true,
  email: 'arthur.melin@wiseone.io',
  email_confirmed: false,
  roles: [],
  created_at: 2024-04-09T15:03:25.406Z,
  last_login: 2024-04-09T15:03:25.889Z,
  stripe_customer_id: 'cus_PtSOvgsLPWntH7'
}
customerMatch null
prisma:query COMMIT
</pre>
</details>

### Environment & setup

- OS: Arch Linux on WSL 2 (5.15.133.1-microsoft-standard-WSL2)
- Database:  `PostgreSQL 16.0 (Debian 16.0-1.pgdg120+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit` (docker)
- Node.js version: v21.7.2

### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v21.7.2
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```</div>",,
2259475949,23929,"Incompatibility with NextJS app dir, CloudFlare Pages and D1","### Bug description

There are issues when deploying NextJS (app dir) with CloudFlare pages and D1.

- warnings pop up in react server components
- server actions do not work at all with this combination

### How to reproduce

Reproduction at https://github.com/steebchen/next-cf-prisma-d1

- fork https://github.com/steebchen/next-cf-prisma-d1 or `git clone git@github.com:steebchen/next-cf-prisma-d1.git`
- `pnpm install`
- adapt your own cloudflare details in wrangler.toml
- create a pages project from git if forked or deploy using CLI if cloned
- run `pnpm dev`
- visit localhost:3000 and create a simple poll
  - warnings will popup
  - when creating the poll using the server action, it breaks

When running `pnpm build`, it results in this:

```
Creating an optimized production build ...
Failed to compile.

edge-chunks/274.js from Terser
  x await isn't allowed in non-async function
     ,-[167:1]
 167 | /* harmony export */ __webpack_require__.d(__webpack_exports__, {
 168 | /* harmony export */   ""default"": () => (__WEBPACK_DEFAULT_EXPORT__)
 169 | /* harmony export */ });
 170 | /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 92[39](https://github.com/steebchen/next-cf-prisma-d1/actions/runs/8805198567/job/24167263548#step:8:40), 23))).default);
     :                                                                         ^^^^^^^
 171 | 
 172 | /***/ }),
     `----

Caused by:
    0: failed to parse input file
    1: Syntax Error
Error: 
  x await isn't allowed in non-async function
     ,-[167:1]
 167 | /* harmony export */ __webpack_require__.d(__webpack_exports__, {
 168 | /* harmony export */   ""default"": () => (__WEBPACK_DEFAULT_EXPORT__)
 169 | /* harmony export */ });
 170 | /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 9239, 23))).default);
     :                                                                         ^^^^^^^
 171 | 
 172 | /***/ }),
     `----

Caused by:
    0: failed to parse input file
    1: Syntax Error
```

Executing a server action results in the following error:

```
Unhandled Runtime Error
Error: Unexpected identifier 'Promise'

Call Stack
(action-browser)/./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm-edge-light-loader.js
/Users/steebchen/projects/polls/.next/server/app/page.js (4816:1)
Next.js
async Object.getQueryEngineWasmModule
node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm.js (170:1)
async eval
node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/@prisma/client/runtime/wasm.js (11:700)
async Object.loadLibrary
node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/@prisma/client/runtime/wasm.js (11:979)
async ft.loadEngine
node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/@prisma/client/runtime/wasm.js (11:3234)
async ft.instantiateLibrary
node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/@prisma/client/runtime/wasm.js (11:2821)
```

The following warning appears using RSCs in dev mode appears (but it still works!):

```
 ⚠ ./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm-edge-light-loader.js
The generated code contains 'async/await' because this module is using ""topLevelAwait"".
However, your target environment does not appear to support 'async/await'.
As a result, the code may not run as expected or may cause runtime errors.

Import trace for requested module:
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm-edge-light-loader.js
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm.js
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/default.js
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/@prisma/client/default.js
./lib/cf.ts
./actions/vote.ts

./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm-edge-light-loader.js
The generated code contains 'async/await' because this module is using ""topLevelAwait"".
However, your target environment does not appear to support 'async/await'.
As a result, the code may not run as expected or may cause runtime errors.

Import trace for requested module:
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm-edge-light-loader.js
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/wasm.js
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/.prisma/client/default.js
./node_modules/.pnpm/@prisma+client@5.13.0_prisma@5.13.0/node_modules/@prisma/client/default.js
./lib/cf.ts
./lib/poll.ts
./app/poll/[id]/page.tsx
./node_modules/.pnpm/next@14.2.2_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fpoll%2F%5Bid%5D%2Fpage&page=%2Fpoll%2F%5Bid%5D%2Fpage&appPaths=%2Fpoll%2F%5Bid%5D%2Fpage&pagePath=private-next-app-dir%2Fpoll%2F%5Bid%5D%2Fpage.tsx&appDir=%2FUsers%2Fsteebchen%2Fprojects%2Fpolls%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsteebchen%2Fprojects%2Fpolls&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!./app/poll/[id]/page.tsx?__next_edge_ssr_entry__
 GET /poll/bUGELVurjEYj8M2lbIjH0 200 in 1494ms
```

### Expected behavior

It should work. :D 

- no warning in RSCs
- it should not break in server actions

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Poll {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(""created_at"")
  views     Int      @default(1)
  title     String
  rows      Row[]

  @@map(""poll"")
}

model Row {
  id     String @id @default(uuid())
  title  String
  votes  Int    @default(0)
  poll   Poll   @relation(fields: [pollId], references: [id])
  pollId String @map(""poll_id"")

  @@map(""row"")
}

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> macos, cf workers
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> SQLite / D1
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> v20.10.0


### Prisma Version

```
> pnpm prisma --version                           
Environment variables loaded from .env
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/.pnpm/@prisma+engines@5.12.1/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/.pnpm/@prisma+engines@5.12.1/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
Preview Features        : driverAdapters
```
",,
2259393842,23926,`Inconsistent column data: Unexpected conversion failure from Number to BigInt` error when using `@prisma/adapter-pg` ,"Hi all, I've hit an issue when trying out the `@prisma/adapter-pg` preview feature. 

I'm using the latest `v5.13.0` and I can resolve the issue by removing the `""relationJoins""` from the preview features

Here's the error I'm seeing in the console:
```
  20     include: { user: true },
  21 };
  22 
→ 23 const result = await this.#prisma.baseUser.findUnique(
Inconsistent column data: Unexpected conversion failure for field User.intId from Number(1374511782084.0) to BigInt.
    at In.handleRequestError (/**/node_modules/@prisma/client/runtime/library.js:122:6854)
    at In.handleAndLogRequestError (/**/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (/**/node_modules/@prisma/client/runtime/library.js:122:5896)
    at l (/**/node_modules/@prisma/client/runtime/library.js:127:11167)
    at PrismaUserRepository.getUnsafe (/**/src/infrastructure/repository/v2/prisma/prisma-user.repository.ts:23:24)
```

Here's roughly how I'm calling Prisma:
```ts
async function getUnsafe(id: string | bigint): Promise<User | null> {
    const query = {
        where: typeof id === 'bigint' ? { intId: id } : { id },
        include: { user: true },
    };

    const result = await prisma.baseUser.findUnique(query);
    if (!result) {
        return null;
    }

    return toUser(result);
}

type PrismaBaseUser = Prisma.BaseUserGetPayload<{ include: { user: true } }>;

function toUser(user: PrismaBaseUser): User {
    return {
        id: user.id,
        intId: user.intId,
        name: user.user.name,
        email: user.user.email,
        avatarUrl: user.user.avatar,
    };
}
```

Here's a subset of my schema:
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model BaseUser {
  id                String       @id @db.Uuid
  intId             BigInt       @unique
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  favorites         Repository[] @relation(""UserFavorites"")
  ownedRepositories Repository[]
  user              User         @relation(""userById"", fields: [id], references: [id])
  userByIntId       User         @relation(""userByIntId"", fields: [intId], references: [intId])

  // Indexing intId for faster lookups
  @@index([intId(ops: Int8BloomOps)], type: Brin)
}

model User {
  id              String    @id @db.Uuid
  correlationId   String    @unique @db.Uuid
  intId           BigInt    @unique
  name            String
  email           String?
  locale          String?
  avatar          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  baseUser        BaseUser? @relation(""userById"")
  baseUserByIntId BaseUser? @relation(""userByIntId"")

  // Indexing intId for faster lookups
  @@index([intId(ops: Int8BloomOps)], type: Brin)
  // Indexing email for faster lookups
  @@index([email], type: Hash)
}
```",,
2258051541,23923,[bug]: prisma throw's error while testing,"### Bug description

```
Error: Schema engine error:
Incorrect number of parameters given to a statement. Expected 1: got: 0.

error: script ""start:migrate:prod"" exited with code 1
```

### How to reproduce

Below is my test file code `test.test.js`

```js
const {expect} = require(""@jest/globals"");
const keploy = require(""@keploy/sdk"");
const timeOut = 300000;
import { test } from ""bun:test"";

test(
      ""TestKeploy"",
      (done) => {
        const cmd = ""bun start:migrate:prod"";
        const options = {};
        keploy.Test(cmd, options, (err, res) => {
          if (err) {
            done(err);
          } else {
            expect(res).toBeTruthy(); // Assert the test result
            done();
          }
        });
      },
      timeOut
);
```

There are a bit config need to be done before hand such as:-
```json
...
# other scripts
    ""test"": ""jest --coverage --collectCoverageFrom='src/**/*.{js,jsx}'"",
    ""coverage"": ""nyc npm test && npm run coverage:merge && npm run coverage:report"",
    ""coverage:merge"": ""mkdir -p ./coverage && nyc merge ./coverage .nyc_output/out.json"",
    ""coverage:report"": ""nyc report --reporter=lcov --reporter=text""
...
```
and installing jest and nyc with bun

```
bun i nyc @keploy/sdk jest
```

This issue is replicable incase of both node and bun with js and ts. 

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
  binaryTargets   = [""native"", ""darwin-arm64"", ""linux-musl"", ""linux-arm64-openssl-1.1.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  posts  Post[]
  
  comments  Comment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  
  post   Post  @relation(fields: [postId], references: [id])
  postId Int
}
```

### Environment & setup

- OS: Lima-Debian-12
- Database: PostgreSQL
- Node.js version: v18.19.0, Npm version: 9.2.0, Bun --version 1.1.4

### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : linux-arm64-openssl-3.0.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-linux-arm64-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-linux-arm64-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2256916263,23919,D1_ERROR: Expression tree is too large (maximum depth 100),"### Bug description

When using `connect: string[]` in an update or create query and connecting more than 100 items, it breaks when using Cloudflare D1. The error message is:
```
[backend] prisma:query -- Implicit ""ROLLBACK"" query via underlying driver
[backend] PrismaClientUnknownRequestError: 
[backend] Invalid `prisma.onlinePayout.create()` invocation:
[backend] 
[backend] 
[backend] Error occurred during query execution:
[backend] ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(SqliteError { extended_code: 1, message: Some(""D1_ERROR: Expression tree is too large (maximum depth 100)"") }), transient: false })
[backend]     at In.handleRequestError (/Users/hannes/source/redacted/node_modules/@prisma/client/runtime/library.js:122:7044)
[backend]     at In.handleAndLogRequestError (/Users/hannes/source/redacted/node_modules/@prisma/client/runtime/library.js:122:6188)
[backend]     at In.request (/Users/hannes/source/redacted/node_modules/@prisma/client/runtime/library.js:122:5896)
[backend]     at async l (/Users/hannes/source/redacted/node_modules/@prisma/client/runtime/library.js:127:11167)
[backend]     at async payoutNow (/Users/hannes/source/redacted/packages/backend/src/routes/(admin)/series/[series]/editions/[edition]/billing/+page.server.ts:120:30)
[backend]     at async Module.handle_action_json_request (/Users/hannes/source/redacted/node_modules/@sveltejs/kit/src/runtime/server/page/actions.js:51:16)
[backend]     at async resolve (/Users/hannes/source/redacted/node_modules/@sveltejs/kit/src/runtime/server/respond.js:446:18)
[backend]     at async eval (/Users/hannes/source/redacted/packages/_lib/server/logging.server.ts:28:22)
[backend]     at async Module.respond (/Users/hannes/source/redacted/node_modules/@sveltejs/kit/src/runtime/server/respond.js:319:20)
[backend]     at async file:///Users/hannes/source/redacted/node_modules/@sveltejs/kit/src/exports/vite/dev/index.js:524:22 {
[backend]   clientVersion: '5.12.1'
[backend] }
```
Here's the full sql query being generated:
```
prisma:query UPDATE `main`.`Order` SET `onlinePayoutId` = ?, `updatedAt` = ? WHERE ((`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1) OR (`main`.`Order`.`id` = ? AND 1=1))
```

### How to reproduce

Connect more than 100 items in a relation when using the D1 adapter.

### Expected behavior

It works fine and does not throw any error.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Order {
  @@index([id])
  id              String        @id @default(uuid())
  amount          Int
  onlinePayout    OnlinePayout? @relation(fields: [onlinePayoutId], references: [id])
  onlinePayoutId  String?
}

model OnlinePayout {
  @@index([id])
  id     String @id @default(uuid())
  orders Order[]
}
```

```ts
const onlinePayout = await prisma.onlinePayout.create({
  data: {
      amount,
      orders: {
          connect: orders.map((order) => ({ id: order.id })),
      },
  },
  include: {
      orders: true
  }
});
```


### Environment & setup

- OS: MacOS
- Database: Cloudflare D1
- Node.js version: 23.6.1


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at ../../node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at ../../node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2255197131,23912,Expected parent IDs to be set when ordering by parent ID.,"Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v20.5.1            | 
| OS              | debian-openssl-3.0.x|
| Prisma Client   | 4.14.1             |
| Query Engine    | d9a4c5988f480fa576d43970d5a23641aa77bc9c|
| Database        | mongodb            |



## Logs
```
prisma:tryLoadEnv Environment variables loaded from /home/ayushniroula/Desktop/Projects/bookmart/backend/.env
prisma:client checkPlatformCaching:postinstall false
prisma:client checkPlatformCaching:ciName 
prisma:tryLoadEnv Environment variables loaded from /home/ayushniroula/Desktop/Projects/bookmart/backend/.env
prisma:client dirname /home/ayushniroula/Desktop/Projects/bookmart/backend/node_modules/.prisma/client
prisma:client relativePath ../../../prisma
prisma:client cwd /home/ayushniroula/Desktop/Projects/bookmart/backend/prisma
prisma:client protocol graphql
prisma:client clientVersion 4.14.1
prisma:client clientEngineType library
prisma:client:libraryEngine internalSetup
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""debian"",
  ""familyDistro"": ""debian"",
  ""originalDistro"": ""ubuntu""
}
prisma:get-platform Trying platform-specific paths for ""debian"" (and ""ubuntu"")
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3
prisma:get-platform The parsed libssl version is: 3.0.x
prisma:client:libraryEngine:loader Searching for Query Engine Library in /home/ayushniroula/Desktop/Projects/bookmart/backend/node_modules/.prisma/client
prisma:client:libraryEngine:loader loadEngine using /home/ayushniroula/Desktop/Projects/bookmart/backend/node_modules/.prisma/client/libquery_engine-debian-openssl-3.0.x.so.node
prisma:client:libraryEngine library starting
prisma:client:libraryEngine library started
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
```

## Client Snippet
```ts
// PLEASE FILL YOUR CODE SNIPPET HERE
   sendMessage:async(
            _:any,
            args:SendMessageArguments,
            context:GraphQLContext
        ):Promise<boolean>=>{
            const {session,prisma,pubsub} = context;
            if(!session?.user.id){
                throw new ApolloError(""User not authenticated to send message"")
            }
            const {id:userId} = session.user;
            const {id:messageId,senderId,conversationId,body} = args 

            try{
                const newMessage = await prisma.message.create({
                    data:{
                        id:messageId,
                        senderId,
                        conversationId,
                        body
                    },
                    include:messagePopulated
                })

                // todo cache this in production if needed 

                const participant = await prisma.conversationParticipant.findFirst({
                    where:{
                        userId,
                        conversationId
                    }
                })

                if(!participant){
                    throw new ApolloError(""User not allowed to send message"")
                }
                const {id:participantId} = participant
                
                // updating conversation
                const conversationFind = await prisma.conversation.findUnique({
                    where:{
                        id:conversationId
                    }
                })
                const conversation = await prisma.conversation.update({
                    where:{
                        id:conversationId
                    },
                    data:{
                        latestMessageId:newMessage.id,
                        participants:{
                            update:{
                                where:{
                                    id:participantId
                                },
                                data:{
                                    hasSeenLatestMessage:true,
                                }
                            },
                            updateMany:{
                                where:{
                                    NOT:{
                                        userId
                                    }
                                },
                                data:{
                                    hasSeenLatestMessage:false
                                }
                            }
                        },
                        isActive:conversationFind?.isActive === false ? true : true
                    },
                    include:conversationPopulated
                })
                if(!conversationFind?.isActive){
                    pubsub.publish(EventTypes.CONVERSATION_CREATED,{
                        conversationCreated:{
                            ...conversation
                        }
                    })  
                }
                    pubsub.publish(EventTypes.CONVERSATION_UPDATED,{
                        conversationUpdated:{
                            conversation
                        }
                    })
                // console.log(pubsub)
                pubsub.publish(EventTypes.MESSAGE_SENT,{
                    messageSent:newMessage
                })
                return true

            }catch(error:any){
                console.log(error)
                throw new ApolloError(error?.message)
            }
        }
```

## Schema
```prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE


model Conversation {
  id              String    @id @default(auto()) @map(""_id"") @db.ObjectId
  participants    ConversationParticipant[]
  messages        Message[] @relation(""conversationMessages"")
  latestMessage   Message?   @relation(name: ""latestConversationMessage"", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId String?    @unique @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isDeleted       Boolean   @default(false)
  isArchived      Boolean   @default(false)
  isActive       Boolean   @default(true)
}

model ConversationParticipant {
  id              String    @id @default(auto()) @map(""_id"") @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String  @db.ObjectId
  hasSeenLatestMessage Boolean
}
enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}
model Message {
  id              String        @id @default(auto()) @map(""_id"") @db.ObjectId
  conversation    Conversation  @relation(name: ""conversationMessages"", fields: [conversationId], references: [id])
  conversationId  String        @db.ObjectId
  isLatestIn      Conversation? @relation(""latestConversationMessage"")
  sender          User          @relation(fields: [senderId], references: [id])
  senderId        String     @db.ObjectId
  body            String
  messageType     MessageType?  @default(TEXT) 
  mediaUrl        String?    
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
```

## Prisma Engine Query
```
{""X"":{}}
```
",,
2255158301,23911,@prisma/adapter-d1 is failing with an import error when called inside vitest tests,"### Bug description

I'm trying to setup a small Cloudflare Worker app, that leverages `@prisma/adapter-d1` and served by [hono](https://hono.dev), I'm encountering issues when trying to run unit tests. Unfortunately the prisma WASM import fails with the following error:

```
Error: No such module ""Users/olivier/Projects/cloudflare/cloudflare-hono-worker/node_modules/.prisma/client/#wasm-engine-loader"".
    at Object.getQueryEngineWasmModule (Users/olivier/Projects/cloudflare/cloudflare-hono-worker/node_modules/.prisma/client/wasm.js?mf_vitest_no_cjs_esm_shim:182:5)
    at Users/olivier/Projects/cloudflare/cloudflare-hono-worker/node_modules/@prisma/client/runtime/wasm.js?mf_vitest_no_cjs_esm_shim:11:731
    at Object.loadLibrary (Users/olivier/Projects/cloudflare/cloudflare-hono-worker/node_modules/@prisma/client/runtime/wasm.js?mf_vitest_no_cjs_esm_shim:11:975)
    at gt.loadEngine (Users/olivier/Projects/cloudflare/cloudflare-hono-worker/node_modules/@prisma/client/runtime/wasm.js?mf_vitest_no_cjs_esm_shim:11:3194)
    at gt.instantiateLibrary (Users/olivier/Projects/cloudflare/cloudflare-hono-worker/node_modules/@prisma/client/runtime/wasm.js?mf_vitest_no_cjs_esm_shim:11:2778) {
  clientVersion: '5.12.1'
}
```
 

### How to reproduce

Create a basic d1 prisma app following the [official tutorial](https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-cloudflare#cloudflare-d1)

Add a vitest unit test:


```ts
import { createExecutionContext, env, waitOnExecutionContext } from ""cloudflare:test"";
import { testClient } from ""hono/testing"";
import { app } from ""src/app"";
import { describe, expect, test } from ""vitest"";

describe(""App"", () => {
  const testApp = testClient(app, env);

  test(""GET /users"", async () => {
    const ctx = createExecutionContext();
    const res = await testApp.users.$get({ ctx });
    await waitOnExecutionContext(ctx);
    expect(res.status).toBe(200);
    expect(await res.text()).toBe(""Hello Hono!"");
  });
});
```

Can be fixed with this change in `wasm.js`:

```js
config.engineWasm = {
  getRuntime: () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    return (await import('./query_engine_bg.wasm')).default // <-- fix
  }
}
```

but probably breaking other things!

### Expected behavior

Prisma should work inside vitest.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: SQLite (D1 adapter)
- Node.js version: v20.12.0


### Prisma Version

```
▶ nr prisma -v                                                                                                                                    master|◒ 12 
10.5.0
```
",,
2254563734,23907,Could not figure out an ID in create,"Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v21.6.0            | 
| OS              | linux-arm64-openssl-3.0.x|
| Prisma Client   | 5.12.1             |
| Query Engine    | 473ed3124229e22d881cb7addf559799debae1ab|
| Database        | postgresql         |



## Logs
```
prisma:tryLoadEnv Environment variables not found at null
prisma:tryLoadEnv Environment variables loaded from /home/sonichigi.linux/bun-sql/.env
prisma:client checkPlatformCaching:postinstall false
prisma:client checkPlatformCaching:ciName 
prisma:tryLoadEnv Environment variables not found at null
prisma:tryLoadEnv Environment variables loaded from /home/sonichigi.linux/bun-sql/.env
prisma:client dirname /home/sonichigi.linux/bun-sql/node_modules/.prisma/client
prisma:client relativePath ../../../prisma
prisma:client cwd /home/sonichigi.linux/bun-sql/prisma
prisma:client clientVersion 5.12.1
prisma:client:libraryEngine internalSetup
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""debian"",
  ""familyDistro"": ""debian"",
  ""originalDistro"": ""debian""
}
prisma:get-platform Trying platform-specific paths for ""debian"" (and ""ubuntu"")
prisma:get-platform Falling back to ""ldconfig"" and other generic paths
prisma:get-platform Command ""ldconfig -p | sed ""s/.*=>s*//"" | sed ""s|.*/||"" | grep libssl | sort | grep -v ""libssl.so.0"""" successfully returned ""libssl.so
libssl.so.3
libssl3.so
""
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl.so
libssl.so.3
libssl3.so

prisma:get-platform The parsed libssl version is: 3.0.x
prisma:client:engines:resolveEnginePath enginePath /home/sonichigi.linux/bun-sql/node_modules/.prisma/client/libquery_engine-linux-arm64-openssl-3.0.x.so.node
prisma:client:libraryEngine sending request, this.libraryStarted: false
prisma:client:libraryEngine library starting
prisma:client:libraryEngine library started
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.12.1""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
```

## Client Snippet
```ts
//index.ts
import Elysia from ""elysia"";
import { recipeController } from ""./controllers/post.controller"";
import { PrismaClient } from ""@prisma/client"";
import { userController } from ""./controllers/user.controller"";
import { commentController } from ""./controllers/comments.controller"";

//Create instances of prisma and Elysia
const prisma = new PrismaClient();
const app = new Elysia();

//Use controllers as middleware
app.use(userController as any);
app.use(recipeController as any);
app.use(commentController as any);

//Listen for traffic
app.listen(4040, () => {
  console.log(""Server is running on port 4040"");
});

export { app, prisma };
```

## Schema
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  posts  Post[]
  
  comments  Comment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  
  post   Post  @relation(fields: [postId], references: [id])
  postId Int
}
```

## Prisma Engine Query
```
{""X"":true}}}
```
",,
2254479247,23906,`Entered unreachable code` using an illegal connection string,"### Bug description

Hi!

I am submitting this since the package asked yes/no if I wanted to report the bug, and since the error message was the unreachable code was reached I figured this may be interesting for you to know. 

This submission is just to help you, and thanks for prisma, it's really great! I believe the problem is in my connection string so from my part this doesn't need any fixing if you don't want to fix it due to it giving that error.

I used this in my .env file:
```
DATABASE_URL=""sqlserver://81.95.105.76:1433;database=DBNAME;user={SERVER/USERNAME};password={PWD;};encrypt=true;TrustServerCertificate=true""
```

And on running prisma db pull:

```
:\Users\username\source\vscode\prisma db pull

Prisma schema loaded from prisma\schema.prisma
Environment variables loaded from .env
Datasource ""db"": SQL Server database

✖ Introspecting based on datasource defined in prisma\schema.prisma

Oops, an unexpected error occurred!
Error in Schema engine.
Reason: [libs\user-facing-errors\src\quaint.rs:125:18] internal error: entered unreachable code
```

### How to reproduce

Set the .env file to match my DATABASE_URL setup, then try and connect with a normal empty connection to pull the existing database with prisma db pull.


### Expected behavior

I would have expected an error message that my connection string was incorrect. If you compare how the documentation example is, then this matches the string I tried, but since it doesn't connect I can be sure the problem lies in my code.

### Prisma information

```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
}
```

### Environment & setup

- OS: Windows 11 Home edition
- Database: SQL Server, trying to connect to a MS SQL database
- Node.js version: v18.12.1


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v18.12.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at ..\..\..\AppData\Roaming\nvm\v18.12.1\node_modules\prisma\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at ..\..\..\AppData\Roaming\nvm\v18.12.1\node_modules\prisma\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```",,
2254242418,23903,Bug: Error or bug using Prisma with DriverAdapter with PostgreSQL database Neon,"### Bug description

I'm using NextJS and NextAuth in its v5 beta version, when I use Prisma with Neon as a postgresql database, and using the adapters, to remove the Edge Functions error, I get that, and it is a basic code, what can be the solution, or is it a bug?

## Error

![image](https://github.com/prisma/prisma/assets/112896919/ed4fd3cb-78b9-4225-9f55-f7ce216a0344)

## Code

![image](https://github.com/prisma/prisma/assets/112896919/e2b2c369-5ee0-4438-b8b4-f727b86d46ef)

### How to reproduce


The error or bug occurs when it is already running, it appears for a few moments or several logs and then does not appear.

### Expected behavior

_No response_

### Prisma information

```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}
```

### Environment & setup

- OS: Windows 11
- Database: PostgreSQL
- Node.js version: 20.12.2


### Prisma Version

```
Prisma Version:  5.12.1
```
",,
2254142603,23902,Bug: D1 One-to-Many Relation INSERTs fail with `The required connected records were not found.` when using indices,"### Bug description

When creating rows with a one-to-many relation and using manually added `@@index`s, the query fails with:
```
The required connected records were not found. Expected 1 records to be connected after connect operation on one-to-many relation 'OrderToTicket', found 2.
```
I believe this happens due to D1 returning the number of rows written, including writes to index tables... not actual written data rows.

### How to reproduce

See the reproduction here: https://github.com/hrueger/prisma-23902. Basically, you need
- a schema with a one-to-many relation
- a manual index on the relation's id column
- a query connecting an item

### Expected behavior

It should connect the record.
I think I found two possible ways:
1. count the indices and substract that number from the `rows_written` or
2. Skip that check for D1

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?

  @@index([authorId])
}

```

```ts
const post = await prisma.post.create({
		data: {
			title: ""Hello World"" + Math.random(),
		}
	});
    const user = await prisma.user.create({
		data: {
			email: Math.random() + ""test@test.de"",
			name: ""Test"",
			posts: {
				connect: {
					id: post.id
				}
			}
		}
	});
```


### Environment & setup

- OS: macOS
- Database: Cloudflare D1
- Node.js version: v21.6.1


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
Preview Features        : driverAdapters
```
",,
2253939218,23900,SQL Server `ROWGUIDCOL` column with `Unsupported` type,"### Bug description

I need to create a database and enable SQL Server Replication, which needs a GUID column defined as **UNIQUEIDENTIFIER ROWGUIDCOL**, currently, the only way i found to do so is to use the Unsupported keyword, like so:
```prisma
uuid Unsupported(""UNIQUEIDENTIFIER ROWGUIDCOL"") @unique @default(dbgenerated(""newsequentialid()""))
```

The problem is that when I need to make a new migration to the database, prisma shows these columns as if they changed as well, with this message: **_The data in that column will be cast from `UniqueIdentifier` to `Unsupported(""UNIQUEIDENTIFIER ROWGUIDCOL"")`._**

### How to reproduce

1. create a column like  ```uuid Unsupported(""UNIQUEIDENTIFIER ROWGUIDCOL"") @unique @default(dbgenerated(""newsequentialid()""))```
2. create an initial migration
3. change the schema but DO NOT change the column with Unsupported
4. create a second migration

### Expected behavior

The Unsupported column should not change

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
}


model Status {
  id        Int                                        @id
  // Column used by SQL Server Replication
  // DO NOT DELETE
  uuid      Unsupported(""UNIQUEIDENTIFIER ROWGUIDCOL"") @unique @default(dbgenerated(""newsequentialid()""))
  name      String
  createdAt DateTime                                   @default(now())
}
```

omitted other tables

```ts
import { PrismaClient } from ""@prisma/client"";

export * from ""@prisma/client"";

const prismaClientSingleton = () => {
  return new PrismaClient({
    transactionOptions: {
      timeout: 30000,
    },
  });
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

export type PrismaTransactionClient = Parameters<
  Parameters<PrismaClientSingleton[""$transaction""]>[0]
>[0];

export type PrismaClientTables = Omit<
  PrismaClientSingleton,
  | ""$use""
  | ""$connect""
  | ""$disconnect""
  | ""$transaction""
  | ""$executeRaw""
  | ""$on""
  | ""$executeRawUnsafe""
  | ""$queryRaw""
  | ""$queryRawUnsafe""
  | ""$extends""
>;

declare global {
  // eslint-disable-next-line no-var
  var prisma: undefined | PrismaClientSingleton;
}

const prisma = globalThis.prisma ?? prismaClientSingleton();

export { prisma as db };

if (process.env.NODE_ENV !== ""production"") globalThis.prisma = prisma;
```


### Environment & setup

- Database: SQL Server


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.5.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2253212032,23895, routines:ssl_choose_client_version:unsupported ,"### Bug description

While attempting to connect to a legacy MSSQL server (Microsoft SQL Server 2014 - 12.0.4100.1) using TLSv1 through Prisma Client, I encountered a TLS connection error. The error message suggests that the TLS settings do not support the protocol required by the server, preventing the connection from being established.

```
Error opening a TLS connection: The TLS settings didn't allow the connection to be established. Please review your connection string. (error: error:0A000102:SSL routines:ssl_choose_client_version:unsupported protocol:ssl/statem/statem_lib.c:1947:)
PrismaClientInitializationError: 

```

### How to reproduce

1. Set up Prisma to connect to an MSSQL server (Microsoft SQL Server 2014 - 12.0.4100.1) that uses TLSv1.
2. Configure the Prisma schema to use the following connection string: 'sqlserver://username:password@host:port/database'.
3. Attempt to perform a query using Prisma Client.
4. Encounter the TLS error stating that the connection could not be established due to an unsupported protocol.


### Expected behavior

I expected Prisma Client to successfully establish a connection with the MSSQL server, managing the TLSv1 protocol without any errors, allowing me to perform queries and operations as usual.


### Prisma information

```prisma
datasource db {
  provider = ""sqlserver""
  url      = ""sqlserver://username:password@host:port/database""
}
async function main() {
  const allUsers = await prisma.user.findMany();
  console.log(allUsers);
}
main();


### Environment & setup

- OS: macOS 14.3 on M1 Mac
- Database: Microsoft SQL Server 2014 - 12.0.4100.1 (Standard Edition, 64-bit) on Windows NT 6.3 (Build 17763: ) (Hypervisor)
- Node.js version: v20.12.2
- ""next"": ""^13.0.6"",


### Prisma Version

```
@prisma/client: 5.8.1
prisma: 5.8.1

```
",,
2252442240,23892,Custom `output` path can only work if it's in `node_modules`,"### Bug description

I followed the Prisma documentation for custom output:
https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#using-a-custom-output-path

My stack:
- nextjs 14
- pnpm
- docker
- postgres
- jest

### Problem

I have two databases, `database_A` and `database_B`, that I have are running on docker containers via `docker-compose`. My Prisma client is not containerized. Each have their own schemas `schema_A.prisma` and `schema_B.prisma`.

 Both schemas generated successfully, pushed into my postgresql, and was seeded with data. `schema_A.prisma` uses the default custom output, but `schema_B.prisma` uses a custom output. 

Everything that involves `schema_A.prisma` runs smoothly; however, whenever I am accessing the client from `schema_B.prisma` (the one with the custom output), I encounter this error:

```
    PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `Node.js`).
    If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report
```


`schema_A.prisma`:
```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

`schema_B.prisma`:
```
generator client {
  provider = ""prisma-client-js""
  output   = ""../tests/generated/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_DATABASE_URL"")
}
```


### The workaround

As the output above `../tests/generated/client` does not work, I tried having it in `node_modules` and everything worked smoothly.

`schema_B.prisma`:
```
generator client {
  provider = ""prisma-client-js""
  output   = ""./node_modules/@internal-stuff/tests/prisma-two/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_DATABASE_URL"")
}
```


### How to reproduce

`schema_A.prisma`:
```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

`schema_B.prisma`:
```
generator client {
  provider = ""prisma-client-js""
  output   = ""../tests/generated/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_DATABASE_URL"")
}
```


### Change to

`schema_B.prisma`:
```
generator client {
  provider = ""prisma-client-js""
  output   = ""./node_modules/@internal-stuff/tests/prisma-two/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_DATABASE_URL"")
}
```

### Expected behavior

I expect to reference the Prisma client with my custom output

### Prisma information

`schema_A.prisma`:
```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

`schema_B.prisma`:
```
generator client {
  provider = ""prisma-client-js""
  output   = ""../tests/generated/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_DATABASE_URL"")
}
```

### Environment & setup

- OS:  macOS
- Database:  PostgreSQL
- Node.js version: v18.17.1


### Prisma Version

```
5.12.1
```
",,
2250709115,23885,gitlab ci failed on docker image node:20,"### Bug description
```
ReferenceError: performance is not defined
    at /builds/<org>/services/data-svc-group/data-svc/node_modules/prisma/build/index.js:1426:423
    at V1.runGenerate (/builds/<org>/services/data-svc-group/data-svc/node_modules/prisma/build/index.js:1426:130)
    at V1.parse (/builds/<org>/services/data-svc-group/data-svc/node_modules/prisma/build/index.js:1431:140)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (node:internal/process/task_queues:94:5)
    at async m5t (/builds/<org>/services/data-svc-group/data-svc/node_modules/prisma/build/index.js:1981:280)
Start using Prisma Client in Node.js (See: https://pris.ly/d/client)
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
""@prisma/client"": ""^5.12.1"",
""prisma"": ""^5.12.1"",
```
",,
2250671476,23884,Make `createMany` data type as not empty array instead of array,"## Problem

I'm always frustrated when I'm using createMany and provide an array for the data and if the array that I'm providing is empty, then I get an error in the **runtime** and not in the **compile time**

## Suggested solution

<!-- A clear and concise description of what you want to happen. -->
My suggestion that in the generated types, make the array type as not empty array. 

For example, this is the before type that is auto-generated:

```ts
  export type TestCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | TestCreateManyInput[]
  }
```

And this is my suggested type:

```ts
  export type TestCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | [TestCreateManyInput, ...TestCreateManyInput[]]
  }
```

By changing to this type, it makes sure for the developer that the array must contain at least 1 item in the array, and therefore he can make sure to fix that issue before encountring a runtime error at the production.",,
2249764914,23882,(Accelerate) gives me an error: `PrismaClient is not configured to run in Cloudflare Workers. In order to run Prisma Client on edge runtime`,"### Bug description

i try to use prisma for postgres and i used prisma accelearate .I configure everything correctly but stills give me an error: PrismaClient is not configured to run in Cloudflare Workers. In order to run Prisma Client on edge runtime

my code
```ts
import { Hono } from 'hono'
import{PrismaClient} from ""@prisma/client""
import {withAccelerate} from ""@prisma/extension-accelerate""
import {sign,verify} from ""hono/jwt""

const app = new Hono<{

Bindings:{
  DATABASEURL:string
  JWT_SECRET:string
}
}>()



app.post('/api/v1/signup', async(c) => {
  const prisma=new PrismaClient({
    //@ts-ignore
    datasourceUrl:c.env.DATABASE_URL,
  }).$extends(withAccelerate())
  const body=await c.req.json()
 const user= await prisma.user.create({
    data:{
email:body.email,
password:body.password
    }
    
  })
 

  const token=await sign({id:user.id},c.env.JWT_SECRET)
  return c.json({token})
})
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2248126103,23880,Connect to MongoDB running on a container with a different port than 27017 (on port 27018),"### Bug description

I simply want to connect using Prisma to a mongodb instance running in a container. 
The tricky part is that I am running this container on port 27018. (The host can connect to the container only on 27018)
When im trying to acces it with `npx prisma db push`, the command freezez (probably it tries to connect and retries and fails)

### How to reproduce

This is the docker compose:
```
  mongo:
    build: ./mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: md_love-sac
      MONGO_INITDB_ROOT_PASSWORD: love-sac
      MONGO_INITDB_DATABASE: mongo
      MONGO_REPLICA_HOST: localhost
      MONGO_REPLICA_PORT: 27018
    ports:
      
'27018:27018'
  volumes:
mongo-data:/data/db
```

This is the Database URL:
```
mongodb://md_love-sac:love-sac@localhost:27018/mongo?authSource=admin?directConnection=tru
```

Here is also the Dockerfile that builds the mongo image (i have to run mongo in replica set)
```
FROM mongo:4

ENTRYPOINT mongod --port $MONGO_REPLICA_PORT --replSet rs0 --bind_ip 0.0.0.0 & MONGOD_PID=$!; \

INIT_REPL_CMD=""rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: '$MONGO_REPLICA_HOST:$MONGO_REPLICA_PORT' }] })""; \
INIT_USER_CMD=""db.getUser('$MONGO_INITDB_ROOT_USERNAME') || db.createUser({ user: '$MONGO_INITDB_ROOT_USERNAME', pwd: '$MONGO_INITDB_ROOT_PASSWORD', roles: [ 'root' ] })""; \

until (mongo admin --port $MONGO_REPLICA_PORT --eval ""$INIT_REPL_CMD && $INIT_USER_CMD""); do sleep 1; done; \

echo ""REPLICA SET ONLINE""; wait $MONGOD_PID;
```


### Expected behavior
When I run `npx prisma db push` I should connect automatically to the db. I also defined some models in schema.prism, so it should connect properly.
If I run the container back on port 27017, it connects imediatly. Changing back to 27018 both in the docker compose and in the url will not sucessfully connect.

### Prisma information

This is the schema.prisma file
```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url = env(""DB_URL"")
  directUrl = env(""DB_URL"")
}
```

### Environment & setup

- OS: macOS with docker
- Database: MongoDB
- Node.js version: 21

### Prisma Version

```
4.14.0
```
",,
2246618119,23873,`OR` operator ignores empty conditions in `findMany()` calls,"### Bug description

When using `findMany` with an `OR` which has multiple conditions, one of which is empty (=matches all rows), this empty condition is ignored, leading to an incorrect set of rows in the result.

In code terms:
`SELECT * from Foo WHERE 1=1` -> returns all rows
`SELECT * from Foo WHERE 1=2` -> returns no rows
`SELECT * from Foo WHERE 1=2 OR 1=1` -> returns all rows (that's how OR works, right?)

Unfortunately, the query prisma generates for the third case is not correct. See code below!



### How to reproduce

1. Have an arbitrary model
2. Use `findMany` with an `OR` in it - add one condition which matches 0 rows and another condition which has no contents eg. (`{}`, `{field: undefined}`, ..)
3. Observe no rows being returned


### Expected behavior

An empty conditions within the `OR` operator should cause all rows to be returned.

### Prisma information

```prisma
model Foo {
  field String @id
}
```

```ts
test.only('Empty or branches', async t => {
  // Table has only one row - {field: 'x'}
  await db.foo.create({
    data: {  field: 'x' },
  })

  // expected to match all rows 
  t.is((await db.foo.findMany({})).length, 1) // ✅
  t.is((await db.foo.findMany({ where: {} })).length, 1) // ✅
  t.is((await db.foo.findMany({ where: { field: undefined } })).length, 1) // ✅
  // expected to match NO rows
  t.is((await db.foo.findMany({ where: { field: 'y' } })).length, 0) // ✅

  // expected to match all rows, but does not work as expected
  const emptyOrBranch = await db.foo.findMany({
    where: {
      OR: [
        { field: 'y' }, // there is no entry fitting this
        {}, // empty condition should match all
      ],
    },
  })
  t.is(emptyOrBranch.length, 0) // ❌, should =1

  // same with undefined
  const emptyOrBranch2 = await db.foo.findMany({
    where: {
      OR: [
        { field: 'y' }, // there is no entry fitting this
        { field: undefined }, // this too, should match all rows
      ],
    },
  })
  t.is(emptyOrBranch2.length, 0) // ❌, should =1
})
```

Capture of the queries prisma executes against the Postgres:
(7 queries from above - 1 INSERT and 6 SELECTs)

```
prisma:query INSERT INTO ""public"".""Foo"" (""field"") VALUES ($1) RETURNING ""public"".""Foo"".""field""
prisma:query SELECT ""public"".""Foo"".""field"" FROM ""public"".""Foo"" WHERE 1=1 OFFSET $1
prisma:query SELECT ""public"".""Foo"".""field"" FROM ""public"".""Foo"" WHERE 1=1 OFFSET $1
prisma:query SELECT ""public"".""Foo"".""field"" FROM ""public"".""Foo"" WHERE 1=1 OFFSET $1
prisma:query SELECT ""public"".""Foo"".""field"" FROM ""public"".""Foo"" WHERE ""public"".""Foo"".""field"" = $1 OFFSET $2
prisma:query SELECT ""public"".""Foo"".""field"" FROM ""public"".""Foo"" WHERE ""public"".""Foo"".""field"" = $1 OFFSET $2
prisma:query SELECT ""public"".""Foo"".""field"" FROM ""public"".""Foo"" WHERE ""public"".""Foo"".""field"" = $1 OFFSET $2
```

Seems like the `{}` and `{ field: undefined }` are ignored when constructing the query.

### Environment & setup

- OS: macOS & Debian
- Database: PostgreSQL
- Node.js version: v20.11.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf55
9799debae1ab (at node_modules/@prisma/engines/libquery_engine-darwin-a
rm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf
559799debae1ab (at node_modules/@prisma/engines/schema-engine-darwin-a
rm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed31
24229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2246088846,23872,$executeRawUnsafe: `incorrect binary data format in bind parameter 6`,"### Bug description

As Prisma does not support batched upserts, I wanted to implement them with Kysely ... this worked fine when using also the Kysely DB provider (pq driver), but when using [prisma-extension-kysely](https://github.com/eoin-obrien/prisma-extension-kysely) which is officially recommended from your side, the insert into query failed, with the error in the header. Internally it uses the $executeRawUnsafe method, which has a bug to send the correct bytes to my Postgres database ... the transaction model has this structure: 

type in Prisma
```ts
{
      projectId: string
      storeId: string
      fromTimestamp: Date
      toTimestamp: Date
      productName: string
      productPrice: number
      productAmount: number
      invoiceAmount: number
    }
```
type in Kysely
```ts
{
    projectId: string;
    storeId: string;
    fromTimestamp: Timestamp;
    toTimestamp: Timestamp;
    productName: string;
    productPrice: number;
    productAmount: number;
    invoiceAmount: Generated<number>;
}
```

this is the method that produces the error:
```ts
async storeTransactionGroups(
    projectId: string,
    transactionGroups: TransactionGroupDto[],
    chunkSize: number = DEFAULT_DATABASE_BATCH_SIZE,
  ): Promise<void> {
    const transactionModels: Transaction[] = transactionGroups.map((x) =>
      this.convertTransactionGroupToTransactionModel(projectId, x),
    );
    await this.prismaService.client.$transaction(async (tx) => {
      await Promise.all(
        [...chunks(transactionModels, chunkSize)].map(
          (transactionModelChunk) => {
            const batchUpsertQuery = tx.$kysely
              .insertInto('Transaction')
              .values(transactionModelChunk)
              .onConflict((ocb) =>
                ocb
                  .columns([
                    'projectId',
                    'storeId',
                    'fromTimestamp',
                    'toTimestamp',
                  ])
                  // eslint-disable-next-line max-nested-callbacks
                  .doUpdateSet((eb) => ({
                    productName: eb.ref('excluded.productName'),
                    productPrice: eb.ref('excluded.productPrice'),
                    productAmount: eb.ref('excluded.productAmount'),
                    invoiceAmount: eb.ref('excluded.invoiceAmount'),
                  })),
              );
            return batchUpsertQuery.execute();
          },
        ),
      );
    });
  }
```
  somehow the productPrice is transmitted incorrectly ... when inserting multiple values isolated as single values the above exception is thrown on the second and third entry, never on the first ... furthermore when hardcoding productPrice to 0 or 12.7 also no exception is thrown, I am completely puzzled what your Prisma engine is doing under the hood to produce such kind of errors ... anyway in the meantime I just use kysely with the native pg driver which works just fine and has no such bugs ...
  
  If you need more input just ask

### How to reproduce

check the description

### Expected behavior

query finished with your recommended extension, there must be an error in your engine, as the data seems fine, I double and triple checked my input data and its also validated with class-validator ...

### Prisma information
```prisma
generator prisma-client-js {
  provider      = ""prisma-client-js""
  binaryTargets = [""native""]
}

generator prisma-client-kysely {
  provider = ""prisma-kysely""
  fileName = ""kysely.types.ts""
  output = ""../backend/bff/lib/service-utils/src/lib/database""
}

generator prisma-client-py {
  provider             = ""prisma-client-py""
  interface            = ""sync""
  recursive_type_depth = -1
}

datasource db {
  provider = ""postgresql""
  url      = env(""DB_TIMESCALE_DB_URL"")
}

model Transaction {
  projectId     String
  storeId       String
  fromTimestamp DateTime
  toTimestamp   DateTime
  productName   String
  productPrice  Float
  productAmount Float
  invoiceAmount Int      @default(1)

  @@id([projectId, storeId, fromTimestamp, toTimestamp])
  @@index([projectId, storeId, fromTimestamp, toTimestamp])
}

model Event {
  projectId     String
  storeId       String
  fromTimestamp DateTime
  toTimestamp   DateTime
  eventType     String
  eventName     String

  @@id([projectId, storeId, fromTimestamp, toTimestamp])
  @@index([projectId, storeId, fromTimestamp, toTimestamp])
}

model WeatherMeasurement {
  projectId     String
  storeId       String
  fromTimestamp DateTime
  toTimestamp   DateTime
  temperature   Float
  humidity      Float?
  cloudCoverage Float?
  windSpeed     Float?
  precipitation Float?

  @@id([projectId, storeId, fromTimestamp, toTimestamp])
  @@index([projectId, storeId, fromTimestamp, toTimestamp])
}

model Forecast {
  id            String                 @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  projectId     String
  storeId       String
  fromTimestamp DateTime
  toTimestamp   DateTime
  timezone      String
  status        ForecastStatusEnum
  resolution    ForecastResolutionEnum
  results       ForecastResult[]
  message       String?
  createdAt     DateTime               @default(now())
  lastUpdatedAt DateTime               @default(now()) @updatedAt
}

model ForecastResult {
  id                       String   @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  forecastId               String   @db.Uuid
  forecast                 Forecast @relation(fields: [forecastId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  fromTimestamp            DateTime
  toTimestamp              DateTime
  predictedValue           Float
  upperBoundPredictedValue Float
  lowerBoundPredictedValue Float
}

enum ForecastStatusEnum {
  processing
  finished
  error
}

enum ForecastResolutionEnum {
  daily
  hourly
  half_hourly
}
```

### Environment & setup

- OS: macOS (my dev computer)
- Database:PostgreSQL
- Node.js version: 20


### Prisma Version

```
5.11.0
```
",,
2245746399,23871,"The cursor changes to ""taking a screenshot"" when running the prisma seed command","### Bug description

I run yarn prisma db seed, which executes the following file:
```js
import db from '../utils/importInDb.js' 

(async () => {
    await db.query(`INSERT INTO public.statuses (""stateName"", description, ""isFinal"")
    VALUES
        ('New', 'Task created but not yet started', false),
        ('In progress', 'Work on the task has started but is not yet completed', false);`)

    await db.end();
})()
```

After this, my cursor changes to a screenshot creation cursor, and the program will not proceed until I make several clicks. Any key combinations and clicks are ignored.

### How to reproduce

Add to the prisma folder a file named `seed.js`.
In `seed.js`, include the following code:

```javascript
import db from '../utils/importInDb.js'

(async () => {
    await db.query(`INSERT INTO public.statuses (""stateName"", description, ""isFinal"")
    VALUES
        ('New', 'Task created but not yet started', false),
        ('In progress', 'Work on the task has started but is not yet completed', false);`)

    await db.end();
})()
```

In `package.json`, add:
```json
""prisma"": {
    ""seed"": ""prisma/seed.js""
},
```

In `../utils/importInDb.js`, any arbitrary code can be used, for example: `export default {}`

Execute:
```bash
yarn run prisma db seed
```

After execution, the cursor changes to a screenshot selection mode, expecting an area of the screen to be selected for taking a screenshot.

It results in an error:
```bash
yarn run v1.22.21
$ xxx/yyy/node_modules/.bin/prisma db seed
Environment variables loaded from .env
Environment variables loaded from prisma/.env
Running seed command `prisma/seed.js` ...
import: unable to open image '../utils/importInDb.js': No such file or directory @ error/blob.c/OpenBlob/3571.
prisma/seed.js: line 3: syntax error near unexpected token `='
prisma/seed.js: line 3: `(async () => {'

An error occurred while running the seed command:
Error: Command failed with exit code 2: prisma/seed.js
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```

Debug info
```bash
prisma:engines binaries to download libquery-engine, schema-engine +383ms
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""debian"",
  ""familyDistro"": ""arch"",
  ""originalDistro"": ""arch""
} +11ms
prisma:get-platform Don't know any platform-specific paths for ""arch"" on x64 (x86_64) +0ms
prisma:get-platform Falling back to ""ldconfig"" and other generic paths +0ms
prisma:get-platform Command ""ldconfig -p | sed ""s/.*=>s*//"" | sed ""s|.*/||"" | grep libssl | sort | grep -v ""libssl.so.0"""" successfully returned ""libssl3.so
libssl.so
libssl.so
libssl.so.1.0.0
libssl.so.3
libssl.so.3
"" +31ms
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl3.so
libssl.so
libssl.so
libssl.so.1.0.0
libssl.so.3
libssl.so.3
 +1ms
prisma:get-platform The parsed libssl version is: 1.0.x +0ms
prisma:loadEnv project root found at /mnt/storage/web/nodejs/itdo/itdo-bot-fastify/package.json +596ms
prisma:tryLoadEnv Environment variables loaded from /mnt/storage/web/nodejs/itdo/itdo-bot-fastify/.env +1ms
prisma:tryLoadEnv Environment variables loaded from ./prisma/.env +3ms
Environment variables loaded from .env
Environment variables loaded from prisma/.env
prisma:migrate:seed {
  ""prismaConfig"": {
    ""data"": {
      ""seed"": ""prisma/seed.js""
    },
    ""packagePath"": ""/mnt/storage/web/nodejs/itdo/itdo-bot-fastify/package.json""
  }
} +1ms
Running seed command `prisma/seed.js` ...
import: unable to open image '../utils/importInDb.js': No such file or directory @ error/blob.c/OpenBlob/3571.
prisma/seed.js: line 3: syntax error near unexpected token `='
prisma/seed.js: line 3: `(async () => {'
prisma:migrate:seed {
  ""e"": {
    ""shortMessage"": ""Command failed with exit code 2: prisma/seed.js"",
    ""command"": ""prisma/seed.js"",
    ""escapedCommand"": ""\""prisma/seed.js\"""",
    ""exitCode"": 2,
    ""failed"": true,
    ""timedOut"": false,
    ""isCanceled"": false,
    ""killed"": false
  }
} +8613ms

An error occurred while running the seed command:
Error: Command failed with exit code 2: prisma/seed.js
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```

### Expected behavior

I expect the seed to execute successfully, as it did before. It's hard to say exactly after which point it stopped working.

### Prisma information

```prisma
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""linux-musl-openssl-3.0.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model comments {
  id         Int       @id @default(autoincrement())
  task_id    Int?
  author_id  Int?
  text       String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  users      users?    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks      tasks?    @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id         Int      @id(map: ""organization_pk"") @default(autoincrement())
  inn        String
  aliases    String[]
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  users      users[]
}

model task_relations {
  id                                         Int   @id @default(autoincrement())
  parent_task_id                             Int
  child_task_id                              Int
  tasks_task_relations_child_task_idTotasks  tasks @relation(""task_relations_child_task_idTotasks"", fields: [child_task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks_task_relations_parent_task_idTotasks tasks @relation(""task_relations_parent_task_idTotasks"", fields: [parent_task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tasks {
  id                                                  Int              @id @default(autoincrement())
  title                                               String
  description                                         String?
  due_date                                            DateTime?        @db.Date
  priority                                            Int
  status                                              Int?
  created_at                                          DateTime?        @default(now()) @db.Timestamp(6)
  updated_at                                          DateTime?        @default(now()) @db.Timestamp(6)
  author_id                                           Int
  assignee_id                                         Int?
  is_blocked                                          Boolean?         @default(false)
  is_paused                                           Boolean?         @default(false)
  blocking_task_id                                    Int?
  completed                                           Boolean?         @map(""completed"")
  comments                                            comments[]
  task_relations_task_relations_child_task_idTotasks  task_relations[] @relation(""task_relations_child_task_idTotasks"")
  task_relations_task_relations_parent_task_idTotasks task_relations[] @relation(""task_relations_parent_task_idTotasks"")
  users_tasks_assignee_idTousers                      users?           @relation(""tasks_assignee_idTousers"", fields: [assignee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_tasks_author_idTousers                        users            @relation(""tasks_author_idTousers"", fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks                                               tasks?           @relation(""tasksTotasks"", fields: [blocking_task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_tasks                                         tasks[]          @relation(""tasksTotasks"")
  priotity                                            priority         @relation(fields: [priority], references: [id], onDelete: NoAction, onUpdate: NoAction, map: ""tasks_priotity_id_fk"")
  statuses                                            statuses?        @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: ""tasks_status_id_fk"")
}

model users {
  id                             Int           @id(map: ""id_pk"") @default(autoincrement())
  user_name                      String?
  number_phone                   String[]
  user_type                      Int
  organization_id                Int?
  chatId                         String?
  created_at                     DateTime      @default(now()) @db.Timestamp(6)
  updated_at                     DateTime      @default(now()) @db.Timestamp(6)
  userId_tg                      String?
  username_tg                    String?
  hash                           String?
  comments                       comments[]
  tasks_tasks_assignee_idTousers tasks[]       @relation(""tasks_assignee_idTousers"")
  tasks_tasks_author_idTousers   tasks[]       @relation(""tasks_author_idTousers"")
  organization                   organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: ""users_organization_id_fk"")
}

model statuses {
  id          Int     @id(map: ""statuses_pk"") @default(autoincrement())
  stateName   String?
  description String?
  isFinal     Boolean @default(false)
  tasks       tasks[]
}

model priority {
  id    Int     @id(map: ""priority_pk"") @default(autoincrement())
  name  String
  tasks tasks[]
}

```

```ts
import { PrismaClient } from '@prisma/client'

let DATABASE_URL = process.env.DATABASE_URL; // По умолчанию для dev

if (process.env.NODE_ENV === 'stage') {
	DATABASE_URL = process.env.DATABASE_STAGE; // Для stage
}

if (process.env.NODE_ENV === 'prod') {
	DATABASE_URL = process.env.DATABASE_URL_PROD; // Для prod
}

const prisma = new PrismaClient({
	datasourceUrl: DATABASE_URL
});

export default prisma
```


### Environment & setup

- OS: linux 6.7.8.arch1-1
- Database: postgres (PostgreSQL) 16.1
- Node.js v21.7.0


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : debian-openssl-1.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v21.7.0
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.0.x.so.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2245167612,23867,Panic: Internal error entered unreachable code,"### Bug description

Hi Prisma Team! My Prisma Client just crashed. This is the report:

## Logs

```
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.11.0""}
```

### How to reproduce

1. Clone [the repository](https://github.com/hellhub-collective/api)
2. Run `bunx prisma migrate dev`
3. Run `bunx prisma db push`
4. Run `bun run dev`
5. See error (sometimes)

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model War {
  id        Int      @id @default(autoincrement())
  index     BigInt   @unique
  startDate DateTime
  endDate   DateTime
  time      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sector {
  id        Int      @id @default(autoincrement())
  index     BigInt   @unique
  name      String
  planets   Planet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faction {
  id             Int           @id @default(autoincrement())
  index          BigInt        @unique
  name           String
  orders         Order[]       @relation(""Order"")
  planets        Planet[]      @relation(name: ""owner"")
  initialPlanets Planet[]      @relation(name: ""initialOwner"")
  globalEvents   GlobalEvent[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  homeWorld      HomeWorld[]   @relation(""HomeWorld"")
}

model Planet {
  id              Int          @id @default(autoincrement())
  index           BigInt       @unique
  name            String
  owner           Faction      @relation(name: ""owner"", fields: [ownerId], references: [id])
  ownerId         Int
  sector          Sector       @relation(fields: [sectorId], references: [id])
  sectorId        Int
  health          Int
  maxHealth       Int
  players         Int
  disabled        Boolean
  regeneration    Int
  liberation      Float
  liberationRate  Float
  liberationState String
  initialOwner    Faction      @relation(name: ""initialOwner"", fields: [initialOwnerId], references: [id])
  initialOwnerId  Int
  positionX       Float
  positionY       Float
  globalEvent     GlobalEvent? @relation(""GlobalEvent"", fields: [globalEventId], references: [id])
  globalEventId   Int?
  orders          Order[]      @relation(""Order"")
  campaign        Campaign[]   @relation(""Campaign"")
  homeWorld       HomeWorld[]  @relation(""HomeWorld"")
  attacking       Attack[]     @relation(""Attack"")
  defending       Attack[]     @relation(""Defend"")
  statistic       Stats?       @relation(fields: [statisticId], references: [id])
  statisticId     Int?         @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model GlobalEvent {
  id        Int      @id @default(autoincrement())
  index     BigInt   @unique
  title     String
  faction   Faction? @relation(fields: [factionId], references: [id])
  factionId Int?
  message   String
  planets   Planet[] @relation(""GlobalEvent"")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id        Int      @id @default(autoincrement())
  type      Int
  index     BigInt   @unique
  count     Int
  order     Order[]  @relation(""Order"")
  planet    Planet   @relation(""Campaign"", fields: [planetId], references: [id])
  planetId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeWorld {
  id        Int      @id @default(autoincrement())
  faction   Faction  @relation(""HomeWorld"", fields: [factionId], references: [id])
  factionId Int
  planet    Planet   @relation(""HomeWorld"", fields: [planetId], references: [id])
  planetId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int       @id @default(autoincrement())
  index       BigInt    @unique
  planet      Planet?   @relation(""Order"", fields: [planetId], references: [id])
  planetId    Int?
  faction     Faction?  @relation(""Order"", fields: [factionId], references: [id])
  factionId   Int?
  campaign    Campaign? @relation(""Order"", fields: [campaignId], references: [id])
  campaignId  Int?
  eventType   String
  health      Int
  maxHealth   Int
  hqNodeIndex Int?
  startTime   DateTime
  expireTime  DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attack {
  id        Int      @id @default(autoincrement())
  target    Planet   @relation(""Attack"", fields: [targetId], references: [id])
  targetId  Int
  source    Planet   @relation(""Defend"", fields: [sourceId], references: [id])
  sourceId  Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model StratagemGroup {
  id         Int         @id @default(autoincrement())
  name       String
  stratagems Stratagem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Stratagem {
  id         Int             @id @default(autoincrement())
  codename   String?
  name       String
  keys       String
  uses       String
  cooldown   Int?
  activation Int?
  imageUrl   String
  group      StratagemGroup? @relation(fields: [groupId], references: [id])
  groupId    Int?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model News {
  id          Int      @id @default(autoincrement())
  index       BigInt   @unique
  type        Int
  tagIds      String
  message     String
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Stats {
  id                 Int      @id @default(autoincrement())
  missionsWon        BigInt
  missionsLost       BigInt
  missionTime        BigInt
  bugKills           BigInt
  automatonKills     BigInt
  illuminateKills    BigInt
  bulletsFired       BigInt
  bulletsHit         BigInt
  timePlayed         BigInt
  deaths             BigInt
  revives            BigInt
  friendlyKills      BigInt
  missionSuccessRate Int
  accuracy           Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  planet             Planet?
}

model Reward {
  id         Int         @id @default(autoincrement())
  index      BigInt      @unique
  type       Int
  amount     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  assignment Assignment?
}

model Assignment {
  id          Int      @id @default(autoincrement())
  index       BigInt   @unique
  progress    Int
  expiresAt   DateTime
  type        Int
  title       String
  briefing    String
  description String
  reward      Reward   @relation(fields: [rewardId], references: [id])
  rewardId    Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
```

```ts
import { db } from ""utils/database"";
import { fetchSourceData, prepareForSourceData } from ""utils/generate"";

export async function refreshAndStoreSourceData() {
  const { factions, planets, sectors } = await prepareForSourceData();

  const {
    warId,
    warNews,
    warTime,
    warInfo,
    warStats,
    warStatus,
    warHistory,
    warAssignments,
  } = await fetchSourceData();

  await db.war.update({
    where: { index: warId },
    data: {
      index: warId,
      time: new Date(warTime.time * 1000),
      endDate: new Date(warInfo.endDate * 1000),
      startDate: new Date(warInfo.startDate * 1000),
    },
  });

  // ...
}
```


### Environment & setup

- OS: darwin
- Database: sqlite
- Node.js version: v21.6.0


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at ../../../../../../private/tmp/bunx-501-prisma@latest/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at ../../../../../../private/tmp/bunx-501-prisma@latest/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2244031955,23861,Crash when getting data from SQLite using Bun - thread 'tokio-runtime-worker' panicked,"### Bug description

When trying to get data from my database using Prisma in a Node.js environment with Bun, 'tokio-runtime-worker' panicks. This issue occurs when calling `prisma.cookie.findFirst()`, `prisma.cookie.findMany()`, or `prisma.cookie.findUnique()`.
```
thread 'tokio-runtime-worker' panicked at query-engine\query-engine-node-api\src\engine.rs:244:49:
called `Result::unwrap()` on an `Err` value: JoinError::Cancelled(Id(14))
stack backtrace:
   0:     0x7ffb873a0c39 - napi_register_module_v1
   1:     0x7ffb8699951d - <unknown>
   2:     0x7ffb87393a61 - napi_register_module_v1
   3:     0x7ffb873a24da - napi_register_module_v1
   4:     0x7ffb873a22ef - napi_register_module_v1
   5:     0x7ffb873a30ba - napi_register_module_v1
   6:     0x7ffb873a2ba9 - napi_register_module_v1
   7:     0x7ffb873a2ae9 - napi_register_module_v1
   8:     0x7ffb873a2ad6 - napi_register_module_v1
   9:     0x7ffb8756a417 - napi_register_module_v1
  10:     0x7ffb8756a9c3 - napi_register_module_v1
  11:     0x7ffb868f674b - <unknown>
  12:     0x7ffb868bef35 - <unknown>
  13:     0x7ffb868d4b8b - <unknown>
  14:     0x7ffb873bbedd - napi_register_module_v1
  15:     0x7ffb873c6cfd - napi_register_module_v1
  16:     0x7ffb873b9fc5 - napi_register_module_v1
  17:     0x7ffb873b98de - napi_register_module_v1
  18:     0x7ffb873bf8c0 - napi_register_module_v1
  19:     0x7ffb873a023c - napi_register_module_v1
  20:     0x7ffce318257d - BaseThreadInitThunk
  21:     0x7ffce3b6aa58 - RtlUserThreadStart
```

### How to reproduce

Setup a basic prisma project using bun
```
bun add --save-dev prisma
bun x prisma init
bun x prisma migrate 
etc
```

### Expected behavior

Get the data

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Cookie {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  cookie    String
}

```

```ts
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient()

async function getCookie() {
	await prisma.cookie.findUnique({where:{id:1}})
}

getCookie()

```


### Environment & setup

- OS: Windows 11
- Database: SQLite
- Node.js version: v20.0.0


### Prisma Version
```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.0.0
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2241728367,23855,"`vitest`: Prisma 5.12.1 client has errors accessing postgress db when using with cloudflare workers and the new `{ previewFeatures = [""driverAdapters""] }`","### Bug description

Prisma 5.12.1 client has errors accessing postgress db when using with cloudflare workers and the new { previewFeatures = [""driverAdapters""] }.  All queries using the PrismaClient() will fail with error:

```
Cannot find module './query_engine_bg.js'
```
![Image](https://github.com/prisma/prisma/assets/183673/07bd2c23-eb9c-4a74-a424-43305505cc5e)


**NOTE:** the root cause of the bug is that there are 2 files: [query_engine_bg.js] & [query_engine_bg.wasm] that are missing from the directory [\node_modules.prisma\client]

_(if you copy the 2 missing files into this directory, then the PrismaClient() will work, and be able to query the database)_

### How to reproduce
1. create cloudflare project and use Prisma 5.12.1
2. Use the previewFeatures = [""driverAdapters""] 
3. use the PrismaClient and run a query:   
       await client.sponsor.findUnique({where: { id: 'c6861cb6-e9ad-47f6-a39c-170dd53ee2e2' },
4. See error


### Expected behavior

you should be able to query the database with PrismaClient

### Prisma information
```
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model sponsor{
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

```

```
import { PrismaPg } from '@prisma/adapter-pg';
import { PrismaClient } from '@prisma/client';
import pg from 'pg';

const { Pool } = pg; 

export const getPrismaClient = (databaseConfig: Config['database']): PrismaClient => {
	types.setTypeParser(types.builtins.NUMERIC, value => Number(value));
	const pool = new Pool({
		connectionString: databaseConfig.url,
	});
	const adapter = new PrismaPg(pool);
	return new PrismaClient({ adapter });
};

==========================================

const client = getPrismaClient(config.database);

describe('raw test1', () => {
	it('get Study for study_id: 9ecfbc52-c475-40a9-9a15-f91c4a64766e', async () => {
		const retrievedStudy = await client.sponsor.findUnique({
		 	where: { id: '9ecfbc52-c475-40a9-9a15-f91c4a64766e' },
		});

```


### Environment & setup

- OS: windows 10
- Database: [PostgreSQL]
- Node.js version: v18.16.0


### Prisma Version

```
prisma 5.12.1
@prisma/client 5.12.1
@prisma/adapter-pg  5.12.1

```

![image](https://github.com/prisma/prisma/assets/73307/f61942ba-ac8a-4cda-9abf-dc4c41be9207)

",,
2241711814,23854,primsa generate,"### Bug description

`@prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2240036661,23841,Improve Developer Experience when working with multiple providers.,"## Problem

Sometimes you don't know what database you currently on when you use SQLite provider with multiple clients.

```prisma
generator client {
  provider = ""prisma-client-js""
  output   = ""../../node_modules/@prisma-db/client""
}
```

For example, we change the output to `@prisma-db/client`, and after that we test it, and notice that why data is gone or lost.

Take a long time to realize that our client still using the old one.

Just because we forgot to change this:

```js
import { PrismaClient } from ""@prisma/client"";
```

to

```js
import { PrismaClient } from ""@prisma-db/client"";
```

We need to find a way to avoid this blunder. Because no errors or warnings from what we taste.

## Suggested solution

Generate the errors if developer modify the output of default schema and still use the client on code.

## Alternatives

Give warning that developer use old generated schema client?
",,
2239288536,23837,Prisma Client should never create empty SQLite databases,"### Bug description

Currently, when using Prisma Client with the SQLite adapter, passing an invalid database file path when instantiating the client will cause an empty database file to be created at that path (if the location is writeable). Unless you are using Prisma Client in a very unusual way (eg. constructing all tables at runtime with `$executeRaw`), this is almost never what you want, since it defeats the purpose of generating a typesafe client from a schema and having a migrations system.

Since it can be a bit tricky to get SQLite file paths right (when passing a relative path it's not always obvious whether it's relative to the schema file, to the working directory, etc), this frequently leads to confusing errors and database files created in odd places. (A recent production deployment I was working on of a Next.js app using Prisma Client was unexpectedly creating the database file in `node_modules`, for example.) Prisma Client instances misconfigured in this manner don't ""fail fast"", and instead only yield errors when a query to a nonexistent table is executed.

I understand this is a fairly minor papercut, but it seems it's cropped up in some other contexts as well (#7969, #6495). There doesn't appear to be an issue to track the specific scenario of erroneous database creation at runtime with Prisma Client specifically, so here we are.

---

SQLite's C interface controls whether a database should be created automatically on open [via flags](https://www.sqlite.org/c3ref/open.html). Rusqlite exposes this functionality via [`Connection::open_with_flags`](https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html#method.open_with_flags), but Quaint only [wraps `Connection::open`](https://github.com/prisma/prisma-engines/blob/6d35870e9578a3e7406168f61f89f84e78c1b38d/quaint/src/connector/sqlite/native/mod.rs#L38) (and [`Connection::open_in_memory`](https://github.com/prisma/prisma-engines/blob/6d35870e9578a3e7406168f61f89f84e78c1b38d/quaint/src/connector/sqlite/native/mod.rs#L57)). `Connection::open` uses SQLite's default behaviour, which creates the database file if it doesn't exist. This can be convenient for interactive sessions (like the `sqlite3` CLI, for instance), but is error-prone in many other contexts. This is arguably another one of SQLite's many less-than-ideal defaults that was preserved for backwards compatibility (the fact that the SQLite C interface function to open a database file with flags is called `sqlite3_open_v2` supports this argument).

Other SQLite libraries expose this funcitonality explicitly (eg. [`fileMustExist` for `better-sqlite3`](https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md#new-databasepath-options), [raw flags for `node-sqlite3`](https://github.com/TryGhost/node-sqlite3/wiki/API#new-sqlite3databasefilename--mode--callback)). The Python standard library allows you to control this behaviour via [connection string query parameters](https://docs.python.org/3/library/sqlite3.html#sqlite3-uri-tricks). (This is apparently [behaviour built-in to SQLite](https://www.sqlite.org/uri.html#recognized_query_parameters), but specifying `?mode=rw` does not appear to make a difference to Prisma Client.)


### How to reproduce

- With a project configured to use Prisma Client with the SQLite adapter, initialize the client with `new PrismaClient({ datasourceUrl: 'file:some-path-that-doesnt-exist.db' })`.
- If this path is writable, the database will be created.
- The Prisma Client will not throw any error, but future queries that expect a given table to exist will fail.

### Expected behavior

Prisma Client should ""fail fast"" if a SQLite database file doesn't exist at the provided path. For special cases maybe a user could opt-in to the ""create if it doesn't exist"" behaviour.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DB_URL"")
}

// any models ...
```

```ts
const client = new PrismaClient({ datasourceUrl: 'file:some-path-that-doesnt-exist.db' });
const result = client.someModel.findUnique({ where: { someParam: ""some value"" } });
```


### Environment & setup

- OS: Linux
- Database: SQLite
- Node.js version: 20.12.1


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.12.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```",,
2239192239,23836,Crash when insert data to SQLite `createMany` using Bun - thread 'tokio-runtime-worker' panicked,"### Bug description

While attempting to insert a large amount of currency rate data using Prisma in a Node.js environment, the process fails and the Tokio runtime worker throws a panic. This issue occurs when calling prisma.rates.createMany() to insert the data into the database.

```sh
thread 'tokio-runtime-worker' panicked at query-engine\query-engine-node-api\src\engine.rs:244:49:
called `Result::unwrap()` on an `Err` value: JoinError::Cancelled(Id(22))
stack backtrace:
   0:     0x7ffa705d0c39 - napi_register_module_v1
   1:     0x7ffa6fbc951d - <unknown>
   2:     0x7ffa705c3a61 - napi_register_module_v1
   3:     0x7ffa705d24da - napi_register_module_v1
   4:     0x7ffa705d22ef - napi_register_module_v1
   5:     0x7ffa705d30ba - napi_register_module_v1
   6:     0x7ffa705d2ba9 - napi_register_module_v1
   7:     0x7ffa705d2ae9 - napi_register_module_v1
   8:     0x7ffa705d2ad6 - napi_register_module_v1
  11:     0x7ffa6fb2674b - <unknown>
  12:     0x7ffa6faeef35 - <unknown>
  13:     0x7ffa6fb04b8b - <unknown>
  14:     0x7ffa705ebedd - napi_register_module_v1
  15:     0x7ffa705f6cfd - napi_register_module_v1
  16:     0x7ffa705e9fc5 - napi_register_module_v1
  17:     0x7ffa705e98de - napi_register_module_v1
  18:     0x7ffa705ef8c0 - napi_register_module_v1
  19:     0x7ffa705d023c - napi_register_module_v1
  20:     0x7ffb951b257d - BaseThreadInitThunk
  21:     0x7ffb96b2aa58 - RtlUserThreadStart
```

The data is not inserted and the error is only happen sometimes

### How to reproduce

```
# init prisma client & schema
npx prisma init --datasource-provider sqlite

# generate prisma db
npx prisma generate

# sync db with prisma schema
npx prisma db push

# open prisma studio
npx prisma studio
```

### Expected behavior

createMany is working

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Rates {
  id String @id @default(uuid())
  currency_name String
  base String
  // rate per base
  rate String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currencies {
  id String @id @default(uuid())
  currency_name String
  type String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

// Ensure the global type definitions are recognized
declare var global: {
  prisma: PrismaClient | undefined;
};

let prisma: PrismaClient;

if (process.env.NODE_ENV === ""production"") {
  prisma = new PrismaClient();
} else {
  if (!global.prisma) {
    global.prisma = new PrismaClient();
  }
  prisma = global.prisma;
}

export default prisma;
```


### Environment & setup

OS Name:                   Microsoft Windows 11 Pro
OS Version:                10.0.22621 N/A Build 22621
Database: SQLite
Bun version: 1.1.3


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : Not found
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v18.16.0
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at AppData\Local\npm-cache\_npx\2778af9cee32ff87\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at AppData\Local\npm-cache\_npx\2778af9cee32ff87\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2238831514,23832,"i hosted three bots for VK on vds with help cron tab, two bots failed, just one work now easy project hehe, i see this stacktrace first in my life lol","Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v18.17.0           | 
| OS              | debian-openssl-3.0.x|
| Prisma Client   | 3.13.0             |
| Query Engine    | 0.1.0              |
| Database        | sqlite             |



## Logs
```
equest, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:librar

Logs:
[Magomir Central Bank] --> In a private chat, succes get keyboard is viewed by user 598832292 <-- (11.04.2024, 22:18:00)
[Magomir Central Bank] --> In private chat, invite enter in system is viewed by user 598832292 <-- (11.04.2024, 22:18:05)
[Magomir Central Bank] --> In a private chat, the card is viewed by user 806193350 <-- (11.04.2024, 22:18:48)
[Magomir Central Bank] --> In a private chat, the card is viewed by user 507431478 <-- (11.04.2024, 22:18:56)
[Magomir Central Bank] --> In a private chat, left in shopping is viewed by user 756434895 <-- (11.04.2024, 22:19:12)
[Magomir Central Bank] --> In a private chat, enter in shopping is viewed by user 756434895 <-- (11.04.2024, 22:19:16)
[Magomir Central Bank] --> In a private chat, the card is viewed by user 756434895 <-- (11.04.2024, 22:19:32)
[Magomir Central Bank] --> In database, created new person GUID 20 UID 54 by user 507431478 <-- (11.04.2024, 22:19:48)
[Magomir Central Bank] --> In a private chat, succes get keyboard is viewed by user 507431478 <-- (11.04.2024, 22:19:50)
[Magomir Central Bank] --> In database, created new person GUID 16 UID 55 by user 756434895 <-- (11.04.2024, 22:20:23)
[Magomir Central Bank] --> In a private chat, succes get keyboard is viewed by user 507431478 <-- (11.04.2024, 22:20:24)
[Magomir Central Bank] --> In a private chat, succes get keyboard is viewed by user 756434895 <-- (11.04.2024, 22:20:30)
[Magomir Central Bank] --> In private chat, invite enter in system is viewed by user 507431478 <-- (11.04.2024, 22:20:33)
[Magomir Central Bank] --> In a private chat, succes get keyboard is viewed by user 756434895 <-- (11.04.2024, 22:20:51)
[Magomir Central Bank] --> In private chat, invite enter in system is viewed by user 756434895 <-- (11.04.2024, 22:20:59)
[Magomir Central Bank] --> In a private chat, enter in shopping is viewed by user 756434895 <-- (11.04.2024, 22:21:40)
[Magomir Central Bank] --> In a private chat, the card is viewed by user 507431478 <-- (11.04.2024, 22:22:21)
[Magomir Central Bank] --> In a private chat, open shop Артефакты и реликвии is viewed by user 756434895 <-- (11.04.2024, 22:23:00)
[Magomir Central Bank] --> In a private chat, opened 733772863 card UID 26 is viewed by admin 733772863 <-- (11.04.2024, 22:23:04)
[Magomir Central Bank] --> In database, created new person GUID 20 UID 56 by user 507431478 <-- (11.04.2024, 22:23:16)
[Magomir Central Bank] --> In a private chat, succes get keyboard is viewed by user 507431478 <-- (11.04.2024, 22:23:20)
thread 'tokio-runtime-worker' panicked at 'called `Option::unwrap()` on a `None` value', query-engine/core/src/query_document/parser.rs:250:87
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
PrismaClientUnknownRequestError:
Invalid `prisma.user.update()` invocation in
PrismaClientUnknownRequestError:
Invalid `prisma.user.update()` invocation in
/home/min-magic-vk-bank/src/engine/player.ts:1336:49

  1333 const count: number = await Ipnut_Gold()
  1334 const messa: string = await Ipnut_Message()
  1335 const user_get: any = await prisma.user.findFirst({ where: { id } })
→ 1336 const money_put = await prisma.user.update(
  called `Option::unwrap()` on a `None` value
    at Object.request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:45633:15)
    at async PrismaClient._request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:46456:18)
    at async Object.Medal_Up (/home/min-magic-vk-bank/src/engine/player.ts:1336:31)
    at async /home/min-magic-vk-bank/src/engine/player.ts:688:31
    at async /home/min-magic-vk-bank/node_modules/vk-io-question/lib/index.js:92:13
    at async /home/min-magic-vk-bank/node_modules/middleware-io/lib/index.js:280:9 {
  clientVersion: '3.13.0'
}
PrismaClientRustPanicError:
Invalid `prisma.account.findFirst()` invocation:


  PANIC: called `Option::unwrap()` on a `None` value in query-engine/core/src/query_document/parser.rs:250:87

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node+++++++
https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v18.17.0+++++++++++%7C+%0A%7C+OS++++++++++++++%7C+debian-openssl-3.0.x%7C%0A%7C+Prisma+Client+++%7C+3.13.0+++++++++++++%7C%0A%7C+Query+Engine++++%7C+0.1.0++++++++++++++%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aequest%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3Alibrar
If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue.

    at Object.request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:45637:15)
    at async PrismaClient._request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:46456:18)
    at async Person_Detector (/home/min-magic-vk-bank/src/engine/core/person.ts:234:21)
    at async /home/min-magic-vk-bank/src/index.ts:118:2
    at async /home/min-magic-vk-bank/node_modules/vk-io-question/lib/index.js:40:17
    at async /home/min-magic-vk-bank/node_modules/middleware-io/lib/index.js:280:9 {
  clientVersion: '3.13.0'
}
PrismaClientRustPanicError:
Invalid `prisma.account.findFirst()` invocation:


  PANIC: called `Option::unwrap()` on a `None` value in query-engine/core/src/query_document/parser.rs:250:87

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v18.17.0+++++++++++%7C+%0A%7C+OS++++++++++++++%7C+debian-openssl-3.0.x%7C%0A%7C+Prisma+Client+++%7C+3.13.0+++++++++++++%7C%0A%7C+Query+Engine++++%7C+0.1.0++++++++++++++%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aequest%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+req
https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v18.17.0+++++++++++%7C+%0A%7C+OS++++++++++++++%7C+debian-openssl-3.0.x%7C%0A%7C+Prisma+Client+++%7C+3.13.0+++++++++++++%7C%0A%7C+Query+Engine++++%7C+0.1.0++++++++++++++%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aequest%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3Alibrar
If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue.

    at Object.request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:45637:15)
    at async PrismaClient._request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:46456:18)
    at async Person_Detector (/home/min-magic-vk-bank/src/engine/core/person.ts:234:21)
    at async /home/min-magic-vk-bank/src/index.ts:118:2
    at async /home/min-magic-vk-bank/node_modules/vk-io-question/lib/index.js:40:17
    at async /home/min-magic-vk-bank/node_modules/middleware-io/lib/index.js:280:9 {
  clientVersion: '3.13.0'
}
PrismaClientRustPanicError:
Invalid `prisma.account.findFirst()` invocation:


  PANIC: called `Option::unwrap()` on a `None` value in query-engine/core/src/query_document/parser.rs:250:87

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v18.17.0+++++++++++%7C+%0A%7C+OS++++++++++++++%7C+debian-openssl-3.0.x%7C%0A%7C+Prisma+Client+++%7C+3.13.0+++++++++++++%7C%0A%7C+Query+Engine++++%7C+0.1.0++++++++++++++%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aequest%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+req
ETC
If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue.

    at Object.request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:45637:15)
    at async PrismaClient._request (/home/min-magic-vk-bank/node_modules/@prisma/client/runtime/index.js:46456:18)
    at async Person_Detector (/home/min-magic-vk-bank/src/engine/core/person.ts:234:21)
    at async /home/min-magic-vk-bank/src/index.ts:118:2
    at async /home/min-magic-vk-bank/node_modules/vk-io-question/lib/index.js:40:17
    at async /home/min-magic-vk-bank/node_modules/middleware-io/lib/index.js:280:9 {
  clientVersion: '3.13.0'
}
User 93440650 succes get keyboard
User 93440650 succes get keyboard
Init question for user 93440650
User 93440650 got quest
Analyzer module detected quest for user UID 636
User 349013707 ready for new quest
User 349013707 got quest
Analyzer module detected quest for user UID 615
PrismaClientRustPanicError:
Invalid `prisma.user.count()` invocation:


  PANIC: called `Option::unwrap()` on a `None` value in query-engine/core/src/query_document/parser.rs:250:87

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
ETC",,
2237672419,23827,"""Not Authorised"" when directly applying Prisma generated migrations to Cloudflare D1 with `PRAGMA foreign_key_check;`","### Bug description

When we change a column in a table with foreign keys, Prisma CLI generates the migrations properly when we run `migrate diff` but a particular line is inserted in the sql statements that are output: 
`PRAGMA foreign_key_check;`

When you try to apply these migrations to either Cloudflare D1 local or remote databases, it fails with the error ""not authorized"". The above line is where this error is happening. The rest of the sql statements generated work perfectly.

### How to reproduce

Create a simple prisma schema with 2 tables dependent on each other (maybe User and Session tables)
Generate migrations and apply to local and remote databases of Cloudflare D1
You can use this link for detailed instructions on how to do that: https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1

Change something in the session table like a column name from userId to user_id
And regenerate migrations. Again, details on how here: https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1#3-generate-sql-statements-using-prisma-migrate-diff-1

View the generated migrations sql file. If you try and apply the migrations, you will get the error.

It looks like this in the console:
<img width=""902"" alt=""image"" src=""https://github.com/prisma/prisma/assets/14161564/7f173d5a-e855-494a-958c-44b4912b8508"">



### Expected behavior

It should ideally allow us to run `PRAGMA foreign_key_check;`

Current workaround, apply migrations line by line manually or remove the line causing issues.

### Prisma information

Initial Prisma Schema:
```
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id    String  @id 
  email String  @unique
  name  String?
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expires_at DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
```

Modified Prisma Schema:
```
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id    String  @id 
  email String  @unique
  name  String?
  sessions Session[]
}

model Session {
  id        String   @id
  user_id    String
  expires_at DateTime
  user      User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
}
```

### Environment & setup

- OS: macOS
- Database: Cloudflare D1
- Node.js version: v 20.11.0
- Wrangler version: v 3.47.0


### Prisma Version

```
5.12.1
```
",,
2237495546,23826,Send custom batch queries,"## Problem

I have a similar problem as described in https://github.com/prisma/prisma/issues/5455#issuecomment-2006946981, but to paraphrase:

I have a large, complex seeding script meant to seed production-ready data throughout the entire database. It makes plenty of nested queries, each dependent on the other.

I seed a remote database with this data, and while it takes a manageable amount of time locally, seeding it remotely is a pain.

## Suggested solution

Add some `prisma.$batch` query, that, like `createMany`, `insertMany`, etc..., runs a customizable number of a 'batch' of queries at a time; while the method will be less error friendly (as errors will be contained in the batch rather than on the individual query level), it makes it much easier to send many queries to a database instead of waiting for the request to be acknowledged, for each query/mutation, for tens of thousands of them.

Its API can work similarly to `prisma.$transaction`, where it can either take a list of prisma calls, or an async function that attaches a custom prisma handler, which then takes those calls and sends them in batches to the connected database, like how `createMany` works internally.

## Alternatives

For others experiencing this issue, these scripts can either be run locally on the server (though this is tricky if you aren't on a VPS / a managed server), or they can be de-nested - though refactoring this takes time and is generally less readable than the solution provided in the issue.",,
2236806580,23822,Server has closed the connection in long transactions with ?pgbouncer=true ,"### Bug description

When using `?pgbouncer=true`, long transactions fail after about 20 seconds with error

```
Invalid `prisma.$executeRaw()` invocation:

Server has closed the connection.
```

This happens even with a long timeout setting for `prisma.$transaction`.

- Removing `?pgbouncer=true` fixes the issue.
- Ssetting `?connection_limit=1` also fixes the issue

Additional notes:
- I cannot repro from my local machine, only on Vercel
- I cannot repro connecting using a direct SQL connection, only connecting to a pooler triggers triggers the bug
- There are no other clients (isolated DB / Vercel deployment)

```
Env     | Use transaction | Connection                               | Result
----------------------------------------------------------------------------------
laptop    NO                Direct                                     no bug
laptop    NO                Pooler (Supavisor) ?pgbouncer=true         no bug
laptop    YES               Direct                                     no bug
laptop    YES               Pooler (Supavisor)                         no bug

Vercel    NO                Direct                                     no bug
Vercel    YES               Direct                                     no bug
Vercel    YES               Direct                                     no bug
Vercel    YES               Direct             ?connection_limit=1     no bug
Vercel    YES               Pooler (Supavisor) ?connection_limit=1     no bug
Vercel    YES               Pooler (Supavisor) ?pgbouncer=true         timeout after 20 sec
```

### How to reproduce

```ts
const start = new Date();

try {
  const prisma = new PrismaClient({ datasourceUrl: url });
  await prisma.$transaction(
    async (tx) => {
      for (let i = 0; i < 100000; ++i) {
        await tx.$executeRaw`INSERT INTO foo (created_on,name) VALUES (${new Date()},${`foo number ${i}`})`;
        console.log(i);
      }
      await tx.$executeRaw`ROLLBACK`;
    },
    { timeout: 60_000 }
  );
} finally {
  console.log('operation took', (new Date().getTime() - start.getTime()) / 1000, 's');
}
```

### Expected behavior

The transaction should either succeed or timeout.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  url       = env(""DATABASE_URL"")
  provider  = ""postgresql""
}

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""rhel-openssl-1.0.x""]
}

model Pen {
  id        Int          @id @default(autoincrement())
  createdOn DateTime     @default(now())
  name      String
}
```



### Environment & setup

- Platform: Vercel
- Database: PostgreSQL (Supabase)



### Prisma Version

```
5.12.1
```
",,
2236356113,23819,`internal error: entered unreachable code` in end-to-end playwright tests run over sqlite database,"### Bug description

A set of end-to-end tests written with playwright and using prisma over a sqlite database fail with this kind of error message:
```sh
[WebServer] GET /users/h3_lue_ruecker/notes/cluu8oa3p000j94gq6jhzofyw/edit?_data=root 200 - - 8.095 ms
thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:167:18:
internal error: entered unreachable code
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
prisma:query - [31m5208ms[39m - DELETE FROM `main`.`User` WHERE `main`.`User`.`id` = ?
[31mprisma:error[39m 
Invalid `prisma.user.deleteMany()` invocation:


internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v21.6.1++++++++++++%7C+%0A%7C+OS++++++++++++++%7C+darwin-arm64+++++++%7C%0A%7C+Prisma+Client+++%7C+5.12.0+++++++++++++%7C%0A%7C+Query+Engine++++%7C+473ed3124229e22d881cb7addf559799debae1ab%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+loaded+from+%2FUsers%2Ffoobar%2FWork%2Fepic-stack%2F.env%0Aprisma%3Aclient+checkPlatformCaching%3Apostinstall+false%0Aprisma%3Aclient+checkPlatformCaching%3AciName+%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+loaded+from+%2FUsers%2Ffoobar%2FWork%2Fepic-stack%2F.env%0Aprisma%3Aclient+dirname+%2FUsers%2Ffoobar%2FWork%2Fepic-stack%2Fnode_modules%2F.prisma%2Fclient%0Aprisma%3Aclient+relativePath+..%2F..%2F..%2Fprisma%0Aprisma%3Aclient+cwd+%2FUsers%2Ffoobar%2FWork%2Fepic-stack%2Fprisma%0Aprisma%3Aclient+clientVersion+5.12.0%0Aprisma%3Aclient%3AlibraryEngine+internalSetup%0Aprisma%3Aclient%3Aengines%3AresolveEnginePath+enginePath+%2FUsers%2Ffoobar%2FWork%2Fepic-stack%2Fnode_modules%2F.prisma%2Fclient%2Flibquery_engine-darwin-arm64.dylib.node%0Aprisma%3Aclient%3AlibraryEngine+library+starting%0Aprisma%3Aclient%3AlibraryEngine+library+started%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0A%60%60%60%0A%0A%23%23+Client+Snippet%0A%60%60%60ts%0A%2F%2F+PLEASE+FILL+YOUR+CODE+SNIPPET+HERE%0A%60%60%60%0A%0A%23%23+Schema%0A%60%60%60prisma%0A%2F%2F+PLEASE+ADD+YOUR+SCHEMA+HERE+IF+POSSIBLE%0A%60%60%60%0A%0A%23%23+Prisma+Engine+Query%0A%60%60%60%0A%7B%22X%22%3Atrue%7D%7D%7D%0A%60%60%60%0A&title=internal+error%3A+entered+unreachable+code&template=bug_report.yml

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
```

Attaching full log of the failing `npm run validate` run
[prisma-bug.log](https://github.com/prisma/prisma/files/14937266/prisma-bug.log)


### How to reproduce

1. Clone the code in this repository: https://github.com/epicweb-dev/epic-stack.git
2.  Copy `.env.example` into `.env`
3.  Run `npm install && npm run setup -s` to install dependencies and run
    validation
4. Run `npm run validate` 2-3 time until it fails (it could fail a little bit earlier or later than that)


### Expected behavior

There should be no prisma internal error.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("""")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("""")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. ""email"" or ""phone""
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

```

Check the code in this repository: https://github.com/epicweb-dev/epic-stack.git, but here is an example of code that fails (https://github.com/epicweb-dev/epic-stack/blob/d663177944e97f2705ec69482d3cc3c56865b2c8/app/routes/users%2B/%24username_%2B/__note-editor.server.tsx#L97):
```ts
	const {
		id: noteId,
		title,
		content,
		imageUpdates = [],
		newImages = [],
	} = submission.value

	const updatedNote = await prisma.note.upsert({
		select: { id: true, owner: { select: { username: true } } },
		where: { id: noteId ?? '__new_note__' },
		create: {
			ownerId: userId,
			title,
			content,
			images: { create: newImages },
		},
		update: {
			title,
			content,
			images: {
				deleteMany: { id: { notIn: imageUpdates.map(i => i.id) } },
				updateMany: imageUpdates.map(updates => ({
					where: { id: updates.id },
					data: { ...updates, id: updates.blob ? cuid() : updates.id },
				})),
				create: newImages,
			},
		},
	})
```


### Environment & setup

- OS: macOS & Windows
- Database: SQLite
- Node.js version: v21.6.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.12.0
@prisma/client          : 5.12.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2235549376,23816,Postgres `Oid` fails with `relationJoins`,"I just ran into this issue as well, when using `@db.Oid` as a foreign key with `relationJoins` enabled.

It works as expected with `relationJoins` disabled.

```schema.prisma
datasource db {
  provider = ""postgresql""
}

generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""relationJoins""]
}

model File {
  oid    Int @id @db.Oid
  files  UserFile[]
}

model UserFile {
  id        String @id @default(cuid())
  fileOid   Int @db.Oid
  file      File @relation(fields: [fileOid], references: [oid], onDelete: Cascade)
}
```

```typescript
const results = await prisma.userFile.findMany({
  include: {
    file: true,
  },
});

```

```
PrismaClientKnownRequestError: 
Invalid `prisma.userFile.findMany()` invocation in
../script.ts:17:60

  14 import { prisma } from ""@/lib/prisma"";
  15 
  16 async function main(_args: string[]) {
→ 17   const results = await prisma.userFile.findMany(
Inconsistent column data: Unexpected conversion failure for field File.oid from String(65586) to Int.
    at In.handleRequestError (../node_modules/@prisma/client/runtime/library.js:122:6854)
    at In.handleAndLogRequestError (../node_modules/.pnpm/@prisma+client@5.11.0_prisma@5.11.0/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (../node_modules/@prisma/client/runtime/library.js:122:5896)
    at async l (../node_modules/@prisma/client/runtime/library.js:127:10871)
    at async main (../script.ts:17:60) {
  code: 'P2023',
  clientVersion: '5.11.0',
  meta: {
    modelName: 'FhirResourceIngestFile',
    message: 'Unexpected conversion failure for field StudyFile.oid from String(65586) to Int.'
  }
}
```

_Originally posted by @jgnieuwhof in https://github.com/prisma/prisma/issues/23262#issuecomment-1998045146_
            ",,
2235525797,23814,Bug when compiling prisma using custom output,"### Bug description

When I try to compile my nextjs project with after my prisma codegen I get the error.

```Dockerfile
29.01 qrtag:build: ./prisma/client/runtime/edge-esm.js:1:1
29.01 qrtag:build: Type error: Declaration emit for this file requires using private name 'i'. An explicit type annotation may unblock declaration emit.
```

https://cdn.discordapp.com/attachments/1225878190891864104/1226937916312518707/image.png?ex=662695fa&is=661420fa&hm=6e04892eb54415c469c92fbe5b131f9abfcb1fbbf0f93037fd438f17eb787b21&

The project is running inside a turborepo and i'm trying to create a docker image using the following dockerfile.

```
# Builder
FROM node:alpine AS builder
RUN apk add --no-cache libc6-compat
RUN apk update

WORKDIR /app
RUN yarn global add turbo
COPY . .
RUN turbo prune --scope=qrtag --docker


# Installer
FROM node:alpine AS installer
RUN apk add --no-cache libc6-compat
RUN apk update

WORKDIR /app
RUN yarn global add pnpm
RUN yarn global add turbo

COPY /apps/qrtag/prisma .
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder /app/out/pnpm-workspace.yaml ./pnpm-workspace.yaml
RUN pnpm fetch
RUN pnpm install --offline
RUN pnpm add prisma@5.12.1 --workspace-root
RUN pnpm add @prisma/client@5.12.1 --workspace-root
RUN pnpx prisma generate --schema=./schema.prisma

COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json

RUN turbo build --filter=qrtag...

# Runner
FROM node:alpine AS runner
WORKDIR /app

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

COPY --from=installer /app/apps/qrtag/next.config.js .
COPY --from=installer /app/apps/qrtag/package.json .

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /app/apps/qrtag/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/qrtag/.next/static ./apps/qrtag/.next/static
# COPY --from=installer --chown=nextjs:nodejs /app/apps/appname/public ./apps/appname/public

CMD node apps/qrtag/server.js
```

### How to reproduce

No idea

### Expected behavior

Expected behavior is that the compilation works and the NextJS compiles without type errors.

### Prisma information

generator client {
  provider = ""prisma-client-js""
  output   = ""../prisma/client""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model EventTag {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  userId    Int       @db.UnsignedInt
  eventId   Int       @db.UnsignedInt
  targetId  Int       @db.UnsignedInt
  timestamp DateTime  @default(now()) @db.DateTime(0)
  target    User      @relation(""event_tags_target_idTousers"", fields: [targetId], references: [id], onUpdate: Restrict, map: ""event_tags_target_id_foreign"")
  eventUser EventUser @relation(fields: [userId, eventId], references: [userId, eventId])
  user      User      @relation(fields: [userId], references: [id])
  event     Event     @relation(fields: [eventId], references: [id])

  @@index([targetId], map: ""event_tags_target_id_foreign"")
}

model EventUser {
  id       Int        @id @default(autoincrement()) @db.UnsignedInt
  userId   Int        @db.UnsignedInt
  eventId  Int        @db.UnsignedInt
  isAlive  Boolean    @default(true)
  secret   String     @db.VarChar(255)
  targetId Int?       @db.UnsignedInt
  event    Event      @relation(fields: [eventId], references: [id], onUpdate: Restrict, map: ""event_users_event_id_foreign"")
  target   User?      @relation(""event_users_target_idTousers"", fields: [targetId], references: [id], onUpdate: Restrict, map: ""event_users_target_id_foreign"")
  user     User       @relation(""event_users_user_idTousers"", fields: [userId], references: [id], onUpdate: Restrict, map: ""event_users_user_id_foreign"")
  tags     EventTag[]

  @@unique([userId, eventId])
  @@index([eventId], map: ""event_users_event_id_foreign"")
  @@index([targetId], map: ""event_users_target_id_foreign"")
  @@index([userId], map: ""event_users_user_id_foreign"")
}

model Event {
  id              Int         @id @default(autoincrement()) @db.UnsignedInt
  name            String      @db.VarChar(255)
  startDate       DateTime    @db.DateTime(0)
  endDate         DateTime    @db.DateTime(0)
  targetsAssigned Boolean     @default(false)
  winnerId        Int?        @db.UnsignedInt
  winner          User?       @relation(fields: [winnerId], references: [id])
  EventUser       EventUser[]
  EventTag        EventTag[]
}

model User {
  id              Int         @id @default(autoincrement()) @db.UnsignedInt
  username        String      @unique @db.VarChar(255)
  displayName     String      @db.VarChar(255)
  class           String      @db.VarChar(6)
  createdAt       DateTime    @default(now()) @db.DateTime(0)
  updatedAt       DateTime    @default(now()) @db.DateTime(0)
  eventTargetTags EventTag[]  @relation(""event_tags_target_idTousers"")
  eventTargets    EventUser[] @relation(""event_users_target_idTousers"")
  eventUsers      EventUser[] @relation(""event_users_user_idTousers"")
  userAdmin       UserAdmin?
  Event           Event[]
  EventTag        EventTag[]
}

model UserAdmin {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @unique @db.UnsignedInt
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
}


### Environment & setup

- OS: Linux  6.8.2-arch2-1 
- Database: MySQL
- Node.js version: v20.12.1


### Prisma Version

prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.12.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at ../../node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at ../../node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0",,
2235129616,23811,Promise.all in interactive $transaction unexpectedly merges operations,"### Bug description

We found some weird behavior when using Promise.all inside interactive transactions.
The two queries inside the Promise.all get merged together.

### How to reproduce

Inside an interactive $transaction, make two findUnique queries, each for a different unique field, batched together with a Promise.all (to hopefully reduce impact of network latency).

### Expected behavior

Two queries should be made. The result of Promise.all should contain the result of each one.

Instead, only one query is made with a merge of the where conditions of both operations. The result of Promise.all contains the result of the query and a null.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client_js {
  provider      = ""prisma-client-js""
  output        = ""../node/prisma""
  binaryTargets = [""debian-openssl-1.1.x"", ""debian-openssl-3.0.x"", ""linux-musl""]
}

// ...

model User {
  user_id            String    @id @default(uuid())
  email              String    @unique
  // ...
  stripe_customer_id String?   @unique
}
```

```ts
await this.db.$transaction(async (tx) => {
  const [userMatch, customerMatch] = await Promise.all([
      tx.user.findUnique({ where: { user_id }),
      tx.user.findUnique({ where: { stripe_customer_id }}),
  ]);
  console.log(""userMatch"", userMatch);
  console.log(""customerMatch"", customerMatch);
});
```

<details>
<summary>Debug logs</summary>
<pre>
prisma:query BEGIN
prisma:client Prisma Client call: +473ms
prisma:client prisma.user.findUnique({
  where: {
    user_id: ""805aa449-3120-458b-9bf9-0c3beef0d47e""
  }
}) +0ms
prisma:client Generated request: +0ms
prisma:client {
  ""modelName"": ""User"",
  ""action"": ""findUnique"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""user_id"": ""805aa449-3120-458b-9bf9-0c3beef0d47e""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
prisma:client Prisma Client call: +0ms
prisma:client prisma.user.findUnique({
  where: {
    stripe_customer_id: ""cus_PtSOvgsLPWntH7""
  }
}) +0ms
prisma:client Generated request: +0ms
prisma:client {
  ""modelName"": ""User"",
  ""action"": ""findUnique"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""stripe_customer_id"": ""cus_PtSOvgsLPWntH7""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
prisma:client:libraryEngine requestBatch +1ms
prisma:query SELECT ""public"".""user"".""user_id"", ""public"".""user"".""enabled"", ""public"".""user"".""email"", ""public"".""user"".""email_confirmed"", ""public"".""user"".""roles"", ""public"".""user"".""created_at"", ""public"".""user"".""last_login"", ""public"".""user"".""stripe_customer_id"" FROM ""public"".""user"" WHERE (""public"".""user"".""user_id"" = $1 OR ""public"".""user"".""stripe_customer_id"" = $2) OFFSET $3
userMatch {
  user_id: '805aa449-3120-458b-9bf9-0c3beef0d47e',
  enabled: true,
  email: 'arthur.melin@wiseone.io',
  email_confirmed: false,
  roles: [],
  created_at: 2024-04-09T15:03:25.406Z,
  last_login: 2024-04-09T15:03:25.889Z,
  stripe_customer_id: 'cus_PtSOvgsLPWntH7'
}
customerMatch null
prisma:query COMMIT
</pre>
</details>

### Environment & setup

- OS: Arch Linux on WSL 2 (5.15.133.1-microsoft-standard-WSL2)
- Database:  `PostgreSQL 16.0 (Debian 16.0-1.pgdg120+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit` (docker)
- Node.js version: v21.7.2

### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v21.7.2
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```",,
2234690469,23798,[BUG] [PRISMA STUDIO] [PRISMA GENERATE],"### Bug description

Message: Error in Prisma Client request: 


Invalid `f=e.match(Jyt)?.[1]??"""",g=e.match(Qyt)?.[1]??null,v=e.match(Zyt)?.[1]??null,{getPrismaClient:E,PrismaClientKnownRequestError:b,PrismaClientRustPanicError:S,PrismaClientInitializationError:D,PrismaClientValidationError:C}=require(`${u.prismaClient}/runtime/${c}`),O=e,I=(0,f$.createHash)(""sha256"").update()` invocation in
C:\Users\natha\Desktop\git\special-topics-in-database\server\node_modules\prisma\build\index.js:1914:10334

  1911       }
  1912     }
  1913   }
→ 1914 `}});return Le.resourceList(a.workspaces)}};var _be=require(""@prisma/engines"");var t8e=require(""buffer"");function r8e(e,r,n,i){Object.defineProperty(e,r,{get:n,set:i,enumerable:!0,configurable:!0})}var n8e={};r8e(n8e,""serializeRPCMessage"",()=>ON);r8e(n8e,""deserializeRPCMessage"",()=>IN);var PN=""PrismaBigInt::"",AN=""PrismaBytes::"";function ON(e){return JSON.stringify(e,(r,n)=>typeof n==""bigint""?PN+n:n?.type===""Buffer""&&Array.isArray(n?.data)?AN+t8e.Buffer.from(n.data).toString(""base64""):n)}function IN(e){return JSON.parse(e,(r,n)=>typeof n==""string""&&n.startsWith(PN)?BigInt(n.substr(PN.length)):typeof n==""string""&&n.startsWith(AN)?n.substr(AN.length):n)}var mbe=M(p8e()),bb=M(tbe()),hbe=M(require(""http"")),gbe=M(ibe()),vbe=require(""zlib"");var ao=require(""path"");var f$=require(""crypto""),pbe=M(c$());function l$(e,r,n,i){Object.defineProperty(e,r,{get:n,set:i,enumerable:!0,configurable:!0})}var lbe=typeof globalThis<""u""?globalThis:typeof self<""u""?self:typeof window<""u""?window:typeof global<""u""?global:{},u$={},yb={},Bu=lbe.parcelRequire1308;Bu==null&&(Bu=function(e){if(e in u$)return u$[e].exports;if(e in yb){var r=yb[e];delete yb[e];var n={id:e,exports:{}};return u$[e]=n,r.call(n.exports,n,n.exports),n.exports}var i=new Error(""Cannot find module '""+e+""'"");throw i.code=""MODULE_NOT_FOUND"",i},Bu.register=function(r,n){yb[r]=n},lbe.parcelRequire1308=Bu);Bu.register(""9lTzd"",function(module,exports){l$(module.exports,""guessEnginePaths"",()=>guessEnginePaths),l$(module.exports,""guessPrismaClientPath"",()=>guessPrismaClientPath);var $5COlq=Bu(""5COlq"");async function guessEnginePaths({forceBinary,forceLibrary,resolveOverrides}){let queryEngineName,queryEngineType;if(forceLibrary?(queryEngineName=await $5COlq.prismaEngineName(""query-engine"",""library""),queryEngineType=""library""):forceBinary?(queryEngineName=await $5COlq.prismaEngineName(""query-engine"",""binary""),queryEngineType=""binary""):(queryEngineName=void 0,queryEngineType=void 0),!queryEngineName||!queryEngineType)return{queryEngine:void 0};let queryEnginePath;if(resolveOverrides["".prisma/client""])queryEnginePath=(0,ao.resolve)(resolveOverrides["".prisma/client""],`../${queryEngineName}`);else if(resolveOverrides[""@prisma/engines""])queryEnginePath=(0,ao.resolve)(resolveOverrides[""@prisma/engines""],`../../${queryEngineName}`);else{let atPrismaEnginesPath;try{atPrismaEnginesPath=eval(""require.resolve('@prisma/engines')"")}catch(e){throw new Error(""Unable to resolve Prisma engine paths. This is a bug."")}queryEnginePath=(0,ao.resolve)(atPrismaEnginesPath`../../${queryEngineName}`)}return{queryEngine:{type:queryEngineType,path:queryEnginePath}}}function guessPrismaClientPath({resolveOverrides}){let prismaClientPath=resolveOverrides[""@prisma/client""]||eval(""require.resolve('@prisma/client')"");return(0,ao.resolve)(prismaClientPath,""../"")}});Bu.register(""5COlq"",function(e,r){l$(e.exports,""prismaEngineName"",()=>n);async function n(i,a){let o=await Ir(),c=o===""windows""?"".exe"":"""";if(a===""library"")return us(o,""fs"");if(a===""binary"")return`${i}-${o}${c}`;throw new Error(`Unknown engine type: ${a}`)}});function Xyt(e){return{models:p$(e.models),enums:p$(e.enums),types:p$(e.types)}}function p$(e){let r={};for(let{name:n,...i}of e)r[n]=i;return r}var Wg=(0,pbe.debug)(""prisma:studio-pcw""),Jyt=/^\s*datasource\s+([^\s]+)\s*{/m,Qyt=/url *= *env\(""(.*)""\)/,Zyt=/url *= *""(.*)""/;async function e5t({schema:e,schemaPath:r,dmmf:n,datasourceProvider:i,previewFeatures:a,datasources:o,engineType:c,paths:u,directUrl:p,versions:l}){let f=e.match(Jyt)?.[1]??"""",g=e.match(Qyt)?.[1]??null,v=e.match(Zyt)?.[1]??null,{getPrismaClient:E,PrismaClientKnownRequestError:b,PrismaClientRustPanicError:S,PrismaClientInitializationError:D,PrismaClientValidationError:C}=require(`${u.prismaClient}/runtime/${c}`),O=e,I=(0,f$.createHash)(""sha256"").update(
Raw query failed. Code: `unknown`. Message: `Kind: Command failed: Error code 8000 (AtlasError): empty database name not allowed
	at 774bae2bc957594bbd34308c7c1c95e5/atlasproxy/session_proxy.go:732
	at 774bae2bc957594bbd34308c7c1c95e5/atlasproxy/session_proxy.go:1638
	at 774bae2bc957594bbd34308c7c1c95e5/atlasproxy/session_proxy.go:1213
	at 10gen/mongonet@v0.0.0-20240307160411-5a60262cff18/proxy_session.go:369
	at 10gen/mongonet@v0.0.0-20240307160411-5a60262cff18/proxy_session.go:118
	at 10gen/mongonet@v0.0.0-20240307160411-5a60262cff18/session.go:220
	at 10gen/mongonet@v0.0.0-20240307160411-5a60262cff18/server.go:384
	at src/runtime/asm_arm64.s:1197, labels: {}`
  
Query:
{
  ""modelName"": ""User"",
  ""operation"": ""findMany"",
  ""args"": {
    ""take"": 100,
    ""skip"": 0,
    ""select"": {
      ""id"": true,
      ""name"": true,
      ""email"": true,
      ""password"": true,
      ""createdAt"": true,
      ""updatedAt"": true
    }
  }
}
  

### How to reproduce

Quando eu rodo o comando: npx prisma studio, me acusa o erro sendo que, ao executar anteriormente o comando npx prisma generate ele fala que tudo ocorreu bem, então não era pra isso ter acontecido. Conforme abaixo:

npx prisma generate

Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
✔ Generated Prisma Client (v5.12.1) to .\node_modules\@prisma\client in 127ms

Start using Prisma Client in Node.js (See: https://pris.ly/d/client)
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```
or start using Prisma Client at the edge (See: https://pris.ly/d/accelerate)
```
import { PrismaClient } from '@prisma/client/edge'
const prisma = new PrismaClient()
```

See other ways of importing Prisma Client: http://pris.ly/d/importing-client

┌────────────────────────────────────────────────────────────────┐
│  Supercharge your Prisma Client with global database caching,  │
│  scalable connection pooling and real-time database events.    │
│  Explore Prisma Accelerate: https://pris.ly/cli/-accelerate    │
│  Explore Prisma Pulse: https://pris.ly/cli/-pulse 

### Expected behavior

O comportamento esperado era que houvesse conexão com banco de dados MongoDb, onde apesar de falar que quando foi executado npx prisma generate ocorreu tudo bem quando eu acesso o bd não vejo nenhum esquema criado, fora que o studio prisma me da o erro. eu não consigo fazer minhas solicitações POST.

A string de conexão esta correta porque testei usando MongoDB Compass

### Prisma information

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String   @id @default(auto()) @map(""_id"") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(""users"")
}

model Day {
  id     String   @id @default(auto()) @map(""_id"") @db.ObjectId
  date   DateTime @unique
  tables Table[]
}

model Reservation {
  id      String  @id @default(auto()) @map(""_id"") @db.ObjectId
  name    String
  phone   String?
  email   String?
  table   Table?
  tableId String?
}

model Table {
  id            String       @id @default(auto()) @map(""_id"") @db.ObjectId
  name          String
  capacity      Int
  isAvailable   Boolean      @default(true)
  location      String
  reservationId String       @unique @map(""reservation_id"") @db.ObjectId
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  dayId         String       @map(""day_id"") @db.ObjectId
  day           Day          @relation(fields: [dayId], references: [id])
}


### Environment & setup

- OS: Windows 10
- Database: MongoDB
- Node.js version: 18.17.1


### Prisma Version

prisma: 5.12.1",,
2234617137,23797,"After the Promise.all method is executed, the generated connection has not been released","### Bug description


When using the Promise.all method for concurrent writing, the connection generated is not released after the relevant code execution is completed

### How to reproduce


```shell
➜  prisma-app bun index.ts
before connections: 3n
Done...
[25.58ms] exec
current_connections: 12n , users: 10
current_connections: 12n , users: 10
current_connections: 12n , users: 10
current_connections: 12n , users: 10
current_connections: 12n , users: 10
current_connections: 12n , users: 10
```



### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")  //postgresql://z:@localhost:5432/test
}

model User {
  id    Int     @id
  email String  @unique
  name  String?
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient();

await (async () => {
  await prisma.user.deleteMany()
  var connections = await prisma.$queryRaw`SELECT count(*) AS current_connections FROM pg_stat_activity WHERE datname='test';`.then((value: any) => value[0].current_connections)
  console.log('before connections:', connections);
  setInterval(async () => {
    let connections = await prisma.$queryRaw`SELECT count(*) AS current_connections FROM pg_stat_activity WHERE datname='test';`.then((value: any) => value[0].current_connections)
    console.log('current_connections:', connections, ', users:', await prisma.user.count());
  }, 1000)
  console.time('exec');
  await insertData()
  console.timeEnd('exec');
})();

async function insertData() {
  var arr = Array.from({ length: 10 })
  await Promise.all(arr.map((v, index) => {
    var data = {
      id: index,
      name: ""John Dough"",
      email: `john-${Math.random()}-${Math.random()}-${index}@example.com`,
    }
    // return prisma.user.create({ data })
    return prisma.user.upsert({ create: data, update: data, where: { id: index } })
  }))
  console.log('Done...');
}
```


### Environment & setup

- OS: macOS 13.4.1
- Database: PostgreSQL 16.1 (Homebrew) on aarch64-apple-darwin22.6.0, compiled by Apple clang version 14.0.3 (clang-1403.0.22.14.1), 64-bit
- Node.js version: v21.6.1




### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2233807911,23793,"""PrismaClient is not configured to run in Vercel Edge Functions or Edge Middleware."" with extension in Next.js application","### Bug description

Shows error: ""Error: PrismaClient is not configured to run in Vercel Edge Functions or Edge Middleware. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters

If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report""

<img width=""1289"" alt=""image"" src=""https://github.com/prisma/prisma/assets/18559697/edfdd531-f02d-4765-8093-22d30ec6952e"">


### How to reproduce

<!--
1. Go to specific Next.js route, using the App router. It's a regular layout with a client-side page.
2. See error
-->


### Expected behavior

It's expected that the page will load like normal and the hooks to be called when certain tables were updated or created. I also tried running this with Prisma Accelerate and Driver Adapters with no luck.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider          = ""postgresql""
  url               = env(""DATABASE"") // uses connection pooling
  directUrl         = env(""DATABASE_NON_POOLING"") // uses a direct connection
  shadowDatabaseUrl = env(""DATABASE_NON_POOLING"") // used for migrations
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

declare global {
  var prisma: PrismaClient | undefined;
}

const prisma =
  global.prisma ||
  new PrismaClient()
    .$extends({
      query: {
        conversation: {
          async create({ model, operation, args, query }) {
            const updatedX = await query(args);

            await updateCompletionPercentage(updatedX);

            return updatedX;
          },
          async update({ model, operation, args, query }) {
            const updatedX = await query(args);

            await updateCompletionPercentage(updatedX);

            return updatedX;
          },
        },
      },
    })

async function updateCompletionPercentage() {
  await prisma.x.findUnique({
    where: { id: id },
    include: {
      y: {
        select: {
          id: true,
          completionPercentage: true,
        },
      },
    },
  });
}

if (process.env.NODE_ENV === ""development"") global.prisma = prisma;

export default prisma;

```


### Environment & setup

- OS: `macOS`
- Database: `PostgreSQL`
- Node.js version: `18.18.2`


### Prisma Version

```
5.12.1
```",,
2233736734,23791,`createMany()` with large object slower in prisma 5 than in prisma 4,"### Bug description

The `createMany`  process slower in prisma 5 than in prisma 4.

When I try to insert 300 records with 1MB text using `createMany`, the speed will be about 1.5 times slower in prisma 5 compared to prisma 4.

I checked using OpenTelemetry tracing and found that
In prisma 5, while the prisma client processing time was shorter, the prisma engine processing time was longer, and the overall processing time was also longer.

- Results after 5 times

prisma 4

```
1: 9810ms
2: 9046ms
3: 10245ms
4: 9014ms
5: 10074ms
```

prisma 5

```
1: 14500ms
2: 13724ms
3: 15201ms
4: 14611ms
5: 14663ms
```

### How to reproduce

1. Run migrations and generate a prisma client
2. Prepare 1mb text file.

example:
```
base64 -i /dev/random 2>/dev/null | fold -w 100 | head -c 1024000 > 1mb.txt
```

3. set 1mb.txt and run following source code in prisma 4 and prisma 5

```ts
import * as fs from ""fs"";
import { PrismaClient } from ""@prisma/client"";

const executeCreateMany = async () => {
  const start = Date.now();

  const prisma = new PrismaClient();

  const data = fs.readFileSync(`src/1mb.txt`, `utf-8`);
  const captions = [...Array(300).keys()].map((i) => data);

  try {
    await prisma.user.createMany({
      data: captions.map((caption) => {
        return { caption };
      }),
    });
  } catch (error) {
    console.error(""Error :"", error);
  } finally {
    await prisma.$disconnect();
    const end = Date.now();
    console.log(`duration: ${end - start}`);
  }
};

const main = async () => {
  await executeCreateMany();
};

main();
```


### Expected behavior

Same speed as prisma 4.4


### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""tracing""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String      @id @default(uuid())
  caption   String?
  createdAt DateTime?   @default(now()) @map(""created_at"") @db.Timestamptz(3)
  updatedAt DateTime?   @updatedAt @map(""updated_at"") @db.Timestamptz(3)

  @@map(""user"")
}
```

### Environment & setup

- OS: macOS 13.3.1
- Database: PostgreSQL 14.6
- Node.js version: 18.19.0

### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2233647882,23789,MongoDB + Docker -  No available servers,"### Bug description

I am running my application in Docker with this configuration:

`mongodb_rs/Dockerfile`: [(same as the one used by prisma)](https://github.com/prisma/prisma/blob/6a050c6530bab6096348bc96c3d93765171433fb/docker/mongodb_replica/Dockerfile#L4)
```dockerfile
# src: https://github.com/prisma/prisma/blob/6a050c6530bab6096348bc96c3d93765171433fb/docker/mongodb_replica/Dockerfile#L4
# We need to set up a MongoDB cluster because Prisma requires a replica set to perform transitions.
ARG MONGO_VERSION

FROM mongo:${MONGO_VERSION}

# we take over the default & start mongo in replica set mode in a background task
ENTRYPOINT mongod --port $MONGO_REPLICA_PORT --replSet rs0 --bind_ip 0.0.0.0 & MONGOD_PID=$!; \
# we prepare the replica set with a single node and prepare the root user config
INIT_REPL_CMD=""rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: '$MONGO_REPLICA_HOST:$MONGO_REPLICA_PORT' }] })""; \
# we wait for the replica set to be ready and then submit the command just above
until ($MONGO_COMMAND admin --port $MONGO_REPLICA_PORT --eval ""$INIT_REPL_CMD""); do sleep 1; done; \
# we are done but we keep the container by waiting on signals from the mongo task
echo ""REPLICA SET ONLINE""; wait $MONGOD_PID;
```

`Dockerfile`: 
```
FROM node:18-alpine as base
ENV NEXT_TELEMETRY_DISABLED 1
ENV PNPM_HOME=""/pnpm""
ENV PATH=""$PNPM_HOME:$PATH""
ENV NEXT_TELEMETRY_DISABLED 1
# enbable corepack to use pnpm
RUN corepack enable
COPY . /pulsecare-webapp
WORKDIR /pulsecare-webapp

FROM base AS deps
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
# Trying to freshly install prisma client every time as suggested here: https://github.com/prisma/prisma/issues/7234#issuecomment-846606919
RUN pnpm dlx prisma generate --schema=prisma/schema.prisma


FROM deps as development
# RUN ls -la node_modules/.prisma/client
ENV PORT 3000
CMD [""pnpm"", ""dev""]

```

`docker-compose.yaml`: 
- please, note that I have applied the suggestion from this [answer ](https://github.com/prisma/prisma/discussions/11929#discussioncomment-6918038)provided to [issue](https://github.com/prisma/prisma/discussions/11929#discussion-3889595), hence my connection string looks like: `mongodb://localhost:27018/pulsecare-web?replicaSet=rs0&retryWrites=true&w=majority&directConnection=true`
```
version: ""3.1""
services:
  mongo6:
    profiles:
      - dev
    build:
      context: ./mongodb_rs
      args:
        MONGO_VERSION: 6
    environment:
      MONGO_REPLICA_HOST: 127.0.0.1
      MONGO_REPLICA_PORT: 27018
      # Use ""mongo"" instead of ""mongosh"" before v5.0
      MONGO_COMMAND: ""mongosh""
    ports:
      - ""27018:27018""
    restart: always
  web_dev:
    profiles:
      - dev
    restart: always
    environment:
      - DATABASE_URL=mongodb://localhost:27018/pulsecare-web?replicaSet=rs0&retryWrites=true&w=majority&directConnection=true
      # For WSL: https://www.reddit.com/r/nextjs/comments/1638ec6/comment/jy1h8ys/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
      - WATCHPACK_POLLING=true
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    ports:
      - ""3000:3000""
    depends_on:
      - mongo6
    links:
      - mongo6
    # This is only for hot reload in development
    volumes:
      - ../:/pulsecare-webapp
      - /pulsecare-webapp/node_modules
      - /pulsecare-webapp/.next

```

Although, I am getting this error when trying to call a basic Prisma operation:
```
⨯ PrismaClientKnownRequestError: 
Invalid `prisma.user.findFirst()` invocation:
Raw query failed. Code: `unknown`. Message: `Kind: Server selection timeout: No available servers. Topology: { Type: Single, Set Name: rs0, Servers: [ { Address: localhost:27018, Type: Unknown, Error: Kind: I/O error: Address not available (os error 99), labels: {} } ] }, labels: {}`
    at async $$ACTION_0 (./src/actions/register.ts:32:26)
```

I even tried the solutions provided in this [#11925](https://github.com/prisma/prisma/issues/11925#issuecomment-1046166986), and so using `mongo` or `host.docker.internal` as `MONGO_REPLICA_HOST` in the docker compose, but still same log (and when putting `mongo` I was not able to connect with any client from my machine as mentioned [here](https://github.com/prisma/prisma/issues/11925#issuecomment-1046394946), while, in other two cases, `host.docker.internal` and `127.0.0.1`, I am able to connect through MongoDBCompass).


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

Run the containers with the following commands: `docker compose --profile dev up --build`

Perform any Prisma operation 


### Expected behavior

The app should connect to my local MongoDB Cluster

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model Account {
  id                String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map(""_id"") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map(""_id"") @db.ObjectId
  firstName     String?   @map(""first_name"")
  lastName      String?   @map(""last_name"")
  password      String?
  email         String?   @unique
  isNurse       Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

```

```ts
import { PrismaClient } from ""@prisma/client"";

// TODO: implement password hashing https://www.prisma.io/docs/orm/prisma-client/queries/custom-models

// PrismaClient is attached to the `global` object in development to prevent
// exhausting your database connection limit.
//
// Learn more:
// https://pris.ly/d/help/next-js-best-practices

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const db = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = db;

export default db;

```

I think this is not relevant

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->

- OS: WSL Docker
- Database: MongoDB
- 18-alpine

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at ..\..\.pnpm-store\v3\tmp\dlx-17600\node_modules\.pnpm\@prisma+engines@5.12.1\node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at ..\..\.pnpm-store\v3\tmp\dlx-17600\node_modules\.pnpm\@prisma+engines@5.12.1\node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2232627367,23783,Error P1001. Prisma can't perform db push to the localhost MySQL.,"### Bug description

Hi, need a help here. I can't connect using Prisma into localhost MySQL.  I also try to create a fresh database and try to connect, but still no results. This happened when my server suddenly get restarted by accident. Before that, it goes smoothly without an issue

Please help, have been deal with this situation for days.

<img width=""712"" alt=""image"" src=""https://github.com/prisma/prisma/assets/11472261/61f957eb-db68-4f32-982e-542fbaa93a92"">



### How to reproduce

Run: 
**npx primsa db push** 


### Expected behavior

Can perform npx prisma db push

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
DATABASE_URL=""mysql://theuser:thepassword@localhost:3306/the_db3?schema=public""
```

```ts
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

```


### Environment & setup

OS: Ubuntu 22.04
MySQL: 8.0.36 (Ubuntu)
NodeJS Version: 18x


### Prisma Version

```
@prisma/client"": ""^4.12.0""
```
",,
2231439944,23778,"Error - ""PrismaClient  is unable to be run in the browser"" with extension in next.js application","### Bug description

 PrismaClient shows error ""Unhandled Runtime Error
Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report""  if I add any extension to PrismaClient to this bug description https://github.com/prisma/prisma/issues/6219. Or add extension to this best practice https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices.
<img width=""1188"" alt=""image"" src=""https://github.com/prisma/prisma/assets/20126398/f7fa3771-aa05-4aa5-8b09-754aadcdd253"">


### How to reproduce


1. Go to https://github.com/prisma/prisma-examples/tree/latest/javascript/rest-nextjs
2. Add extension

`const prisma = new PrismaClient().$extends({
  query: {
    $allModels: {
      async $allOperations({ operation, model, args, query }) {
        const start = performance.now();
        const result = await query(args);
        const end = performance.now();
        const time = end - start;
        console.log(
          util.inspect(
            { model, operation, args, time },
            { showHidden: false, depth: null, colors: true }
          )
        );
        return result;
      },
    },
  },
});`
3. modify pages/index.jsx, add  
`import prisma from ""../lib/prisma"";
prisma.Post.findMany()`
5. Run npm run dev
6. open http://localhost:3000
7. See error



### Expected behavior

PrismaClient works well with extension in next.js

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

```

```ts
import { PrismaClient } from ""@prisma/client"";


const globalForPrisma = global;

const getPrisma = () => {
    const pc  = new PrismaClient().$extends({
  query: {
    $allModels: {
      async $allOperations({ operation, model, args, query }) {
        const start = performance.now();
        const result = await query(args);
        const end = performance.now();
        const time = end - start;
        console.log(
          util.inspect(
            { model, operation, args, time },
            { showHidden: false, depth: null, colors: true }
          )
        );
        return result;
      },
    },
  },
});
    return pc;
}
const prisma = globalForPrisma.prisma || getPrisma();


if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;

export default prisma;
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version:v16.13.2


### Prisma Version

```
5.12.1
```
",,
2231391386,23777,MySQL `$queryRaw` with multiple order by columns hangs,"### Bug description

When using queryRaw and MySQL, ordering by multiple columns from variables causes the query to never complete, the next line is never executed. 
Other queries can still be issued. Nothing is logged. 

The same issue occurs when using queryRawUnsafe and a parameterized query.

In DEBUG mode, the following is logged
```
prisma:client prisma.$queryRaw(SELECT id FROM DigitalTwin ORDER BY ?, ? LIMIT 100;, [""createdAt"",""updatedAt""]) +53ms
prisma:client Prisma Client call: +0ms
prisma:client prisma.$queryRaw({
  query: ""SELECT id FROM DigitalTwin ORDER BY ?, ? LIMIT 100;"",
  parameters: {
    values: ""[\""createdAt\"",\""updatedAt\""]"",
    __prismaRawParameters__: true
  }
}) +0ms
prisma:client Generated request: +0ms
prisma:client {
  ""action"": ""queryRaw"",
  ""query"": {
    ""arguments"": {
      ""query"": ""SELECT id FROM DigitalTwin ORDER BY ?, ? LIMIT 100;"",
      ""parameters"": ""[\""createdAt\"",\""updatedAt\""]""
    },
    ""selection"": {}
  }
}
 +0ms
prisma:client:libraryEngine sending request, this.libraryStarted: true +0ms
```

### How to reproduce

The orderBy columns have to be set from variables, using pure SQL works fine.
```ts
  const orderBy1 = 'createdAt';
  const orderBy2 = 'updatedAt';
  const users: { id: string }[] =
    await prisma.$queryRaw`SELECT id FROM User ORDER BY ${orderBy1}, ${orderBy2} LIMIT 100;`;
  console.log('done');
```

### Expected behavior

The query should complete or an error should be logged.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
datasource db {
  provider     = ""mysql""
  relationMode = ""prisma""
  url          = env(""DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""fullTextSearch"", ""fullTextIndex""]
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Linux Arch
- Database: MySQL 8.0.30
- Node.js version: v20.12.1


### Prisma Version
prisma                  : 5.12.1
@prisma/client          : 5.12.1

",,
2231093593,23774,Turso Driver Adapter: ERR_INVALID_URL on with @libsql/client 0.6.0 when used in Remix app deployed to Vercel,"
This is a bug report for Turso support. https://github.com/prisma/prisma/discussions/21345


### Bug description

When I use prisma / turso driver with @libsql/client 0.6.0 in Vercel, I get the following error and crash.
The same environment with @libsql/client 0.5.6 does not have the error.

```
PrismaClientKnownRequestError: 
Invalid `prisma.post.findMany()` invocation:


Invalid URL
    at In.handleRequestError (/var/task/node_modules/.pnpm/@prisma+client@5.12.1_prisma@5.12.1/node_modules/@prisma/client/runtime/library.js:122:6854)
    at In.handleAndLogRequestError (/var/task/node_modules/.pnpm/@prisma+client@5.12.1_prisma@5.12.1/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (/var/task/node_modules/.pnpm/@prisma+client@5.12.1_prisma@5.12.1/node_modules/@prisma/client/runtime/library.js:122:5896)
    at async l (/var/task/node_modules/.pnpm/@prisma+client@5.12.1_prisma@5.12.1/node_modules/@prisma/client/runtime/library.js:127:11167)
    at async loader (file:///var/task/build/server/index.js:144:17)
    at async Object.callRouteLoaderRR (/var/task/node_modules/.pnpm/@remix-run+server-runtime@2.8.1_typescript@5.4.4/node_modules/@remix-run/server-runtime/dist/data.js:52:16)
    at async callLoaderOrAction (/var/task/node_modules/.pnpm/@remix-run+router@1.15.3/node_modules/@remix-run/router/dist/router.cjs.js:4166:16)
    at async Promise.all (index 0)
    at async loadRouteData (/var/task/node_modules/.pnpm/@remix-run+router@1.15.3/node_modules/@remix-run/router/dist/router.cjs.js:3638:19)
    at async queryImpl (/var/task/node_modules/.pnpm/@remix-run+router@1.15.3/node_modules/@remix-run/router/dist/router.cjs.js:3481:20) {
  code: 'ERR_INVALID_URL',
  clientVersion: '5.12.1',
  meta: { modelName: 'Post' }
}
```

### How to reproduce

Deploying from this repository to vercel reproduces this. uses @libsql/client 0.6.0.
https://github.com/coji/remix-prisma-turso-vercel

Deployed to Vercel.
https://remix-prisma-turso-vercel.vercel.app/

### Expected behavior

The same repository with @libsql/client set to 0.5.6 is shown below and works correctly without crashing.

https://github.com/coji/remix-prisma-turso-vercel/pull/1/files

Deployed to vercel.
https://remix-prisma-turso-vercel-git-f-cb252d-mizoguchi-cojis-projects.vercel.app/


### Environment & setup
Server: Vercel
Database: Turso (LibSQL)
Remix

### Prisma Version

```
5.12.1
```",,
2230820148,23768,"Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.","### Bug description

<img width=""728"" alt=""prismaError"" src=""https://github.com/prisma/prisma/assets/108435744/02a49967-6a31-46c1-8622-0b4a8ba81636"">


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

this error error is coming up anytime I try starting my server, so i only expected the output log no this error

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2230532686,23761,Static type checking takes forever,"### Bug description

Since updating from Prisma 4 to 5 static type checking takes forever. We are using NextJS 14, when building it takes extremely long.   We use a lot of Prisma extensions and transactions.

After doing some of our own research, might it be related to [this issue](https://github.com/prisma/prisma/issues/9183)?

### How to reproduce

1. Use our schema
2. Use our Prisma extensions
3. Create a transaction for every database write.
4. Build NextJS

### Expected behavior

That type checking doesn't take longer than with Prisma 4.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
Schema: (Too long for Github Isssue)
[https://pastebin.com/4gVW6Rhp](https://pastebin.com/4gVW6Rhp)

Prisma Extensions:
```ts

//Declare a global prisma client to avoid errors with NextJS' hot refresh
declare global {
  var prismaClient: PrismaClient | undefined;
}

//Instantiate a new Prisma Client or load the global client
const prismaClient = global.prismaClient || new PrismaClient();
if (process.env.NODE_ENV !== ""production"") global.prismaClient = prismaClient;

//Models with a 'deleted' field to be extended
const extendedModels: string[] = [];
//Iterate over the Prisma models and add all models with a 'deleted' field to the array
for (const model of Prisma.dmmf.datamodel.models) {
  if (model.fields.find((field) => field.name == ""deleted""))
    extendedModels.push(model.name);
}

//Recursive method to soft delete entities and any children with a required relation
//Already soft deleted entities will be undeleted by this method
const softDeleteEntities = async (
  prismaClient: PrismaClient,
  model: string,
  id: string
) => {
  //Check if the entity is deleted
  const { deleted } = await (prismaClient as any)[model].findUnique({
    where: { id },
  });
  //Perform the soft (un)delete based on the deleted flag in the entity
  await (prismaClient as any)[model].update({
    where: { id },
    data: {
      deleted: !deleted ? new Date() : null,
    },
  });
  //Get the schema data model to check if there are children relations to this entity to soft delete as well
  const dataModel = Prisma.dmmf.datamodel.models.find(
    (dataModel) => dataModel.name == model
  );
  if (dataModel) {
    const fields = dataModel.fields;
    //Iterate over the fields in the data model to check if there are nested fields that should also be soft deleted
    for (const field of fields) {
      //Check if there is a relation that is part of the extended models array
      if (extendedModels.includes(field.type)) {
        const nestedDataModel = Prisma.dmmf.datamodel.models.find(
          (dataModel) => dataModel.name == field.type
        );
        if (nestedDataModel) {
          const nestedField = nestedDataModel.fields.find(
            (nestedField) => nestedField.type == model
          );
          //Check the data model for the nested field to check if the relation is required. Otherwise it should not be soft deleted
          if (nestedField && nestedField.isRequired && !nestedField.isList) {
            //Get the nested entities
            const result = await (prismaClient as any)[model].findUnique({
              where: { id },
              include: {
                [field.name]: true,
              },
            });
            if (result) {
              if (result[field.name]?.id) //1:1 relation
                await softDeleteEntities(prismaClient, field.type, result[field.name].id);
              else if (Array.isArray(result[field.name])) {
                //1:N relation. Iterate over the result and recursively soft delete the children entities
                for (const nestedEntity of result[field.name]) {
                  if (nestedEntity.id)
                    await softDeleteEntities(
                      prismaClient,
                      field.type,
                      nestedEntity.id
                    );
                }
              }
            }
          }
        }
      }
    }
  }
};

//Recursive method to format a Prisma find argument block to only find non-deleted items
//Alters the where statement at the start of every recursion, and any nested include/select statement
const extendFindArgs = (args: any, model: string) => {
  const newArgs = { ...args };

  //Get the schema data model
  const dataModel = Prisma.dmmf.datamodel.models.find(
    (dataModel) => dataModel.name == model
  );
  if (dataModel) {
    const fields = dataModel.fields;
    //Check if this model is in the extended models list to alter any where statement to exclude soft deleted items
    if (extendedModels.includes(model))
      newArgs.where = {
        deleted: null,
        ...newArgs.where,
      };

    //Find an include statement in the arguments
    if (newArgs.include) {
      //Iterate over the entries in the include statement to check if there are relations with a soft delete field
      for (const includeField in newArgs.include) {
        const key = includeField as string;
        const value = newArgs.include[key] as boolean | {};
        const field = fields.find((field) => field.name == key);
        //Process when the type of this field is in the extended models list
        if (field && field.isList && extendedModels.includes(field.type)) {
          if (value === true)
            //Convert the boolean value to an object with where statement to exclude soft deleted items
            newArgs.include[key] = { where: { deleted: null } };
          //Recursively convert the include statement when an object is given
          else newArgs.include[key] = extendFindArgs(value, field.type);
        }
      }
    }

    //Find a select statement in the arguments
    if (args.select) {
      //Iterate over the entries in the select statement to check if there are relations with a soft delete field
      for (const selectField in newArgs.select) {
        const key = selectField as string;
        const value = newArgs.select[key] as boolean | {};
        const field = fields.find((field) => field.name == key);
        //Process when the type of this field is in the extended models list
        if (field && field.isList && extendedModels.includes(field.type)) {
          if (value === true)
            //Convert the boolean value to an object with where statement to exclude soft deleted items
            newArgs.select[key] = { where: { deleted: null } };
          //Recursively convert the select statement when an object is given
          else newArgs.select[key] = extendFindArgs(value, field.type);
        }
      }
    }
  }

  return newArgs;
};

//Define an extended Prisma Client to include overwrites of standard Prisma methods
const prisma = prismaClient.$extends({
  query: {
    $allModels: {
      //Extend a delete statement for models that should be soft deleted
      //The delete method will be rewritten to an update method
      async delete({ model, operation, args, query }) {
        if (extendedModels.includes(model)) {
          //Get the entity to be deleted to retrieve the primary key
          const result = await (prismaClient as any)[model].findUnique(args);
          if (result) await softDeleteEntities(prismaClient, model, result.id);
          //Return the result of the queries performed in softDeleteEntities
          return (prismaClient as any)[model].findUnique(args);
        }
        return query(args);
      },
      //Extend a deleteMany statement for models that should be soft deleted
      //The deleteMany method will be rewritten to an update method for every entity
      async deleteMany({ model, operation, args, query }) {
        if (extendedModels.includes(model)) {
          //Get the entities to be deleted to retrieve the primary key
          const result = await (prismaClient as any)[model].findMany(args);
          if (result) {
            for (const entity of result)
              await softDeleteEntities(prismaClient, model, entity.id);
          }
          return (prismaClient as any)[model].findMany(args);
        }
        return query(args);
      },
      //Extend a findUnique statement for models that can be soft deleted
      //The findUnique method will be rewritten to a findFirst with an extra where clause for the deleted flag
      async findUnique({ model, operation, args, query }) {
        if (extendedModels.includes(model))
          return (prismaClient as any)[model].findFirst(
            extendFindArgs(args, model)
          );

        return query(args);
      },
      //Extend a findUniqueOrThrow statement for models that can be soft deleted
      //The findUniqueOrThrow method will be rewritten to a findFirst with an extra where clause for the deleted flag
      async findUniqueOrThrow({ model, operation, args, query }) {
        if (extendedModels.includes(model))
          return (prismaClient as any)[model].findFirstOrThrow(
            extendFindArgs(args, model)
          );

        return query(args);
      },
      //Extend a findFirst statement for models that can be soft deleted
      //The findFirst method will be rewritten to a findFirst with an extra where clause for the deleted flag
      async findFirst({ model, operation, args, query }) {
        if (extendedModels.includes(model))
          return (prismaClient as any)[model].findFirst(
            extendFindArgs(args, model)
          );

        return query(args);
      },
      //Extend a findFirstOrThrow statement for models that can be soft deleted
      //The findFirstOrThrow method will be rewritten to a findFirst with an extra where clause for the deleted flag
      async findFirstOrThrow({ model, operation, args, query }) {
        if (extendedModels.includes(model))
          return (prismaClient as any)[model].findFirstOrThrow(
            extendFindArgs(args, model)
          );

        return query(args);
      },
      //Extend a findMany statement for models that can be soft deleted
      //The findMany method will be rewritten to a findMany with an extra where clause for the deleted flag
      async findMany({ model, operation, args, query }) {
        if (extendedModels.includes(model))
          return (prismaClient as any)[model].findMany(
            extendFindArgs(args, model)
          );

        return query(args);
      },
    },
  },
}) as PrismaClient;
```

Example DB write
```ts
const writeActivityRegistration = async (prisma: Prisma.TransactionClient, data: ActivityRegistrationInput) => {
  //If the duration is set, make sure that the decimals are minutes (0-59)
  let duration = data.duration;
  if (duration) {
    const durationDuration = getDurationFromNumber(Number(duration));
    duration = formatTimeFromDuration(durationDuration).replace("":"", ""."");
  }
  let activityRegistration: ActivityRegistration;
  if (
    await prisma.activityRegistration.findUnique({
      where: { id: data.id || """" },
    })
  ) {
    //Omit the contributor when updating an existing activity registration
    const { contributorId, contributor, ...activityRegistrationData } = data;
    activityRegistration = await prisma.activityRegistration.update({
      where: { id: data.id },
      data: { ...activityRegistrationData, duration }
    })
  } else {
    //Omit the contributor when updating an existing activity registration
    const { contributor, ...activityRegistrationData } = data;
    activityRegistration = await prisma.activityRegistration.create({
      data: { ...activityRegistrationData, duration }
    });
  }

  return activityRegistration.id;
};

    //Start the transaction
    const activityRegistrationId = await prisma.$transaction(async (prisma) => {
      return await writeActivityRegistration(prisma, data);
    });
```

### Environment & setup

- OS: Windows 10/11 & WSL (Ubuntu 20.04)
- Database: MySQL
- Node.js version: 20.11.0


### Prisma Version

```
5.12.0
```
",,
2230248446,23759,Error ,"### Bug description

Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (/home/cesartecnoparque/public_html/fundacion/progresar-backend/node_modules/.prisma/client/default.js:43:11)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/controllers/usuarios.controller.js:21:16)
    at Module._compile (node:internal/modules/cjs/loader:1356:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Module.require (node:internal/modules/cjs/loader:1225:19)
    at Hook._require.Module.require (/home/cesartecnoparque/.nvm/versions/node/v18.19.0/lib/node_modules/pm2/node_modules/require-in-the-middle/index.js:101:39)
    at require (node:internal/modules/helpers:177:18)
    at Object.<anonymous> (/home/cesartecnoparque/public_html/fundacion/progresar-backend/dist/routes/usuarios/usuarios.routes.js:8:31)

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2230110414,23758,Add a custom field to query results. async is not supported，It's not friendly to relational tables,"### Bug description

//model
`
model User {
    id      String  @id @default(cuid())
    file    File?  @relation(fields: [file_id], references: [id])
    file_id String? @unique
}

model File1 {
    id       String @id @default(cuid())
    filename String
    user     User?
}
`
//extends
`
const prisma = new PrismaClient().$extends({
    result: {
        file: {
            url: {
                needs: { filename: true },
                compute(file) {
                    //Here I need to get the signed url result asynchronously
                    // minio.signUrl，Returns a promise
                    return minio.signUrl(file.file)
                },
            },
        },
    },
})
`
//findOne
`
await prisma.user.findFirst({
    include: {
        file: true,
    },
})
//result
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: {}
  }
}
//The expectation is this
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: 'http://.........'
  }
}
`
//findMany
`
await prisma.user.many({
    include: {
        file: true,
    },
})
//result
[{
  id: ...,
  file: {
    filename: '123123123.png',
    url: 'http://.........'
  }
}]
`
//deeper level
`
[{
  ...
  approvers: [{
    id: ...,
    approve_user: {
      id: 0,
      status...
      user: {
        file: {
          filename: '123123123.png',
          url: 'http://.........'
        }
      }
    }
  }]
}]
`

### How to reproduce

//model
`
model User {
    id      String  @id @default(cuid())
    file    File?  @relation(fields: [file_id], references: [id])
    file_id String? @unique
}

model File1 {
    id       String @id @default(cuid())
    filename String
    user     User?
}
`
//async sign example
`
const signUrl = () => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('https://github.com/moment/moment')
        }, 10)
    })
}
`
//extends
`
const prisma = new PrismaClient().$extends({
    result: {
        file: {
            url: {
                needs: { filename: true },
                compute(file) {
                    //Here I need to get the signed url result asynchronously
                    // minio.signUrl，Returns a promise
                    return minio.signUrl(file.file)
                },
            },
        },
    },
})
`
//simple example
`
await prisma.user.findFirst({
    include: {
        file: true,
    },
})
//result
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: {}
  }
}
//The expectation is this
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: 'http://.........'
  }
}
`

//deeper level, Complex case
`

model File {
    id       String @id @default(cuid())
    filename String
    user     User?
}

model User {
    id        String         @id @default(cuid())
    file      File?          @relation(fields: [file_id], references: [id])
    file_id   String?        @unique
    approvers ApproveUsers[]
}

model ApproveRecord {
    id      String           @id @default(cuid())
    status  Int
    process ApproveProcess[]
}

model ApproveProcess {
    id        String         @id @default(cuid())
    status    Int
    record    ApproveRecord  @relation(fields: [record_id], references: [id])
    record_id String
    approvers ApproveUsers[]
}

model ApproveUsers {
    id      String @id @default(cuid())
    status  Int
    user    User   @relation(fields: [user_id], references: [id])
    user_id String
}
`
//excute
npx prisma db push

`
//find ApproveRecord
await prisma.approveRecord.findFirst({
    include: {
        process: {
            include: {
                approvers: {
                    include: {
                        user: {
                            include: {
                                file: true,
                            },
                        },
                    },
                },
            },
        },
    },
})
`
//result
`
[{
  ...
  approvers: [{
    id: ...,
    approve_user: {
      id: 0,
      status...
      user: {
        file: {
          filename: '123123123.png',
          url: 'http://.........'
        }
      }
    }
  }]
}]
`
I need to go through the layers to generate the corresponding url, such a complex structure is very inconvenient

### Expected behavior

I expect the result  compute operation to support asynchronous url generation, which will reduce a lot of effort
`
const prisma = new PrismaClient().$extends({
    result: {
        file: {
            url: {
                needs: { filename: true },
                compute(file) {
                    //Here I need to get the signed url result asynchronously
                    // minio.signUrl，Returns a promise
                    return minio.signUrl(file.file)
                },
            },
        },
    },
})
`

### Prisma information

// Add your schema.prisma

// Add your code using Prisma Client

### Environment & setup

OS: mac os
Database: mysql
Node.js version: v21.6.2

### Prisma Version

5.9.1",,
2229942621,23756,Module not found: Can't resolve '.prisma/client/default',"### Bug description

I am getting the following error:
```
./node_modules/.pnpm/@prisma+client@5.12.0_prisma@5.12.0/node_modules/@prisma/client/default.js:2:0
Module not found: Can't resolve '.prisma/client/default'

https://nextjs.org/docs/messages/module-not-found

Import trace for requested module:
./src/lib/prisma-client.ts
./src/auth.ts
./src/middleware.ts
```

when trying to open `http://localhost:3000/` which is the exposed port of my Docker container:
```dockerfile
FROM node:18-alpine as base
ENV NEXT_TELEMETRY_DISABLED 1
ENV PNPM_HOME=""/pnpm""
ENV PATH=""$PNPM_HOME:$PATH""
# enbable corepack to use pnpm
RUN corepack enable
COPY . /pulsecare-webapp
WORKDIR /pulsecare-webapp

FROM base AS deps
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm exec next telemetry disable
# Trying to freshly install prisma client every time as suggested here: https://github.com/prisma/prisma/issues/7234#issuecomment-846606919
RUN pnpm add prisma @prisma/client
RUN DEBUG='*' pnpm dlx prisma generate

FROM deps as production-bundle
RUN pnpm build

FROM deps as development
EXPOSE 3000
CMD [""pnpm"", ""dev""]


FROM production-bundle as production
EXPOSE 3000
CMD [""pnpm"", ""start""]

```
Service definition in docker-compose.yaml
```yaml
 web_dev:
    profiles:
      - dev
    restart: always
    environment:
      - MONGODB_URL=mongodb://localhost:27018/PulseCare
      # For WSL: https://www.reddit.com/r/nextjs/comments/1638ec6/comment/jy1h8ys/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
      - WATCHPACK_POLLING=true
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    ports:
      - ""3000:3000""
      # This port to test `pnpm run dev` from within the container
      - ""3001:3001""
    depends_on:
      - mongo6
    links:
      - mongo6
    # This is only for hot reload in development
    volumes:
      - ../:/pulsecare-webapp
      - /pulsecare-webapp/node_modules
      - /pulsecare-webapp/.next
```

Although, if I run `pnpm run dev` inside the container's terminal this creates a new port, the app would work just fine, as well if try to run the app on my local machine through `pnpm run dev`.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

Run the following commands
```sh
git clone https://github.com/CC-Comp308001-Group04/pulsecare-web.git && cd pulsecare-web
pnpm i
```
go to commit `e1ebbb54fd514a0da9c69f8bff27804f41446630` or [https://github.com/CC-Comp308001-Group04/pulsecare-web/tree/e1ebbb54fd514a0da9c69f8bff27804f41446630](https://github.com/CC-Comp308001-Group04/pulsecare-web/tree/e1ebbb54fd514a0da9c69f8bff27804f41446630)

Once you get to that commit run:
```
docker compose -f ./docker/docker-compose.yaml -p pulsecare-web --profile dev up -d -V --build
```

Now open `localhost:3000` and you will notice it doesn't work, but if you open the container's terminal at `/pulsecare-web` and run `pnpm run dev`, the app will run just fine at `localhost:3001`

Thank you.

### Expected behavior

My web app should start on `localhost:3000` just fine without errors, when using Dockerfile, without the need of going inside the container and run `pnpm run dev` manually.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model Account {
  id                String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map(""_id"") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map(""_id"") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
```

```ts
import { PrismaClient } from ""@prisma/client"";

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;

export default prisma;

});

```


### Environment & setup

- OS: Docker Linux `node:alpine-18`
- prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : linux-musl-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.20.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at .pnpm-store/v3/tmp/dlx-71/node_modules/.pnpm/@prisma+engines@5.12.1/node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at .pnpm-store/v3/tmp/dlx-71/node_modules/.pnpm/@prisma+engines@5.12.1/node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
- Database: MongoDB local cluster
- Node.js version: 18


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : linux-musl-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.20.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at .pnpm-store/v3/tmp/dlx-71/node_modules/.pnpm/@prisma+engines@5.12.1/node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at .pnpm-store/v3/tmp/dlx-71/node_modules/.pnpm/@prisma+engines@5.12.1/node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
```
",,
2229527742,23753,Add a custom field to query results. async is not supported，It's not friendly to relational tables,"### Bug description

model File {
  id            String @id @default(cuid())
  filename String
  user        User?
}

modal User {
  id String @id       @default(cuid())
   file         File?      @relation(fields: [file_id], references: [id])
   file_id    String?  @unique
}

const prisma = new PrismaClient().$extends({
    result: {
        file: {
            url: {
                needs: { filename: true },
                compute(file) {
                    //Here I need to get the signed url result asynchronously
                    // minio.signUrl，Returns a promise
                    return minio.signUrl(file.file)
                },
            },
        },
    },
})

await prisma.user.findFirst({
  include: {
    file: true
  }
})
//result
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: {}
  }
}
//The expectation is this
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: 'http://.........'
  }
}

//findMany
await prisma.user.many({
  include: {
    file: true
  }
})
//result
[{
  id: ...,
  file: {
    filename: '123123123.png',
    url: 'http://.........'
  }
}]

//deeper level
[{
 ...
 approvers: [{
    id: ...,
    approve_user: {
      id: 0,
      status...
        user: {
          file: {
          filename: '123123123.png',
          url: 'http://.........'
        }
     }
    }
  }]
}]

### How to reproduce

model File {
  id            String @id @default(cuid())
  filename String
  user        User?
}

modal User {
   id String @id       @default(cuid())
   file         File?      @relation(fields: [file_id], references: [id])
   file_id    String?  @unique
}

//excute
npx prisma db push

//async sign example
const signUrl = () => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('https://github.com/moment/moment')
        }, 10)
    })
}

const prisma = new PrismaClient().$extends({
    result: {
        file: {
            url: {
                needs: { filename: true },
                compute(file) {
                    //Here I need to get the signed url result asynchronously
                    // minio.signUrl，Returns a promise
                    return minio.signUrl(file.file)
                },
            },
        },
    },
})

//simple example
await prisma.users.findFirst({
  include: {
    file: true
  }
})

//result
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: {}
  }
}
//The expectation is this
{
  id: ...,
  file: {
    filename: '123123123.png',
    url: 'http://.........'
  }
}

//middle example, findMany
await prisma.user.many({
  include: {
    file: true
  }
})
//result
[{
  id: ...,
  file: {
    filename: '123123123.png',
    url: 'http://.........'
  }
}]

//deeper level, Complex case
model File {
  id            String @id @default(cuid())
  filename String
  user        User?
}

modal User {
   id String @id       @default(cuid())
   file         File?      @relation(fields: [file_id], references: [id])
   file_id    String?  @unique
   approvers ApproveUsers[]
}

modal ApproveRecord {
  id String @id       @default(cuid())
  status Int
  process  ApproveProcess[]
}

model ApproveProcess {
  id String @id       @default(cuid())
  status  Int
  record: ApproveRecord    @relation(fields: [record_id], references: [id])
  record_id    String
  approvers ApproveUsers[]
}

model ApproveUsers {
  id String @id       @default(cuid())
  status  Int
  user: User    @relation(fields: [user_id], references: [id])
  user_id    String
}

//excute
npx prisma db push

//find ApproveRecord
await prisma.approveRecord.findFirst({
  include: {
    process:{
        include: {
           approvers: {
                include: {
                     user: {
                           include: {
                               file: true
                           }
                     }
                }
            }
        }
    }
  }
})
//result
//If I want to get the results updated, then this is going to be complicated
[{
 ...
 process: [{
    id: ...,
    approvers: {
      id: 0,
      status...
      user: {
          file: {
            filename: '123123123.png',
            url: 'http://.........'
        }
     }
    }
  }]
}]

### Expected behavior

I expect the `result  compute` operation to support asynchronous url generation, which will reduce a lot of effort
const prisma = new PrismaClient().$extends({
    result: {
        file: {
            url: {
                needs: { filename: true },
                compute(file) {
                    //Here I need to get the signed url result asynchronously
                    // minio.signUrl，Returns a promise
                    return minio.signUrl(file.file)
                },
            },
        },
    },
})

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

OS: mac os
Database: mysql
Node.js version: v21.6.2

### Prisma Version

5.9.1",,
2228649311,23743,Bug: [D1] Error in performIO: Error: D1_ERROR: too many SQL variables,"### Bug description

When running queries with relations with a D1 database as the backend, I run into the following error quite often:
`Error in performIO: Error: D1_ERROR: too many SQL variables at offset [some offset].`

This is probably the same as #302 (but is closed) and #21648. `relationJoins` does not change anything since that is not available for sqlite/d1.

### How to reproduce

Checkout https://github.com/hrueger/prisma-d1-variables-bug and follow the instructions (also in the readme):
```sh
npm install
npx wrangler d1 create prisma-demo-db
```
update the `wrangler.toml` file with the database id
```sh
npx wrangler d1 migrations apply prisma-demo-db --local
npm run dev
```


### Expected behavior

it should work ;-)

I believe the split limit (I read about this in some other issue) has to be reduced. Seems like this is 100, see (https://developers.cloudflare.com/d1/platform/limits/)

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts  Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

```

```ts
import { PrismaClient } from '@prisma/client'
import { PrismaD1 } from '@prisma/adapter-d1'

export interface Env {
	DB: D1Database
}

export default {
	async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
		const adapter = new PrismaD1(env.DB)
		const prisma = new PrismaClient({ adapter })

		let users = await loadUsers(prisma)
		if (!users.length) {
			await createUsers(prisma);
			users = await loadUsers(prisma);
		}
		const result = JSON.stringify(users)
		return new Response(result);
	},
};

async function loadUsers(prisma: PrismaClient) {
	return await prisma.user.findMany({
		include: {
			posts: true,
		},
	});
}

async function createUsers(prisma: PrismaClient) {
	for (let i = 0; i < 250; i++) {
		await prisma.user.create({
			data: {
				email: `user${i}@example.com`,
				name: `User ${i}`,
				posts: {
					createMany: {
						data: [
							{
								title: `Post ${i}`,
								content: `This is the content of post ${i} by User ${i}`,
							},
							{
								title: `Post ${i}b`,
								content: `This is the content of the second post ${i}b by User ${i}`,
							},
						],
					},
				},
			},
		});
	}
}
```


### Environment & setup

- OS: macOS
- Database: Cloudflare D1
- Node.js version: v21.6.1


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
Preview Features        : driverAdapters
```
",,
2226744939,23737,`upsert()` for single item using primary key returns row count always as 0 even when `update` happens,"### Bug description

Seems to be a lingering issue from the edge cases identified at the end of the discussion at https://github.com/prisma/prisma/issues/10935.

When i `upsert` on an existing row using the primary key in the `where` clause and data is changed, the response is only ever `{count: 0}`. This is even the case when using a `select` clause to pull out other fields.
There's 2 things wrong here:
1. the type says it should be the data in the `select` clause or if no `select` then the whole row, but the response is always `count` instead
a. Note when there is no matching row and so it inserts, the response is the row as expected 
2. the `count` is always 0, even when the row was updated

### How to reproduce

1. Set up an example table with a primary key
2. 
```javascript
const row = await prismaClient.attom_avm.upsert({
      where: { id },
      update: { ...dataToInsert },
      create: { ...dataToInsert },
      select: { EstimatedValue: true },
    });
    console.log('row upserting avm', row);
    return row.EstimatedValue == avm.amount.value; //never true on updates because row is {count: 0}
```

4. If this is the first insert, observer the whole row is returned following the `create` clause.
5. Repeat step 2
6. Observe the response is `{count: 0}`


### Expected behavior

As per the [documentation](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-5) it should return the row not the count. The type system of the client also suggests this same type. 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters"", ""relationJoins""]
}

datasource db {
  provider     = ""postgresql""
  url          = env(""DATABASE_URL"")
  // don't use real foreign keys to reduce overhead and allow sharing ids between tables
  relationMode = ""prisma""
}
model attom_avm {
  id         BigInt    @id
  EstimatedValue    Float?
  LastUpdateDate    DateTime? @db.Date
}
```

```ts
const row = await prismaClient.attom_avm.upsert({
      where: { id },
      update: { ...dataToInsert },
      create: { ...dataToInsert },
      select: { EstimatedValue: true },
    });
    console.log('row upserting avm', row);
    return row.EstimatedValue == avm.amount.value; //never true on updates because row is {count: 0}
```


### Environment & setup

- OS:  macOS
- Database: PostgresSQL
- Node.js version: v21.7.1


### Prisma Version

```
prisma                  : 5.12.1
@prisma/client          : 5.12.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.7.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
Preview Features        : driverAdapters, relationJoins
```

(originally observed on 5.11.0 so i tried upgrading)",,
2226379457,23736,Remove or change `This is the 10th instance of Prisma Client being started. Make sure this is intentional.` warning,"The warning is not as important anymore as when we ran the query engine as a binary, potentially not relevant anymore at all. 
Let's figure that out and remove or change it.

Relevant code:
- https://github.com/search?q=repo%3Aprisma%2Fprisma+%22This+is+the+10th+instance+of+Prisma+Client%22&type=code
- https://github.com/prisma/prisma/blob/1a4f3618f7381ece356667b11af579ce81248d74/packages/client/src/runtime/core/engines/library/LibraryEngine.ts#L113",,
2225782999,23733,Pagination fails with query chunking,"## Overview

Consider the following datamodel:

```prisma
datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

model Tag {
  id Int @id @default(autoincrement())
}
```

And the following snippet:

```ts
async function createTags(n: number): Promise<number[]> {
  const ids = generatedIds(n);
  const data = ids.map((id) => ({ id }));

  await prisma.tag.createMany({
    data,
  });

  return ids;
}

function generatedIds(n: number) {
  // [""1"",""2"",...,""n""]
  const ids = Array.from({ length: n }, (_, i) => i + 1);
  return ids;
}

async function main() {
  const n = 32766;
  const ids = await createTags(n);

  const tags = await prisma.tag.findMany({
    where: {
      id: { in: ids },
    },
    skip: 1
  });

  console.log(tags.length); // 32733 ????
}

main()
  .then(() => console.log(""Done!""))
  .catch((err) => console.error(err));
```

Since we have created 32766 records, `findMany` should return 32765 records (because of the skip). However, it only returns 32733. This seems to be because pagination is included in the chunked queries. So we skip one for every single chunked query we do.

This is most easily reproducible with SQLite since the `max_bind_values` is set at 999.",,
2225032350,23726,Using `@ignore` on a field that is `(@)@unique` shouldn't be allowed but leads to runtime errors,"We should have some kind of validation error to prevent this

---

From `4.11.0` and onwards [...]. I can't immediately see what happened here however there was work done around dmmf and schema validation [that] release too. However, as the field `uuid` is marked with `@ignore`, errors will still show up on create

```ts
> ts-node index.ts

prisma:query BEGIN
prisma:query INSERT INTO ""public"".""A"" (""yes"") VALUES ($1) RETURNING ""public"".""A"".""uuid"", ""public"".""A"".""yes""
prisma:query ROLLBACK
PrismaClientKnownRequestError: 
Invalid `prisma.a.create()` invocation in
/src/prisma_debug/index.ts:20:18

  17 }
  18 
  19 const populate = async () => {
→ 20   await prisma.a.create(
Null constraint violation on the fields: (`uuid`)
    at Zr.handleRequestError (/src/prisma_debug/node_modules/@prisma/client/runtime/library.js:171:6414)
    at Zr.handleAndLogRequestError (/src/prisma_debug/node_modules/@prisma/client/runtime/library.js:171:5948)
    at Zr.request (/src/prisma_debug/node_modules/@prisma/client/runtime/library.js:171:5786)
    at async t._request (/src/prisma_debug/node_modules/@prisma/client/runtime/library.js:174:10455) {
  code: 'P2011',
  clientVersion: '4.11.0',
  meta: { constraint: [ 'uuid' ] }
}
```

---

Schema:
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model A {
  uuid String @ignore @db.Uuid
  yes  String @db.Uuid

  @@unique([uuid, yes])
}
```

TS Code Used:
```ts
const prisma = new PrismaClient({
  log: [""query""],
});

function uuidv4() {
  return ""10000000-1000-4000-8000-100000000000"";
}

const populate = async () => {
  await prisma.a.create({
    data: {
      yes: uuidv4(),
    },
  });
};

async function test() {
  const a = await prisma.a.findFirst();
  console.log(a);
}

async function main() {
  await populate();
  return test();
}
```

_Originally posted by @Druue in https://github.com/prisma/prisma/issues/17332#issuecomment-2031859146_",,
2222362119,23711,Add a custom field to query results. async is not supported,"### Bug description

I've come across a scenario where saving a file for a new file library query requires a minio signature, so I use the extends result to add a field, but minio signatures are asynchronous, and compute doesn't support async here

model File {
    id                String                 @id @default(cuid())
    filename     String
}

const prisma = new PrismaClient().$extends({
  result: {
    file: {
      url: {
        needs: { filename: true },
        compute(file) {
          //Here I need to get the signed url result asynchronously
          // minio.signUrl，Returns a promise
          return minio.signUrl(file.file)
        },
      },
    },
  },
})

// myFile
model File {
    id                String                 @id @default(cuid())
    filename     String
}

await prisma.file.findFirst()
//result
{
 id: ...,
 filename: '123123123.png',
 url: {}
}
//The expectation is this
{
 id: ...,
 filename: '123123123.png',
 url: 'http://.........'
}

### How to reproduce

prepare prisma.schema with the model as above
run createTestPrismaClient() as above

### Expected behavior

_No response_

### Prisma information

model File {
    id                String                 @id @default(cuid())
    filename     String
}
//excute
npx prisma db push

//async sign example
const signUrl = () => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('https://github.com/moment/moment')
        }, 10)
    })
}

//add extends
const prisma = new PrismaClient().$extends({
  result: {
    file: {
      url: {
        needs: { filename: true },
        compute(file) {
          //Here I need to get the signed url result asynchronously
          // minio.signUrl，Returns a promise
          return minio.signUrl(file.file)
        },
      },
    },
  },
})

async testFIleSign() {
 const file =  await await prisma.file.findFirst()
 console.log(file)
}

### Environment & setup

OS: mac os
Database: mysql
Node.js version: v21.6.2

### Prisma Version

5.9.1",,
2221161454,23703,prisma db push with in-memory mongodb hangs when model has more than 7 unique/index field,"### Bug description

I have a in-memory mongodb setup for unit testing, and after the db is up, I run `prisma db push` using `execSync` in my setup script. I run the DB setup script in jest `beforeAll()` function so it will run fresh before each test suite.

It was working fine for a few months during development then today, after i added another `@@unique` field to one of my model, it starts hanging at the `execSync` stage, while running `npm run db:push`, which runs `prisma db push`.

I discovered the cause by going through my latest commits and one of the recent change i made is adding 1 new `@@unique` field in one of my model. when i remove it, it starts working again.

I tested again, by re-adding it, and removed a different `@@unique` field and it magically works. 
I even tested by removing one of my `@@index` field and leave all the `@@unique` field. it works.

My lazy assumption is that for some reason, it only works with a maximum of 7 `@@unique` or `@@index` field. I tested by adding more than 8, same result. so it seems that it will hang if it has more than 7.

appreciate it if anyone can help enlighten me on what might cause this.

important note: It works fine when i run `prisma db push` on a different / actual mongodb (docker), but it hangs when it is ran on an in-memory mongodb.

the model:
```
model CollectionName {
  id      String      @id @default(auto()) @map(""_id"") @db.ObjectId
  field1  String      @db.ObjectId
  field2  String
  field3  String
  field4  String      @db.ObjectId
  field5  String
  field6  String      @db.ObjectId
  field7  String
  field8  String
  field9  String
  field10 String
  field11 String
  field12 StatusLog[]
  field13 DateTime    @default(now()) @db.Date
  field14 String      @db.ObjectId
  field15 DateTime    @updatedAt @db.Date
  field16 String?     @db.ObjectId
  field18 DateTime?
  field19 String?     @db.ObjectId

  @@unique([field9])
  @@unique([field10])
  @@unique([field8]) <----------- issue started when i added this. removing it fixes it
  @@index([field12])
  // @@index([field6]) <--------- commenting any of these index/unique field also fixes it
  @@index([field7])
  @@index([field2])
  @@index([field6, field12])
  @@map(""collectionNames"")
}
```
My in-memory mongodb setup and `prisma db push` (underlying command of `npm run db:push` script)
```typescript
import { MongoMemoryReplSet } from 'mongodb-memory-server';
import { PrismaClient } from '@prisma/client';
import { execSync } from 'child_process';

export const createMemoryMongoDbServer = async () => {
  // This will create an new instance of ""MongoMemoryReplSet"" and automatically start all Servers
  const mongoReplSet = await MongoMemoryReplSet.create({
    replSet: { count: 2, dbName: 'testDb', storageEngine: 'wiredTiger' }
  });
  const uri = mongoReplSet.getUri('testDb');
  const uriWithDb = uri;

  const stopServer = async () => {
    return mongoReplSet.stop();
  };

  return { stopServer, dbUrl: uriWithDb };
};

export const createTestPrismaClient = async () => {
  // start test db (in-memory mongodb replica)
  const { stopServer, dbUrl } = await createMemoryMongoDbServer();

  // instantiate prisma client with test db uri
  const prismaClient = new PrismaClient({ datasources: { db: { url: dbUrl } } });

  // run cli command to create indexes in test db, based on prisma/schema.prisma
  execSync(`DATABASE_URL=${dbUrl} npm run db:push`, {
    stdio: 'pipe'
  });

  // connect prisma client to test db
  await prismaClient.$connect();
  return { stopServer, prismaClient };
};
```

my node version is `v20.10.0`
prisma and @prisma/client version is `^5.8.0`

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. prepare prisma.schema with the model as above
2. run `createTestPrismaClient()` as above

### Expected behavior

`prisma db push` does not hang

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model CollectionName {
  id      String      @id @default(auto()) @map(""_id"") @db.ObjectId
  field1  String      @db.ObjectId
  field2  String
  field3  String
  field4  String      @db.ObjectId
  field5  String
  field6  String      @db.ObjectId
  field7  String
  field8  String
  field9  String
  field10 String
  field11 String
  field12 StatusLog[]
  field13 DateTime    @default(now()) @db.Date
  field14 String      @db.ObjectId
  field15 DateTime    @updatedAt @db.Date
  field16 String?     @db.ObjectId
  field18 DateTime?
  field19 String?     @db.ObjectId

  @@unique([field9])
  @@unique([field10])
  @@unique([field8]) <----------- issue started when i added this. removing it fixes it
  @@index([field12])
  // @@index([field6]) <--------- commenting any of these index/unique field also fixes it
  @@index([field7])
  @@index([field2])
  @@index([field6, field12])
  @@map(""collectionNames"")
}
```

```ts
import { MongoMemoryReplSet } from 'mongodb-memory-server';
import { PrismaClient } from '@prisma/client';
import { execSync } from 'child_process';

export const createMemoryMongoDbServer = async () => {
  // This will create an new instance of ""MongoMemoryReplSet"" and automatically start all Servers
  const mongoReplSet = await MongoMemoryReplSet.create({
    replSet: { count: 2, dbName: 'testDb', storageEngine: 'wiredTiger' }
  });
  const uri = mongoReplSet.getUri('testDb');
  const uriWithDb = uri;

  const stopServer = async () => {
    return mongoReplSet.stop();
  };

  return { stopServer, dbUrl: uriWithDb };
};

export const createTestPrismaClient = async () => {
  // start test db (in-memory mongodb replica)
  const { stopServer, dbUrl } = await createMemoryMongoDbServer();

  // instantiate prisma client with test db uri
  const prismaClient = new PrismaClient({ datasources: { db: { url: dbUrl } } });

  // run cli command to create indexes in test db, based on prisma/schema.prisma
  execSync(`DATABASE_URL=${dbUrl} npm run db:push`, {
    stdio: 'pipe'
  });

  // connect prisma client to test db
  await prismaClient.$connect();
  return { stopServer, prismaClient };
};
```


### Environment & setup

- OS: Ubuntu 22.04.3 LTS 
- Database: MongoDB. mongodb-memory-server. version: ^9.1.6. underlying mongodb version: 6.0.9
- Node.js version: v20.10.0


### Prisma Version

```
5.8.0
```
",,
2221104442,23702,"`✘ [ERROR] near ""��"": syntax error at offset 0` when running `wrangler d1 migrations apply` with Prisma generated migration (on Windows, using Powershell)","### Bug description

I get an error while trying to apply my migration with wrangler.
![error](https://github.com/prisma/prisma/assets/77106172/819e5432-4c31-493f-be3b-b3f47ef4335e)

I'm using the [guide here.](https://www.prisma.io/blog/build-applications-at-the-edge-with-prisma-orm-and-cloudflare-d1-preview)

Here is the log:
[wrangler-2024-04-02_17-44-57_583.log](https://github.com/prisma/prisma/files/14841812/wrangler-2024-04-02_17-44-57_583.log)

Here is the migration file (as txt instead of sql):
[0001_create_user_table.txt](https://github.com/prisma/prisma/files/14841861/0001_create_user_table.txt)


### How to reproduce

I run the following command in terminal:
npx wrangler d1 migrations apply prisma-demo-db --local

### Expected behavior

_No response_

### Prisma information

schema.prisma
```
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

### Environment & setup

- OS: Windows
- Node.js version: v18.20

packages:
```
{
  ""name"": ""nuxt-app"",
  ""private"": true,
  ""type"": ""module"",
  ""scripts"": {
    ""build"": ""nuxt build"",
    ""dev"": ""nuxt dev"",
    ""generate"": ""nuxt generate"",
    ""preview"": ""npm run build && wrangler pages dev ./dist"",
    ""postinstall"": ""nuxt prepare"",
    ""deploy"": ""npm run build && wrangler pages deploy ./dist"",
    ""build-cf-types"": ""wrangler types""
  },
  ""dependencies"": {
    ""@prisma/adapter-d1"": ""^5.12.0"",
    ""@prisma/client"": ""^5.12.0"",
    ""nuxt"": ""^3.11.1"",
    ""vue"": ""^3.4.21"",
    ""vue-router"": ""^4.3.0""
  },
  ""devDependencies"": {
    ""@cloudflare/workers-types"": ""^4.20240329.0"",
    ""nitro-cloudflare-dev"": ""^0.1.4"",
    ""prisma"": ""^5.12.0"",
    ""wrangler"": ""^3.43.0""
  }
}
```

### Prisma Version

```
prisma                  : 5.12.0
@prisma/client          : 5.12.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.6.1
Query Engine (Node-API) : libquery-engine 473ed3124229e22d881cb7addf559799debae1ab (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 473ed3124229e22d881cb7addf559799debae1ab (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.12.0-21.473ed3124229e22d881cb7addf559799debae1ab
Default Engines Hash    : 473ed3124229e22d881cb7addf559799debae1ab
Studio                  : 0.499.0
Preview Features        : driverAdapters
```
",,
2220877351,23701,Fine Grained Control over transactions,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
Currently the only way that you can have more precise and fine grained control over a transaction is using the interactive transaction API.
The problem is that using transactions in this manner does not work for more complex applications with complicated business logic that require a more sophisticated architectural style(e.g Domain Driven Design, Clean Architecture).
The interactive transaction either makes you leak the business logic of the application to the database/repository layer or makes it impossible for client code to have a layer of abstraction over prisma(The main point of Clean architecture in which we do not depend on infrastructure and libraries).
For example when you have different independent services/repositories/use cases/models you have to be able to start a transaction at a higher level and then the methods of the repository that is being called should be run inside that transaction.
This makes prisma the least suitable option for large scale applications with complex architecture and use cases as using prisma makes the code coupled and decreases cohesion drastically.

## Suggested solution
Prisma should expose an api for the user to start have fine grain control over transactions with methods like `$begin`, `$commit`, `$rollback`  so the user would be able to separate the database logic from business logic of the application. A Simple Example:

```typescript
export class FirstEntityPrismaRepo implements IFirstRepo {
  create(report: FirstDTO):FirstModel
}
```
```typescript
export class SecondEntityPrismaRepo implements ISecondRepo {
  create():void
}
```

```typescript
export class UseCase  {
  constructor(private firstRepo: IFirstRepo, private  secondRepo: ISecondRepo,private  DBContext: DBContext){}
  execute(reportDTO: ReportDTO){
   DBContext.$begin()
   try{
     const createdFirst = firstRepo.createRepo(reportDTO)
     // businesss logic here
    .
    .
    .
    .
   secondRepo.createSyncRequest()
   DBContext.$commit()
   }catch(){
      DBContext.$rollback()
   }
  
 }
}
```
But with the current interactive transaction the business logic of creating a secondEntity is leaked into the FirstEntity Repository and it almost makes creating a good architecture impossible.

<!-- A clear and concise description of what you want to happen. -->

## Alternatives
I've considered migrating from Prisma to TypeORM because TypeORM enables the user to control the transactions in a better way:
```typescript
await queryRunner.startTransaction()

try {
    // execute some operations on this transaction:
    await queryRunner.manager.save(user1)
    await queryRunner.manager.save(user2)
    await queryRunner.manager.save(photos)

    // commit transaction now:
    await queryRunner.commitTransaction()
} catch (err) {
    // since we have errors let's rollback changes we made
    await queryRunner.rollbackTransaction()
} finally {
    // you need to release query runner which is manually created:
    await queryRunner.release()
}
```
<!-- A clear and concise description of any alternative solutions or features you've considered. -->

",,
2219924930,23685,How to use Prisma with Next.js and Next Auth (without targeting Edge runtimes),"### Bug description

In nextjs (v14.1.4) project with next auth (5.0.0-beta.16) and prisma setup, I am trying to add user data in user session by loading data from db. for loading data i tried to use prisma but it throw error (PrismaClient is not configured to run in Vercel Edge Functions or Edge Middleware. In order to run Prisma Client on edge runtime, either:)

<img width=""678"" alt=""Screenshot 2024-04-02 at 14 26 54"" src=""https://github.com/prisma/prisma/assets/60551574/d0b888f2-eff1-4c16-8c51-61da498d046c"">


### How to reproduce

create a nextjs app with prisma and next auth

this is my nextauth config file (` nextauth.config.js`)

```

import NextAuth from ""next-auth"";
import GoogleProvider from ""next-auth/providers/google"";
import { prisma } from ""./prisma"";
import { PrismaAdapter } from ""@auth/prisma-adapter"";

import type { NextAuthConfig } from ""next-auth"";
import { Role } from ""@prisma/client"";

const config: NextAuthConfig = {
  providers: [GoogleProvider],
  session: {
    strategy: ""jwt"",
    maxAge: 30 * 24 * 60 * 60, // 30 days
    updateAge: 24 * 60 * 60, // 24 hours
  },
  // https://next-auth.js.org/configuration/pages
  pages: {
    signIn: ""/auth"", // Displays signin buttons
  },
  // https://next-auth.js.org/configuration/callbacks
  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      return true;
    },
    async redirect({ url, baseUrl }) {
      // Allows relative callback URLs
      if (url.startsWith(""/"")) return `${baseUrl}${url}`;
      // Allows callback URLs on the same origin
      else if (new URL(url).origin === baseUrl) return url;
      return baseUrl;
    },

    async session({ session, token, user }) {


      // const userInDb = await prisma.user.findUnique({
      //   where: {
      //     id: token.sub,
      //   },
      //   include: {
      //     student: true,
      //     client: true,
      //   },
      // });

      const roles: Array<Role> = [];
      // if (userInDb && userInDb.student) {
      //   roles.push(Role.STUDENT);
      // }
      // if (userInDb && userInDb.client) {
      //   roles.push(Role.CLIENT);
      // }
      console.log(""user"", user);
      console.log(""session"", session);
      return {
        ...session,
        user: {
          email: token.email,
          id: token.sub,
          image: token.picture,
          name: token.name,
          role: Role.USER,
          roles: roles,
        },
      };
    },
    async jwt({ token, user, account, profile, isNewUser, session, trigger }) {
      
      // TODO: fetch user information from db along with his other profile
      const roles = [""user""];
      // TODO: all other roles of the users to roles variable
      return {
        ...token,
        ""https://cisprcoders.com/jwt/claims"": {
          ""x-crispr-allowed-roles"": roles,
          ""x-crispr-default-role"": ""user"",
          ""x-crispr-user-id"": token.sub,
        },
      };
    },
  },
  events: {},
  debug: true,
  adapter: PrismaAdapter(prisma),
};

export const {
  handlers: { GET, POST },
  auth,
} = NextAuth(config);

```

and this is my `prisma.js` file

```
import { PrismaClient } from ""@prisma/client"";

declare const global: Global & { prisma?: PrismaClient };

export let prisma: PrismaClient;

if (typeof window === ""undefined"") {
  if (process.env[""NODE_ENV""] === ""production"") {
    prisma = new PrismaClient();
  } else {
    if (!global.prisma) {
      global.prisma = new PrismaClient();
    }
    prisma = global.prisma;
  }
}

```

While i tried to use the prisma inside the any callback method i got error.


### Expected behavior

should be able to use prisma.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```  generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""linux-arm64-openssl-1.0.x""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DATABASE_URL"")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String               @id @default(cuid())
  name            String?
  email           String?              @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  books           Book[]
  lessons         Lesson[]
  student         Student?
  role            Role                 @default(USER)
  client          Client?
  manager         Manager?
  engineer        Engineer?
  skills          UserSkill[]
}


```ts
// Add your code using Prisma Client
``` async session({ session, token, user }) {
      const userInDb = await prisma.user.findUnique({
        where: {
          id: token.sub,
        },
        include: {
          student: true,
          client: true,
        },
      });

      const roles: Array<Role> = [];
      if (userInDb && userInDb.student) {
         roles.push(Role.STUDENT);
      }
      if (userInDb && userInDb.client) {
         roles.push(Role.CLIENT);
      }
      console.log(""user"", user);
      console.log(""session"", session);
      return {
        ...session,
        user: {
          email: token.email,
          id: token.sub,
          image: token.picture,
          name: token.name,
          role: Role.USER,
          roles: roles,
        },
      };
    },

### Environment & setup

- OS: MacOS 14.4  in Apple M1 Pro <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database:  PostgreSQL <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: v18.17.0 <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.17.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
",,
2218597039,23681,I'm getting this error: Invalid `prisma.server.create()` invocation:,"### Bug description

When I'm accessing the route.js, I'm getting status code:500 and also attached the error:

[SERVERS_POST] PrismaClientValidationError: 
Invalid `prisma.server.create()` invocation:

{
  data: {
    profileId: ""6604270fb6faae8d7cb1db0a"",
    name: ""Goal"",
    imageUrl: ""https://utfs.io/f/4cc86070-78ef-4a57-ba9b-7cb5050fb5d6-1bos3.jpg"",
    inviteCode: ""0b4941c3-7b53-4fe0-af5a-7c0ae60ac4ac"",
    channels: {
      create: [
        {
          name: ""general"",
          profileId: ""6604270fb6faae8d7cb1db0a""
        }
      ]
    },
    members: {
      create: [
        {
          profileId: ""6604270fb6faae8d7cb1db0a"",
          role: ""ADMIN""
        }
      ]
    }
  }
}

Argument `serverId` is missing.
    at Tn (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:115:5888)
    at In.handleRequestError (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:122:6510)
    at In.handleAndLogRequestError (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:122:6188)
    at In.request (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:122:5896)
    at async l (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:127:10871)
    at async POST (webpack-internal:///(rsc)/./app/api/servers/route.ts:25:24)
    at async E:\Projects\discord-clone\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:63809
    at async eU.execute (E:\Projects\discord-clone\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:53964)
    at async eU.handle (E:\Projects\discord-clone\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:65062)
    at async doRender (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1315:42)
    at async cacheEntry.responseCache.get.routeKind (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1537:28)
    at async DevServer.renderToResponseWithComponentsImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1445:28)
    at async DevServer.renderPageComponent (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1842:24)
    at async DevServer.renderToResponseImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1880:32)
    at async DevServer.pipeImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:893:25)
    at async NextNodeServer.handleCatchallRenderRequest (E:\Projects\discord-clone\node_modules\next\dist\server\next-server.js:269:17)
    at async DevServer.handleRequestImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:789:17)
    at async E:\Projects\discord-clone\node_modules\next\dist\server\dev\next-dev-server.js:331:20
    at async Span.traceAsyncFn (E:\Projects\discord-clone\node_modules\next\dist\trace\trace.js:151:20)
    at async DevServer.handleRequest (E:\Projects\discord-clone\node_modules\next\dist\server\dev\next-dev-server.js:328:24)
    at async invokeRender (E:\Projects\discord-clone\node_modules\next\dist\server\lib\router-server.js:174:21)
    at async handleRequest (E:\Projects\discord-clone\node_modules\next\dist\server\lib\router-server.js:353:24)
    at async requestHandlerImpl (E:\Projects\discord-clone\node_modules\next\dist\server\lib\router-server.js:377:13)
    at async Server.requestListener (E:\Projects\discord-clone\node_modules\next\dist\server\lib\start-server.js:140:13) {
  clientVersion: '5.11.0'
}


### How to reproduce

<!--
Try to access the route.js in a NextJS project. I've attached the code to this issue. Please have a look into it.
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model Profile {
  id    String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId String  @unique
  name  String
  imageUrl String @db.String
  email String @db.String

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server{
  id    String  @id @default(auto()) @map(""_id"") @db.ObjectId
  name String 
  imageUrl String @db.String
  inviteCode String @db.String

  members Member[]
  channels Channel[]

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete:Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(auto()) @map(""_id"") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id String @id @default(auto()) @map(""_id"") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [profileId], references: [id],  onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
```

```ts
import { v4 as uuidv4 } from ""uuid"";
import { NextResponse } from ""next/server"";
import { MemberRole } from ""@prisma/client"";

import { currentProfile } from ""@/lib/current-profile"";
import { db } from ""@/lib/db"";

export async function POST(req: Request) {
  try {
    const { name, imageUrl } = await req.json();
    const profile = await currentProfile();

    if (!profile) {
      return new NextResponse(""Unauthorized"", { status: 401 });
    }

    const server = await db.server.create({
      data: {
        profileId: profile.id,
        name,
        imageUrl,
        inviteCode: uuidv4(),
        channels: {
          create: [{ name: ""general"", profileId: profile.id }],
        },
        members: {
          create: [
            {
              profileId: profile.id,
              role: MemberRole.ADMIN,
            },
          ],
        },
      },
    });

    return NextResponse.json(server);
  } catch (error) {
    console.log(""[SERVERS_POST]"", error);
    return new NextResponse(""Internal Error"", { status: 500 });
  }
}

```


### Environment & setup

- OS: Windows
- Database: MongoDB
- Node.js version: 20.10.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2218596623,23680,I'm getting this error ,"### Bug description

When I'm accessing the route.js, I'm getting status code:500 and also attached the error:

[SERVERS_POST] PrismaClientValidationError: 
Invalid `prisma.server.create()` invocation:

{
  data: {
    profileId: ""6604270fb6faae8d7cb1db0a"",
    name: ""Goal"",
    imageUrl: ""https://utfs.io/f/4cc86070-78ef-4a57-ba9b-7cb5050fb5d6-1bos3.jpg"",
    inviteCode: ""0b4941c3-7b53-4fe0-af5a-7c0ae60ac4ac"",
    channels: {
      create: [
        {
          name: ""general"",
          profileId: ""6604270fb6faae8d7cb1db0a""
        }
      ]
    },
    members: {
      create: [
        {
          profileId: ""6604270fb6faae8d7cb1db0a"",
          role: ""ADMIN""
        }
      ]
    }
  }
}

Argument `serverId` is missing.
    at Tn (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:115:5888)
    at In.handleRequestError (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:122:6510)
    at In.handleAndLogRequestError (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:122:6188)
    at In.request (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:122:5896)
    at async l (E:\Projects\discord-clone\node_modules\@prisma\client\runtime\library.js:127:10871)
    at async POST (webpack-internal:///(rsc)/./app/api/servers/route.ts:25:24)
    at async E:\Projects\discord-clone\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:63809
    at async eU.execute (E:\Projects\discord-clone\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:53964)
    at async eU.handle (E:\Projects\discord-clone\node_modules\next\dist\compiled\next-server\app-route.runtime.dev.js:6:65062)
    at async doRender (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1315:42)
    at async cacheEntry.responseCache.get.routeKind (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1537:28)
    at async DevServer.renderToResponseWithComponentsImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1445:28)
    at async DevServer.renderPageComponent (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1842:24)
    at async DevServer.renderToResponseImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:1880:32)
    at async DevServer.pipeImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:893:25)
    at async NextNodeServer.handleCatchallRenderRequest (E:\Projects\discord-clone\node_modules\next\dist\server\next-server.js:269:17)
    at async DevServer.handleRequestImpl (E:\Projects\discord-clone\node_modules\next\dist\server\base-server.js:789:17)
    at async E:\Projects\discord-clone\node_modules\next\dist\server\dev\next-dev-server.js:331:20
    at async Span.traceAsyncFn (E:\Projects\discord-clone\node_modules\next\dist\trace\trace.js:151:20)
    at async DevServer.handleRequest (E:\Projects\discord-clone\node_modules\next\dist\server\dev\next-dev-server.js:328:24)
    at async invokeRender (E:\Projects\discord-clone\node_modules\next\dist\server\lib\router-server.js:174:21)
    at async handleRequest (E:\Projects\discord-clone\node_modules\next\dist\server\lib\router-server.js:353:24)
    at async requestHandlerImpl (E:\Projects\discord-clone\node_modules\next\dist\server\lib\router-server.js:377:13)
    at async Server.requestListener (E:\Projects\discord-clone\node_modules\next\dist\server\lib\start-server.js:140:13) {
  clientVersion: '5.11.0'
}


### How to reproduce

<!--
Try to access the route.js in a NextJS project. I've attached the code to this issue. Please have a look into it.
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model Profile {
  id    String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId String  @unique
  name  String
  imageUrl String @db.String
  email String @db.String

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server{
  id    String  @id @default(auto()) @map(""_id"") @db.ObjectId
  name String 
  imageUrl String @db.String
  inviteCode String @db.String

  members Member[]
  channels Channel[]

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete:Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(auto()) @map(""_id"") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id String @id @default(auto()) @map(""_id"") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [profileId], references: [id],  onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
```

```ts
import { v4 as uuidv4 } from ""uuid"";
import { NextResponse } from ""next/server"";
import { MemberRole } from ""@prisma/client"";

import { currentProfile } from ""@/lib/current-profile"";
import { db } from ""@/lib/db"";

export async function POST(req: Request) {
  try {
    const { name, imageUrl } = await req.json();
    const profile = await currentProfile();

    if (!profile) {
      return new NextResponse(""Unauthorized"", { status: 401 });
    }

    const server = await db.server.create({
      data: {
        profileId: profile.id,
        name,
        imageUrl,
        inviteCode: uuidv4(),
        channels: {
          create: [{ name: ""general"", profileId: profile.id }],
        },
        members: {
          create: [
            {
              profileId: profile.id,
              role: MemberRole.ADMIN,
            },
          ],
        },
      },
    });

    return NextResponse.json(server);
  } catch (error) {
    console.log(""[SERVERS_POST]"", error);
    return new NextResponse(""Internal Error"", { status: 500 });
  }
}

```


### Environment & setup

- OS: Windows
- Database: MongoDB
- Node.js version: 20.10.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2217187768,23676,not able to run npx prisma generate ,"### Bug description

C:\2106412\dockerintro\week-15-live-1\node_modules\.prisma\client\default.js:43
    throw new Error(
    ^

Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2216959350,23675,Error opening a TLS connection - prisma couldn't connect to db,"### Bug description

so basically i entered my connection string and got this error:
used biganimal postgresql db

Error: P1011: Error opening a TLS connection: The message received was unexpected or badly formatted. (os error -2146893018)

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
```prisma migrate dev --name init```

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url = ""postgresql://USERNAME:XXXX@HOSTNAME.biganimal.io/DB_NAME""
}

model Group {
  id        String   @id @default(cuid())
  name      String?
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```




### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> Windows
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> PostgreSQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> 20


### Prisma Version

```
5.11.0
```
",,
2216897620,23674,Getting Type Error: '{ ttl: number; swr: number; }' is not assignable to type 'never'.ts(2322),"### Bug description

I'm getting type error in Next.js 14 with Prisma Accelerate, not able to cache data properly from accelerate.

![Screenshot 2024-03-31 at 16 11 52](https://github.com/prisma/prisma/assets/36154235/0bc19da2-e038-414a-a227-8181eb22a0a3)


### How to reproduce

Create a function with findMany method.

```
 const fetchBusiness = await prisma.business.findMany({
    orderBy: {
      name: 'asc'
    },
    cacheStrategy: {
      ttl: 3_600,
      swr: 500,
    },
  });
```

### Expected behavior

No Type error.

### Prisma information


// Add your schema.prisma
```
model Business {
  id              String            @id @default(auto()) @map(""_id"") @db.ObjectId
  name            String
  description     String
  website         String
....
}
```
// Add your code using Prisma Client
```
import { PrismaClient } from '@prisma/client/edge';
import { withAccelerate } from '@prisma/extension-accelerate';

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: ['error', 'warn'],
  }).$extends(withAccelerate());

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;
```

### Environment & setup

- OS: MacOS
- Database: MongoDB
- Node.js version: v20.11.0


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : fullTextSearch
```
",,
2216580262,23670,internal error: entered unreachable code,"### Bug description

attempting to insert roles into roles table

To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 

    at In.handleRequestError (/Users/bordeau/dev/crm1/node_modules/@prisma/client/runtime/library.js:122:7215)
    at In.handleAndLogRequestError (/Users/bordeau/dev/crm1/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (/Users/bordeau/dev/crm1/node_modules/@prisma/client/runtime/library.js:122:5896)
    at l (/Users/bordeau/dev/crm1/node_modules/@prisma/client/runtime/library.js:127:10871)
    at initRoles (file:///Users/bordeau/dev/crm1/app/controllers/roles.ts:19:23)

### How to reproduce

```typescript
//// how to reproduce.. execute initRoles on empty roles table
import { prisma } from ""~/db/db.server.ts"";

import { getAllRoles, initRoles } from ""~/controllers/roles"";

export async function initRoles() {
  const role = await getRoleByName(""PendingUser"");

  console.log(""initRoles: "" + JSON.stringify(role));

  if (role === null) {
    console.log(""role was null"");

    let data = { name: ""Admin"" };
    const adminRole = await prisma.roles.create({ data: data });
    data = { name: ""User"" };
    const userRole = await prisma.roles.create({ data: data });
    data = { name: ""PendingUser"" };
    const pendingUserRole = await prisma.roles.create({ data: data });

    console.log(
      ""initRoles after insert: "" +
        JSON.stringify(adminRole) +
        "" "" +
        JSON.stringify(pendingUserRole)
    );

    return pendingUserRole;
  }
  return role;
}

export async function getRoleByName(nm) {
  const role = await prisma.roles.findFirst({
    where: { name: nm },
  });
  console.log(""getRolebyName: "" + JSON.stringify(role));
  return role;
}
```

### Expected behavior

create the 3 roles specified above and return the  pendingUserRole role
or return the found PendingUser role data

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env( ""DATABASE_URL"" )
}

// user -authentication types

model roles {
  role_id   Int       @id @default(autoincrement())
  name      String?
  users     users[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model users {
  user_id   Int       @id @default(autoincrement())
  clerk_id  String    @unique
  role_id   Int
  roles     roles?    @relation( fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  isActive  Boolean   @default(false)
  persons persons[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// crn types

model org_types {
  org_type_id   Int   @id @default(autoincrement())
  name      String
  orgs      orgs[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model orgs {
  org_id    Int      @id @default(autoincrement())
  name      String
  org_type_id Int?
  address      String?      // the contents will be Json
  org_types   org_types?    @relation( fields: [org_type_id], references: [org_type_id], onDelete: NoAction, onUpdate: NoAction)
  persons persons_in_orgs[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model persons {
  person_id Int @id @default(autoincrement())
  user_id Int?
  users   users?    @relation( fields: [user_id], references: [user_id])
  orgs persons_in_orgs[]
  first_name      String
  last_name      String
  email      String
  phone      String
  address      String?      // the contents will be Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model persons_in_orgs {
  org orgs @relation(fields: [org_id], references: [org_id])
  org_id Int
  person persons @relation(fields: [person_id], references: [person_id])
  person_id Int
  title String
  sub_org String?
  email      String?
  phone      String?
  address      String?      // the contents will be Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([org_id, person_id])
}
```

### Environment & setup

- OS: <!--[macOS, ...]-->
- Database:  SQLite, ]-->
- Node.js version: <!--[v21.6.2]-->

### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.2
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2216238095,23668,"The requested module '@prisma/client' is a CommonJS module,","### Bug description

```
file:///xxxx/evalService.js:1
import { PrismaClient } from '@prisma/client';
         ^^^^^^^^^^^^
SyntaxError: Named export 'PrismaClient' not found. The requested module '@prisma/client' is a CommonJS module, which may not support all module.exports as named exports.
CommonJS modules can always be imported via the default export, for example using:

import pkg from '@prisma/client';
const { PrismaClient } = pkg;
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2214449513,23659,how to use prisma in electron?,"### Bug description

when i use prisma/client in dev,it works goods, but when i build my electron app use electron-builder, it throw an error like: Cannot find module '.prisma/client/default'
![微信截图_20240329094204](https://github.com/prisma/prisma/assets/36839540/47f09172-cdd5-4538-8c01-0c919ab441e8)


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2212999080,23647,Connecting to database via windows integrated security,"Hey! I moved this to issues in hope that someone could steer me in the right direction. 😄 

### Discussed in https://github.com/prisma/prisma/discussions/23614

<div type='discussions-op-text'>

<sup>Originally posted by **mmilardic** March 25, 2024</sup>
### Question

I'm trying to connect to our database with the following options:
```
datasource db {
  provider = ""sqlserver""
  url      = ""sqlserver://serverName:port;integratedSecurity=true;trustServerCertificate=true;encrypt=true;""
}
```

I'm getting:
`Error: Schema engine error:
Performing a TLS handshake
Trusting the server certificate without validation.
TLS handshake successful
Login failed for user ''.
[libs/user-facing-errors/src/quaint.rs:125:18] internal error: entered unreachable code
`

It is a SQL Server 15 (2019)

I'm on macOs and I have a Kerberos ticket.

I have no problems connecting to the DB server via Azure Data Explorer and TypeOrm .

TypeOrm using the following options:
` type: 'mssql',
  host: db.host,
  port: db.port,
  database: db.database,
  authentication: {
      type: 'ntlm',
      options: {
          userName: db.username,
          password: db.password,
          domain: db.domain,
      },
  },`



### How to reproduce (optional)

1. Create schema.prisma with the minimum requirements
2. Run: `a) npx prisma generate, b) npx prisma migrate dev`
3. See error:
`Error: Schema engine error:
Performing a TLS handshake
Trusting the server certificate without validation.
TLS handshake successful
Login failed for user ''.
[libs/user-facing-errors/src/quaint.rs:125:18] internal error: entered unreachable code
`

### Expected behavior (optional)

Should connect to the DB

### Information about Prisma Schema, Client Queries and Environment (optional)

<!-- Paste your Prisma schema below. Do not include your database credentials when sharing your Prisma schema! -->
```prisma
`generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = ""sqlserver://serverName:port;integratedSecurity=true;trustServerCertificate=true;encrypt=true;""
}`
```

- OS: macOS
- Database: SQL Server 15 (2019)
- Node.js version: 20.9.0
- Prisma version: 5.11.0</div>",,
2212413261,23644,Uncaught Error: PrismaClientValidationError: PrismaClient failed to initialize because it wasn't configured to run in this environment (Cloudflare Workers).,"### Bug description

I've created a simple Cloudflare worker trying to get a remix app to connect with a supabase db using Prisma ORM. I'm running prisma 5.11.0. I've followed the Cloudflare steps documented [here](https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-cloudflare#postgresql-traditional). My schema file and client exports are shared below.

When I run `pnpx wrangler dev`, I get this:

```
 WARN  2 deprecated subdependencies found: rollup-plugin-inject@3.0.2, sourcemap-codec@1.4.8
Packages: +74
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Progress: resolved 99, reused 74, downloaded 0, added 74, done
 ⛅️ wrangler 3.39.0
-------------------
▲ [WARNING] Enabling Node.js compatibility mode for built-ins and globals. This is experimental and has serious tradeoffs. Please see https://github.com/ionic-team/rollup-plugin-node-polyfills/ for more details.


Using vars defined in .dev.vars
Your worker has access to the following bindings:
- Vars:
  - SOME_VAR: ""hello""
  - DATABASE_URL: ""(hidden)""
⎔ Starting local server...
[wrangler:inf] Ready on http://localhost:8787
✘ [ERROR] service core:user:crescendo: Uncaught Error: PrismaClientValidationError: PrismaClient failed to initialize because it wasn't configured to run in this environment (Cloudflare Workers).

  In order to run Prisma Client in an edge runtime, you will need to configure one of the following
  options:
  - Enable Driver Adapters: https://pris.ly/d/driver-adapters
  - Enable Accelerate: https://pris.ly/d/accelerate
    at null.<anonymous> (server.js:49351:15) in _i
    at null.<anonymous> (server.js:50497:1791) in t
    at null.<anonymous> (server.js:53016:14)


✘ [ERROR] MiniflareCoreError [ERR_RUNTIME_FAILURE]: The Workers runtime failed to start. There is likely additional logging output above.
```

It is as though it's not actually using `driverAdapters`, even though it is being told to. Any suggestions would be greatly appreciated.

### How to reproduce

Reproduction steps listed above are sufficient.

### Expected behavior

I expect wrangler dev not to report a PrismaClientValidationError.

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

```ts
import { Pool } from 'pg';
import { PrismaPg } from '@prisma/adapter-pg';
import { PrismaClient } from '@prisma/client';

const connectionString = `${process.env.DATABASE_URL}`

const pool = new Pool({ connectionString });
const adapter = new PrismaPg(pool);
const prisma = new PrismaClient({ adapter });

export { prisma };
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 20.11.1

### Prisma Version

```
5.11.0
```
",,
2208156215,23627,Full-text search query is very slow with `search` API but fast with raw SQL,"The [Drizzle benchmarks](https://github.com/drizzle-team/drizzle-benchmarks/) use the `search` API for full-text search (that's currently in Preview) in two routes:
- [`/search-customer`](https://github.com/drizzle-team/drizzle-benchmarks/blob/main/src/prisma-server.ts#L28-L35)
- [`/search-product`](https://github.com/drizzle-team/drizzle-benchmarks/blob/main/src/prisma-server.ts#L106-L116)

The slow performance of the query has a heavy impact on the benchmark results leading to Prisma ORM being vastly slower than Drizzle.

When replacing the `search` query with raw SQL, the performances of Prisma ORM and Drizzle are on par. Here's how you can replace the `search` queries with `$queryRaw` for better performance:

```ts
// /search-customer
const term = `${c.req.query(""term"")}:*`;
const result = await prisma.$queryRaw`select * from ""products"" where to_tsvector('english', ""products"".""name"") @@ to_tsquery('english', ${term});`;

// /search-product
const term = `${c.req.query(""term"")}:*`;
const result = await prisma.$queryRaw`select * from ""products"" where to_tsvector('english', ""products"".""name"") @@ to_tsquery('english', ${term});`;
```

The problem may be related with this issue mentioning that indexes are not properly used during FTS: https://github.com/prisma/prisma/issues/8950#issue-980473627",,
2206338727,23616,5.10 & 5.11 break local development with Next.js,"### Bug description

I have a Next.js application connecting to a Neon database in production, and a local Postgres database in development.

I use NextAuth, which requires importing the Prisma client as part of the configuration, however I have it configured not to require connecting to a database in the edge middleware (using JWT sessions).

Up to 5.9, I have been able to run my application using the Neon serverless driver _only in production_, and no driver in local development without a problem.

After upgrading past 5.10, I get the following errors just initializing the Prisma client:
```
5.10.0
Error [PrismaClientValidationError]: PrismaClient failed to initialize because it wasn't configured to run in this environment (edge-light) 

5.11.0
Error [PrismaClientValidationError]: PrismaClient failed to initialize because it wasn't configured to run in this environment (Vercel Edge Functions or Edge Middleware).
```

My hunch (I could be wrong) is that this is because whereas previously you threw an error when trying to _connect_ to the database in an unsupported environment, you now check when _initializing_.

As node-postgres is not supported in the Edge environment, do you have any recommendations for how to develop an application against a local database with this change? 

(This isn't the first time I've had development against a local database broken, I'm wondering if I'm the only one not connecting to a hosted database during development...)

### How to reproduce

Set up a Next.js application and **import** the prisma client in an Edge runtime or Edge Middleware file.

### Expected behavior

I should be able to import the client without using it in an edge environment, even if I'm not using an edge driver I guess?

### Prisma information

```ts
import { Pool } from '@neondatabase/serverless'
import { PrismaNeon } from '@prisma/adapter-neon'
import { PrismaClient } from '@prisma/client'

let prisma: PrismaClient

if (process.env.NODE_ENV === 'production') {
  prisma = new PrismaClient({ adapter: adapter() })
} else {
  const globalWithPrisma = global as typeof globalThis & {
    prisma: PrismaClient
  }
  if (!globalWithPrisma.prisma) {
    globalWithPrisma.prisma = new PrismaClient()
  }
  prisma = globalWithPrisma.prisma
}

export default prisma
export * from '@prisma/client'

function adapter() {
  if (!process.env.VERCEL) return null

  const connectionString = `${process.env.DATABASE_URL}`
  const pool = new Pool({ connectionString })
  return new PrismaNeon(pool)
}
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL locally, Neon in production
- Node.js version: 20.x


### Prisma Version

```
5.10.2 through 5.11.0
```
",,
2205305083,23606,`$queryRaw` fails to retrieve rows with specific timestamp when PostgreSQL runs in non-UTC timezone,"### Bug description

When the PostgreSQL runs in a non-UTC timezone, `$queryRaw` does not find the correct rows with the given timestamp while `findMany` does.

There are a part of the logs generated with `DEBUG='*'`.
Note that the client requests with `\""prisma__value\"":\""2023-01-01T00:00:00.000Z\""`, but got records in `created_at: 2023-01-01T08:00:00.000Z`.

```txt
prisma:client prisma.$queryRaw(SELECT *
  FROM ""Message"" m
  WHERE m.created_at = $1;, [{""prisma__type"":""date"",""prisma__value"":""2023-01-01T00:00:00.000Z""}]) +4ms
prisma:client Prisma Client call: +0ms
prisma:client prisma.$queryRaw({
  query: ""SELECT *\n  FROM \""Message\"" m\n  WHERE m.created_at = $1;"",
  parameters: {
    values: ""[{\""prisma__type\"":\""date\"",\""prisma__value\"":\""2023-01-01T00:00:00.000Z\""}]"",
    __prismaRawParameters__: true
  }
}) +0ms
prisma:client Generated request: +0ms
prisma:client {
  ""action"": ""queryRaw"",
  ""query"": {
    ""arguments"": {
      ""query"": ""SELECT *\n  FROM \""Message\"" m\n  WHERE m.created_at = $1;"",
      ""parameters"": ""[{\""prisma__type\"":\""date\"",\""prisma__value\"":\""2023-01-01T00:00:00.000Z\""}]""
    },
    ""selection"": {}
  }
}
 +0ms
prisma:client:libraryEngine sending request, this.libraryStarted: true +0ms
Find with $queryRaw: [
  {
    id: 360,
    created_at: 2023-01-01T08:00:00.000Z,
    content: 'Hello, World!'
  }
]
```

### How to reproduce

1. Setup a PostgreSQL database with a testing schema in a non-UTC timezone.
2. Clone [this reproduction](https://github.com/MiccWan/prisma-issue) and initialize with `yarn install`.
3. Copy `.env.example` to `.env` and fill in the database connection string.
4. Run `npx prisma db push` to create the schema.
5. Run `node index.js`. It will create a record with the timestamp `2023-01-01T00:00:00Z` and try to find the message.
6. See the output. `findMany` returns the correct message, while `$queryRaw` does not.

Please check [this reproduction](https://github.com/MiccWan/prisma-issue) for more information.

### Expected behavior

The `PrismaClient.$queryRaw` should find the row with the time `2023-01-01T00:00:00Z`.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @map(""created_at"")
  content   String
}
```

```js
const timestamp = new Date('2023-01-01T00:00:00Z');
// Create example record
await prisma.message.create({
  data: {
    createdAt: timestamp,
    content: 'Hello, World!',
  },
});

// You can find the messages with `findMany`
const messages = await prisma.message.findMany({
  where: {
    createdAt: timestamp,
  },
});
console.log('Find with findMany:', messages); // [Message]

// but got nothing with `$queryRaw`
const messages2 = await prisma.$queryRaw`SELECT *
FROM ""Message"" m
WHERE m.created_at = ${timestamp};`;
console.log('Find with $queryRaw:', messages2); // []
```

### Environment & setup

- OS: Ubuntu 22.04.3 LTS
- Database: PostgreSQL 15.4
- Node.js version: v18.18.2


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.18.2
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2203791989,23600,Next.js app build fails when using Prisma with DB driver in Server Action,"### Bug description

When building a Next.js application using Prisma on the edge runtime with the Database driver, the build fails with the following error. This problem seems to occur when using Prisma client on the server action imported by the client component. Also, this problem did not occur with Prisma v5.10.2 (in Early Access), and occurred with v5.11.0.

```
Failed to compile.

app/page.js from Terser
  x await isn't allowed in non-async function
       ,-[26410:1]
 26410 | /* harmony export */ __webpack_require__.d(__webpack_exports__, {
 26411 | /* harmony export */   ""default"": () => (__WEBPACK_DEFAULT_EXPORT__)
 26412 | /* harmony export */ });
 26413 | /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 9737, 23))).default);
       :                                                                         ^^^^^^^
 26414 | 
 26415 | /***/ }),
       `----

Caused by:
    0: failed to parse input file
    1: Syntax Error
Error: 
  x await isn't allowed in non-async function
       ,-[26410:1]
 26410 | /* harmony export */ __webpack_require__.d(__webpack_exports__, {
 26411 | /* harmony export */   ""default"": () => (__WEBPACK_DEFAULT_EXPORT__)
 26412 | /* harmony export */ });
 26413 | /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 9737, 23))).default);
       :                                                                         ^^^^^^^
 26414 | 
 26415 | /***/ }),
       `----

Caused by:
    0: failed to parse input file
    1: Syntax Error


> Build failed because of webpack errors
```

### How to reproduce

1. `git clone https://github.com/nzws/prisma-with-nextjs-edge-import-problem-repro`
2. `cd prisma-with-nextjs-edge-import-problem-repro`
3. `yarn install`
4. `yarn build`
5. See error

### Expected behavior

The build passes normally and the application can run.

### Prisma information

I created a repository that can reproduce this issue: https://github.com/nzws/prisma-with-nextjs-edge-import-problem-repro (https://github.com/nzws/prisma-with-nextjs-edge-import-problem-repro/commit/cc513a74a2fc5235409db82e46c51ddf84be4b07)

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

```ts
// ./app/lib/prisma.ts

import { Pool } from ""@neondatabase/serverless"";
import { PrismaNeon } from ""@prisma/adapter-neon"";
import { PrismaClient } from ""@prisma/client"";

export function createPrismaClient() {
  const neon = new Pool({ connectionString: process.env.DATABASE_URL });
  const adapter = new PrismaNeon(neon);
  const prisma = new PrismaClient({ adapter: adapter });

  return prisma;
}
```

```ts
// ./app/actions.ts

""use server"";

import { createPrismaClient } from ""./lib/prisma"";

export async function onCreate() {
  const prisma = createPrismaClient();

  await prisma.user.create({
    data: {
      email: ""john@example.com"",
      name: ""John Doe"",
    },
  });
}
```

```ts
// ./app/client-component.tsx: imported by page.tsx

""use client"";

import { onCreate } from ""./actions"";

export function ClientComponent() {
  const handleCreate = () => {
    void (async () => {
      await onCreate();
    })();
  };

  return (
    <div>
      <h1>Hello, World!</h1>

      <button onClick={handleCreate}>Create User</button>
    </div>
  );
}
```

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.10.0


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : driverAdapters
```",,
2203699500,23599,Deploying SvelteKit App to Vercel Edge Function with Planetscale MiddleWare results in Error,"### Bug description

Hello, I'm using SvelteKit on Vercel Edge Functions and am trying to use the PlanetScale Edge Middleware. I followed the guide in the docs, but got hung up in a couple places. Locally, I can use the adapter middleware perfectly, with my db connection looking like this:

```ts
import { DATABASE_URL } from '$env/static/private';
import { Client } from '@planetscale/database';
import { PrismaPlanetScale } from '@prisma/adapter-planetscale';
import { PrismaClient } from '@prisma/client';

const config = {
    url: DATABASE_URL
};

const client = new Client(config);
const adapter = new PrismaPlanetScale(client);
export const prisma = new PrismaClient({ adapter });
```

The problem is that when I deploy this on Vercel, I get the following error:

```
error: PrismaClient is not configured to run in Vercel Edge Functions or Edge Middleware. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters

If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report
    at (../../../../node_modules/.pnpm/@prisma+client@5.11.0_prisma@5.11.0/node_modules/.prisma/client/index-browser.js:352:14)
    at (../../../../.svelte-kit/output/server/entries/endpoints/api/top-categories/_server.ts.js:3:31)
    at (../../../../.svelte-kit/output/server/index.js:181:25)
    at (../../../../.svelte-kit/output/server/index.js:3459:27)
    at (../../../../.svelte-kit/output/server/chunks/hooks.server.js:4:9)
    at (../../../../.svelte-kit/output/server/index.js:3353:21)
```

From the docs, two alternative configurations involve adding `export const runtime = 'edge'`, but this doesn't appear to have any effect in SvelteKit. Alternatively, I also saw some docs which use the custom fetch function from `undici` and supply that to the PlanetScale config. Unfortunately though, undici fails to build on the edge runtime, thus that isn't a good solution either.

### How to reproduce

1. Set up basic sveltekit repo with runtime: 'edge' in svelte.config.js
2. Connect to a PlanetScale database as per the docs. Ensure previewFeature flag is enabled generator provider is `prisma-client-js`
3. Deploy to Vercel
4. Visit page that uses prisma client (either an API Route, or in a +server.ts file)
5. View Vercel Logs and see errors from Prisma Client

### Expected behavior

Prisma Client should not throw an error when being used in a Vercel edge function if middleware is enabled. An alternative solution to `export const runtime = 'edge'` is needed so that frameworks such as Svelte don't falsely flag an error with the PrismaClient when there actually isn't an error.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters"", ""fullTextIndex"", ""fullTextSearch""]
}

datasource db {
  provider     = ""mysql""
  url          = env(""DATABASE_URL"")
  relationMode = ""prisma""
}

model Category {
  id Int @id @default(autoincrement())

  courses Course[]

  imgHref String @map(""img_href"") @db.Text
  title   String @unique

  @@map(""categories"")
}

model Course {
  id Int @id @default(autoincrement())

  category           Category         @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  courseProgressions CourseProgress[]
  instructor         User             @relation(fields: [instructorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lessons            Lesson[]
  organization       Organization?    @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  categoryId           Int     @map(""category_id"")
  currentPrice         Decimal @map(""current_price"")
  description          String  @db.Text
  difficulty           String
  estimatedTimeHours   Int     @map(""estimated_time_hours"")
  estimatedTimeMinutes Int     @map(""estimated_time_minutes"")
  imgHref              String  @map(""img_href"")
  instructorId         Int     @map(""instructor_id"")
  lessonCount          Int     @map(""lesson_count"")
  organizationId       Int?    @map(""organization_id"")
  originalPrice        Decimal @map(""original_price"")
  ratingAverage        Float   @map(""rating_average"")
  ratingCount          Int     @map(""rating_count"")
  title                String  @db.Text

  @@index([categoryId])
  @@index([instructorId])
  @@index([organizationId])
  @@fulltext([title])
  @@fulltext([title, description])
  @@map(""courses"")
}

enum ContentType {
  VIDEO
  TEXT
  QUIZ
}

model CourseContent {
  id Int @id @default(autoincrement())

  contentType ContentType @map(""content_type"")

  authorId Int     @map(""author_id"")
  content  Json
  lessonId Int?    @map(""lesson_id"")
  Lesson   Lesson? @relation(fields: [lessonId], references: [id])

  @@index([authorId])
  @@index([lessonId])
  @@map(""course_contents"")
}

model CourseProgress {
  course Course @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  courseId         Int @map(""course_id"")
  lessonsCompleted Int @map(""lessons_completed"")
  userId           Int @map(""user_id"")

  @@id([userId, courseId])
  @@index([courseId])
  @@index([userId])
  @@map(""course_progresions"")
}

model Lesson {
  id Int @id @default(autoincrement())

  course         Course?         @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  courseContents CourseContent[]

  courseId Int?   @map(""course_id"")
  title    String

  @@index([courseId])
  @@map(""lessons"")
}

model Organization {
  id Int @id @default(autoincrement())

  courses Course[]

  description String? @db.Text
  name        String  @db.Text
  User        User[]

  @@map(""organizations"")
}

model User {
  id Int @id @default(autoincrement())

  AuthUser           AuthUser?        @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  courses            Course[]
  courseProgressions CourseProgress[]
  organization       Organization?    @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  permissions        Permission[]

  areaCode       String? @map(""area_code"") @db.VarChar(5)
  authUserId     String? @unique @map(""auth_user_id"") @db.VarChar(30)
  bio            String? @db.Text
  city           String? @db.Text
  countryCode    String? @map(""country_code"") @db.VarChar(5)
  email          String  @unique
  name           String  @db.Text
  organizationId Int?    @map(""organization_id"")
  phoneNumber    String? @map(""phone_number"") @db.VarChar(15)
  photoUrl       String? @map(""photo_url"") @db.Text
  role           String  @default(""user"")
  state          String?

  @@index([authUserId])
  @@index([organizationId])
  @@map(""users"")
}

enum KeyType {
  CREDENTIAL_HASH
  OAUTH_TOKEN
}

model AuthKey {
  id String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  authUserId String  @map(""auth_user_id"") @db.VarChar(30)
  keyValue   String  @map(""key_value"")
  keyType    KeyType @map(""key_type"")

  @@index([authUserId])
  @@map(""auth_keys"")
}

model AuthSession {
  id String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  authUserId     String   @map(""auth_user_id"") @db.VarChar(30)
  expirationDate DateTime @map(""expiration_date"")

  @@index([authUserId])
  @@map(""auth_sessions"")
}

model AuthUser {
  id String @id @default(cuid()) @db.VarChar(30)

  authKeys     AuthKey[]
  authSessions AuthSession[]
  user         User?

  email String @unique

  @@map(""auth_users"")
}

model CsrfToken {
  token String @id @default(cuid()) @db.VarChar(30)

  expirationDate DateTime @map(""expiration_date"")

  @@map(""csrf_tokens"")
}

enum PermissionType {
  READ
  WRITE
  DELETE
}

enum ResourceType {
  COURSE
  LESSON
  USER
}

model Permission {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  permissionType PermissionType @map(""permission_type"")
  resourceId     Int            @map(""resouce_id"") // Eventually shift this to another table
  resourceType   ResourceType   @map(""resource_type"")
  userId         Int            @map(""user_id"")

  @@index([userId])
  @@map(""permissions"")
}
```


// src/lib/database/server/database.ts
```ts
import { DATABASE_URL } from '$env/static/private';
import { Client } from '@planetscale/database';
import { PrismaPlanetScale } from '@prisma/adapter-planetscale';
import { PrismaClient } from '@prisma/client';

const config = {
    url: DATABASE_URL
};

const client = new Client(config);
const adapter = new PrismaPlanetScale(client);
export const prisma = new PrismaClient({ adapter });
```

// An example API Route which uses prisma
// src/routes/api/courses/+server.ts

```ts
import { csrf } from '$lib/server/csrf';
import { prisma } from '$lib/server/database';

import type { RequestHandler } from './$types';

export const GET = (async ({ cookies }) => {
    await csrf.validateCookies(cookies);

    const coursesWithInstructors = await prisma.course.findMany({
        include: {
            instructor: true
        },
        take: 20
    });

    const unzippedCoursesWithInstructors: { course: Course; instructor: User }[] =
        coursesWithInstructors.map(({ instructor, ...course }) => ({
            course,
            instructor
        }));

    const json = JSON.stringify(unzippedCoursesWithInstructors);

    return new Response(json, {
        headers: {
            'cache-control': 'public, max-age=3600',
            'content-type': 'application/json;charset=UTF-8'
        }
    });
}) satisfies RequestHandler;
```


### Environment & setup

- OS: Edge Runtime (Vercel Edge Functions)
- Database: PlanetScale
- Node.js version: 18.X (Vercel)


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin
Operating System        : darwin
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/libquery_engine-darwin.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/.pnpm/@prisma+engines@5.11.0/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : driverAdapters, fullTextIndex, fullTextSearch
```
",,
2202141520,23588,Error: P1001: Can't reach database server at `MY-CONNECTION-STRING` (vercel | neon | supabase | railway),"### Bug description
![image](https://github.com/prisma/prisma/assets/91608646/5cd93593-38a9-4aee-906b-77cb312d2c65)


Hi there! I think there's a problem with prisma with serverless postgresql, I tried this on vercel postgres, supabase, railway and Neon and found this issue with all of mentioned services where it shows the same error as you can see in uploaded image. It happens very less with vercel postgres compared to others. How it gets resolved? well you need to sign in to the service dashboard and do something with databse either view some records or edit it doesn't matter you just need to interact with it and then come back to terminal and run any prisma command it will work fine. I never encountered the same with drizzle. So that's clearly something wrong with prisma and cold start of serverless postgres

### How to reproduce

There's no perticular way to reproduce it but It happens with Neon the most. So create a db with Neon and continue working on it (while all the browsers where neon is logged in are closed to make sure its not running in bg) and you'll get the exact same error when you fire prisma commands `db push/pull` or even `migrate dev`

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  unicode   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
```
```ts
// Add your code using Prisma Client
import { PrismaClient } from ""@prisma/client"";

declare global {
  namespace NodeJS {
    interface Global {}
  }
}
interface CustomNodeJsGlobal extends NodeJS.Global {
  prisma: PrismaClient;
}
declare const global: CustomNodeJsGlobal;

const prisma = global.prisma || new PrismaClient();

if (process.env.NODE_ENV === ""development"") global.prisma = prisma;

export default prisma;

```


### Environment & setup

prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.9.0
Studio                  : 0.499.0

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.9.0
Studio                  : 0.499.0
```
",,
2201876050,23587,`Prisma.getExtensionContext(this).$name` not typed correctly,"### Bug description

`Prisma.getExtensionContext(this).$name` returns a `string | undefined`. this is obviously not correct. it should be strongly typed as `Prisma.ModelName` at least. 

### How to reproduce

```ts
/** This extension will allow Prisma to include the modelType in all queries automatically
 *  This avoids having to manually include the modelType in every query
 *  This also avoids having to create the model types for each table.
 */
export const modelTypeExtension = Prisma.defineExtension({
    name   : 'modelType',
    result : {
        $allModels : {modelType : {compute() { return Prisma.getExtensionContext(this).$name}}},
    },
});
```
typed as `$name ?: string | undefined`.
![image](https://github.com/prisma/prisma/assets/19929553/3738c0e8-022c-4f96-9b1d-f99586675927)



### Expected behavior

the type of `$name` should be **at least** `Prisma.ModelName`, but ideally it should automatically be typed to the modelname when used in `$allModels`

currently typed as `$name ?: string | undefined`.
expected typed as `$name : {ModelName}`.

### Prisma information

.

### Environment & setup

.

### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v18.19.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```",,
2200858890,23583,interactive transactions with extended client for RLS in postgres causes blocking queries in postgres,"We are implementing RLS and we decided to do a test before actually applying any polices. So we extended the prisma client and ran our code in our services with the new client.
We started noticing some odd blocking behavior that didn't exist before. When we investigated further it looks like the extending prisma client is executing parts of interactive
transactions within separate transactions only when we have extended the the model and override `query: {
  $allModels: {`
  If we use the doNothing version that extends the client but doesn't actually do any work everything works as expected.

### How to reproduce

1. Within a transaction do a select for update like the example code that also does an update on the record it has selected
2. Insert a record with a null processed date to cause the code to find a row
3. Run this query in postgres to find blocked queries 
```
SELECT
    activity.pid,
    activity.usename,
    activity.query,
    blocking.pid AS blocking_id,
    blocking.query AS blocking_query
FROM pg_stat_activity AS activity
         JOIN pg_stat_activity AS blocking ON blocking.pid = ANY(pg_blocking_pids(activity.pid));
```

If you have 10 records that all get pulled at the same time you will see 10 update queries that are blocked now.

### Expected behavior

Extended client should behave the same as the regular client. Within the same transaction I should be able to update rows I pulled out with a row lock. The behavior I am seeing from prisma makes me believe these queries are running in separate transactions when we have extended the client.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""linux-arm64-openssl-1.1.x""]
}

generator types {
  provider = ""prisma-generator-types""
  output   = ""../../../client/src/interfaces/schema.ts""
}

datasource db {
  provider = ""postgresql""
  url      = env(""PORTAL_DB_URL"")
}

model Notification {
  id                           Int       @id @default(autoincrement())
  userId                       Int       @map(""user_id"")
  content                      String?   @db.VarChar
  toAddress                    String    @map(""to_address"") @db.VarChar
  fromAddress                  String    @map(""from_address"") @db.VarChar
  subject                      String?   @db.VarChar
  processedDate                DateTime? @map(""processed_date"") @db.Timestamptz(6)
  createdDate                  DateTime? @default(now()) @map(""created_date"") @db.Timestamptz(6)
  updatedDate                  DateTime? @updatedAt @map(""updated_date"") @db.Timestamptz(6)
  deliveryId                   String?   @map(""delivery_id"") @db.VarChar
  notificationDeliveryStatusId Int       @map(""notification_delivery_status_id"")
  notificationMethodId         Int       @map(""notification_method_id"")

  @@map(""notification"")
}

```

prisma-client
```ts
import {PrismaClient, Prisma} from '@prisma/client';

/**
 * We expose a single Prisma client so that we do not have multiple connection pools. This will limit us to exactly 1
 * connection pool.
 * @see https://github.com/prisma/prisma/issues/1983
 */
// you can use this to see the actual PSQL queries that prisma is running
export const prisma = new PrismaClient({
    log: ['info', 'warn', 'error'],
    // log: ['query', 'info', 'warn', 'error'],
    transactionOptions: {
        timeout: 60000,
    },
});

/**
 * This function is used to bypass the RLS policies for a given transaction. Use carefully
 */
export const bypassRLS = () =>
    Prisma.defineExtension((iprisma) =>
        iprisma.$extends({
            query: {
                $allModels: {
                    async $allOperations({args, query}) {
                        const [, result] = await iprisma.$transaction([
                            iprisma.$executeRaw`SELECT set_config('app.bypass_rls', 'on', TRUE)`,
                            query(args),
                        ]);
                        return result;
                    },
                },
            },
        })
    );

export const doNothing = () =>
    Prisma.defineExtension((iprisma) =>
        iprisma.$extends({})
    );

/**
 * This function sets our tenant id for the transaction, this allows our RLS policies to work.
 * @param tenantId
 */
export const forTenant = (tenantId: number) =>
    Prisma.defineExtension((iprisma) =>
        iprisma.$extends({
            query: {
                $allModels: {
                    async $allOperations({args, query}) {
                        const [, result] = await iprisma.$transaction([
                            iprisma.$executeRaw`SELECT set_config('app.tenant_id', '${tenantId}', TRUE)`,
                            query(args),
                        ]);
                        return result;
                    },
                },
            },
        })
    );

export const getDbClient = (tenantId: number) =>
    // type cast needed because of https://github.com/prisma/prisma/issues/19949
    prisma.$extends(forTenant(tenantId)) as typeof prisma;

export const getDbClientBypassRLS = () =>
    // type cast needed because of https://github.com/prisma/prisma/issues/19949
    prisma.$extends(bypassRLS()) as typeof prisma;

export const getDBClientNothing = () =>
    // type cast needed because of https://github.com/prisma/prisma/issues/19949
    prisma.$extends(doNothing()) as typeof prisma;
export default prisma;
```

email poller
```ts
import {from, interval, Subscription, switchMap} from 'rxjs';
import {getDBClientNothing} from './prisma-client';

import {
    exponentialBackoffRetry,
    getRecordsOfType,
    markNotificationAsBounced,
    markNotificationInitiated,
} from './poll-utils';

const NOTIFICATIONS_POLL_DELAY_MS = 2000;
const NOTIFICATIONS_POLL_BATCH_SIZE = 500;
export default function setupEmailSubscriber(): Subscription {

    console.log(
        `Listening for Email Notifications ${NOTIFICATIONS_POLL_DELAY_MS}ms ${NOTIFICATIONS_POLL_BATCH_SIZE}`
    );

    const processRecords$ = interval(NOTIFICATIONS_POLL_DELAY_MS).pipe(
        switchMap(() =>
            from(
                getDbClientBypassRLS().$transaction(async (tx) => {
                    console.log('email transaction');
                    const records = await getRecordsOfType(
                        1,
                        tx
                    );

                    const trySendEmail = async (record: any) => {
                        try {
                            await markNotificationInitiated(
                                1,
                                tx,
                                record.id
                            );

                            if (record.content && record.subject) {
                                console.log(`Sending email to ${record.to_address}`);
                            }
                        } catch (e) {
                            console.log(`Email Polling Error: ${e}`);
                            // TODO: handle failed messages / pick a status or retry
                            await markNotificationAsBounced(record.id, getDbClientBypassRLS());
                        }
                    };

                    await Promise.all(records.map(trySendEmail));
                    console.log('email transaction done');
                })
            )
        ),
        exponentialBackoffRetry()
    );

    return processRecords$.subscribe();
}
```
poll-utils
```ts
import {retry, timer} from 'rxjs';
import {Prisma} from '@prisma/client';

import {
    Notification,
} from '@prisma/client';

type CamelToSnakeCase<S extends string> = S extends `${infer T}${infer U}`
    ? `${T extends Capitalize<T> ? '_' : ''}${Lowercase<T>}${CamelToSnakeCase<U>}`
    : S;

export type KeysToSnakeCase<T> = {
    [K in keyof T as CamelToSnakeCase<string & K>]: T[K];
};

export interface SnakeCaseNotification extends KeysToSnakeCase<Notification> {
}


export const markNotificationInitiated = async (
    notificationMethod: number,
    tx: Prisma.TransactionClient,
    recordId: number,
    deliveryId?: string
): Promise<void> => {
    console.log(`Marking notification as initiated: ${recordId}`);
    await tx.notification.updateMany({
        where: {
            id: recordId,
        },
        data: {
            notificationMethodId: notificationMethod,
            processedDate: new Date(),
            notificationDeliveryStatusId: 1,
            deliveryId,
        },
    });
    console.log(`Notification marked as initiated: ${recordId}`);
};

// TODO: we will want this to retry on bounce
export const markNotificationAsBounced = async (
    recordId: number,
    tx: Prisma.TransactionClient
): Promise<void> => {
    console.log(`Marking notification as bounced: ${recordId}`);
    await tx.notification.updateMany({
        where: {
            id: {
                in: [recordId],
            },
        },
        data: {
            processedDate: new Date(),
            notificationDeliveryStatusId: 2,
        },
    });
    console.log(`Notification marked as bounced: ${recordId}`);
};

export const getRecordsOfType = async (
    notificationMethod: number,
    tx: Prisma.TransactionClient
): Promise<SnakeCaseNotification[]> => {
    console.log(`Polling for ${notificationMethod} notifications`);
    const records = await tx.$queryRaw<SnakeCaseNotification[]>`
        SELECT *
        FROM global.notification
        WHERE processed_date IS NULL
          AND notification_method_id = ${notificationMethod}
        ORDER BY created_date ASC
        LIMIT 500 FOR UPDATE SKIP LOCKED;
    `;
    console.log(
        `Found notifications ${records.length} for type ${notificationMethod}`
    );
    return records;
};

export const exponentialBackoffRetry = (count: number = 5) =>
    retry({
        count,
        resetOnSuccess: true,
        delay: (err, currentRetry) => {
            const delayMs = 2 ** currentRetry * 1000;
            console.log(`Error processing notification: ${err}`);
            console.log(`Retrying notification poll with delay ${delayMs}ms`);
            return timer(delayMs);
        },
    });
```

### Environment & setup

- OS: MacOS
- Database: Postgres version: 15.4
- Node.js version: v16.16.0


### Prisma Version

```
5.11.0
```
",,
2198908309,23573,2x worse performance when running raw queries in Prisma vs `pg`,"### Bug description

We've been having trouble with bad performance with our database queries. We have spent multiple weeks on this issue on implementing tracing, checking Postgres performance, rewriting/reducing our queries, etc. but have only had marginal improvements in performance. The only piece of our stack which we haven't changed much is Prisma, so I wrote a simple benchmark script comparing Prisma's performance with the `pg` library.

I took one of our worst performing Graphql queries and wrote out all the raw SQL queries the corresponding resolver and nested resolvers make. There are about 300 individual SELECT queries that are executed in chunks, and each chunk is executed concurrently. With `pg` I am creating a connection pool of size 40. And with Prisma, I am using `$queryRawUnsafe` to execute the query and setting `?connection_limit=40`.

The expectation would be that query performance is close to equivalent between the two, but the difference is quite spectacular with the Prisma benchmark taking **twice** as long as `pg`.

`pg`:
```
$ node benchmark_pg.mjs
Concurrency: 10
Execution time: 2.1500 seconds
All queries executed successfully.

Concurrency: 20
Execution time: 1.2770 seconds
All queries executed successfully.

Concurrency: 40
Execution time: 0.7930 seconds
All queries executed successfully.

Concurrency: 80
Execution time: 0.7440 seconds
All queries executed successfully.

Concurrency: 160
Execution time: 0.7220 seconds
All queries executed successfully.
```

Prisma:
```
$ node benchmark_prisma.mjs
Concurrency: 10
Execution time: 4.3470 seconds
All queries executed successfully.

Concurrency: 20
Execution time: 2.3690 seconds
All queries executed successfully.

Concurrency: 40
Execution time: 1.4500 seconds
All queries executed successfully.

Concurrency: 80
Execution time: 1.4120 seconds
All queries executed successfully.

Concurrency: 160
Execution time: 1.3750 seconds
All queries executed successfully.
```

I expect the likely issue is in how we configure Prisma, otherwise this big of a performance drop is unexpected. What is the problem here? We would like the benefits of Prisma's ORM but the performance drop is too large for us.

### How to reproduce

The benchmark script looks like so:

```typescript
import fs from 'fs'
import pg from 'pg'

function createPool() {
  const pool = new pg.Pool({
    user: 'postgres',
    host: 'X.X.X.X',
    database: 'stagingDb',
    password: '...',
    port: 5432,
    max: 40,
  })
  return pool
}

// Function to read SQL queries from a file
function readSqlFromFile(filePath) {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, { encoding: 'utf-8' }, (err, data) => {
      if (err) reject(err)
      else resolve(data)
    })
  })
}

// Function to execute a chunk of queries concurrently
async function executeQueryChunk(pool, queries) {
  await Promise.all(
    queries.map((query) => {
      if (query) {
        return pool.query(query)
      }
      return Promise.reject()
    })
  )
}

// Function to execute your queries
async function executeQueries(filePath, concurrencyLimit) {
  console.log('\nConcurrency:', concurrencyLimit)

  const pool = createPool()

  try {
    const queriesString = await readSqlFromFile(filePath)
    const queries = queriesString
      .split(';') // Splitting queries by ';'
      .map((query) => query.trim())
      .filter((query) => query) // Ensure no empty queries

    const start = Date.now()

    for (let i = 0; i < queries.length; i += concurrencyLimit) {
      // Create a chunk of queries to run concurrently
      const queryChunk = queries.slice(i, i + concurrencyLimit)
      await executeQueryChunk(pool, queryChunk)
    }

    const end = Date.now()
    console.log(`Execution time: ${((end - start) / 1000).toFixed(4)} seconds`)

    console.log('All queries executed successfully.')
  } catch (error) {
    console.error('Error executing queries:', error)
  } finally {
    await pool.end() // Close the pool
  }
}

const concurrencyLimits = [10, 20, 40, 80, 160]
for (const limit of concurrencyLimits) {
  await executeQueries('./benchmark.sql', limit)
}
```

And the corresponding changes for the Prisma test script is:

```typescript
import { PrismaClient } from '@prisma/client'

function createClient() {
  const client = new PrismaClient({
    datasources: {
      db: {
        url: 'postgresql://postgres:...@X.X.X.X:5432/stagingDb?connection_limit=40',
      },
    },
  })
  return client
}

// Function to execute a chunk of queries concurrently
async function executeQueryChunk(client, queries) {
  await Promise.all(
    queries.map((query) => {
      if (query) {
        return client.$queryRawUnsafe(query)
      }
      return Promise.reject()
    })
  )
}

// ...

const client = createClient()
await client.$connect()
```

### Expected behavior

_No response_

### Prisma information

```
datasource db {
  provider = ""postgresql""
  url      = env(""PRISMA_POSTGRES_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins"", ""tracing""]
}

// bunch of model and enum definitions ...
```

### Environment & setup

- Database: PostgreSQL 12.17
- Node.js version: v18.12.1


### Prisma Version

```
npx prisma -v
Environment variables loaded from .env
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.12.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
Preview Features        : tracing, relationJoins
```
",,
2198365755,23569,migrate: Add support for renaming enum variants,"## Problem

I renamed an enum value in my Prisma schema:

```prisma
enum ExampleEnum {
  // before: FOO
  // after:
  BAR

  @@map(""example_enum"")
}
```

and Prisma generated the following unsafe migration:

```sql
/*

  Warnings:

  - The values [FOO] on the enum `example_enum` will be removed. If these variants are still used in the database, this will fail.

*/
-- AlterEnum
BEGIN;
CREATE TYPE ""example_enum_new"" AS ENUM ('BAR');
ALTER TABLE ""example_table"" ALTER COLUMN ""example_column"" TYPE ""example_enum_new"" USING (""type""::text::""example_enum_new"");
ALTER TYPE ""example_enum"" RENAME TO ""example_enum_old"";
ALTER TYPE ""example_enum_new"" RENAME TO ""example_enum"";
DROP TYPE ""example_enum_old"";
COMMIT;
```

As the warning states, this just won't work if there are any rows with the old enum value. So not a terribly helpful migration.

## Suggested solution

Postgres these days makes this way easier, and supports existing data:

```sql
ALTER TYPE example_enum RENAME VALUE 'FOO' TO 'BAR';
```

Looks like this was added in Postgres 10, so over 6 years ago now:

https://www.postgresql.org/docs/10/sql-altertype.html

## Alternatives

None considered.

## Additional context

No add'l context.
",,
2197967499,23567,build error on windows with custom output in generator client,"### Bug description

build error when using custom output in generator client

```sh
Creating an optimized production build ...
glob error [Error: EPERM: operation not permitted, scandir 'C:\Users\username\Application Data'] {
  errno: -4048,
  code: 'EPERM',
  syscall: 'scandir',
  path: 'C:\\Users\\username\\Application Data'
}
Failed to compile.

Error: EPERM: operation not permitted, scandir 'C:\Users\username\Application Data'
```

build success in linux
build success if not using custom output

### How to reproduce

1. create project
2. init prisma
3. change `schema.prisma`

`src\prisma\db-1\schema.prisma`

```ts
generator client {
  provider = ""prisma-client-js""
  output   = ""./generated/client""
}
```

`src\prisma\db-2\schema.prisma`

```ts
generator client {
  provider = ""prisma-client-js""
  output   = ""./generated/client""
}
```

5. run build
```sh
pnpm build
```

### Expected behavior

build success

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  output   = ""./generated/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```


### Environment & setup

- OS: Windows 11
- Database: PostgreSQL
- Node.js version: v20.11.1


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.11.1
```
",,
2196036210,23545,"`ERROR: P3006 syntax error at or near ""yarn""` when `prisma migrate dev` with Supabase ","### Bug description

It always was a struggle to set up Supabase with Prisma but I used to follow [this tutorial](https://medium.com/@ngoctranfire/using-prisma-with-supabase-row-level-security-and-multi-schema-7c53418adba3).
Recently, I tried creating a new project with supabase and prisma from scratch and I keep having this new bug when I arrive on the `prisma migrate dev`:
```cmd
Migration `0_init_prisma_db_pull` failed to apply cleanly to the shadow database. 
Error:
ERROR: syntax error at or near ""yarn""
   0: schema_core::state::DevDiagnostic
             at schema-engine/core/src/state.rs:267
```

I tried on a local supabase database, in the cloud, nothing changes.

### How to reproduce

1. Set up a new Supabase database (locally or in the cloud)
2. Follow the steps describe in [the Medium article.](https://medium.com/@ngoctranfire/using-prisma-with-supabase-row-level-security-and-multi-schema-7c53418adba3) 
3

### Expected behavior

_No response_

### Prisma information

Prisma schema (without all of the Supabase auth schemas):
```prisma
generator client {
    provider        = ""prisma-client-js""
    previewFeatures = [""multiSchema""]
    binaryTargets   = [""native""]
}

datasource db {
    provider  = ""postgresql""
    url       = env(""SUPABASE_DB_URL"")
    directUrl = env(""SUPABASE_DIRECT_URL"")
    schemas   = [""auth"", ""public""]
}
```

### Environment & setup

- Database: PostgreSQL on Supabase


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : Not found
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.6.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : multiSchema
```
",,
2195546333,23542,FindMany returns an empty array,"### Bug description

I'm trying to get the comments for a post from the database and I keep getting and empty array. 

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
 

#### Im using the same function to get the posts and its working but for some reason it does not work with the comments, returns an empty array. I can get the comments by Id without problem with findFirst though.

## Calling it on the page route
```
const { id } = params;
  const limit = 5;
  const take = 8;
  const skip = (limit - 1) * take;
 const { comments, metadata } = await getAllComments({
    take,
    skip,
    postId: id,
  });
 console.log(""comments"", comments);
```

### Expected behavior

It should return the database comments;

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env(""DATABASE_URL"")
}

model Post {
  id    String  @id @default(cuid())
  title String  @db.VarChar(255)
  body  String  @db.Text
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  coments Comment[]

  @@index([body])
}

model Comment {
  id   String @id @default(cuid())
  body String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([body])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  username      String?
  name          String?
  bithDate      DateTime?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default(""user"")
  bio           String?   @db.VarChar(160)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
```


## Here the function Im using to get the comments for a particular post
```export async function getAllComments(input: InputComment) {
  const { take, skip, postId } = input;

  const comments = await db.comment.findMany({
    where: { postId: postId },
    take, 
    skip,
    orderBy: { createdAt: ""desc"" },
  });
  const total = await db.post.count();

  const hasMore = skip + take < total;
  const totalPages = Math.ceil(total / take);
  const metadata = { hasMore, totalPages };

  return { comments, metadata };
}
```
### tried this and does not work either
```
const comments = ctx.db.comment.findMany({
        where: { id: input.postId },
        orderBy: { createdAt: ""desc"" },
        include: { user: true },
      });
      return comments;
    }),
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->
node --version
`v18.17.0`
macOS Version `Sonoma 14.2.1` 
DB Supabase postgresql
`next"": ""^14.1.0`

### Prisma Version

```
prisma version: ""^5.10.2
```
",,
2195057351,23538,Cannot find module '[...]/node_modules/@prisma/client/ultron' ,"### Bug description

I am getting the following error when I upgrade from Prisma v5.8.1 to v5.11.0 (I tried v5.9.1 and it failed too) and try to build my code:

![image](https://github.com/prisma/prisma/assets/8367325/071f35bf-b134-4fb6-a1fd-2c116c2eeaf0)

Seems like import works for type checking but when building server side of pages using NextJS it throws ""cannot find prisma client"" module.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

Build to complete with newest version

### Prisma information

```prisma
// Add your schema.prisma
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""fullTextSearch""]
  output          = ""../../../../node_modules/@prisma/client/ultron""
  binaryTargets   = env(""PRISMA_BINARY_TARGET"")
}
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: Node v20.8.1
- NextJS v12.3.4
- TypeScript v4.9.5

### Prisma Version

Works:
```
prisma                  : 5.8.1
@prisma/client          : 5.8.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.8.1
Query Engine (Node-API) : libquery-engine 78caf6feeaed953168c64e15a249c3e9a033ebe2 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 78caf6feeaed953168c64e15a249c3e9a033ebe2 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.8.1-1.78caf6feeaed953168c64e15a249c3e9a033ebe2
Default Engines Hash    : 78caf6feeaed953168c64e15a249c3e9a033ebe2
Studio                  : 0.497.0
```

Doesn't work:
```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.8.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```",,
2194918071,23536,Cloudflare Pages + Neon + Remix not working ,"### Bug description

I tested the new adapter for Neon databases, but I'm not able to start the Remix dev server. The error message: 
```sh
TypeError: WebAssembly.Instance(): Argument 0 must be a WebAssembly.Module
at null.<anonymous> (file:///…/node_modules/@prisma/client/runtime/wasm.js:11:895)
      at async Object.loadLibrary (file:///…/node_modules/@prisma/client/runtime/wasm.js:11:985)
      at async gt2.loadEngine (file:///…/node_modules/@prisma/client/runtime/wasm.js:11:3169)
      at async gt2.instantiateLibrary (file:///…/node_modules/@prisma/client/runtime/wasm.js:11:2767)
      at async gt2.start (file:///…/node_modules/@prisma/client/runtime/wasm.js:11:4565)
      at async gt2.request (file:///…/node_modules/@prisma/client/runtime/wasm.js:11:6227)
      at async Object.singleLoader (file:///…/node_modules/@prisma/client/runtime/wasm.js:22:5571)
      at async or2.request (file:///…/node_modules/@prisma/client/runtime/wasm.js:22:6063)
      at async f (file:///…/node_modules/@prisma/client/runtime/wasm.js:27:10798)
      at async loader (file:///…/app/routes/_index.tsx:31:17) {
    clientVersion: '5.11.0'
  }
```

### How to reproduce

1. Create a new Remix + Cloudflare Pages stack: `npx create-remix@latest --template remix-run/remix/templates/cloudflare-pages`
2. Setup Prisma following the Quickstart guide: https://www.prisma.io/docs/getting-started/quickstart
3. Setup Prisma / Neon: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-cloudflare#neon
4. Create a Neon database and set `DATABASE_URL` in `.dev.vars`
6. Run `npm run dev` and open a route with Prisma client

### Expected behavior

The Prisma client works in Remix loader and can connect to the database. 

### Prisma information

Schema:
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

Remix route example:
```ts
import type { LoaderFunctionArgs, MetaFunction } from ""@remix-run/cloudflare"";
import { PrismaClient } from ""@prisma/client"";
import { PrismaNeon } from ""@prisma/adapter-neon"";
import { Pool } from ""@neondatabase/serverless"";

interface Environment {
  DATABASE_URL: string;
}

export const meta: MetaFunction = () => {
  return [
    { title: ""New Remix App"" },
    { name: ""description"", content: ""Welcome to Remix!"" },
  ];
};

export async function loader({ context }: LoaderFunctionArgs) {
  const neon = new Pool({
    connectionString: (context.env as Environment).DATABASE_URL,
  });
  const adapter = new PrismaNeon(neon);
  const prisma = new PrismaClient({ adapter });

  const users = await prisma.user.findMany();

  return { users };
}

export default function Index() {
  return (
    <div style={{ fontFamily: ""system-ui, sans-serif"", lineHeight: ""1.8"" }}>
      <h1>Welcome to Remix</h1>
      <ul>
        <li>
          <a
            target=""_blank""
            href=""https://remix.run/tutorials/blog""
            rel=""noreferrer""
          >
            15m Quickstart Blog Tutorial
          </a>
        </li>
        <li>
          <a
            target=""_blank""
            href=""https://remix.run/tutorials/jokes""
            rel=""noreferrer""
          >
            Deep Dive Jokes App Tutorial
          </a>
        </li>
        <li>
          <a target=""_blank"" href=""https://remix.run/docs"" rel=""noreferrer"">
            Remix Docs
          </a>
        </li>
      </ul>
    </div>
  );
}
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL (Neon)
- Node.js version: v21.6.1


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : driverAdapters
```
",,
2194620669,23534,Prisma Client error codes should be an enum value,"## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
Exceptions and errors thrown by Prisma Client can be handled by checking the `.code` property as described in the [documentation](https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting/handling-exceptions-and-errors). The error code itself is a somewhat cryptic value (e.g., `P2002`), which means that I always need to look up its meaning in the [error reference] (https://www.prisma.io/docs/orm/reference/error-reference). For example, the code  `P2002` means that there was a ""unique constraint failed error"".

## Suggested solution

<!-- A clear and concise description of what you want to happen. -->
It would be helpful if the `.code` property actually references an enum with descriptive values, e.g.
```typescript
enum PrismaClientKnownRequestErrorCode {
  UNIQUE_CONSTRAINT_FAILED = 'P2002',
  // ... all the other error codes
}
```

In my code, I could then do something like
```typescript
if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === PrismaClientKnownRequestErrorCode.UNIQUE_CONSTRAINT_FAILED) {
  // handle unique constraint failed error
}
```

## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->
My current solution is to create my own enum. But I think it would be nice if this was part of the library.

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->

I would be happy to send a pull request!
",,
2191532593,23525,Metric `prisma_pool_connections_idle` reports faulty high number,"### Bug description

The metric `prisma_pool_connections_idle` reports a faulty high number of connections.

We defined a connection-pool-size of 25 connections, but `prisma_pool_connections_idle` reports over 2k idle connections after running the application for about 3 days:

```
# HELP prisma_client_queries_total The total number of Prisma Client queries executed
# TYPE prisma_client_queries_total counter
prisma_client_queries_total 1290237
# HELP prisma_datasource_queries_total The total number of datasource queries executed
# TYPE prisma_datasource_queries_total counter
prisma_datasource_queries_total 5560071
# HELP prisma_pool_connections_closed_total The total number of pool connections closed
# TYPE prisma_pool_connections_closed_total counter
prisma_pool_connections_closed_total 2439
# HELP prisma_pool_connections_opened_total The total number of pool connections opened
# TYPE prisma_pool_connections_opened_total counter
prisma_pool_connections_opened_total 2464
# HELP prisma_client_queries_active The number of currently active Prisma Client queries
# TYPE prisma_client_queries_active gauge
prisma_client_queries_active 0
# HELP prisma_client_queries_wait The number of datasource queries currently waiting for a free connection
# TYPE prisma_client_queries_wait gauge
prisma_client_queries_wait 35
# HELP prisma_pool_connections_busy The number of pool connections currently executing datasource queries
# TYPE prisma_pool_connections_busy gauge
prisma_pool_connections_busy 1
# HELP prisma_pool_connections_idle The number of pool connections that are not busy running a query
# TYPE prisma_pool_connections_idle gauge
prisma_pool_connections_idle 2463
# HELP prisma_pool_connections_open The number of pool connections currently open
# TYPE prisma_pool_connections_open gauge
prisma_pool_connections_open 25
```

![Screenshot 2024-03-18 084629](https://github.com/prisma/prisma/assets/57619316/89dc7bdf-521d-40fe-9caa-94ffd9764aba)

Currently it seems like closed connections are not removed from the metric `prisma_pool_connections_idle` correctly.

After restarting the application, the issue occours again

### How to reproduce

?

### Expected behavior

`prisma_pool_connections_idle` should report the correct number of currently idle connections

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""metrics"", ""tracing""]
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
}

model User {
  userId   String        @id @db.VarChar(8)

  //...
}

model Message {
  systemId     String @db.NVarChar(100)
  messageId    String @db.NVarChar(100)

  //...

  @@id([systemId, messageId])
}

model UserMessage {
  systemId  String @db.NVarChar(100)
  messageId String @db.NVarChar(100)

  userId String @db.VarChar(8)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  //...

  @@id([systemId, messageId, userId])
}
```

```ts
export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy
{
  constructor() {
    super();
  }

  async onModuleInit() {
    await this.$connect();
  }

  async onModuleDestroy() {
    await this.$disconnect();
  }
}
```

e.g.
```ts
  async getMessagesForSystem(systemId: string) {
    return this.prismaService.$transaction(
      async (tx) =>
        await tx.message.findMany({
          where: { systemId },
        }),
      { isolationLevel: Prisma.TransactionIsolationLevel.ReadUncommitted },
    );
  }
```
```ts
  private async saveMessageInDb(message: DataMessage) {
    await this.prismaService.message.create({
      data: {
        systemId: message.systemId,
        messageId: message.messageId,
        //...
      },
    });
  }
```

### Environment & setup

- OS: alpine (docker-image based on `node:lts-alpine`)
- Database: SQL-Server (Azure SQL Database Managed Instance)
- Node.js version: v20.11.1

### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : linux-musl-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : metrics, tracing
```
",,
2190420393,23520,Schema Drift with no changes,"### Bug description

I've been working with `multiSchema` and thought I'd managed to get everything happy, but now I've ended up in a situation where I get the dreaded Schema Drift message and asks me to reset the db, but doesn't list any changes.

```sh
> yarn prisma migrate dev --create-only
Prisma schema loaded from schema.prisma
Datasource ""db"": PostgreSQL database ""postgres"", schemas ""auth, public, public_ro"" at ""aws-0-ap-southeast-2.pooler.supabase.com:5432""

Drift detected: Your database schema is not in sync with your migration history.

The following is a summary of the differences between the expected database schema given your migrations files, and the actual schema of the database.

It should be understood as the set of changes to get from the expected schema to the actual schema.

✔ We need to reset the following schemas: ""auth, public, public_ro"" at ""aws-0-ap-southeast-2.pooler.supabase.com:5432""
Do you want to continue? All data will be lost. … no

Reset cancelled.
```

As far as Prisma `migrate diff` is concerned, we're actually all good.

```sh
> yarn prisma migrate diff --from-schema-datamodel ./schema.prisma --to-schema-datasource ./schema.prisma --script
-- This is an empty migration.
```

Because there is no changeset listed, I'm unsure what drift has occurred.

### How to reproduce


yarn prisma migrate dev --create-only



### Expected behavior

Migration should be created 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider        = ""prisma-client-js""
  output          = ""./__generated__/prisma""
  previewFeatures = [""multiSchema"", ""tracing""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""APP_DATABASE_URL_RLS"")
  directUrl = env(""APP_DATABASE_URL_ADMIN"")
  schemas   = [""public"", ""public_ro"", ""auth""]
}

// Supabase Auth Models

// Our Public Models
```


### Environment & setup

- OS: ubuntu / wsl2
- Database: PostgreSQL
- Node.js version: 20.9.0


### Prisma Version

```
5.11.0
```",,
2190409163,23519,Date object is actually string,"### Bug description

MongoDB: Typescript suggests dates are of JS Dates but they are actually strings.

### How to reproduce

Schema: `myDateField DateTime`

Value in MongoDB: `{ ""$date"": ""2024-03-01T00:00:27.000Z"" }`

In JS:

```js
const obj = await prisma.coll.findFirst({})
typeof obj.myDateField // string, it should be Date, displayed as [object Object]
```

### Expected behavior

Type should be JS Date

### Prisma information

Actual schema is a bit more complex:

```prisma
model Board {
  // ...
  columns Column[]
}

type Column {
  // ...
  cards Card[]
}

type Card {
  // ...
  createdAt DateTime
}
```

### Environment & setup

- OS: Windows
- Database: MongoDB
- Node.js version: v20.8.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.8.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2189921464,23517,"Tokio panics when accessing large database with Studio: ""internal error: entered unreachable code""","### Bug description

Tokio panics when opening a 16k+ row model.

### How to reproduce

1. Have a 16k row model
2. Open it with Prisma Studio
3. Observe Tokio panic


### Expected behavior

Tokio doesn't panic

### Prisma information

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = ""file:./database.sqlite""
}

model Element {
  id           String  @id @default(uuid())
  name         String  @unique
  emoji        String
  crafts       Craft[] @relation(name: ""CraftElements"")
  outputCrafts Craft[] @relation(name: ""CraftOutput"")
}

model Craft {
  id        String    @id @default(uuid())
  elements  Element[] @relation(name: ""CraftElements"")
  output    Element   @relation(name: ""CraftOutput"", fields: [elementId], references: [id])
  elementId String
}
```

The code is just a recursive function that pushes lots of data to the DB

### Environment & setup

- OS: Linux Mint 21.3
- Database: SQLite
- Node.js version: `v18.18.2`


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.18.2
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2189678284,23513,Postgres PL/pgSQL migration fails to apply cleanly to shadow database (syntax error),"### Bug description

I wrote a migration with `prisma migrate dev --create-only` that needs and uses [PL/pgSQL](https://www.postgresql.org/docs/current/plpgsql.html) to make a [settings change to the current database](https://stackoverflow.com/questions/9331376/alter-database-on-a-current-db-without-explicit-db-name) (since our DB names vary across environments):

```sql
-- Edit: I actually had some comments here I should include for completeness
-- (since the syntax error says `at or near ""-""`).

-- And another comment following a blank line.
DO $$
BEGIN
   EXECUTE 'ALTER DATABASE ' || current_database() || ' SET default_transaction_isolation = ''serializable''';
END
$$;
```

This migration applied cleanly both locally and in prod using `prisma migrate deploy`.

However, every time I call `prisma migrate dev` or even `prisma migrate dev --create-only` _now / going forward_, the command fails with the following error:

```
Error: P3006

Migration `20240315214856_default_serializable_isolation_level` failed to apply cleanly to the shadow database. 
Error:
ERROR: syntax error at or near ""-""
   0: schema_core::state::DevDiagnostic
             at schema-engine/core/src/state.rs:267
```

I've tried several things, including the nuclear `prisma migrate reset`, but still no dice. The migration consistently applies cleanly to the real DB and consistently fails to apply cleanly to the shadow DB.

I'm not configuring the shadow DB manually at all. I'm running Postgres locally in a Docker container, exposed over the normal port, etc.

Do migrations against the shadow DB not support PL/pgSQL? Do they not support `current_database()`? Why would either of these things be the case when the shadow DB should be Postgres itself too?

### How to reproduce

1. `prisma migrate dev --create-only`
2. Copy-paste that migration above
3. `prisma migrate deploy`
4. `prisma migrate dev`

### Expected behavior

`prisma migrate dev [--create-only]` runs successfully without error. The migration applies cleanly to the shadow database since it applied cleanly to the normal DB.

### Prisma information

`schema.prisma`:

```prisma
generator client {
  provider      = ""prisma-client-js""
  output        = ""./generated/client""
  binaryTargets = [""darwin-arm64"", ""native"", ""debian-openssl-1.1.x""] // debian-openssl-1.1.x is for Render
}

generator json {
  provider = ""prisma-json-types-generator""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"") // e.g. postgres://portola:portola@localhost:5432/portola_prod?sslmode=disable
}

// actual models, etc. omitted
```

### Environment & setup

- OS: macOS Sonoma 14.3.1
- Database: PostgreSQL 16
- Node.js version: v21.6.2


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.2
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2189595613,23509,Prisma,"### Bug description

$ npx prisma generate
Error: The default query engine type (Node-API, ""library"") is currently not supported for 32bit Node. Please set `engineType = ""binary""` in the ""generator"" block of your ""schema.prisma"" file (or use the environment variables ""PRISMA_CLIENT_ENGINE_TYPE=binary"" and/or ""PRISMA_CLI_QUERY_ENGINE_TYPE=binary"".)

this is the error that i'm getting after trying to initialize prisma/client. I'm not using 32bit Node.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2189532217,23508,PostgreSQL data type datetimetz inserts and updates fail via Prisma.,"### Bug description

Inserts, updates and upserts to a postgreSQL table fail with a Inconsistent Column error.

```
const upsertedContract = await prisma.contracts.upsert(
Inconsistent column data: Conversion failed: expected a datetime string in column 'contract_start_date', found 2024-03-15 00:00:00-06
    at In.handleRequestError (D:\api\node_modules\@prisma\client\runtime\library.js:122:6854)
    at In.handleAndLogRequestError (D:\api\node_modules\@prisma\client\runtime\library.js:122:6188)
    at In.request (D:\api\node_modules\@prisma\client\runtime\library.js:122:5896)
    at async l (D:\api\node_modules\@prisma\client\runtime\library.js:127:10871)
    at async main (D:\api\prisma\seeds\dev\seed.ts:220:30) {
  code: 'P2023',
  clientVersion: '5.11.0',
  meta: {
    modelName: 'contracts',
    message: ""Conversion failed: expected a datetime string in column 'contract_start_date', found 2024-03-15 00:00:00-06""
  }
}
```

### How to reproduce

1. Create a table via a prisma schema that includes a column with at DateTime data type and @db.Timestamptz(0) [note the number argument does not matter] like this:
    contract_start_date DateTime? @db.Timestamptz(0)
2. Generate and deploy the schema to the database
3. Create an insert, upsert, or update function to write a datetime value to the table.  You can also use the @updatedAt flag in the schema to have a prisma generated time stamp that will also fail.
4. Run the function.
5 Error: Inconsistent column data.

```
const upsertedContract = await prisma.contracts.upsert(
Inconsistent column data: Conversion failed: expected a datetime string in column 'contract_start_date', found 2024-03-15 00:00:00-06
    at In.handleRequestError (D:\api\node_modules\@prisma\client\runtime\library.js:122:6854)
    at In.handleAndLogRequestError (D:\api\node_modules\@prisma\client\runtime\library.js:122:6188)
    at In.request (D:\api\node_modules\@prisma\client\runtime\library.js:122:5896)
    at async l (D:\api\node_modules\@prisma\client\runtime\library.js:127:10871)
    at async main (D:\api\prisma\seeds\dev\seed.ts:220:30) {
  code: 'P2023',
  clientVersion: '5.11.0',
  meta: {
    modelName: 'contracts',
    message: ""Conversion failed: expected a datetime string in column 'contract_start_date', found 2024-03-15 00:00:00-06""
  }
}
```



### Expected behavior

DateTime stamp inserted or updated in the database.

### Prisma information

```prisma 
model contracts {
  contract_id String @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  client_id String? @db.Uuid
  contract_type_name_id String? @db.Uuid
  billing_cycle String? @db.VarChar(255)
  contracts_active Boolean?
  contract_start_date DateTime? @db.Timestamp(0)
  contract_end_date DateTime? @db.Timestamp(0)
  contract_billed_to_id String? @db.Uuid
  parent_billed_percentage Decimal? @db.Decimal
  program_fee Decimal? @db.Decimal
  coaching_rate Decimal? @db.Decimal
  coaching_billed_to_client_id String? @db.Uuid
  coaching_billed_percentage Int?
  calculation_rules String?
  billing_cadence String? @db.VarChar(255)
  setup_fee_billed_to_id String? @db.Uuid
  note String?
  last_modified_by String?
  updated_timestamp DateTime? @db.Timestamptz(6) // @updatedAt()
  daily_flat_fee Decimal? @db.Decimal
  monthly_coaching_fee Decimal? @db.Decimal
  monthly_content_fee Decimal? @db.Decimal
  monthly_flat_fee Decimal? @db.Decimal
  monthly_service_fee Decimal? @db.Decimal
  setup_fee Decimal? @db.Decimal

  fk_assessments_contract assessments_contract[]
  //Billings associated with a contract
  billings billing[]    // fk_billing
  coachingBilledToClient clients? @relation(""coachingBilledToClient"", fields: [coaching_billed_to_client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction)  // fk_clients_coaching_billed_to_client_idToclients
  fk_clients_contract_billed_to_idToclients clients? @relation(""fk_contracts_contract_billed_to_idToclients"", fields: [contract_billed_to_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction)
  fk_clients_contracts_setup_fee_billed_to_idToclients clients? @relation(""fk_contracts_setup_fee_billed_to_idToclients"", fields: [setup_fee_billed_to_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction)
  //Client 
  client clients? @relation(""client"", fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction)  // fk_contracts_client_idToclients
  fk_contracts_types contracts_types? @relation(fields: [contract_type_name_id], references: [contract_type_name_id], onDelete: NoAction, onUpdate: NoAction)

  participants participants[]

  creator_timezone_offset Int @default(0) @allow(""update"", false)

  //Everything allowed (no auth policies yet)
  @@allow('all', true)
}

```

```ts
export const contractsSeed: Prisma.contractsCreateInput[] = [
  {
    billing_cycle: 'Client 1',
    contracts_active: true,
    contract_start_date: new Date('2023-09-01'),
    contract_end_date: new Date('2023-09-30T00:00:00.000Z'),
    parent_billed_percentage: '1',
    program_fee: '1',
    coaching_rate: '1',
    coaching_billed_percentage: 1,
    calculation_rules: 'Client 1',
    billing_cadence: 'Client 1',
    note: 'Client 1',
    last_modified_by: 'seed',
    updated_timestamp: '2023-09-30T14:30:00Z',
    daily_flat_fee: '1',
    monthly_coaching_fee: '1',
    monthly_content_fee: '1',
    monthly_flat_fee: '1',
    monthly_service_fee: '1',
    setup_fee: '1',
  },
]

  let uniqueContractsIds: string[] = [];
  i = 0;
  for (const contract of contractsSeed) {
    const foundContract = await prisma.contracts.findFirst({
      where: {
        client_id: uniqueClientIds[i],
        contract_type_name_id: uniqueContractTypeIds[i],
      },
    });
    const contract_id = foundContract?.contract_id ?? blankUUID;

    const upsertedContract = await prisma.contracts.upsert({
      where: {
        contract_id: contract_id,
      },
      update: {
        client_id: uniqueClientIds[i],
        contract_type_name_id: uniqueContractTypeIds[i],
        billing_cycle: contract.billing_cycle,
        contracts_active: contract.contracts_active,
        contract_start_date: contract.contract_start_date,
        contract_end_date: contract.contract_end_date,
        contract_billed_to_id: uniqueClientIds[i],
        parent_billed_percentage: contract.parent_billed_percentage,
        program_fee: contract.program_fee,
        coaching_rate: contract.coaching_rate,
        coaching_billed_to_client_id: uniqueClientIds[i],
        coaching_billed_percentage: contract.coaching_billed_percentage,
        calculation_rules: contract.calculation_rules,
        billing_cadence: contract.billing_cadence,
        setup_fee_billed_to_id: uniqueClientIds[i],
        note: contract.note,
        last_modified_by: contract.last_modified_by,
        updated_timestamp: contract.updated_timestamp,
        daily_flat_fee: contract.daily_flat_fee,
        monthly_coaching_fee: contract.monthly_coaching_fee,
        monthly_content_fee: contract.monthly_content_fee,
        monthly_flat_fee: contract.monthly_flat_fee,
        monthly_service_fee: contract.monthly_service_fee,
        setup_fee: contract.setup_fee,
      },
      create: {
        client_id: uniqueClientIds[i],
        contract_type_name_id: uniqueContractTypeIds[i],
        billing_cycle: contract.billing_cycle,
        contracts_active: contract.contracts_active,
        contract_start_date: contract.contract_start_date,
        contract_end_date: contract.contract_end_date,
        contract_billed_to_id: uniqueClientIds[i],
        parent_billed_percentage: contract.parent_billed_percentage,
        program_fee: contract.program_fee,
        coaching_rate: contract.coaching_rate,
        coaching_billed_to_client_id: uniqueClientIds[i],
        coaching_billed_percentage: contract.coaching_billed_percentage,
        calculation_rules: contract.calculation_rules,
        billing_cadence: contract.billing_cadence,
        setup_fee_billed_to_id: uniqueClientIds[i],
        note: contract.note,
        last_modified_by: contract.last_modified_by,
        updated_timestamp: contract.updated_timestamp,
        daily_flat_fee: contract.daily_flat_fee,
        monthly_coaching_fee: contract.monthly_coaching_fee,
        monthly_content_fee: contract.monthly_content_fee,
        monthly_flat_fee: contract.monthly_flat_fee,
        monthly_service_fee: contract.monthly_service_fee,
        setup_fee: contract.setup_fee,
      },
    });
    if (upsertedContract?.contract_id) {
      uniqueContractsIds.push(upsertedContract.contract_id);
    }

```


### Environment & setup

- OS: Windows
- Database: PostgreSQL 16
- Node.js version: v20.8.1


### Prisma Version

```
 ""@prisma/client"": ""^5.11.0"",
""prisma"": ""^5.11.0"",
```
",,
2189473124,23507,Custom path does not work with vite,"### Bug description

here is the error message I'm getting in vite

```console
✘ [ERROR] Could not resolve "".prisma/client/index-browser""

    ../../node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/index-browser.js:1:23:
      1 │ const prisma = require('.prisma/client/index-browser')
        ╵                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You can mark the path "".prisma/client/index-browser"" as external to exclude it from the bundle,
  which will remove this error and leave the unresolved path in the bundle. You can also surround
  this ""require"" call with a try/catch block to handle this failure at run-time instead of
  bundle-time.

9:32:51 PM [vite] error while updating dependencies:
Error: Build failed with 1 error:
../../node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/index-browser.js:1:23: ERROR: Could not resolve "".prisma/client/index-browser""
    at failureErrorWithLog (/myproject/node_modules/.pnpm/esbuild@0.19.11/node_modules/esbuild/lib/main.js:1651:15)
    at /myproject/node_modules/.pnpm/esbuild@0.19.11/node_modules/esbuild/lib/main.js:1059:25
    at /myproject/node_modules/.pnpm/esbuild@0.19.11/node_modules/esbuild/lib/main.js:1527:9
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
```


### How to reproduce

- use any schema with a custom path in your generator client as shown in section `Prisma information`
- generate the schema
- import the PrismaClient, use it as normal
  example of import:

```ts
import { PrismaClient } from '@prisma-app/client'
```

### Expected behavior

I'm expecting no error in vite or official guidance in the prisma documentation

as a workaround to the error, we can configure vite with the following and the error goes away

```
  // vite.config.ts
  optimizeDeps: {
    exclude: ['.prisma/client']
  },
```

### Prisma information

```prisma
// schema.prisma
generator client {
  provider = ""prisma-client-js""
  output   = ""../node_modules/@prisma-app/client""
}
```

not that I'm exporting to node_modules or `import { PrismaClient } from 'some-folder'` won't work

### Environment & setup

```
macos 12.5
node v21.2.0
vite 5.1.5
pnpm 8.15.1 // <= I'm using pnpm
```

### Prisma Version

```
5.11.0
```
",,
2189013346,23505,`@prisma/adapter-pg` modifies node-postgres global type parsers,"### Bug description

Using the Prisma `node-postgres` adapter breaks queries run directly through `node-postgres` `Pool` and `Client` instances, even when the instance of `Pool` is not shared with the Prisma adapter. This is a problem for us because we'd like to use Prisma with the adapter, but we use `node-postgres` extensively, including for use-cases that Prisma doesn't support (streaming in particular).

Fortunately I think this should be very easy to fix: @prisma/adapter-pg registers its type parsers globally [here](https://github.com/prisma/prisma/blob/main/packages/adapter-pg/src/conversion.ts). It could instead pass the type parsers to its queries explictly as described [here](https://node-postgres.com/features/queries#types).

### How to reproduce

1. import `@prisma/adapter-pg`
2. Run a query via node-postgres 

This script illustrates the problem with timestamp parsing and doesn't require a Prisma schema:

```ts
import { Pool } from ""pg"";

const pgPool = new Pool({ connectionString: process.env.DATABASE_URL });

async function main() {
  const before = await pgPool.query(`SELECT NOW() as ts`);
  console.log(
    ""NOW() before @prisma/adapter-pg - value:"",
    before.rows[0].ts,
    ""type:"",
    typeof before.rows[0].ts
  );

  require(""@prisma/adapter-pg"");

  const after = await pgPool.query(`SELECT NOW() as ts`);
  console.log(
    ""NOW() after @prisma/adapter-pg - value:"",
    after.rows[0].ts,
    ""type:"",
    typeof after.rows[0].ts
  );
}

main().finally(() => pgPool.end());
```

output: 
```
NOW() before @prisma/adapter-pg - value: 2024-03-15T15:48:47.231Z type: object
NOW() after @prisma/adapter-pg - value: 2024-03-15 15:48:47.237668 type: string
```


### Expected behavior

`@prisma/adapter-pg` shouldn't modify `node-postgres`'s global type parsers. Instead, [performIO](https://github.com/prisma/prisma/blob/main/packages/adapter-pg/src/pg.ts#L88) could pass Prisma's custom type parsers as described in the [node-postgres documentation](https://node-postgres.com/features/queries#types).

### Prisma information

This can be reproduced without any Prisma schema

### Environment & setup

- OS: tested on macOS and Debian
- Database: PostgreSQL
- Node.js version: 20.11.0


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
Preview Features        : driverAdapters, metrics, views
```

```
""@prisma/adapter-pg"": ""^5.11.0""
```",,
2188211803,23500,Deploying prisma to CloudFlare pages using Nuxt/Nitro and node-postgres (pg) is using the wrong(vercel) wasm path,"### Bug description

Deploying prisma to CloudFlare pages using Nuxt/Nitro and node-postgres (pg) seems to be using the wrong wasm path as if the current runtime has been detected as vercel.

It also happpens locally when using nitro with the `cloudflare-pages` present

Error:
```
Building Nuxt Nitro server (preset: cloudflare_pages)                                                                          nitro 11:55:06 PM

[nitro 11:55:07 PM]  ERROR  Error: Could not load /Users/.../node_modules/.prisma/client/query_engine_bg.wasm?module (imported by node_modules/.prisma/client/wasm-edge-light-loader.js): ENOENT: no such file or directory, open '/Users/.../node_modules/.prisma/client/query_engine_bg.wasm?module'
```

### How to reproduce

1. Create a nuxt app with prisma
2. Set the cloudflare preset nuxt.config.ts:
``` 
nitro: {
    preset: 'cloudflare-pages'
  },
```
3. run  `npx nuxi build`

### Expected behavior

Cloudflare is not detected as `edge-light` runtime and loads the correct wasm.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: Postgre with adapter-pg

### Prisma Version

```
5.11.0
```
",,
2187022089,23495,Critical dependency Webpack warning and missing source map in `node_modules/@prisma/client/runtime/library.js`,"### Bug description

When bundling my application with Webpack, I get the following 3 warnings:

```bash
WARNING in ../../node_modules/@prisma/client/runtime/library.js 12:37424-37431
Critical dependency: require function is used in a way in which dependencies cannot be statically extracted

WARNING in ../../node_modules/@prisma/client/runtime/library.js 12:37438-37445
Critical dependency: require function is used in a way in which dependencies cannot be statically extracted

WARNING in ../../node_modules/@prisma/client/runtime/library.js
Module Warning (from ../../node_modules/source-map-loader/dist/cjs.js):
Failed to parse source map from '/repositories/my-repo/node_modules/@prisma/client/runtime/library.js.map' file: Error: ENOENT: no such file or directory, open '/repositories/my-repo/node_modules/@prisma/client/runtime/library.js.map'
```

The third one, about the source map, is simple: the file declares a source map, but the source map is not included in the package:

<img width=""1106"" alt=""Screenshot 2024-03-14 at 19 15 09"" src=""https://github.com/prisma/prisma/assets/34403992/8e537c9c-71ab-4350-ae07-455bcebbb655"">

For the moment, I just suppressed that specific warning in that specific file using this Webpack config:

```js
{
        ignoreWarnings: [
            {
                module: /node_modules[\\/]@prisma[\\/]client[\\/]runtime[\\/]library\.js/,
                message: /Failed to parse source map/
            }
        ]
}
```

As for the other two warnings, unfortunately, since the code of that file is minified, I could not find exactly which `require` is causing the issue. The odd thing is that using a regexp I could not find non-static requires.

Obviously, I feel less confident about suppressing these two warnings compared with the other one.

Any thoughts?

### How to reproduce

It is enough to import ""@prisma/client"" and try building with Webpack.

### Expected behavior

No warnings building with Webpack

### Prisma information

N/A

### Environment & setup

- OS: macOS 11.7.3
- Database: N/A
- Node.js version: v21.6.1


### Prisma Version

```
""@prisma/client"": ""5.11.0""
```
",,
2187001781,23494,Prisma cannot connect to AWS RDS Postgres instance,"### Bug description

Our team is migrating our database to AWS RDS and we cannot get a `prisma` database connection to work. Simply running any prisma commands generate the dreaded `User was denied access on the database error`. I've read through every other similar bug report and stackoverflow post and none of the proposed solutions seem to work here. Using the same credentials, we can connect to the RDS instance running Postgres using `psql` and can run any commands.

I read that it could be an issue with prisma needing to create a shadow database, so I granted our db user access to `CREATEDB` permissions AND explicitly setup a shadow database in our db instance. This did not fix the issue.

```
root@8k3k2k29s:/code# prisma migrate status
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": PostgreSQL database ""api-dev"", schema ""public"" at ""api-dev.xxxxxx.us-east-9.rds.amazonaws.com""
Error: P1010: User `backuser` was denied access on the database `api-dev.public`
```

But this is not an issue with our credentials, we can connect use `psql` in the Docker instance just fine:

```
root@398fba4348c9:/code# psql -h api-dev.xxxxxx.us-east-9.rds.amazonaws.com -U backuser -d api-dev
Password for user backuser:
psql (15.6 (Debian 15.6-0+deb12u1), server 16.1)
WARNING: psql major version 15, server major version 16.
         Some psql features might not work.
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, compression: off)
Type ""help"" for help.

api-dev=>
```

Here is a copy of our `docker-compose.yml`:

```
version: '3'

services:
  api:
    platform: linux/x86_64
    container_name: api
    image: api
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/code
    ports:
      - ""8081:8000""
    environment:
      - APP_ENV=dev
      - PORT=8000
      - DATABASE_URL=postgresql://backuser:supersecretpassword@api-dev.xxxxxx.us-east-9.rds.amazonaws.com/api-dev?sslmode=disable&schema=public
      - SHADOW_DATABASE_URL=postgresql://backuser:supersecretpassword@api-shadow.xxxxxx.us-east-9.rds.amazonaws.com/api?sslmode=disable&schema=public
```

I've tried everything I can think of and find and out of ideas... need help.

### How to reproduce

I think it's more about the environment setup then steps but here you go

1. Create node/express api in Docker 
2. Setup prisma connection to AWS RDS instance running Postgres
3. Create RDS Parameter group and change `rds.forcessl` to `0`
4. Apply Parameter Group to RDS Instance
5. Run `prisma migrate status`

### Expected behavior

Can connect to RDS instance of Postgres and outputs the results of `prisma migrate status`

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  output          = ""../src/generated/client""
  previewFeatures = [""postgresqlExtensions"", ""fullTextSearch""]
  binaryTargets   = [""native"", ""debian-openssl-3.0.x""]
}

datasource db {
  provider          = ""postgresql""
  url               = env(""DATABASE_URL"")
  shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
  extensions        = [pgcrypto()]
}
````


### Environment & setup

- OS: Debian Bookworm
- Database: Postgres 16.1
- Node.js version: `v21.7.1`


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.10.2
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v21.7.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at ../../../usr/local/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at ../../../usr/local/lib/node_modules/prisma/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : fullTextSearch, postgresqlExtensions
```",,
2186396775,23490,Attributes are being checked only till certain length,"### Bug description

Let's take below schema
schema 1
```
model PackageDepositType {
  id                                                                                     Int            @id @default(autoincrement())
  returnablePackageDepositIdentification                                                 String         @map(""returnable_package_deposit_identification"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyCode                String         @map(""returnable_package_deposit_identification_scheme_agency_code"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyCodeCodeListVersion String         @map(""returnable_package_deposit_identification_scheme_agency_code_code_list_version"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyName                String         @map(""returnable_package_deposit_identification_scheme_agency_name"")
  returnablePackageDepositIdentificationAttIdentificationSchemeName                      String         @map(""returnable_package_deposit_identification_scheme_name"")
 
  @@map(""package_deposit_type"")
}
```
schema 2
```
model PackageDepositType {
  id                                                                                     Int            @id @default(autoincrement())
  returnablePackageDepositIdentification                                                 String         @map(""returnable_package_deposit_identification"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyCode                String         @map(""returnable_package_deposit_identification_att_identification_scheme_agency_code"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyCodeCodeListVersion String         @map(""returnable_package_deposit_identification_att_identification_scheme_agency_code_code_list_version"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyName                String         @map(""returnable_package_deposit_identification_att_identification_scheme_agency_name"")
  returnablePackageDepositIdentificationAttIdentificationSchemeName                      String         @map(""returnable_package_deposit_identification_att_identification_scheme_name"")
 

  @@map(""package_deposit_type"")
}
```

**schema 1** works while **schema 2** fails, I suspect that attribute names are being truncated to certain limit while schema is being generated.

### How to reproduce

Use this schema with postgres
```
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-1.1.x""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model PackageDepositType {
  id                                                                                     Int            @id @default(autoincrement())
  returnablePackageDepositIdentification                                                 String         @map(""returnable_package_deposit_identification"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyCode                String         @map(""returnable_package_deposit_identification_att_identification_scheme_agency_code"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyCodeCodeListVersion String         @map(""returnable_package_deposit_identification_att_identification_scheme_agency_code_code_list_version"")
  returnablePackageDepositIdentificationAttIdentificationSchemeAgencyName                String         @map(""returnable_package_deposit_identification_att_identification_scheme_agency_name"")
  returnablePackageDepositIdentificationAttIdentificationSchemeName                      String         @map(""returnable_package_deposit_identification_att_identification_scheme_name"")
 

  @@map(""package_deposit_type"")
}
```

run `npx prisma db push`



### Expected behavior

Table should be generated in postgres db successfully.

### Prisma information
```
, AddColumn { column_id: TableColumnId(177), has_virtual_default: false }] } }] })
             at schema-engine\connectors\sql-schema-connector\src\apply_migr_migration.rs:21
   1: sql_schema_connector::apply_migration::apply_migration
             at schema-engine\connectors\sql-schema-connector\src\apply_migr_migration.rs:10
   2: schema_core::state::SchemaPush
             at schema-engine\core\src\state.rs:433
```
### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.10.0


### Prisma Version

```
5.11.0
```
",,
2184973647,23481,Can not include relation field in type GetPayload for one-many relation field if the field is optional,"### Bug description

If a model A has a one to many relationship with another model B, and model B has one to many relationship  with Model C. You can not define Model C under Model B if model B is defined as optional using the helper type. 

### How to reproduce

1. Define models such that Model A has a one to many relationship with Model B and Model B has one to many relationship with Model C
2. Define a Prisma Client's helper types for Model A that include Model B. Model B will also include Model C. 
3. Mark Model B as optional in the helper type



### Expected behavior

We expect the Model B will contain a relation with Model C similar to when Model B is required



### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model transaction {
    id                    BigInt      @id @default()
    uuid                  String      @unique @db.VarChar(36)
    parent_transaction_id String?     @db.VarChar(36)
    line_item             line_item[]
    ...
    parent_transaction    transaction? @relation(""parent_child_transaction"", fields: [parent_transaction_id], references: [uuid], onDelete: Cascade)
    child_transactions    transaction[] @relation(""parent_child_transaction"")
}

model line_item {
    id               BigInt            @id @default()
    ... 
    transaction      transaction       @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

```

```ts
// Add your code using Prisma Client
export type PrismaTransaction = Prisma.transactionGetPayload<{
  select: {
    child_transactions?: {
      select: {
        type: true;
        uuid: true;
        line_item: {
          select: {
            id: true;
          }
        };
      };
    };
  };
}>;
```
The model when child_transactions is required 
<img width=""603"" alt=""Screenshot 2024-03-13 at 3 07 56 PM"" src=""https://github.com/prisma/prisma/assets/124411648/6d42b4c5-dd51-42f2-ab30-d26dfd47b5d6"">

What we expected when we mark child_transactions as optional
```
type PrismaTransaction = {
    child_transactions?: {
        uuid: string;
        line_item: {
            id: bigint;
        }[];
    }[] | undefined;
}
```


but instead we got a child_transactions with no relation to line_item

<img width=""628"" alt=""Screenshot 2024-03-13 at 2 55 30 PM"" src=""https://github.com/prisma/prisma/assets/124411648/b20fd31d-739a-49d0-94b8-f4c8f94f05b9"">

```
type PrismaTransaction = {
    child_transactions?: (GetResult<{
        id: bigint;
        uuid: string;
        parent_transaction_id: string | null;
    }, unknown> & {})[] | undefined;
}

```


### Environment & setup

- OS: macOS
- Database:PostgreSQL
- Node.js version: v16.14.0

### Prisma Version

```
4.16.1
```
",,
2184678179,23480,`Prisma.Decimal` is missing methods in Cloudflare environment,"### Bug description

Hi folks, this example breaks in cloudflare workers as described in the comments:
```ts
import { Prisma } from '@prisma/client';

export interface Env {}

export default {
	async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
		let num = new Prisma.Decimal(1.7).add(1).mul(1).div(1).sub(0.01).abs(); // this works

		// All of the rows below throw a type error
		num.round(); // not a function
		num.sin(); // not a function
		num.cos(); // not a function

		// Static methods also broken
		Prisma.Decimal.round(5); // not a function
		Prisma.Decimal.add(5, 3); // not a function
		Prisma.Decimal.mul(5, 3); // not a function
		Prisma.Decimal.sub(5, 3); // not a function

		// This list is not exhaustive, I haven't checked all the methods

		return new Response(num.toString());
	},
};
```

It [works in the vitest environment](https://github.com/vladinator1000/prisma-hyperdrive/blob/decimal-bug/src/prismaDecimal.test.ts).

I also tried replacing Prisma's Decimal with the one from npm https://www.npmjs.com/package/decimal.js?activeTab=readme, but I had conflicts because prisma already had deserialized my number using its own Decimal. (didn't include a repro for this, because I'd rather the built-in one to work)

### How to reproduce

1. Clone this repo https://github.com/vladinator1000/prisma-hyperdrive/tree/decimal-bug
2. Check out banch `decimal-bug`
3. Then
```
npm i
```

```
npm start
```

Navigate to http://localhost:8787/


### Expected behavior

All Decimal functions described in the types should be callable at runtime in Cloudflare Workers.

### Prisma information

n/a

### Environment & setup

- OS: Ubuntu (Wrangler environment)
- Database: n/a
- Node.js version: 21


### Prisma Version

```json
	""dependencies"": {
		""@prisma/adapter-pg"": ""5.11.0"",
		""@prisma/client"": ""5.11.0""
	},
	""devDependencies"": {
		""@cloudflare/workers-types"": ""^4.20240312.0"",
		""@types/pg"": ""^8.11.2"",
		""prisma"": ""5.11.0"",
		""typescript"": ""^5.0.4"",
		""wrangler"": ""^3.0.0""
	}
```
",,
2184371113,23479,D1 DateTime type does not work,"### Bug description

By using `DateTime` field I get the following error when I make a query:

```
PrismaClientKnownRequestError: 
Invalid `prisma.example.findMany()` invocation:


Inconsistent column data: Conversion failed: number must be an integer in column 'createdAt', got '1709246273880.0'
    at In.handleRequestError (/Users/auser/projects/myproject/myproject-remix/node_modules/@prisma/client/runtime/library.js:122:6854)
    at In.handleAndLogRequestError (/Users/auser/projects/myproject/myproject-remix/node_modules/@prisma/client/runtime/library.js:122:6188)
    at In.request (/Users/auser/projects/myproject/myproject-remix/node_modules/@prisma/client/runtime/library.js:122:5896)
    at async l (/Users/auser/projects/myproject/myproject-remix/node_modules/@prisma/client/runtime/library.js:127:10871)
```

In fails both locally and at the edge (cloudflare)

### How to reproduce

1. Define the model

```prisma
model Example {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
```

2. Apply migrations
3. Load some data without overriding createdAt updatedAt fields
4. Run the query

```ts
prisma.example
  .findMany()
  .then(console.log)
```
5. Error will be thrown

### Expected behavior

Timestamp should be properly parsed as a Date

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""sqlite""
  url = env(""DATABASE_URL"")
}

model Example {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
```

```ts
import { PrismaClient } from '@prisma/client'
import { PrismaD1 } from '@prisma/adapter-d1'
import { DefaultArgs } from '@prisma/client/runtime/library'

let prisma: PrismaClient<{ adapter: PrismaD1 }, never, DefaultArgs>

export default (d1: D1Database) => {
  if (!prisma) {
    const adapter = new PrismaD1(d1, 'true')
    prisma = new PrismaClient({ 
      adapter,
    })
  }
  return prisma
}
```


### Environment & setup

- OS: Cloudflare pages+worker (wrangler deploy)
- Stack: Remix
- Database: Cloudlare D1
- Node.js version: 20


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
Preview Features        : driverAdapters
```
",,
2184233004,23478,Prisma not working in debian proot distro termux,"### Bug description

```bash
npx prisma migrate dev --name init
```
Gives this error
```bash
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": PostgreSQL database ""todo"", schema ""public"" at ""localhost:5432""

Error: Schema engine exited. Error: Command failed with ENOENT: /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x cli --datasource <REDACTED> can-connect-to-database
spawn /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x ENOENT
```


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
```bash
npx prisma migrate dev --name init
```

### Expected behavior

Migrate

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}


model Todo{
  id Int @id @default(autoincrement())
  todo String
  authorId Int @unique
  author User @relation(fields: [authorId],references: [id])
}
model User{
  id Int @id @default(autoincrement())
  todo Todo[]
}
```

### Environment & setup

- OS: Debian Proot Distro Termux Android
- Database:Postgres
- Node.js version: 21.6.2 <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
5.11.1
```
Also running ```npx prisma -v ``` gives this mess:
```bash
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Environment variables loaded from .env
prisma:warn Prisma detected unknown OS ""android"" and may not work as expected. Defaulting to ""linux"".
Error: Unable to require(`/home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node`).
The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements

Details: dlopen failed: library ""/home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node"" needed or dlopened by ""/data/data/com.termux/files/usr/bin/node"" is not accessible for the namespace ""(default)""
    at VX (/home/mrdual/Desktop/vscode thins/next_app/node_modules/prisma/build/index.js:287:114)
    at xke (/home/mrdual/Desktop/vscode thins/next_app/node_modules/prisma/build/index.js:287:266)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
Error: Command failed with ENOENT: /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version
spawn /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x ENOENT
    at ChildProcess._handle.onexit (node:internal/child_process:286:19)
    at onErrorNT (node:internal/child_process:484:16)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'spawn /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x',
  path: '/home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x',
  spawnargs: [ '--version' ],
  originalMessage: 'spawn /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x ENOENT',
  shortMessage: 'Command failed with ENOENT: /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version\n' +
    'spawn /home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x ENOENT',
  command: '/home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x --version',
  escapedCommand: '""/home/mrdual/Desktop/vscode thins/next_app/node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x"" --version',
  exitCode: undefined,
  signal: undefined,
  signalDescription: undefined,
  stdout: '',
  stderr: '',
  failed: true,
  timedOut: false,
  isCanceled: false,
  killed: false
}
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : android
Architecture            : arm64
Node.js                 : v21.6.2
Query Engine (Node-API) : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```",,
2184228959,23477,JSON Parse error: Expected '}',"### Bug description

The Node.js process already received a ${this.globalKillSignalReceived} signal, therefore the Prisma query engine exited

SyntaxError: JSON Parse error: Unterminated string
      at /home/user/Desktop/testprisma/node_modules/@prisma/client/runtime/binary.js:162:575

### How to reproduce

1. Create a basic project with bun and prisma as in https://bun.sh/guides/ecosystem/prisma (using postgres)
2. Generate some test users (5000 is ok) and query them all
3. Run 'bun run index.ts'
4. See error

### Expected behavior

_No response_

### Prisma information

```prisma
generator client {
  provider   = ""prisma-client-js""
  engineType = ""binary""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient();

const addTestUsers = async () => {
 try {
  for (let i = 0; i < 5000; i++) {
   await prisma.user.create({
    data: {
     name: `John Doe ${i}`,
     email: `jhondoe${i}@gmail.com`,
    },
   });
  }
 } catch (e) {}
};

(async () => {
 try {
  console.log(""Connecting to the database"");
  await prisma.$connect();
  console.log(""Connected to the database"");

  console.log(""Adding test users"");
  await addTestUsers();
  console.log(""Added test users"");

  const res = await prisma.user.findMany();
  console.log(res);
 } catch (e) {
  console.error(e);
 }
})();
```


### Environment & setup

- OS: debian
- Database: PostgreSQL
- Node.js version: (Using BUN 1.0.30)


### Prisma Version

```
prisma                  : 5.11.0
@prisma/client          : 5.11.0
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli efd2449663b3d73d637ea1fd226bafbcf45b3102 (at node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-15.efd2449663b3d73d637ea1fd226bafbcf45b3102
Default Engines Hash    : efd2449663b3d73d637ea1fd226bafbcf45b3102
Studio                  : 0.499.0
```
",,
2183828331,23473,PANIC: internal error: entered unreachable code,"### Bug description

When I'm trying to fetch all the users from the Azure SQL DB it gives me the above error. I have check the `npx prisma studio` and it's working and I can see and interact with my database records

### How to reproduce

<!--
1. `npx prisma generate` for your Azure SQL DB
2. Change '....'
3. Run '....'
4. See error
-->

1. `npx prisma generate` for your Azure SQL DB
2.  `yarn dev` to run the Nextjs server and navigate to your page that do the fetching
3. The error will be shown


### Expected behavior

The expected behavior is that I can see all my user's entries in the database.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/orm/prisma-migrate/workflows/troubleshooting

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
  shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
}

model User {
  id        String @id @default(cuid()) //@db.UniqueIdentifier
  firstName String @db.VarChar(255)
  lastName  String @db.VarChar(255)
  email     String @unique
  username  String @unique
  createdAt DateTime @default(now())
  points    Int      @default(0)
  image     String?
  color     String?

  // Relations
  leaderboardEntries LeaderboardEntry[]
}

model LeaderboardEntry {
  id          String @id @default(cuid()) //@db.UniqueIdentifier
  userId      String
  username    String
  totalPoints Int

  // Relations
  user User @relation(fields: [userId], references: [id])
}
```

```ts
// Add your code using Prisma Client

import prisma from ""@/lib/prisma"";

export async function getAllUsers() {
  try {
    const users = await prisma.user.findMany({
      orderBy: {
        points: ""desc"",
      },
    });
    return [...users];
  } catch (error) {
    console.error(`Error fetching users: ${error}`);
    throw new Error(`Internal Server Error fetching users: ${error}`);
  }
}

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> Windows 11
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> Azure SQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> v18.18.0


### Prisma Version

```
5.10.2
```
",,
2182429614,23458,allowing @@unique([id]) for mongo,"### Bug description

![image](https://github.com/prisma/prisma/assets/11139560/ee313802-5176-4756-8bb1-9eba5167ff32)

seems like this should be allowed?

### How to reproduce

here is the config:

```
// schema.prisma

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

generator client {
  provider = ""prisma-client-js""
}

model Trace {
  id            String   @id  @map(""_id"") @db.ObjectId
  hash          String
  userId        String
  deviceId      String
  timeCreated   DateTime
  eventName     String
  env           String
  priorityLevel Int
  eventData     Json
  errorTrace  Json


  @@index([hash])
  @@unique([id])
  @@map(""vibe_trace"") // Custom collection name
}

model User {
  id    String  @id @default(auto()) @map(""_id"") @db.ObjectId
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        String    @id @default(auto()) @map(""_id"") @db.ObjectId
  title     String
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
}

model Comment {
  id     String @id @default(auto()) @map(""_id"") @db.ObjectId
  text   String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}
```

### Expected behavior

expect to compile

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

Macos/Darwin

### Prisma Version

latest",,
2182245191,23457,Cloudflare Wrangler failing to bundle engine .wasm for driverAdapters early access,"### Bug description

This error appears when trying to bundle a Cloudflare Worker.
```
ENOENT: no such file or directory, open '/home/vlady/code/prisma-hyperdrive/node_modules/.prisma/client/query_engine_bg.wasm?module' [plugin wrangler-module-collector]

    node_modules/esbuild/lib/main.js:1360:21:
      1360 │         let result = await callback({
           ╵                      ^

    at async open (node:internal/fs/promises:633:25)
    at async readFile (node:internal/fs/promises:1242:14)
    at async /home/vlady/code/prisma-hyperdrive/node_modules/wrangler/wrangler-dist/cli.js:125081:37
    at async requestCallbacks.on-resolve (/home/vlady/code/prisma-hyperdrive/node_modules/esbuild/lib/main.js:1360:22)
    at async handleRequest (/home/vlady/code/prisma-hyperdrive/node_modules/esbuild/lib/main.js:723:13)

  This error came from the ""onResolve"" callback registered here:

    node_modules/wrangler/wrangler-dist/cli.js:125030:19:
      125030 │             build5.onResolve(
             ╵                    ~~~~~~~~~

    at /home/vlady/code/prisma-hyperdrive/node_modules/wrangler/wrangler-dist/cli.js:125030:20
    at Array.forEach (<anonymous>)
    at /home/vlady/code/prisma-hyperdrive/node_modules/wrangler/wrangler-dist/cli.js:125029:22
    at Array.forEach (<anonymous>)
    at setup (/home/vlady/code/prisma-hyperdrive/node_modules/wrangler/wrangler-dist/cli.js:125025:28)
    at handlePlugins (/home/vlady/code/prisma-hyperdrive/node_modules/esbuild/lib/main.js:1279:21)
    at buildOrContextImpl (/home/vlady/code/prisma-hyperdrive/node_modules/esbuild/lib/main.js:968:5)
    at Object.buildOrContext (/home/vlady/code/prisma-hyperdrive/node_modules/esbuild/lib/main.js:776:5)
    at /home/vlady/code/prisma-hyperdrive/node_modules/esbuild/lib/main.js:2163:15

  The plugin ""wrangler-module-collector"" was triggered by this import

    node_modules/.prisma/client/wasm.js:168:31:
      168 │           return (await import(`./query_engine_bg.wasm${'?module'...
```

I don't understand why Wrangler freaks out because the file is definitely there
![image](https://github.com/prisma/prisma/assets/1226564/b0c6198b-2a6f-4bc5-9dee-d2ea098a96f0)


### How to reproduce

1. Clone this reproduction repo https://github.com/vladinator1000/prisma-hyperdrive/tree/no-such-file-engine-error
2. `npm install`
3. `npm run gen`
4. `npm run build`

Github action run where the error happens: https://github.com/vladinator1000/prisma-hyperdrive/actions/runs/8252989060/job/22573802592#step:6:58

### Expected behavior

Wrangler builds Prisma successfully.

### Environment & setup

- OS: Ubuntu
- Database: N/A
- Node.js version: v21


### Prisma Version

```
	""dependencies"": {
		""@prisma/adapter-pg"": ""5.11.0-dev.5"",
		""@prisma/client"": ""5.11.0-dev.5""
	},
	""devDependencies"": {
		""@cloudflare/workers-types"": ""^4.20240312.0"",
		""@types/pg"": ""^8.11.2"",
		""prisma"": ""5.11.0-dev.5"",
		""typescript"": ""^5.0.4"",
		""wrangler"": ""^3.0.0""
	}
```
",,
2181017688,23453,`db pull` can't parse script setting default value,"### Bug description

When I try to introspect the database, I get an error about a script that sets a default value for a column as 'Non'. 

Here is the script :
```
/****** Object:  Default dbo.Non    Script Date: 21/12/98 09:42:22 ******/
/****** Object:  Default dbo.Non    Script Date: 03/12/98 14:41:54 ******/
/****** Object:  Default dbo.Non    Script Date: 20/10/98 14:23:35 ******/
/****** Object:  Default dbo.Non    Script Date: 19/10/98 09:48:52 ******/
/****** Objet:  valeur par défaut: dbo.Non    Date de script: 16/10/98 18:26:53 ******/
create default Non as 'Non'
```

### How to reproduce

npx prisma db pull

### Expected behavior

The introspection get all the tables from the database and translate them into models in schema.prisma

### Prisma information

npx prisma db pull

schema :

```
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""views""]
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
}
```

### Environment & setup

- OS: Ubuntu
- Database: SQL Server
- Node.js version: v20.11.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux

```
",,
2179838911,23445,Nested `upsert` failing due to table in `where` clause,"### Bug description

An `upsert` within an `update` results in the following queries being run in a transaction. The last query attempts to use the `Parent` table in a query to update the `Child` table when the `Parent` table is not referenced at all in the query. Should there be a JOIN in the query?
```
BEGIN
INSERT INTO `api_test`.`Child` (`id`) VALUES (?)
SELECT `api_test`.`Child`.`id`, `api_test`.`Child`.`parentId` FROM `api_test`.`Child` WHERE `api_test`.`Child`.`id` = ? LIMIT ? OFFSET ?
SELECT `api_test`.`Child`.`id` FROM `api_test`.`Child` WHERE (`api_test`.`Child`.`id` = ? AND 1=1)
SELECT `api_test`.`Child`.`id`, `api_test`.`Child`.`parentId` FROM `api_test`.`Child` WHERE `api_test`.`Child`.`id` = ?
INSERT INTO `api_test`.`Parent` (`id`) VALUES (?)
UPDATE `api_test`.`Child` SET `parentId` = ? WHERE (`api_test`.`Child`.`id` IN (?) AND `api_test`.`Parent`.`id` = ?)
ROLLBACK
```

### How to reproduce

Attempt to `upsert` within the `update` of another table. See included Prisma schema and TypeScript code.


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
model Child {
  id       String  @id @default(cuid())
  parentId String? @unique
  parent   Parent? @relation(fields: [parentId], references: [id])
}

model Parent {
  id    String @id @default(cuid())
  child Child?
}
```

```ts
  await prisma.child.create({
    data: {
      id: 'childId'
    }
  });

  await prisma.child.update({
    where: {
      id: 'childId'
    },
    data: {
      parent: {
        upsert: {
          where: {
            id: 'parentId'
          },
          create: {
            id: 'parentId'
          },
          update: {
            id: 'parentId'
          }
        }
      }
    }
  });
```


### Environment & setup

- OS: macOS
- Database: MySQL
- Node.js version: v20.9.0


### Prisma Version

```
5.10.2
```
",,
2179146178,23431,internal error: entered unreachable code,"### Bug description

random PrismaClientRustPanicError using sql server.

### How to reproduce

I cannot reproduce it every time. Sometimes it happens. I restart the pod and works again.


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
  schemas  = [""conseg"", ""devolutivas"", ""evento_externo"", ""geral"", ""notificacao"", ""seguranca""]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model DATABASECHANGELOG {
  ID            String   @db.NVarChar(255)
  AUTHOR        String   @db.NVarChar(255)
  FILENAME      String   @db.NVarChar(255)
  DATEEXECUTED  DateTime
  ORDEREXECUTED Int
  EXECTYPE      String   @db.NVarChar(10)
  MD5SUM        String?  @db.NVarChar(35)
  DESCRIPTION   String?  @db.NVarChar(255)
  COMMENTS      String?  @db.NVarChar(255)
  TAG           String?  @db.NVarChar(255)
  LIQUIBASE     String?  @db.NVarChar(20)
  CONTEXTS      String?  @db.NVarChar(255)
  LABELS        String?  @db.NVarChar(255)
  DEPLOYMENT_ID String?  @db.NVarChar(10)

  @@ignore
  @@schema(""evento_externo"")
}

model DATABASECHANGELOGLOCK {
  ID          Int       @id(map: ""PK_DATABASECHANGELOGLOCK"")
  LOCKED      Boolean
  LOCKGRANTED DateTime?
  LOCKEDBY    String?   @db.NVarChar(255)

  @@schema(""evento_externo"")
}

model nova_tabela {
  id_nova_tabela Int     @id(map: ""PK_nova-tabela"")
  dsc_outra      String? @db.VarChar(50)

  @@map(""nova-tabela"")
  @@schema(""conseg"")
}

model RL_CADASTRO_ARQUIVO {
  CO_CADASTRO         Int
  CO_ARQUIVO          Int
  DT_CADASTRO         DateTime            @default(now(), map: ""DEFAULT_RL_CADASTRO_ARQUIVO_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA  DateTime?           @db.DateTime
  TB_ARQUIVO          TB_ARQUIVO          @relation(fields: [CO_ARQUIVO], references: [CO_SEQ_ARQUIVO], onUpdate: NoAction, map: ""FK_RL_CADASTRO_ARQUIVO_TB_ARQUIVO"")
  TB_CADASTRO_ELEITOR TB_CADASTRO_ELEITOR @relation(fields: [CO_CADASTRO], references: [CO_SEQ_CADASTRO_ELEITOR], onUpdate: NoAction, map: ""FK_RL_CADASTRO_ARQUIVO_TB_CADASTRO_ELEITOR"")

  @@id([CO_CADASTRO, CO_ARQUIVO], map: ""PK_RL_CADASTRO_ARQUIVO"")
  @@schema(""conseg"")
}

model RL_EVENTO_ARQUIVO {
  CO_EVENTO_EXTERNO  Int
  CO_ARQUIVO         Int
  DT_CADASTRO        DateTime?         @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?         @db.DateTime
  TB_ARQUIVO         TB_ARQUIVO        @relation(fields: [CO_ARQUIVO], references: [CO_SEQ_ARQUIVO], onUpdate: NoAction, map: ""FK_RL_EVENTO_ARQUIVO_TB_ARQUIVO"")
  TB_EVENTO_EXTERNO  TB_EVENTO_EXTERNO @relation(fields: [CO_EVENTO_EXTERNO], references: [CO_SEQ_EVENTO_EXTERNO], onUpdate: NoAction, map: ""FK_RL_EVENTO_ARQUIVO_TB_EVENTO_EXTERNO"")

  @@id([CO_EVENTO_EXTERNO, CO_ARQUIVO], map: ""PK__RL_EVENTO_ARQUIVO"")
  @@schema(""evento_externo"")
}

model RL_EVENTO_DATA {
  CO_EVENTO_EXTERNO  Int
  CO_DATA_EVENTO     Int
  DT_CADASTRO        DateTime          @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?         @db.DateTime
  TB_DATA_EVENTO     TB_DATA_EVENTO    @relation(fields: [CO_DATA_EVENTO], references: [CO_SEQ_DATA_EVENTO], onUpdate: NoAction, map: ""FK_RL_EVENTO_DATA_TB_DATA_EVENTO"")
  TB_EVENTO_EXTERNO  TB_EVENTO_EXTERNO @relation(fields: [CO_EVENTO_EXTERNO], references: [CO_SEQ_EVENTO_EXTERNO], onUpdate: NoAction, map: ""FK_RL_EVENTO_DATA_TB_EVENTO_EXTERNO"")

  @@id([CO_EVENTO_EXTERNO, CO_DATA_EVENTO], map: ""PK__RL_EVENT__90F22822982D8B9A"")
  @@schema(""evento_externo"")
}

model RL_ROLE_RECURSO {
  CO_ROLE    Int
  CO_RECURSO Int
  TB_RECURSO TB_RECURSO @relation(fields: [CO_RECURSO], references: [CO_SEQ_RECURSO], onUpdate: NoAction, map: ""FK_RL_ROLE_RECURSO_TB_RECURSO"")
  TB_ROLE    TB_ROLE    @relation(fields: [CO_ROLE], references: [CO_SEQ_ROLE], onUpdate: NoAction, map: ""FK_RL_ROLE_RECURSO_TB_ROLE"")

  @@id([CO_RECURSO, CO_ROLE], map: ""PK_RL_ROLE_RECURSO"")
  @@schema(""seguranca"")
}

model RL_USUARIO_ROLE {
  CO_USUARIO        Int
  CO_ROLE           Int
  CO_USUARIO_EDICAO Int?
  DT_EDICAO         DateTime?  @default(now(), map: ""DEFAULT_RL_USUARIO_ROLE_DT_EDICAO"") @db.DateTime
  TB_ROLE           TB_ROLE    @relation(fields: [CO_ROLE], references: [CO_SEQ_ROLE], onUpdate: NoAction, map: ""FK_RL_USUARIO_ROLE_TB_ROLE"")
  TB_USUARIO        TB_USUARIO @relation(fields: [CO_USUARIO], references: [CO_SEQ_USUARIO], onUpdate: NoAction, map: ""FK_RL_USUARIO_ROLE_TB_USUARIO"")

  @@id([CO_USUARIO, CO_ROLE], map: ""PK_RL_USUARIO_ROLE"")
  @@schema(""seguranca"")
}

model TA_TIPO_ARQUIVO {
  CO_SEQ_TIPO_ARQUIVO Int                  @id(map: ""PK__TA_TIPO___25E4CEF69E4B1911"")
  CO_SISTEMA          Int
  DS_TIPO_ARQUIVO     String               @db.VarChar(75)
  DT_CADASTRO         DateTime             @db.DateTime
  DT_EXCLUSAO_LOGICA  DateTime?            @db.DateTime
  TB_SISTEMA          seguranca_TB_SISTEMA @relation(fields: [CO_SISTEMA], references: [CO_SEQ_SISTEMA], onUpdate: NoAction, map: ""FK_TA_TIPO_ARQUIVO_TB_SISTEMA"")
  TB_ARQUIVO          TB_ARQUIVO[]

  @@schema(""geral"")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model TA_TIPO_ARQUIVO_BKP {
  CO_SEQ_TIPO_ARQUIVO Int
  DS_TIPO_ARQUIVO     String?   @db.VarChar(50)
  DT_CADASTRO         DateTime  @db.DateTime
  DT_EXCLUSAO_LOGICA  DateTime? @db.DateTime

  @@ignore
  @@schema(""evento_externo"")
}

model TB_ARQUIVO {
  CO_SEQ_ARQUIVO                                                  Int                     @id(map: ""PK__TB_ARQUIVO"") @default(autoincrement())
  CO_TIPO_ARQUIVO                                                 Int
  DS_CAMINHO_ARQUIVO                                              String                  @db.VarChar(500)
  NO_ORIGINAL                                                     String?                 @db.VarChar(50)
  DT_CADASTRO                                                     DateTime                @default(now(), map: ""DEFAULT_TB_ARQUIVO_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA                                              DateTime?               @db.DateTime
  RL_CADASTRO_ARQUIVO                                             RL_CADASTRO_ARQUIVO[]
  RL_DEVOLUTIVA_ARQUIVO                                           RL_DEVOLUTIVA_ARQUIVO[]
  RL_EVENTO_ARQUIVO                                               RL_EVENTO_ARQUIVO[]
  TA_TIPO_ARQUIVO                                                 TA_TIPO_ARQUIVO         @relation(fields: [CO_TIPO_ARQUIVO], references: [CO_SEQ_TIPO_ARQUIVO], onUpdate: NoAction, map: ""FK_TB_ARQUIVO_TA_TIPO_ARQUIVO"")
  TB_EVENTO_EXTERNO_TB_EVENTO_EXTERNO_CO_ARQUIVO_CNHToTB_ARQUIVO  TB_EVENTO_EXTERNO[]     @relation(""TB_EVENTO_EXTERNO_CO_ARQUIVO_CNHToTB_ARQUIVO"")
  TB_EVENTO_EXTERNO_TB_EVENTO_EXTERNO_CO_ARQUIVO_CRLVToTB_ARQUIVO TB_EVENTO_EXTERNO[]     @relation(""TB_EVENTO_EXTERNO_CO_ARQUIVO_CRLVToTB_ARQUIVO"")

  @@schema(""evento_externo"")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model TB_ARQUIVO_BKP {
  CO_SEQ_ARQUIVO     Int       @default(autoincrement())
  CO_TIPO_ARQUIVO    Int
  DS_CAMINHO_ARQUIVO String    @db.VarChar(500)
  NO_ORIGINAL        String?   @db.VarChar(50)
  DT_CADASTRO        DateTime  @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime? @db.DateTime

  @@ignore
  @@schema(""evento_externo"")
}

model TB_CADASTRO_ELEITOR {
  CO_SEQ_CADASTRO_ELEITOR    Int                   @id(map: ""PK_TB_CADASTRO_ELEITOR"") @default(autoincrement())
  NU_PROTOCOLO               String                @db.VarChar(20)
  CO_PESSOA                  Int
  ST_SITUACAO_CADASTRO       String                @db.VarChar(10)
  CO_CONSEG                  Int
  ST_AVISO_LGPD              Boolean
  DT_CADASTRO                DateTime              @default(now(), map: ""DEFAULT_TB_CADASTRO_ELEITOR_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA         DateTime?             @db.DateTime
  CO_USUARIO_EDICAO_SITUACAO Int?
  DT_EDICAO_SITUACAO         DateTime?             @db.DateTime
  DS_ST_CONSEG               String?               @db.VarChar(255)
  RL_CADASTRO_ARQUIVO        RL_CADASTRO_ARQUIVO[]
  TB_CONSEG                  TB_CONSEG             @relation(fields: [CO_CONSEG], references: [CO_SEQ_CONSEG], onUpdate: NoAction, map: ""FK_TB_CADASTRO_ELEITOR_TB_CONSEG"")
  TB_PESSOA                  TB_PESSOA             @relation(fields: [CO_PESSOA], references: [CO_SEQ_PESSOA], onUpdate: NoAction, map: ""FK_TB_CADASTRO_ELEITOR_TB_PESSOA"")

  @@schema(""conseg"")
}

model TB_CONSEG {
  CO_SEQ_CONSEG          Int                      @id(map: ""PK_TB_CONSEG"") @default(autoincrement())
  DS_CONSEG              String                   @db.VarChar(50)
  CO_RA                  Int
  DT_CADASTRO            DateTime                 @default(now(), map: ""DEFAULT_TB_CONSEG_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA     DateTime?                @db.DateTime
  TB_CADASTRO_ELEITOR    TB_CADASTRO_ELEITOR[]
  TB_RA                  TB_RA                    @relation(fields: [CO_RA], references: [CO_SEQ_RA], onUpdate: NoAction, map: ""FK_TB_CONSEG_TB_RA"")
  TB_DEVOLUTIVA_CADASTRO TB_DEVOLUTIVA_CADASTRO[]
  TB_ZONA_CONSEG         TB_ZONA_CONSEG[]

  @@schema(""conseg"")
}

model TB_DATA_EVENTO {
  CO_SEQ_DATA_EVENTO Int              @id(map: ""PK__TB_DATA___60F0FDEF997C026B"") @default(autoincrement())
  DT_INICIO          DateTime         @db.DateTime
  DT_TERMINO         DateTime?        @db.DateTime
  HR_INICIO          String           @db.VarChar(15)
  HR_TERMINO         String?          @db.VarChar(15)
  DT_CADASTRO        DateTime         @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?        @db.DateTime
  ST_24_HORAS        Boolean?
  RL_EVENTO_DATA     RL_EVENTO_DATA[]

  @@schema(""evento_externo"")
}

model TB_EVENTO_EXTERNO {
  CO_SEQ_EVENTO_EXTERNO                                    Int                               @id(map: ""PK__TB_EVENT__D854B15E13241E82"") @default(autoincrement())
  CO_RA                                                    Int
  ST_EVENTO_EXTERNO                                        String?                           @db.VarChar(15)
  NO_EVENTO                                                String                            @db.VarChar(255)
  DS_EMAIL                                                 String                            @db.VarChar(50)
  DS_EVENTO                                                String?                           @db.VarChar(1000)
  DS_WEBSITE                                               String?                           @db.VarChar(50)
  DS_INFORMACOES_ADICIONAIS                                String?                           @db.VarChar(500)
  NU_PUBLICO_MAXIMO                                        Int
  NU_IDADE_MINIMA                                          Int
  NU_QUANTIDADE_INGRESSO                                   Int?
  JS_NATUREZA_EVENTO                                       String?                           @db.VarChar(Max)
  JS_CARACTERISTICAS_LOCAL                                 String?                           @db.VarChar(Max)
  JS_TIPO_INGRESSO                                         String?                           @db.VarChar(Max)
  JS_ESTRUTURAS_PROVISORIAS                                String?                           @db.VarChar(Max)
  JS_ESTRUTURAS_ALIMENTACAO                                String?                           @db.VarChar(Max)
  JS_PROGRAMACAO_EVENTO                                    String?                           @db.VarChar(Max)
  JS_PRESENCA_AUTORIDADE                                   String?                           @db.VarChar(Max)
  JS_QUEIMA_DE_FOGOS                                       String?                           @db.VarChar(Max)
  JS_SEGURANCA_PRIVADA                                     String?                           @db.VarChar(Max)
  JS_BRIGADISTA                                            String?                           @db.VarChar(Max)
  JS_SERVICO_HOSPITALAR                                    String?                           @db.VarChar(Max)
  DT_CADASTRO                                              DateTime                          @default(now(), map: ""DF__TB_EVENTO__DT_CA__1BC821DD"") @db.DateTime
  DT_EXCLUSAO_LOGICA                                       DateTime?                         @db.DateTime
  DS_ENDERECO_LOCAL                                        String                            @default(""Endereco completo"", map: ""DF__TB_EVENTO__DS_EN__1CBC4616"") @db.VarChar(255)
  NO_MOTORISTA                                             String?                           @db.VarChar(100)
  NU_CNH                                                   String?                           @db.VarChar(20)
  CO_ARQUIVO_CNH                                           Int?
  NU_PLACA_VEICULO                                         String?                           @db.VarChar(15)
  NU_PLACA_REBOQUE                                         String?                           @db.VarChar(15)
  CO_ARQUIVO_CRLV                                          Int?
  CO_RESPONSAVEL_CADASTRO_EVENTO                           Int?
  CO_RESPONSAVEL_REALIZACAO_EVENTO                         Int?
  NU_CEP                                                   String?                           @db.VarChar(15)
  CO_USUARIO                                               Int?                              @default(0, map: ""DF__TB_EVENTO__CO_US__1DB06A4F"")
  CO_USUARIO_EDICAO_STATUS                                 Int?
  DT_EDICAO_STATUS                                         DateTime?                         @db.DateTime
  CO_ID_PROCEDIMENTO_SEI                                   Int?
  NU_PROCESSO_FORMATADO_SEI                                String?                           @db.VarChar(22)
  DT_INCLUSAO_PROCEDIMENTO_SEI                             DateTime?                         @db.DateTime
  DS_ST_EVENTO                                             String?                           @db.VarChar(500)
  ST_ACAO_TRANSITO                                         String?                           @db.VarChar(255)
  NU_ANEXOS_EVENTO                                         Int?
  NU_DOCS_EXTERNOS_ENVIADOS_SEI                            Int?
  DS_OBSERVACAO_EDICAO                                     String?                           @db.VarChar(1000)
  JS_SEI_ERROS                                             String?                           @db.VarChar(Max)
  CO_SUB_USER                                              String?                           @db.VarChar(50)
  CO_SUB_USER_EDICAO_STATUS                                String?                           @db.VarChar(50)
  JS_DECLARACAO                                            String?                           @db.VarChar(Max)
  NO_USER_EDICAO_STATUS                                    String?                           @db.VarChar(70)
  NU_CPF_USER_EDICAO_STATUS                                String?                           @db.VarChar(20)
  NU_PROCESSO_SEI_VINCULADO                                String?                           @db.VarChar(22)
  JS_IOA_PARTICIPANTE                                      String?                           @db.VarChar(255)
  DS_OBSERVACAO_GERENCIAMENTO                              String?                           @db.VarChar(255)
  DS_LATITUDE                                              String?                           @db.VarChar(255)
  DS_LONGITUDE                                             String?                           @db.VarChar(255)
  JS_HISTORICO_EDICAO                                      String?                           @db.VarChar(Max)
  JS_ACAO                                                  String?                           @db.VarChar(Max)
  RL_EVENTO_ARQUIVO                                        RL_EVENTO_ARQUIVO[]
  RL_EVENTO_DATA                                           RL_EVENTO_DATA[]
  TB_ARQUIVO_TB_EVENTO_EXTERNO_CO_ARQUIVO_CNHToTB_ARQUIVO  TB_ARQUIVO?                       @relation(""TB_EVENTO_EXTERNO_CO_ARQUIVO_CNHToTB_ARQUIVO"", fields: [CO_ARQUIVO_CNH], references: [CO_SEQ_ARQUIVO], onDelete: NoAction, onUpdate: NoAction, map: ""FK_TB_EVENTO_EXTERNO_TB_ARQUIVO_CNH"")
  TB_ARQUIVO_TB_EVENTO_EXTERNO_CO_ARQUIVO_CRLVToTB_ARQUIVO TB_ARQUIVO?                       @relation(""TB_EVENTO_EXTERNO_CO_ARQUIVO_CRLVToTB_ARQUIVO"", fields: [CO_ARQUIVO_CRLV], references: [CO_SEQ_ARQUIVO], onDelete: NoAction, onUpdate: NoAction, map: ""FK_TB_EVENTO_EXTERNO_TB_ARQUIVO_CRLV"")
  TB_RA                                                    TB_RA                             @relation(fields: [CO_RA], references: [CO_SEQ_RA], onUpdate: NoAction, map: ""FK_TB_EVENTO_EXTERNO_TB_RA"")
  TB_RESPONSAVEL_CADASTRO_EVENTO                           TB_RESPONSAVEL_CADASTRO_EVENTO?   @relation(fields: [CO_RESPONSAVEL_CADASTRO_EVENTO], references: [CO_SEQ_RESPONSAVEL_CADASTRO_EVENTO], onDelete: NoAction, onUpdate: NoAction, map: ""FK_TB_EVENTO_EXTERNO_TB_RESPONSAVEL_CADASTRO_EVENTO"")
  TB_RESPONSAVEL_REALIZACAO_EVENTO                         TB_RESPONSAVEL_REALIZACAO_EVENTO? @relation(fields: [CO_RESPONSAVEL_REALIZACAO_EVENTO], references: [CO_SEQ_RESPONSAVEL_REALIZACAO_EVENTO], onDelete: NoAction, onUpdate: NoAction, map: ""FK_TB_EVENTO_EXTERNO_TB_RESPONSAVEL_REALIZACAO_EVENTO"")
  TB_USUARIO                                               TB_USUARIO?                       @relation(fields: [CO_USUARIO_EDICAO_STATUS], references: [CO_SEQ_USUARIO], onDelete: NoAction, onUpdate: NoAction, map: ""FK_USUARIO_STATUS_TB_USUARIO"")

  @@schema(""evento_externo"")
}

model TB_IOA {
  CO_SEQ_IOA                   Int                            @id(map: ""PK_TB_IOA"") @default(autoincrement())
  SG_IOA                       String                         @db.VarChar(50)
  NO_IOA                       String                         @db.VarChar(100)
  DT_CADASTRO                  DateTime                       @default(now(), map: ""DEFAULT_TB_IOA_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA           DateTime?                      @db.DateTime
  TB_DEVOLUTIVA_ACOMPANHAMENTO TB_DEVOLUTIVA_ACOMPANHAMENTO[]

  @@schema(""geral"")
}

model TB_NOTIFICACAO {
  CO_SEQ_NOTIFICACAO            Int                  @id(map: ""PK__TB_NOTIF__1EF7149429420BF1"") @default(autoincrement())
  DS_DESTINATARIO               String               @db.VarChar(60)
  DS_REMETENTE                  String               @db.VarChar(60)
  DS_ASSUNTO                    String?              @db.VarChar(200)
  DS_CONTEUDO                   String               @db.VarChar(Max)
  DS_TIPO_NOTIFICACAO           String?              @db.VarChar(15)
  ST_NOTIFICACAO                String?              @db.VarChar(15)
  QT_TENTATIVA_ENVIO            Int
  DT_CADASTRO                   DateTime             @db.DateTime
  DT_EXCLUSAO_LOGICA            DateTime?            @db.DateTime
  CO_SISTEMA                    Int
  DS_NOME_COMPLETO_DESTINATARIO String?              @db.VarChar(75)
  DS_ST_CONSEG                  String?              @db.VarChar(Max)
  NO_EVENTO                     String?              @db.VarChar(255)
  JS_INFORMATIONS               String?              @db.VarChar(Max)
  TB_SISTEMA                    seguranca_TB_SISTEMA @relation(fields: [CO_SISTEMA], references: [CO_SEQ_SISTEMA], onUpdate: NoAction, map: ""FK_TB_NOTIFICACAO_TB_SISTEMA"")

  @@schema(""notificacao"")
}

model TB_PESSOA {
  CO_SEQ_PESSOA       Int                   @id(map: ""PK_TB_PESSOA"") @default(autoincrement())
  DS_NOME_COMPLETO    String                @db.VarChar(100)
  NU_CPF              String?               @unique(map: ""AK_CPF"") @db.VarChar(20)
  NU_CNPJ             String?               @db.VarChar(20)
  NU_RG               String?               @db.VarChar(20)
  NU_TITULO_ELEITOR   String?               @db.VarChar(50)
  NU_ZONA_ELEITORAL   Int?
  NU_SECAO_ELEITORAL  Int?
  DS_ENDERECO         String?               @db.VarChar(100)
  NU_CEP              String?               @db.VarChar(9)
  CO_RA               Int?
  NU_TELEFONE         String?               @db.VarChar(15)
  NU_CELULAR          String?               @db.VarChar(15)
  DS_EMAIL            String?               @db.VarChar(50)
  DT_CADASTRO         DateTime              @default(now(), map: ""DEFAULT_TB_PESSOA_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA  DateTime?             @db.DateTime
  TB_CADASTRO_ELEITOR TB_CADASTRO_ELEITOR[]
  TB_ZONA_ELEITORAL   TB_ZONA_ELEITORAL?    @relation(fields: [NU_ZONA_ELEITORAL], references: [CO_SEQ_ZONA_ELEITORAL], onDelete: NoAction, onUpdate: NoAction, map: ""FK_TB_PESSOA_TB_ZONA_ELEITORAL"")

  @@schema(""geral"")
}

model TB_RA {
  CO_SEQ_RA          Int                 @id(map: ""PK__tmp_ms_x__F93A43DA08A9A37F"")
  DS_RA              String?             @db.VarChar(15)
  NO_CIDADE          String              @db.VarChar(70)
  DT_CADASTRO        DateTime            @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?           @db.DateTime
  TB_CONSEG          TB_CONSEG[]
  TB_EVENTO_EXTERNO  TB_EVENTO_EXTERNO[]

  @@schema(""geral"")
}

model TB_RECURSO {
  CO_SEQ_RECURSO     Int                  @id(map: ""PK_TP_RECURSO"") @default(autoincrement())
  DS_METODO          String               @db.VarChar(10)
  DS_ROTA            String               @db.VarChar(50)
  TP_AMBIENTE        String               @db.Char(1)
  CO_SISTEMA         Int
  DT_CADASTRO        DateTime             @default(now(), map: ""DEFAULT_TB_RECURSO_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?            @db.DateTime
  RL_ROLE_RECURSO    RL_ROLE_RECURSO[]
  TB_SISTEMA         seguranca_TB_SISTEMA @relation(fields: [CO_SISTEMA], references: [CO_SEQ_SISTEMA], onUpdate: NoAction, map: ""FK_TB_RECURSO_TB_SISTEMA"")

  @@schema(""seguranca"")
}

model TB_RESPONSAVEL_CADASTRO_EVENTO {
  CO_SEQ_RESPONSAVEL_CADASTRO_EVENTO Int                 @id(map: ""PK__TB_RESPO__18FB5E3E5F4AF794"") @default(autoincrement())
  NO_PESSOA                          String              @db.VarChar(70)
  NU_CPF                             String              @db.VarChar(20)
  NU_RG                              String?             @db.VarChar(20)
  DS_EMAIL                           String              @db.VarChar(60)
  NU_TELEFONE                        String?             @db.VarChar(20)
  NU_CELULAR                         String              @db.VarChar(20)
  DS_ENDERECO                        String?             @db.VarChar(100)
  DT_CADASTRO                        DateTime            @db.DateTime
  DT_EXCLUSAO_LOGICA                 DateTime?           @db.DateTime
  TB_EVENTO_EXTERNO                  TB_EVENTO_EXTERNO[]

  @@schema(""evento_externo"")
}

model TB_RESPONSAVEL_REALIZACAO_EVENTO {
  CO_SEQ_RESPONSAVEL_REALIZACAO_EVENTO Int                 @id(map: ""PK__TB_RESPO__82C4F39819988C36"") @default(autoincrement())
  NO_PESSOA_OR_INSTITUICAO             String?             @db.VarChar(70)
  NU_CPF_OR_CNPJ                       String?             @db.VarChar(20)
  DS_EMAIL                             String              @db.VarChar(60)
  NU_TELEFONE                          String?             @db.VarChar(20)
  NU_CELULAR                           String              @db.VarChar(20)
  DS_ENDERECO                          String?             @db.VarChar(100)
  DT_CADASTRO                          DateTime            @db.DateTime
  DT_EXCLUSAO_LOGICA                   DateTime?           @db.DateTime
  TB_EVENTO_EXTERNO                    TB_EVENTO_EXTERNO[]

  @@schema(""evento_externo"")
}

model TB_ROLE {
  CO_SEQ_ROLE        Int                  @id(map: ""PK__TB_ROLE__B09DBE1CA2C1B029"") @default(autoincrement())
  NO_ROLE            String?              @db.VarChar(50)
  DS_ROLE            String?              @db.VarChar(150)
  CO_SISTEMA         Int
  DT_CADASTRO        DateTime             @default(now(), map: ""DEFAULT_TB_ROLE_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?            @db.DateTime
  RL_ROLE_RECURSO    RL_ROLE_RECURSO[]
  RL_USUARIO_ROLE    RL_USUARIO_ROLE[]
  TB_SISTEMA         seguranca_TB_SISTEMA @relation(fields: [CO_SISTEMA], references: [CO_SEQ_SISTEMA], onUpdate: NoAction, map: ""FK_TB_ROLE_TB_SISTEMA"")

  @@schema(""seguranca"")
}

model geral_TB_SISTEMA {
  CO_SEQ_SISTEMA     Int       @id(map: ""PK_TB_SISTEMA"") @default(autoincrement())
  SG_SISTEMA         String    @db.VarChar(15)
  NO_SISTEMA         String    @db.VarChar(50)
  DS_SISTEMA         String?   @db.VarChar(150)
  DT_CADASTRO        DateTime  @default(now(), map: ""DEFAULT_TB_SISTEMA_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime? @db.DateTime

  @@map(""TB_SISTEMA"")
  @@schema(""geral"")
}

model seguranca_TB_SISTEMA {
  CO_SEQ_SISTEMA     Int               @id(map: ""PK_TB_SISTEMA"") @default(autoincrement())
  SG_SISTEMA         String            @db.VarChar(15)
  NO_SISTEMA         String            @db.VarChar(50)
  DS_SISTEMA         String?           @db.VarChar(150)
  DT_CADASTRO        DateTime          @default(now(), map: ""DEFAULT_TB_SISTEMA_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?         @db.DateTime
  TA_TIPO_ARQUIVO    TA_TIPO_ARQUIVO[]
  TB_NOTIFICACAO     TB_NOTIFICACAO[]
  TB_RECURSO         TB_RECURSO[]
  TB_ROLE            TB_ROLE[]

  @@map(""TB_SISTEMA"")
  @@schema(""seguranca"")
}

model tb_teste_liquibase {
  id        Int     @id(map: ""PK__tb_teste__3213E83FC741FDE1"") @default(autoincrement())
  dsc_teste String? @db.VarChar(255)
  obs       String? @db.VarChar(255)

  @@schema(""evento_externo"")
}

model TB_USUARIO {
  CO_SEQ_USUARIO           Int                 @id(map: ""PK_TB_USUARIO"") @default(autoincrement())
  NU_CPF                   String              @db.VarChar(11)
  DS_EMAIL                 String?             @db.VarChar(50)
  DS_NOME_USUARIO          String?             @db.VarChar(150)
  DS_PASSWORD              String              @db.VarChar(150)
  NU_TELEFONE              String?             @db.VarChar(20)
  DT_CADASTRO              DateTime?           @db.DateTime
  DT_EXCLUSAO_LOGICA       DateTime?           @db.DateTime
  IM_FOTO_USUARIO          String?             @db.Text
  ST_EMAIL_VERIFIED        Boolean
  ST_PHONE_NUMBER_VERIFIED Boolean
  RL_USUARIO_ROLE          RL_USUARIO_ROLE[]
  TB_EVENTO_EXTERNO        TB_EVENTO_EXTERNO[]

  @@schema(""seguranca"")
}

model TB_ZONA_CONSEG {
  CO_SEQ_ZONA_CONSEG Int               @id(map: ""PK_TB_ZONA_CONSEG"") @default(autoincrement())
  NU_ZONA_ELEITORAL  Int
  CO_CONSEG          Int
  DT_CADASTRO        DateTime          @default(now(), map: ""DEFAULT_TB_ZONA_CONSEG_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA DateTime?         @db.DateTime
  TB_CONSEG          TB_CONSEG         @relation(fields: [CO_CONSEG], references: [CO_SEQ_CONSEG], onUpdate: NoAction, map: ""FK_TB_ZONA_CONSEG_TB_CONSEG"")
  TB_ZONA_ELEITORAL  TB_ZONA_ELEITORAL @relation(fields: [NU_ZONA_ELEITORAL], references: [CO_SEQ_ZONA_ELEITORAL], onUpdate: NoAction, map: ""FK_TB_ZONA_CONSEG_TB_ZONA_ELEITORAL"")

  @@schema(""conseg"")
}

model TB_ZONA_ELEITORAL {
  CO_SEQ_ZONA_ELEITORAL Int              @id(map: ""PK__TB_ZONA___12C236F0638F9ED6"")
  DS_ZONA_ELEITORAL     String           @db.VarChar(75)
  TB_PESSOA             TB_PESSOA[]
  TB_ZONA_CONSEG        TB_ZONA_CONSEG[]

  @@schema(""conseg"")
}

model RL_DEVOLUTIVA_ARQUIVO {
  CO_SEQ_DEVOLUTIVA_ARQUIVO    Int                           @id(map: ""PK_RL_DEVOLUTIVA_ARQUIVO"") @default(autoincrement())
  CO_DEVOLUTIVA_CADASTRO       Int
  CO_DEVOLUTIVA_ACOMPANHAMENTO Int?
  CO_ARQUIVO                   Int
  DT_CADASTRO                  DateTime                      @default(now(), map: ""DEFAULT_RL_DEVOLUTIVA_ARQUIVO_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA           DateTime?                     @db.DateTime
  TB_ARQUIVO                   TB_ARQUIVO                    @relation(fields: [CO_ARQUIVO], references: [CO_SEQ_ARQUIVO], onUpdate: NoAction, map: ""FK_RL_DEVOLUTIVA_ARQUIVO_TB_ARQUIVO"")
  TB_DEVOLUTIVA_ACOMPANHAMENTO TB_DEVOLUTIVA_ACOMPANHAMENTO? @relation(fields: [CO_DEVOLUTIVA_ACOMPANHAMENTO], references: [CO_SEQ_DEVOLUTIVA_ACOMPANHAMENTO], onDelete: NoAction, onUpdate: NoAction, map: ""FK_RL_DEVOLUTIVA_ARQUIVO_TB_DEVOLUTIVA_ACOMPANHAMENTO"")
  TB_DEVOLUTIVA_CADASTRO       TB_DEVOLUTIVA_CADASTRO        @relation(fields: [CO_DEVOLUTIVA_CADASTRO], references: [CO_SEQ_DEVOLUTIVA_CADASTRO], onUpdate: NoAction, map: ""FK_RL_DEVOLUTIVA_ARQUIVO_TB_DEVOLUTIVA_CADASTRO"")

  @@schema(""devolutivas"")
}

model TB_DEVOLUTIVA_ACOMPANHAMENTO {
  CO_SEQ_DEVOLUTIVA_ACOMPANHAMENTO Int                     @id(map: ""PK_TB_DEVOLUTIVA_ACOMPANHAMENTO"") @default(autoincrement())
  CO_DEVOLUTIVA_CADASTRO           Int
  CO_IOA                           Int
  DS_DESCRICAO                     String?                 @db.VarChar(255)
  NU_PROCESSO_SEI                  String?                 @db.VarChar(22)
  RL_DEVOLUTIVA_ARQUIVO            RL_DEVOLUTIVA_ARQUIVO[]
  TB_DEVOLUTIVA_CADASTRO           TB_DEVOLUTIVA_CADASTRO  @relation(fields: [CO_DEVOLUTIVA_CADASTRO], references: [CO_SEQ_DEVOLUTIVA_CADASTRO], onUpdate: NoAction, map: ""FK_TB_DEVOLUTIVA_ACOMPANHAMENTO_TB_DEVOLUTIVA_CADASTRO"")
  TB_IOA                           TB_IOA                  @relation(fields: [CO_IOA], references: [CO_SEQ_IOA], onUpdate: NoAction, map: ""FK_TB_DEVOLUTIVA_ACOMPANHAMENTO_TB_IOA"")
  TB_HISTORICO_ESTADO              TB_HISTORICO_ESTADO[]

  @@schema(""devolutivas"")
}

model TB_DEVOLUTIVA_CADASTRO {
  CO_SEQ_DEVOLUTIVA_CADASTRO   Int                            @id(map: ""PK_TB_DEVOLUTIVA_CADASTRO"") @default(autoincrement())
  NU_PROTOCOLO                 String?                        @db.VarChar(20)
  NO_TITULO                    String                         @db.VarChar(255)
  CO_EIXO_SEGURANCA_INTEGRAL   Int
  CO_CONSEG                    Int
  NO_RESPONSAVEL               String                         @db.NVarChar(70)
  NU_CPF_RESPONSAVEL           String?                        @db.VarChar(20)
  NU_TELEFONE                  String?                        @db.VarChar(20)
  NU_CELULAR                   String?                        @db.VarChar(20)
  DS_EMAIL                     String?                        @db.VarChar(60)
  DS_ENDERECO                  String?                        @db.VarChar(255)
  DS_DESCRICAO                 String?                        @db.VarChar(255)
  DS_LATITUDE                  String?                        @db.VarChar(255)
  DS_LONGITUDE                 String?                        @db.VarChar(255)
  DT_CADASTRO                  DateTime                       @default(now(), map: ""DEFAULT_TB_DEVOLUTIVA_CADASTRO_DT_CADASTRO"") @db.DateTime
  CO_SUB_USER_CADASTRO         String                         @db.VarChar(50)
  NO_USER_CADASTRO             String                         @db.VarChar(100)
  NU_CPF_USER_CADASTRO         String                         @db.VarChar(20)
  DT_EXCLUSAO_LOGICA           DateTime?                      @db.DateTime
  RL_DEVOLUTIVA_ARQUIVO        RL_DEVOLUTIVA_ARQUIVO[]
  TB_DEVOLUTIVA_ACOMPANHAMENTO TB_DEVOLUTIVA_ACOMPANHAMENTO[]
  TB_CONSEG                    TB_CONSEG                      @relation(fields: [CO_CONSEG], references: [CO_SEQ_CONSEG], onUpdate: NoAction, map: ""FK_TB_DEVOLUTIVA_CADASTRO_TB_CONSEG"")
  TB_EIXO_SEGURANCA_INTEGRAL   TB_EIXO_SEGURANCA_INTEGRAL     @relation(fields: [CO_EIXO_SEGURANCA_INTEGRAL], references: [CO_SEQ_EIXO_SEGURANCA_INTEGRAL], onUpdate: NoAction, map: ""FK_TB_DEVOLUTIVA_CADASTRO_TB_EIXO_SEGURANCA_INTEGRAL"")
  TB_HISTORICO_ESTADO          TB_HISTORICO_ESTADO[]

  @@schema(""devolutivas"")
}

model TB_EIXO_SEGURANCA_INTEGRAL {
  CO_SEQ_EIXO_SEGURANCA_INTEGRAL Int                      @id(map: ""PK_TB_EIXO_SEGURANCA_INTEGRAL"") @default(autoincrement())
  NO_EIXO_SEGURANCA_INTEGRAL     String                   @db.VarChar(100)
  DT_CADASTRO                    DateTime                 @default(now(), map: ""DEFAULT_TB_EIXO_SEGURANCA_INTEGRAL_DT_CADASTRO"") @db.DateTime
  DT_EXCLUSAO_LOGICA             DateTime?                @db.DateTime
  TB_DEVOLUTIVA_CADASTRO         TB_DEVOLUTIVA_CADASTRO[]

  @@schema(""devolutivas"")
}

model TB_HISTORICO_ESTADO {
  CO_SEQ_HISTORICO_ESTADO      Int                           @id(map: ""PK_TB_HISTORICO_ESTADO"") @default(autoincrement())
  CO_DEVOLUTIVA_CADASTRO       Int
  CO_DEVOLUTIVA_ACOMPANHAMENTO Int?
  DS_ESTADO                    String                        @db.VarChar(20)
  DT_CADASTRO                  DateTime                      @default(now(), map: ""DEFAULT_TB_HISTORICO_ESTADO_DT_CADASTRO"") @db.DateTime
  CO_SUB_USER_CADASTRO         String                        @db.VarChar(50)
  NO_USER_CADASTRO             String                        @db.VarChar(100)
  NU_CPF_USER_CADASTRO         String                        @db.VarChar(20)
  DT_EXCLUSAO_LOGICA           DateTime?                     @db.DateTime
  TB_DEVOLUTIVA_ACOMPANHAMENTO TB_DEVOLUTIVA_ACOMPANHAMENTO? @relation(fields: [CO_DEVOLUTIVA_ACOMPANHAMENTO], references: [CO_SEQ_DEVOLUTIVA_ACOMPANHAMENTO], onDelete: NoAction, onUpdate: NoAction, map: ""FK_TB_HISTORICO_ESTADO_TB_DEVOLUTIVA_ACOMPANHAMENTO_1"")
  TB_DEVOLUTIVA_CADASTRO       TB_DEVOLUTIVA_CADASTRO        @relation(fields: [CO_DEVOLUTIVA_CADASTRO], references: [CO_SEQ_DEVOLUTIVA_CADASTRO], onUpdate: NoAction, map: ""FK_TB_HISTORICO_ESTADO_TB_DEVOLUTIVA_CADASTRO"")

  @@schema(""devolutivas"")
}

```

```ts
// Add your code using Prisma Client
const result = await this.prisma.tB_DEVOLUTIVA_CADASTRO.findMany({
      include: {
        TB_EIXO_SEGURANCA_INTEGRAL: {
          select: {
            CO_SEQ_EIXO_SEGURANCA_INTEGRAL: true,
            NO_EIXO_SEGURANCA_INTEGRAL: true,
          },
        },
        TB_CONSEG: {
          select: {
            CO_SEQ_CONSEG: true,
            DS_CONSEG: true,
          },
        },
        TB_HISTORICO_ESTADO: {
          where: {
            CO_DEVOLUTIVA_ACOMPANHAMENTO: null,
            DT_EXCLUSAO_LOGICA: null,
          },
          orderBy: {
            DT_CADASTRO: 'desc',
          },
          take: 1,
          select: {
            CO_DEVOLUTIVA_CADASTRO: true,
            CO_DEVOLUTIVA_ACOMPANHAMENTO: true,
            DS_ESTADO: true,
            DT_CADASTRO: true,
            CO_SUB_USER_CADASTRO: true,
            NO_USER_CADASTRO: true,
            NU_CPF_USER_CADASTRO: true,
          },
        },
        RL_DEVOLUTIVA_ARQUIVO: {
          where: {
            CO_DEVOLUTIVA_ACOMPANHAMENTO: null,
            DT_EXCLUSAO_LOGICA: null,
          },
          select: {
            CO_DEVOLUTIVA_CADASTRO: true,
            CO_DEVOLUTIVA_ACOMPANHAMENTO: true,
            CO_ARQUIVO: true,
            TB_ARQUIVO: {
              select: {
                CO_SEQ_ARQUIVO: true,
                CO_TIPO_ARQUIVO: true,
                DS_CAMINHO_ARQUIVO: true,
                NO_ORIGINAL: true,
                TA_TIPO_ARQUIVO: {
                  select: {
                    CO_SEQ_TIPO_ARQUIVO: true,
                    DS_TIPO_ARQUIVO: true,
                  },
                },
              },
            },
          },
        },
        TB_DEVOLUTIVA_ACOMPANHAMENTO: {
          select: {
            CO_SEQ_DEVOLUTIVA_ACOMPANHAMENTO: true,
            CO_DEVOLUTIVA_CADASTRO: true,
            CO_IOA: true,
            TB_IOA: {
              select: {
                CO_SEQ_IOA: true,
                SG_IOA: true,
                NO_IOA: true,
              },
            },
            DS_DESCRICAO: true,
            NU_PROCESSO_SEI: true,
            TB_HISTORICO_ESTADO: {
              where: {
                CO_DEVOLUTIVA_ACOMPANHAMENTO: {
                  not: null,
                },
                //CO_DEVOLUTIVA_ACOMPANHAMENTO: {
                //  equals: Number('$parent.CO_SEQ_DEVOLUTIVA_ACOMPANHAMENTO'),
                //},
                DT_EXCLUSAO_LOGICA: null,
              },
              orderBy: {
                DT_CADASTRO: 'desc',
              },
              take: 1,
              select: {
                CO_DEVOLUTIVA_CADASTRO: true,
                CO_DEVOLUTIVA_ACOMPANHAMENTO: true,
                DS_ESTADO: true,
                DT_CADASTRO: true,
                CO_SUB_USER_CADASTRO: true,
                NO_USER_CADASTRO: true,
                NU_CPF_USER_CADASTRO: true,
              },
            },
            RL_DEVOLUTIVA_ARQUIVO: {
              where: {
                CO_DEVOLUTIVA_ACOMPANHAMENTO: {
                  not: null,
                },
                DT_EXCLUSAO_LOGICA: null,
              },
              select: {
                CO_DEVOLUTIVA_CADASTRO: true,
                CO_DEVOLUTIVA_ACOMPANHAMENTO: true,
                CO_ARQUIVO: true,
                TB_ARQUIVO: {
                  select: {
                    CO_SEQ_ARQUIVO: true,
                    CO_TIPO_ARQUIVO: true,
                    DS_CAMINHO_ARQUIVO: true,
                    NO_ORIGINAL: true,
                    TA_TIPO_ARQUIVO: {
                      select: {
                        CO_SEQ_TIPO_ARQUIVO: true,
                        DS_TIPO_ARQUIVO: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    });

    return result;
  }
```


### Environment & setup

- OS: DOCKER, KUBERNETS
- Database: MSSQL
- Node.js node:20 -> LATEST VERSION-->


### Prisma Version

```
""@prisma/client"": ""^5.10.2"",
 ""dependencies"": {
    ""@nestjs/axios"": ""^3.0.2"",
    ""@nestjs/common"": ""^10.3.3"",
    ""@nestjs/config"": ""^3.2.0"",
    ""@nestjs/core"": ""^10.3.3"",
    ""@nestjs/mapped-types"": ""*"",
    ""@nestjs/platform-express"": ""^10.3.3"",
    ""@nestjs/swagger"": ""^7.3.0"",
    ""@prisma/client"": ""^5.10.2"",
    ""axios"": ""^1.6.7"",
    ""class-transformer"": ""^0.5.1"",
    ""class-validator"": ""^0.14.1"",
    ""image-to-pdf"": ""^2.0.0"",
    ""jsonschema"": ""^1.4.1"",
    ""jwt-decode"": ""^4.0.0"",
    ""keycloak-connect"": ""^24.0.1"",
    ""lodash.get"": ""^4.4.2"",
    ""nest-keycloak-connect"": ""^1.9.5"",
    ""reflect-metadata"": ""^0.2.1"",
    ""rxjs"": ""^7.8.1""
  },
```
",,
2177464461,23423,Major Bug - Connection Size Ignored In Postgres,"### Bug description

I am trying to set the connection limit for my database which is obviously very important. I need to increase the connections to properly leverage the DB. 

When I set the connection info prisma ignores the request.

### How to reproduce

My database connection url is set like this:
``` export DATABASE_URL=""postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME?connection_limit=10"" ```

And this is passed through to Prisma as the following:
```
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```


### Expected behavior


I create my client using the following:
```
import { PrismaClient } from '@prisma/client'
export const prisma = new PrismaClient({
  log: ['info']
})
```
And I get the following output:
```prisma:info Starting a postgresql pool with 21 connections.```
Which is clearly defaulting to the Prisma formula 2*10+1 for my 10 core m1 ignoring the set value. This is a really big problem as it means my one cpu  workers that do parallel work can be scaled to take advantage of the DB.


### Prisma information

generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""native"", ""linux-arm64-openssl-3.0.x""]
  previewFeatures = [""fullTextSearch"", ""metrics""]
}


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v18.17.1


### Prisma Version

```
""@prisma/client"": ""^5.10.2"",
""prisma"": ""^5.10.2"",
```

I updated to lastest today
",,
2177143405,23416,Wrong type of compound unique with optional fields,"### Bug description

When using compound uniques with optional fields, Prisma generates types of compound unique that does not allow for the optional fields to be optional.

### How to reproduce

1. Create Prisma schema:
```
model Test {
  id        Int      @id @default(autoincrement())
  optional1 String?
  optional2 String?
  required  String

  @@unique([optional1, optional2, required])
}
```
2. Generate client.
3. Type `TestOptionalRequiredCompoundUniqueInput` in `node_modules/.prisma/client/index.d.ts` is going to be:
```
  export type TestOptionalRequiredCompoundUniqueInput = {
    optional1: string
    optional2: string
    required: string
  }
```


### Expected behavior

I would expect `TestOptionalRequiredCompoundUniqueInput` to be something like
```
  export type TestOptionalRequiredCompoundUniqueInput = {
    optional1?: string
    optional2?: string
    required: string
  }
```

### Prisma information

model Test {
  id       Int     @id @default(autoincrement())
  optional1 String?
  optional2 String?
  required  String

  @@unique([optional1, optional2, required])
}

### Environment & setup

- OS: Ubuntu 22.04
- Database: Postgres
- Node.js version: 20.10.0


### Prisma Version

```
5.10.2
```
",,
2176936358,23413,PrismaClientRustPanicError: Following a POST request to our application's endpoint from different origin.,"Hello,

We're developing a straightforward waitlist tool designed to enable our users to integrate a signup form directly onto their own websites. Users embed a simple HTML code snippet that users can copy from our application, located at https://waitless.cc. Here is the HTML code snippet from our embed form.

```
<div class=container-__ID__ style=""display: flex"">
	<form
		autocomplete=""off""
		class=""form-__ID__""
		style=""display: flex""
		action=""__DOMAIN__/action/create-sub/__LISTID__""
		method=""POST""
	>
		<input
			type=""text""
			style=""display: inline-flex""
			class=""input-__ID__""
			name=""email""
			type=""email""
			placeholder=""__PLACEHOLDER__""
			required
		/>

		<button type=""submit"" class=""button-__ID__"">
			<div class=""cta-__ID__"" style=""opacity: __OCTA__; display: block"">
				__CTA__
			</div>
			<div class=""error-__ID__"" style=""opacity: 0; display: none""></div>
			<div class=""loading-__ID__"" style=""opacity: __OLOADING__"">
				<div class=""loading-bar-__ID__"">
					<div class=""loading-pill-__ID__""></div>
				</div>
			</div>
		</button>
	</form>
</div>
```

The issue occurs when a POST request is sent from another origin (from the embed form above) to our Remix route /action/create-sub/$listId below:

```
import { parseWithZod } from '@conform-to/zod'
import { invariantResponse } from '@epic-web/invariant'
import {
	json,
	type ActionFunctionArgs,
	type HeadersFunction,
} from '@remix-run/node'
import { nanoid } from 'nanoid'
import { z } from 'zod'
import { EmailSchema } from '#app/components/design/public-form'
import { prisma } from '#app/utils/db.server'
import { getEnv } from '#app/utils/env.server'
import { checkHoneypot } from '#app/utils/honeypot.server'

export const headers: HeadersFunction = () => ({
	'Access-Control-Allow-Origin': '*',
	'Access-Control-Allow-Methods': 'POST',
	'Access-Control-Allow-Headers':
		'Content-Type, Authorization, X-Requested-With',
	'Access-Control-Allow-Credentials': 'true',
})

export async function action({ params, request }: ActionFunctionArgs) {
	const { listId } = params
	const formData = await request.formData()
	const domain = getEnv().DOMAIN
	const list = await prisma.list.findUnique({
		where: { id: listId },
		select: { id: true, signUpPage: { select: { redirectUrl: true } } },
	})

	invariantResponse(list, 'List not found', { status: 404 })
	checkHoneypot(formData)

	const submission = await parseWithZod(formData, {
		schema: EmailSchema.superRefine(async (data, ctx) => {
			const sub = await prisma.sub.findFirst({
				where: {
					AND: [{ email: data.email }, { listId: list.id }],
				},
			})

			if (sub) {
				ctx.addIssue({
					path: ['email'],
					code: z.ZodIssueCode.custom,
					message: 'Already subscribed',
				})
				return
			}
		}),
		async: true,
	})

	if (submission.status !== 'success') {
		console.log('error', submission.reply().error?.email)
		return json({
			res: {
				error: submission.reply().error?.email,
				redirect: undefined,
			},
		})
	}

	const { email } = submission.value

	const sub = await prisma.sub.create({
		data: {
			email,
			shortId: nanoid(8),
			list: { connect: { id: listId } },
		},
		select: {
			shortId: true,
		},
	})

	const redirect = list.signUpPage?.redirectUrl
		? list.signUpPage?.redirectUrl
		: `${domain}/me/${sub.shortId}`

	return json({ res: { error: undefined, redirect } })
}
```

When a user attempts to sign up via one of our embedded forms on external websites, we encounter a CORS error, which is expected. However, during sub creation—a process that functions seamlessly throughout the rest of the application—we face a PrismaClientRustPanicError, causing the entire application to crash until we manually restart it.

![Screenshot 2024-03-08 at 20 18 06](https://github.com/epicweb-dev/epic-stack/assets/84042097/91be6712-d5a8-4aaa-9828-e2a682b57584)

Does anyone have insights into what might be causing this problem?",,
2176694214,23410,Add esm support to `@prisma/instrumentation`,"## Problem

`@prisma/instrumentation` is not ESM compatible.

https://github.com/prisma/prisma/blob/caeb9ba88cba8bafca8654e2c903160aa16a3fd5/packages/instrumentation/src/constants.ts#L1

The require call above is one part of it, but the other is that the package needs to be emitted with `type: module` or `*.mjs`.

## Suggested solution

Make the package ESM compatible.
",,
2175444652,23407,internal error: entered unreachable code,"Hi Prisma Team! My Prisma Client just crashed. This is the report:

The code shown below gets this crash pretty consistently with concurrency set to 100

## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v20.11.0           | 
| OS              | darwin-arm64       |
| Prisma Client   | 5.10.2             |
| Query Engine    | 5a9203d0590c951969e85a7d07215503f4672eb9|
| Database        | sqlite             |

I have also reproduced this on linux-x64

## Logs
```

thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:167:18:
internal error: entered unreachable code
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
/Users/yaseenhamdulay/prisma-concurrency-test/node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/runtime/library.js:123
`)}var Yi=({clientMethod:e,activeProvider:r})=>t=>{let n="""",i;if(Array.isArray(t)){let[o,...s]=t;n=o,i={values:Ct(s||[]),__prismaRawParameters__:!0}}else switch(r){case""sqlite"":case""mysql"":{n=t.sql,i={values:Ct(t.values),__prismaRawParameters__:!0};break}case""cockroachdb"":case""postgresql"":case""postgres"":{n=t.text,i={values:Ct(t.values),__prismaRawParameters__:!0};break}case""sqlserver"":{n=el(t),i={values:Ct(t.values),__prismaRawParameters__:!0};break}default:throw new Error(`The ${r} provider does not support ${e}`)}return i?.values?il(`prisma.${e}(${n}, ${i.values})`):il(`prisma.${e}(${n})`),{query:n,parameters:i}},ol={requestArgsToMiddlewareArgs(e){return[e.strings,...e.values]},middlewareArgsToRequestArgs(e){let[r,...t]=e;return new oe(r,t)}},sl={requestArgsToMiddlewareArgs(e){return[e]},middlewareArgsToRequestArgs(e){return e[0]}};function Zi(e){return function(t){let n,i=(o=e)=>{try{return o===void 0||o?.kind===""itx""?n??(n=al(t(o))):al(t(o))}catch(s){return Promise.reject(s)}};return{then(o,s){return i().then(o,s)},catch(o){return i().catch(o)},finally(o){return i().finally(o)},requestTransaction(o){let s=i(o);return s.requestTransaction?s.requestTransaction(o):s},[Symbol.toStringTag]:""PrismaPromise""}}}function al(e){return typeof e.then==""function""?e:Promise.resolve(e)}var ll={isEnabled(){return!1},getTraceParent(){return""00-10-10-00""},async createEngineSpan(){},getActiveContext(){},runInChildSpan(e,r){return r()}},Xi=class{isEnabled(){return this.getGlobalTracingHelper().isEnabled()}getTraceParent(r){return this.getGlobalTracingHelper().getTraceParent(r)}createEngineSpan(r){return this.getGlobalTracingHelper().createEngineSpan(r)}getActiveContext(){return this.getGlobalTracingHelper().getActiveContext()}runInChildSpan(r,t){return this.getGlobalTracingHelper().runInChildSpan(r,t)}getGlobalTracingHelper(){return globalThis.PRISMA_INSTRUMENTATION?.helper??ll}};function ul(e){return e.includes(""tracing"")?new Xi:ll}function cl(e,r=()=>{}){let t,n=new Promise(i=>t=i);return{then(i){return--e===0&&t(r()),i?.(n)}}}var Qm=[""$connect"",""$disconnect"",""$on"",""$transaction"",""$use"",""$extends""],pl=Qm;function ml(e){return typeof e==""string""?e:e.reduce((r,t)=>{let n=typeof t==""string""?t:t.level;return n===""query""?r:r&&(t===""info""||r===""info"")?""info"":n},void 0)}var Sn=class{constructor(){this._middlewares=[]}use(r){this._middlewares.push(r)}get(r){return this._middlewares[r]}has(r){return!!this._middlewares[r]}length(){return this._middlewares.length}};var fl=_(li());function Rn(e){return typeof e.batchRequestIdx==""number""}function An(e){return e===null?e:Array.isArray(e)?e.map(An):typeof e==""object""?Gm(e)?Jm(e):hr(e,An):e}function Gm(e){return e!==null&&typeof e==""object""&&typeof e.$type==""string""}function Jm({$type:e,value:r}){switch(e){case""BigInt"":return BigInt(r);case""Bytes"":return Buffer.from(r,""base64"");case""DateTime"":return new Date(r);case""Decimal"":return new Te(r);case""Json"":return JSON.parse(r);default:tr(r,""Unknown tagged value"")}}function dl(e){if(e.action!==""findUnique""&&e.action!==""findUniqueOrThrow"")return;let r=[];return e.modelName&&r.push(e.modelName),e.query.arguments&&r.push(eo(e.query.arguments)),r.push(eo(e.query.selection)),r.join("""")}function eo(e){return`(${Object.keys(e).sort().map(t=>{let n=e[t];return typeof n==""object""&&n!==null?`(${t} ${eo(n)})`:t}).join("" "")})`}var Hm={aggregate:!1,aggregateRaw:!1,createMany:!0,createOne:!0,deleteMany:!0,deleteOne:!0,executeRaw:!0,findFirst:!1,findFirstOrThrow:!1,findMany:!1,findRaw:!1,findUnique:!1,findUniqueOrThrow:!1,groupBy:!1,queryRaw:!1,runCommandRaw:!0,updateMany:!0,updateOne:!0,upsertOne:!0};function ro(e){return Hm[e]}var In=class{constructor(r){this.options=r;this.tickActive=!1;this.batches={}}request(r){let t=this.options.batchBy(r);return t?(this.batches[t]||(this.batches[t]=[],this.tickActive||(this.tickActive=!0,process.nextTick(()=>{this.dispatchBatches(),this.tickActive=!1}))),new Promise((n,i)=>{this.batches[t].push({request:r,resolve:n,reject:i})})):this.options.singleLoader(r)}dispatchBatches(){for(let r in this.batches){let t=this.batches[r];delete this.batches[r],t.length===1?this.options.singleLoader(t[0].request).then(n=>{n instanceof Error?t[0].reject(n):t[0].resolve(n)}).catch(n=>{t[0].reject(n)}):(t.sort((n,i)=>this.options.batchOrder(n.request,i.request)),this.options.batchLoader(t.map(n=>n.request)).then(n=>{if(n instanceof Error)for(let i=0;i<t.length;i++)t[i].reject(n);else for(let i=0;i<t.length;i++){let o=n[i];o instanceof Error?t[i].reject(o):t[i].resolve(o)}}).catch(n=>{for(let i=0;i<t.length;i++)t[i].reject(n)}))}}get[Symbol.toStringTag](){return""DataLoader""}};var Wm=N(""prisma:client:request_handler""),_n=class{constructor(r,t){this.logEmitter=t,this.client=r,this.dataloader=new In({batchLoader:na(async({requests:n,customDataProxyFetch:i})=>{let{transaction:o,otelParentCtx:s}=n[0],a=n.map(p=>p.protocolQuery),l=this.client._tracingHelper.getTraceParent(s),u=n.some(p=>ro(p.protocolQuery.action));return(await this.client._engine.requestBatch(a,{traceparent:l,transaction:Km(o),containsWrite:u,customDataProxyFetch:i})).map((p,m)=>{if(p instanceof Error)return p;try{return this.mapQueryEngineResult(n[m],p)}catch(f){return f}})}),singleLoader:async n=>{let i=n.transaction?.kind===""itx""?gl(n.transaction):void 0,o=await this.client._engine.request(n.protocolQuery,{traceparent:this.client._tracingHelper.getTraceParent(),interactiveTransaction:i,isWrite:ro(n.protocolQuery.action),customDataProxyFetch:n.customDataProxyFetch});return this.mapQueryEngineResult(n,o)},batchBy:n=>n.transaction?.id?`transaction-${n.transaction.id}`:dl(n.protocolQuery),batchOrder(n,i){return n.transaction?.kind===""batch""&&i.transaction?.kind===""batch""?n.transaction.index-i.transaction.index:0}})}async request(r){try{return await this.dataloader.request(r)}catch(t){let{clientMethod:n,callsite:i,transaction:o,args:s,modelName:a}=r;this.handleAndLogRequestError({error:t,clientMethod:n,callsite:i,transaction:o,args:s,modelName:a})}}mapQueryEngineResult({dataPath:r,unpacker:t},n){let i=n?.data,o=n?.elapsed,s=this.unpack(i,r,t);return process.env.PRISMA_CLIENT_GET_TIME?{data:s,elapsed:o}:s}handleAndLogRequestError(r){try{this.handleRequestError(r)}catch(t){throw this.logEmitter&&this.logEmitter.emit(""error"",{message:t.message,target:r.clientMethod,timestamp:new Date}),t}}handleRequestError({error:r,clientMethod:t,callsite:n,transaction:i,args:o,modelName:s}){if(Wm(r),zm(r,i)||r instanceof Le)throw r;if(r instanceof V&&Ym(r)){let l=hl(r.meta);Cn({args:o,errors:[l],callsite:n,errorFormat:this.client._errorFormat,originalMethod:t,clientVersion:this.client._clientVersion})}let a=r.message;if(n&&(a=Ar({callsite:n,originalMethod:t,isPanic:r.isPanic,showColors:this.client._errorFormat===""pretty"",message:a})),a=this.sanitizeMessage(a),r.code){let l=s?{modelName:s,...r.meta}:r.meta;throw new V(a,{code:r.code,clientVersion:this.client._clientVersion,meta:l,batchRequestIdx:r.batchRequestIdx})}else{if(r.isPanic)throw new ue(a,this.client._clientVersion);if(r instanceof j)throw new j(a,{clientVersion:this.client._clientVersion,batchRequestIdx:r.batchRequestIdx});if(r instanceof S)throw new S(a,this.client._clientVersion);if(r instanceof ue)throw new ue(a,this.client._clientVersion)}throw r.clientVersion=this.client._clientVersion,r}sanitizeMessage(r){return this.client._errorFormat&&this.client._errorFormat!==""pretty""?(0,fl.default)(r):r}unpack(r,t,n){if(!r||(r.data&&(r=r.data),!r))return r;let i=Object.values(r)[0],o=t.filter(a=>a!==""select""&&a!==""include""),s=An(Ai(i,o));return n?n(s):s}get[Symbol.toStringTag](){return""RequestHandler""}};function Km(e){if(e){if(e.kind===""batch"")return{kind:""batch"",options:{isolationLevel:e.isolationLevel}};if(e.kind===""itx"")return{kind:""itx"",options:gl(e)};tr(e,""Unknown transaction kind"")}}function gl(e){return{id:e.id,payload:e.payload}}function zm(e,r){return Rn(e)&&r?.kind===""batch""&&e.batchRequestIdx!==r.index}function Ym(e){return e.code===""P2009""||e.code===""P2012""}function hl(e){if(e.kind===""Union"")return{kind:""Union"",errors:e.errors.map(hl)};if(Array.isArray(e.selectionPath)){let[,...r]=e.selectionPath;return{...e,selectionPath:r}}return e}var yl=""5.10.2"";var El=yl;function bl(e){return e.map(r=>{let t={};for(let n of Object.keys(r))t[n]=wl(r[n]);return t})}function wl({prisma__type:e,prisma__value:r}){switch(e){case""bigint"":return BigInt(r);case""bytes"":return Buffer.from(r,""base64"");case""decimal"":return new Te(r);case""datetime"":case""date"":return new Date(r);case""time"":return new Date(`1970-01-01T${r}Z`);case""array"":return r.map(wl);default:return r}}var Tl=_(Hi());var q=class extends Error{constructor(r){super(r+`


PrismaClientRustPanicError:
Invalid `prisma.user.create()` invocation in
/Users/yaseenhamdulay/prisma-concurrency-test/test.js:7:23

  4 const createUser = async (j) => {
  5   for (var i = 0; i < 100; i++) {
  6     const r = Math.ceil(Math.random() * 100000);
→ 7     await prisma.user.create(
internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
```

```
, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:cli
```


# Code
```
const { PrismaClient } = require(""@prisma/client"");
const prisma = new PrismaClient();

const createUser = async (j) => {
  for (var i = 0; i < 100; i++) {
    const r = Math.ceil(Math.random() * 100000);
    await prisma.user.create({
      data: {
        id: j * 10000 + i,
        name: r.toString(),
      },
    });
  }
};

const runTest = async (concurrentUsers) => {
  const promises = [];
  for (let i = 0; i < concurrentUsers; i++) {
    promises.push(createUser(i));
  }

  console.time(""test"");
  await Promise.all(promises);
  console.timeEnd(""test"");
};

runTest(10); // Test with 100 concurrent queries
```

# Schema

```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

model User {
  id   Int    @id
  name String
}

```",,
2174836493,23402,"Error: Could not parse schema engine response: SyntaxError: Unexpected token '/', ""/data/data""... is not valid JSON","i got this error 
```
Error: Could not parse schema engine response: SyntaxError: Unexpected token '/', ""/data/data""... is not valid JSON
```

After Writing `prisma db push`

i'm using Next.js@13

**/app/issues/page.js**
```
""use client"";
import { createIssue } from ""@/actions/actions.js"";

const page = () => {
  const handelAction = async () => {
    return createIssue({ title: ""issue"", body: ""ossue"" });
  };
  return (
    <div onClick={handelAction} className=""btn btn-primary"">
      Issues
    </div>
  );
};

export default page;

```
**/actions/action.js**
```
""use server"";
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient();

export const createIssue = async data => {
  const issue = await prisma.issue.create({
    data: {
      title: data.title,
      body: data.body
    }
  });
  return issue;
};

```
**schema.prisma**
```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
provider = ""prisma-client-js""
previewFeatures = [""mongodb""]
}

datasource db {
provider = ""mongodb""
url      = env(""DATABASE_URL"")
}


model Issue {
id    String @id @default(auto()) @map(""_id"") @db.ObjectId
title    String
body     String
}
```

**package.json**
```
{
  ""name"": ""my-app"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint""
  },
  ""dependencies"": {
    ""@prisma/client"": ""^5.10.2"",
    ""next"": ""13.5.6"",
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""react-hook-form"": ""^7.51.0"",
    ""react-icons"": ""^5.0.1""
  },
  ""devDependencies"": {
    ""autoprefixer"": ""^10"",
    ""daisyui"": ""^4.7.2"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""13.5.6"",
    ""postcss"": ""^8"",
    ""prisma"": ""^5.10.2"",
    ""tailwindcss"": ""^3""
  }
}
```

am i missed something ?",,
2174633351,23400,Error: Maximum call stack size exceeded when using npx prisma,"### Bug description

 Using commands like `npx prisma generate` or `npx prisma migrate deploy` or `npx prisma <command>` produces this error: **Error: Maximum call stack size exceeded**  

### How to reproduce

1. Run `tsc && npx prisma migrate deploy && npx prisma generate` the first time. (This works)
2. Run `npx prisma <command>` a second time. (This doesn't anymore)

### Note
Issue does not happen when nodeJS is run as a docker container `FROM node:18`
The issue occurs when running npx locally. 

### Expected behavior

`npx prisma <command>` does not return call stack exceeded error and runs selected command against the database.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is the Prisma schema file,

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DB_URL"")
}

model FeeEstimates {
  id                 Int             @id @default(autoincrement())
  time               DateTime
  satsPerByte        Decimal
  movingAverageStart MovingAverages? @relation(""StartMovingAverage"")
  movingAverageEnd   MovingAverages? @relation(""EndMovingAverage"")
  FeeIndexes         FeeIndexes?
}

model MovingAverages {
  id                 Int          @id @default(autoincrement())
  feeEstimateStartId Int          @unique
  feeEstimateStart   FeeEstimates @relation(name: ""StartMovingAverage"", fields: [feeEstimateStartId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feeEstimateEndId   Int          @unique
  feeEstimateEnd     FeeEstimates @relation(name: ""EndMovingAverage"", fields: [feeEstimateEndId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  last365Days Decimal
  last30Days  Decimal
  createdAt   DateTime     @default(now())
  feeIndex    FeeIndexes[]
}

model FeeIndexes {
  id               Int            @id @default(autoincrement())
  feeEstimateId    Int            @unique
  feeEstimate      FeeEstimates   @relation(fields: [feeEstimateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  movingAverageId  Int
  movingAverage    MovingAverages @relation(fields: [movingAverageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ratioLast365Days Decimal
  ratioLast30Days  Decimal
  createdAt        DateTime       @default(now())
}

```

// This is the Dockerfile,
RUN npm install -g typescript mocha ts-node


USER node
WORKDIR /home/node/app
COPY --chown=node:node package*.json ./
RUN npm install
COPY --chown=node:node . .

ENV SERVER_PORT=3561
ENV WSS_PORT=3572
ENV PATH_TO_CSV=""/home/node/app/assets/fee_estimate_history.csv""

EXPOSE 3561
EXPOSE 3572

CMD npx prisma migrate deploy && npx prisma generate && npx tsc && npm start


### Sample Debug log:

npx prisma version
prisma:engines binaries to download libquery-engine, schema-engine +277ms
prisma:get-platform Found distro info:
{
  ""targetDistro"": ""debian"",
  ""familyDistro"": ""debian"",
  ""originalDistro"": ""pop""
} +4ms
prisma:get-platform Trying platform-specific paths for ""debian"" (and ""ubuntu"") +1ms
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +2ms
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
prisma:loadEnv project root found at /home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/package.json +527ms
prisma:tryLoadEnv Environment variables loaded from /home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/.env +11ms
Error: RangeError: Maximum call stack size exceeded
    at String.match (<anonymous>)
    at n (/home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/node_modules/prisma/build/index.js:251:2181)
    at /home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/node_modules/prisma/build/index.js:251:2454
    at Array.reduce (<anonymous>)
    at n (/home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/node_modules/prisma/build/index.js:251:2219)
    at /home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/node_modules/prisma/build/index.js:251:2454
    at Array.reduce (<anonymous>)
    at n (/home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/node_modules/prisma/build/index.js:251:2219)
    at /home/anorak/Anorak/SatoshiPortal/btc-fee-estimate-tracker/btc-fee-watcher/node_modules/prisma/build/index.js:251:2454
    at Array.reduce (<anonymous>)



### Environment & setup

- OS: Linux (Pop!_OS 22.04 LTS)
- Database: PostgresSQL 16.1 (Docker image)
- Node.js version: v18.17.1

### Prisma Version

^5.10.2",,
2173961623,23397,`AsyncLocalStorage` not available in event based handlers,"### Bug description

Handlers passed to `prisma.$on('query', handler)` are executed outside the scope of any configured async local storage.

### How to reproduce

Follow the steps in [this reproduction repository](https://github.com/eliasnorrby/prisma-async-local-storage-reproduction).

### Expected behavior

Properties set in async local storage can be accessed.

### Prisma information

See reproduction repository.

### Environment & setup

- OS: macOS
- Database: PostgreSQL, SQLite
- Node.js version: v18.16.1

### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.16.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2173617418,23394,Jest mocks fail when inside a prisma `query` extension,"### Bug description

Jest mocks dont work when they are inside a prisma query extension. The mocking just does nothing, and the query extension sees the unmocked dependency.

### How to reproduce

see https://github.com/Dakuan/prisma-mock for example and instructions


### Expected behavior

Should be possible to mock dependencies in tests with jest

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id   Int    @id @default(autoincrement())
  name String
  code String
}

```

```ts
import { PrismaClient } from ""@prisma/client"";
import { generate } from ""./generate"";

export const prisma = new PrismaClient().$extends({
  model: {
    user: {
      build: (firstName: string, lastName: string) => {
        return prisma.user.create({
          // generate is a non determinate function, so we need to mock it in tests for reliable results
          data: { name: `${firstName} ${lastName}`, code: generate() },
        });
      },
    },
  },
});

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2173058410,23392,Error: Unknow binaryTarget native and no custom engine files were provided - Bitbucket,"### Bug description

<img width=""1384"" alt=""image"" src=""https://github.com/prisma/prisma/assets/55927613/dcc83092-01d6-431d-9cd0-c804de2d9fd9"">


### How to reproduce

Use this schema.prisma with npx prisma

````js
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""rhel-openssl-1.0.x"", ""native""]
}

datasource db {
  provider = ""postgres""
  url      = env(""DATABASE_URL"")
}

generator erd {
  provider = ""prisma-erd-generator""
  theme    = ""neutral""
}

enum HEALTH_STATE {
  UNAVAILABLE
  AVAILABLE
}

enum INSTANCE_STATE {
  PENDING
  RUNNING
  STOPPING
  STOPPED
  SHUTTING_DOWN
  TERMINATED
}

enum INSTANCE_PROVISIONING_JOB_STATE {
  NEW
  IN_PROGRESS
  COMPLETE
  FAILED
}

model InstanceSubscriptionTier {
  id                       String                    @id @default(uuid()) @map(""_id"")
  name                     String                    @unique
  type                     String
  diskSize                 Int
  imageId                  String
  productId                String                    @unique
  instances                Instance[]
  instanceProvisioningJobs InstanceProvisioningJob[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@map(""instance_subscription_tiers"")
}

model User {
  id                       String                    @id @default(uuid()) @map(""_id"")
  userId                   String                    @unique
  accountId                String
  account                  Account                   @relation(""user_account"", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instanceProvisioningJobs InstanceProvisioningJob[] @relation
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@map(""users"")
}

model Instance {
  id            String                   @id @default(uuid()) @map(""_id"")
  instanceId    String                   @unique
  instanceState INSTANCE_STATE
  subdomain     String                   @unique
  state         HEALTH_STATE
  tierId        String
  tier          InstanceSubscriptionTier @relation(fields: [tierId], references: [id])
  accountId     String
  account       Account                  @relation(fields: [accountId], references: [id])
  job           InstanceProvisioningJob? @relation()
  pat           String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@map(""instances"")
}

model InstanceProvisioningJob {
  id                         String                          @id @default(uuid()) @map(""_id"")
  accountId                  String
  account                    Account                         @relation(fields: [accountId], references: [id])
  instanceSubdomain          String
  instanceSubscriptionTierId String
  instanceSubscriptionTier   InstanceSubscriptionTier        @relation(fields: [instanceSubscriptionTierId], references: [id])
  state                      INSTANCE_PROVISIONING_JOB_STATE
  error                      String?
  instanceId                 String?                         @unique
  instance                   Instance?                       @relation(fields: [instanceId], references: [id])
  createdBy                  User?                           @relation(fields: [createdById], references: [id])
  createdById                String?
  createdAt                  DateTime                        @default(now())
  updatedAt                  DateTime                        @updatedAt

  @@map(""instance_provision_jobs"")
}

model Account {
  id                    String                    @id @default(uuid()) @map(""_id"")
  accountId             String                    @unique
  users                 User[]                    @relation(""user_account"")
  instances             Instance[]
  instanceProvisionJobs InstanceProvisioningJob[]
  subdomains            Subdomain[]
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  @@map(""accounts"")
}

model Subdomain {
  id        String   @id @default(uuid()) @map(""_id"")
  name      String   @unique
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, accountId])
  @@map(""subdomains"")
}


````


package.json dependencies


````json
{
  ...
  ""devDependencies"": {
    ""@aws-sdk/types"": ""^3.428.0"",
    ""@commitlint/cli"": ""^17.8.0"",
    ""@commitlint/config-conventional"": ""^17.8.0"",
    ""@mermaid-js/mermaid-cli"": ""^10.8.0"",
    ""@sentry/cli"": ""^2.25.0"",
    ""@types/ajv"": ""^1.0.0"",
    ""@types/aws-lambda"": ""^8.10.130"",
    ""@types/crypto-js"": ""^4.2.1"",
    ""@types/jest"": ""^29.5.5"",
    ""@types/node"": ""20.7.1"",
    ""@types/uuid"": ""^9.0.8"",
    ""@types/winston"": ""^2.4.4"",
    ""@typescript-eslint/eslint-plugin"": ""^6.8.0"",
    ""aws-cdk"": ""2.114.0"",
    ""dotenv"": ""^16.3.1"",
    ""esbuild"": ""^0.20.0"",
    ""eslint"": ""^8.51.0"",
    ""eslint-config-prettier"": ""^9.0.0"",
    ""eslint-config-standard-with-typescript"": ""^39.1.1"",
    ""eslint-plugin-import"": ""^2.28.1"",
    ""eslint-plugin-jest"": ""^27.4.2"",
    ""eslint-plugin-n"": ""^16.2.0"",
    ""eslint-plugin-prettier"": ""^5.0.1"",
    ""eslint-plugin-promise"": ""^6.1.1"",
    ""husky"": ""^8.0.3"",
    ""jest"": ""^29.7.0"",
    ""lint-staged"": ""^15.0.1"",
    ""prettier"": ""^3.0.3"",
    ""prettier-plugin-prisma"": ""^5.0.0"",
    ""prisma"": ""^5.6.0"",
    ""prisma-erd-generator"": ""^1.11.2"",
    ""ts-jest"": ""^29.1.1"",
    ""ts-node"": ""^10.9.1"",
    ""tsconfig-paths"": ""^4.2.0"",
    ""typescript"": ""~5.2.2""
  },
  ""dependencies"": {
    ""@aws-sdk/client-apigatewaymanagementapi"": ""^3.485.0"",
    ""@aws-sdk/client-cognito-identity-provider"": ""^3.429.0"",
    ""@aws-sdk/client-dynamodb"": ""^3.485.0"",
    ""@aws-sdk/client-ec2"": ""^3.428.0"",
    ""@aws-sdk/client-lambda"": ""^3.501.0"",
    ""@aws-sdk/client-route-53"": ""^3.431.0"",
    ""@aws-sdk/client-secrets-manager"": ""^3.428.0"",
    ""@aws-sdk/client-sns"": ""^3.428.0"",
    ""@aws-sdk/client-sqs"": ""^3.428.0"",
    ""@aws-sdk/client-ssm"": ""^3.470.0"",
    ""@prisma/client"": ""^5.6.0"",
    ""@sentry/serverless"": ""^7.91.0"",
    ""ajv"": ""^8.12.0"",
    ""aws-cdk-lib"": ""2.114.0"",
    ""aws-jwt-verify"": ""^4.0.0"",
    ""axios"": ""^1.6.2"",
    ""axios-retry"": ""^4.0.0"",
    ""constructs"": ""^10.0.0"",
    ""crypto-js"": ""^4.2.0"",
    ""generate-password"": ""^1.7.1"",
    ""source-map-support"": ""^0.5.21"",
    ""unique-names-generator"": ""^4.7.1"",
    ""uuid"": ""^9.0.1"",
    ""winston"": ""^3.11.0""
  },
  ...
}
````



### Expected behavior

Locally I have no problem. This only happens when running `npx prisma generate` inside this container `https://hub.docker.com/repository/docker/allanoricil/node-aws-18/general`. 



````dockerfile
FROM --platform=linux/amd64 python:3.9-slim-buster

RUN apt-get update && \
    apt-get install -y curl unzip && \
    curl -sL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs


RUN curl ""https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"" -o ""awscliv2.zip"" && \
    unzip awscliv2.zip && \
    ./aws/install

````

### Prisma information
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""rhel-openssl-1.0.x"", ""native""]
}

datasource db {
  provider = ""postgres""
  url      = env(""DATABASE_URL"")
}

generator erd {
  provider = ""prisma-erd-generator""
  theme    = ""neutral""
}

enum HEALTH_STATE {
  UNAVAILABLE
  AVAILABLE
}

enum INSTANCE_STATE {
  PENDING
  RUNNING
  STOPPING
  STOPPED
  SHUTTING_DOWN
  TERMINATED
}

enum INSTANCE_PROVISIONING_JOB_STATE {
  NEW
  IN_PROGRESS
  COMPLETE
  FAILED
}

model InstanceSubscriptionTier {
  id                       String                    @id @default(uuid()) @map(""_id"")
  name                     String                    @unique
  type                     String
  diskSize                 Int
  imageId                  String
  productId                String                    @unique
  instances                Instance[]
  instanceProvisioningJobs InstanceProvisioningJob[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@map(""instance_subscription_tiers"")
}

model User {
  id                       String                    @id @default(uuid()) @map(""_id"")
  userId                   String                    @unique
  accountId                String
  account                  Account                   @relation(""user_account"", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instanceProvisioningJobs InstanceProvisioningJob[] @relation
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@map(""users"")
}

model Instance {
  id            String                   @id @default(uuid()) @map(""_id"")
  instanceId    String                   @unique
  instanceState INSTANCE_STATE
  subdomain     String                   @unique
  state         HEALTH_STATE
  tierId        String
  tier          InstanceSubscriptionTier @relation(fields: [tierId], references: [id])
  accountId     String
  account       Account                  @relation(fields: [accountId], references: [id])
  job           InstanceProvisioningJob? @relation()
  pat           String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@map(""instances"")
}

model InstanceProvisioningJob {
  id                         String                          @id @default(uuid()) @map(""_id"")
  accountId                  String
  account                    Account                         @relation(fields: [accountId], references: [id])
  instanceSubdomain          String
  instanceSubscriptionTierId String
  instanceSubscriptionTier   InstanceSubscriptionTier        @relation(fields: [instanceSubscriptionTierId], references: [id])
  state                      INSTANCE_PROVISIONING_JOB_STATE
  error                      String?
  instanceId                 String?                         @unique
  instance                   Instance?                       @relation(fields: [instanceId], references: [id])
  createdBy                  User?                           @relation(fields: [createdById], references: [id])
  createdById                String?
  createdAt                  DateTime                        @default(now())
  updatedAt                  DateTime                        @updatedAt

  @@map(""instance_provision_jobs"")
}

model Account {
  id                    String                    @id @default(uuid()) @map(""_id"")
  accountId             String                    @unique
  users                 User[]                    @relation(""user_account"")
  instances             Instance[]
  instanceProvisionJobs InstanceProvisioningJob[]
  subdomains            Subdomain[]
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  @@map(""accounts"")
}

model Subdomain {
  id        String   @id @default(uuid()) @map(""_id"")
  name      String   @unique
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, accountId])
  @@map(""subdomains"")
}
```

### Environment & setup

- OS: linux - container running in bitbucket (cloud version) runner (probably linux distro, I dont know)
- Database: PostgreSQL
- Node.js version: 18.19.1

### Prisma Version

```
 ""prisma"": ""^5.6.0""
```
",,
2172853296,23390,`node-postgres` (pg) errors with misleading `P2010 PrismaClientKnownRequestError` when using `@prisma/adapter-pg` with SSL (`?sslmode=require`),"### Bug description

I'm using:

* Supabase with Enforced SSL
* `pg` as the driver adapter
* `?sslmode=require` in the DB connection URL

And seeing this error:

```
PrismaClientKnownRequestError: 
Invalid `prisma.todo.findMany()` invocation:

Raw query failed. Code: `InvalidArg`. Message: `invalid type: unit value, expected a string`
 code: ""P2010""
```

### How to reproduce

Follow these instructions https://www.prisma.io/docs/orm/overview/databases/postgresql#using-the-node-postgres-driver and use the `sslmode=require` connection argument

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

datasource db {
  provider = ""postgresql""
  url      =  env(""DATABASE_URL"")
}

model Todo {
  @@map(""todos"")

  id        Int      @id @default(autoincrement())
  task      String   @db.VarChar(255)
  isCompleted Boolean  @default(false)
}
```

```ts
import { Pool } from 'pg'
import { PrismaPg } from '@prisma/adapter-pg'
import { PrismaClient } from '@prisma/client'

const connectionString = `${process.env.DATABASE_URL}`

const pool = new Pool({ connectionString })
const adapter = new PrismaPg(pool)
const prisma = new PrismaClient({ adapter })
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL 15.1
- Node.js version: v20.8.0


### Prisma Version

```
5.9.1
```
",,
2172343628,23387,Error when mixing regular field and relation field in `orderBy`,"### Bug description

The Prisma `find` API allows the use of relation fields in the `orderBy` clause.  However, it rejects the query when a regular field and a relation field are used together.

### How to reproduce

Use the schema and TS code in the ""Prisma information"" section. Running the code results in the following error:

```
Argument `orderBy`: Invalid value provided. Expected PostOrderByWithRelationInput[], provided Object.
    at Cn (/private/tmp/foo/node_modules/@prisma/client/runtime/library.js:116:5888)
    at _n.handleRequestError (/private/tmp/foo/node_modules/@prisma/client/runtime/library.js:123:6510)
    at _n.handleAndLogRequestError (/private/tmp/foo/node_modules/@prisma/client/runtime/library.js:123:6188)
    at _n.request (/private/tmp/foo/node_modules/@prisma/client/runtime/library.js:123:5896)
    at async l (/private/tmp/foo/node_modules/@prisma/client/runtime/library.js:128:10871) {
  clientVersion: '5.10.2'
}
```

### Expected behavior

Returns correct result.

### Prisma information

### Schema

```prisma
datasource db {
    provider = ""sqlite""
    url = ""file:./dev.db""
}

generator client {
    provider = ""prisma-client-js""
}

model User {
    id Int @id() @default(autoincrement())
    email String @unique()
    name String?
    posts Post[]
}

model Post {
    id Int @id() @default(autoincrement())
    title String
    content String?
    published Boolean @default(false)
    author User? @relation(fields: [authorId], references: [id])
    authorId Int?
}
```

### Code

```ts
prisma.user.findUnique({
  where: { id: user1.id },
  include: {
      posts: {
          orderBy: {
              title: 'asc',
              author: {
                  name: 'asc',
              },
          },
      },
  },
});
```

### Environment & setup

- OS: macOS
- Database: SQLite
- Node.js version: v20.10.0


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2172026352,23384,PANIC: internal error: entered unreachable code after password change on sql server,"### Bug description

When the password on MS sql server is changed on Azure SQL, prisma appears to reuse the connection to the SQL server, which raises a panic similar to https://github.com/prisma/prisma/issues/23182, even when the credentials on `url` for schema.prisma is changed.


### How to reproduce


1. Setup a DB on [Azure SQL](https://azure.microsoft.com/en-us/products/azure-sql/database)
2. Set the connection string to the SQL db on schema.prisma
```
datasource db {
  provider          = ""sqlserver""
  url               = ""sqlserver://someserver.database.windows.net:1433;database=exampledatabase;user=admin@someserver;password=password;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;""
}
```
3. Run the server with `npm run dev`
4. Quit the server with ctrl-c, and [change the db admin password on the platform](https://microsoft.github.io/AzureTipsAndTricks/blog/tip145.html)
5. Change schema.prisma with the new password
6. Start the server again
7. perform any query or mutation

Output from logs:
```
thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:125:18:
internal error: entered unreachable code
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
ERR PrismaClientRustPanicError: 
Invalid `context.prisma.user.findMany()` invocation in
/home/.../src/resolvers.ts:14:34

  11 export const resolvers = {
  12   Query: {
  13     allUsers: (_parent, _args, context: Context) => {
→ 14       return context.prisma.user.findMany(
PANIC: internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
```



### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider          = ""sqlserver""
  url               = ""sqlserver://someserver.database.windows.net:1433;database=exampledatabase;user=user@someserver;password=password;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;""
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password_hash String
}
```




### Environment & setup

- OS: Ubuntu 22.04.4 LTS
- Database: SQL Server
- Node.js version: 20.11.1


### Prisma Version

```
5.9.1
```
",,
2171023158,23381,Invalid `prisma.issue.create()` invocation:,"### Bug description

Im using prisma with mongodb and when I try to push a new user it says invalid prisma.issue.create(). My github repo is https://github.com/Raunak0713/Issue-Tracker . Im using create method in app/api/issues/route.ts

Thank you

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2169928833,23369,Client Extensions Destroy Typescript Compilation Performance (and Intellisense),"### Bug description

Adding simple client extensions blows up `check time` reported in `tsc --extendedDiagnostics` on a basic project from 0.12s to 1.79s, destroying intellisense performance.

Here's the client with extensions:
```typescript
  const p = new RawPrismaClient({
    datasources: {
      db: {
        url: env.DATABASE_URL ?? """", // This will be undefined during builds
      },
    },
    log:
      (env.NODE_ENV === ""development"" ? [""error"", ""warn""] : [""error""]) as Array<Prisma.LogLevel>,
  }).$extends({
    name: ""Extensions"",
    result: {
      user: {
        realName_DANGEROUS_DO_NOT_USE: { // the users real name, should never be used unless you're an admin and know what you're doing
          needs: { name: true},
          compute(user) {
            return user.name
          }
        },
        name: { // the name that should be used throughout. It will correctly be the real name or the anonymous name based on the user's settings
          needs: { name: true, email: true, anonymous: true, id: true },
          compute(user) {
            const anonymousName = makeAnonymousName(user.id);
            return user.anonymous
              ? anonymousName
              : user.name ?? user.email?.split(""@"")[0] ?? anonymousName;
          }
        },
        anonymousName: { // should only be used if you really want an anonymous name even if they are not anonymous. Like with comments on the blog
          needs: { id: true },
          compute(user) {
            return makeAnonymousName(user.id);
          }
        }
      }
    }
  });
```

`@typescript/analyze-trace` then shows a hotspot (doesn't exist when client extensions aren't present)
```
Hot Spots
└─ Check file ********** /apps/worker/worker.ts (1334ms)
   └─ Check variable declaration from (line 28, char 7) to (line 40, char 2) (1313ms)
      └─ Compare types 22909 and 109 (1301ms)
         └─ Compare types 22527 and 415 (1301ms)
            └─ Compare types 22527 and 359 (1130ms)
               └─ Compare types 22520 and 359 (1130ms)
                  ├─ {""id"":22520,""kind"":""AnonymousType"",""location"":{""path"":""*********** client/runtime/library.d.ts"",""line"":876,""char"":5}}
                  └─ {""id"":359,""kind"":""AnonymousType"",""location"":{""path"":""*********** client/runtime/library.d.ts"",""line"":876,""char"":5}}
```

Happy to share schemas and/or sponsor a fix.

### How to reproduce

Add client extensions to a project with a few dozen models.

### Expected behavior

_No response_

### Prisma information

Happy to share privately.

### Environment & setup

Mac
tsc version 5.1.3
prisma 5.10.2

### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.9.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2169911659,23368,db.obj.create() Works in Development But Not When Deployed,"### Discussed in https://github.com/prisma/prisma/discussions/23361

<div type='discussions-op-text'>

<sup>Originally posted by **lynixiox** March  5, 2024</sup>
### Question

I am trying to create a voting object in the database. The object creates just fine in development but not when deployed. I have some logs . In development it logs before and after the completion. In deployment it logs only before.It does catch and logs the following in deployment 
```
PrismaClientInitializationError: Invalid prisma.vote.create() invocation:
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 5)
    at _n.handleRequestError (/var/task/node_modules/@prisma/client/runtime/library.js:123:7154)
    at _n.handleAndLogRequestError (/var/task/node_modules/@prisma/client/runtime/library.js:123:6188)
    at _n.request (/var/task/node_modules/@prisma/client/runtime/library.js:123:5896)
    at async l (/var/task/node_modules/@prisma/client/runtime/library.js:128:10871)
    at async a (/var/task/.next/server/app/competition/contestant/[id]/page.js:1:12755) {
  clientVersion: '5.10.2',
  errorCode: undefined
}
```

There are no hoops or any different configs from my development to my deployment and I am able to successfully create other objects in the deployment. Am I missing a config somewhere?


### Information about Prisma Schema, Client Queries and Environment 

<!-- Paste your Prisma schema below. Do not include your database credentials when sharing your Prisma schema! -->
Prisma schema
```prisma
model Bundle {
  id String @id @default(cuid())
  bundleId String
  totalValue String
  pricePerVote String
  competition Competition @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  vote Vote[] 
  @@index([bundleId])
  @@unique([id])
}

model Contestant{
  id String @id @default(cuid())
  contestantId String 
  name String
  age String
  votes Vote[]
  competition Competition @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  @@index([contestantId])
  @@unique([id])
}

model Vote{
  id String @id @default(cuid())
  voteId String
  contestantId String
  voterName String
  amountOFVotes Int
  bundle Bundle @relation(fields: [voteId], references: [id], onDelete: Cascade) 
  contestant Contestant @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  @@index([contestantId])
  @@index([voteId])
  @@unique([id])
}

```

<!-- Paste your Prisma Client queries below. -->
Action vote.ts
```ts
import { ContestantDef } from ""@/lib/definitions""
import { Bundle } from ""@prisma/client""

export const createVote = async({
    amountOFVotes, 
    voterName, 
    bundle, 
    contestant }:{
        amountOFVotes: number
        voterName: string
        bundle: Bundle,
        contestant: ContestantDef
    }) => {
    try{
        console.log(""creating vote, "", amountOFVotes)

        await db.vote.create({
            data: {
                amountOFVotes,
                voterName,
                bundle: {
                    connect: {id: bundle.id}
                },
                contestant:{
                    connect: {id: contestant!.id}
                }
            }
        })

        console.log(""Finished Creating Vote"")

    }catch(error){
        console.log(error)
    }

}
```
ContestantDef
```ts
export type ContestantDef = Prisma.PromiseReturnType<typeof getContestantByid>  
```

package.json
```js
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint"",
    ""postinstall"": ""prisma generate""
  },
```

Payload
```ts
""use server""

import { ContestantDef } from ""@/lib/definitions""
import { createVote } from ""./vote""
import { Bundle } from ""@prisma/client""

export const verify = async({amountOFVotes, voterName, bundle, contestant}:
  {
    amountOFVotes: number,
    voterName : string,
    bundle: Bundle,
    contestant:ContestantDef
  }) => {
  createVote({amountOFVotes: amountOFVotes,
    voterName: voterName,
    bundle: bundle!,
    contestant: contestant
  })
}
```
- OS: Manjaro
- Database: PlaneScale
- Node.js version: v-20.10.0
- Prisma version: 5.10.2
</div>",,
2169855365,23367,"`driverAdapters` early access + Cloudflare Hyperdrive: ""Release called on client which has already been released to the pool"" ","### Bug description

Hi y'all, I'm running the driverAdapters early access.
I have a Cloudflare Worker that does multiple database calls per request, connected to a Postgres database [behind Cloudflare Hyperdrive](https://developers.cloudflare.com/hyperdrive/).

It seems like after the first request finishes, the connection is closed and the other database requests fail with an exception. Here are my logs:

```
""exceptions"": [
    {
      ""name"": ""Error"",
      ""message"": ""Release called on client which has already been released to the pool."",
      ""timestamp"": 1709660812613
    },
    {
      ""name"": ""Error"",
      ""message"": ""The script will never generate a response."",
      ""timestamp"": 1709660812613
    }
  ],
```



### How to reproduce

1. Follow the Hyperdrive getting started tutorial https://developers.cloudflare.com/hyperdrive/get-started/
2. Follow the Prisma + Cloudflare driverAdapters early access pg instructions
```ts
// e.g. src/index.js
import { PrismaClient } from '@prisma/client'
import { PrismaPg } from '@prisma/adapter-pg'
import { Pool } from 'pg'

export default {
  async fetch(request, env, ctx) {
    const pool = new Pool({ connectionString:  env.HYPERDRIVE.connectionString })
    const adapter = new PrismaPg(pool)
    const prisma = new PrismaClient({ adapter })

    const promises = [prisma.user.findMany(), prisma.user.findFirst(), prisma.user.findMany()] // multiple requests here
    const results = await Promise.all(promises)
    const result = JSON.stringify(users)
    return new Response(result);
  }
}
```

3. Make multiple database requests in one worker call
4. Deploy your worker in production
5. Go to your worker settings and start streaming logs
6. Open the worker url and observe errors in log stream

### Expected behavior

I can run multiple driverAdapter database requests using Cloudflare workers Hyperdrive in 1 go.


### Environment & setup

- OS: WSL
- Database: Postgres
- Node.js v21


### Versions

```
Prisma: v5.11.0-dev.5
Wrangler: v3.30.1
```
",,
2169371673,23365,Introspect mssql database to generate corresponding prisma models,"### Bug description

```
➜  backend git:(master) ✗ npx prisma db pull                                                                                                                               ✘ 1 master ◼
Prisma schema loaded from prisma/schema.prisma
Environment variables loaded from .env
Datasource ""db"": SQL Server database

✖ Introspecting based on datasource defined in prisma/schema.prisma

Oops, an unexpected error occurred!
Error in Schema engine.
Reason: [libs/user-facing-errors/src/quaint.rs:125:18] internal error: entered unreachable code
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

### Expected behavior

The schema.prisma file should be filled with models generated from the mssql database structure.

### Prisma information

```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
}
```

### Environment & setup

- OS: Ubuntu 22.04
- Database: ms sql
- Node.js version: v20.11.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.10.2
@prisma/client          : Not found
Computed binaryTarget   : debian-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../../../../usr/lib/node_modules/prisma/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../../../../usr/lib/node_modules/prisma/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2168972787,23359,"Postgres `upsert(): Internal error: Attempted to serialize empty result` when `relationMode = ""prisma""` is used","### Bug description

When `upsert()` operation hits the update codepath, query engine panics.

### How to reproduce

1. Clone https://github.com/luxaritas/prisma-serialize-empty-repro
2. Change `provider` to `""postgres""`
3. `pnpm i --save-dev prisma@latest`
4. `pnpm i @prisma/client@latest`
5. `npx prisma generate`
6. `npx prisma db push`
7. `npx ts-node index.ts` (script finishes successfully because the record is created)
8. `npx ts-node index.ts` (query engine panics because the record is updated)

**IMPORTANT** The issue does NOT reproduce when `relationMode = ""prisma""` is removed from the schema.

<details>
<summary> Full error </summary>

```
thread 'tokio-runtime-worker' panicked at query-engine/core/src/response_ir/ir_serializer.rs:57:40:
Internal error: Attempted to serialize empty result.
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
/Users/laplab/Desktop/prisma-serialize-empty-repro/node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/runtime/library.js:123
`)}var Yi=({clientMethod:e,activeProvider:r})=>t=>{let n="""",i;if(Array.isArray(t)){let[o,...s]=t;n=o,i={values:Ct(s||[]),__prismaRawParameters__:!0}}else switch(r){case""sqlite"":case""mysql"":{n=t.sql,i={values:Ct(t.values),__prismaRawParameters__:!0};break}case""cockroachdb"":case""postgresql"":case""postgres"":{n=t.text,i={values:Ct(t.values),__prismaRawParameters__:!0};break}case""sqlserver"":{n=el(t),i={values:Ct(t.values),__prismaRawParameters__:!0};break}default:throw new Error(`The ${r} provider does not support ${e}`)}return i?.values?il(`prisma.${e}(${n}, ${i.values})`):il(`prisma.${e}(${n})`),{query:n,parameters:i}},ol={requestArgsToMiddlewareArgs(e){return[e.strings,...e.values]},middlewareArgsToRequestArgs(e){let[r,...t]=e;return new oe(r,t)}},sl={requestArgsToMiddlewareArgs(e){return[e]},middlewareArgsToRequestArgs(e){return e[0]}};function Zi(e){return function(t){let n,i=(o=e)=>{try{return o===void 0||o?.kind===""itx""?n??(n=al(t(o))):al(t(o))}catch(s){return Promise.reject(s)}};return{then(o,s){return i().then(o,s)},catch(o){return i().catch(o)},finally(o){return i().finally(o)},requestTransaction(o){let s=i(o);return s.requestTransaction?s.requestTransaction(o):s},[Symbol.toStringTag]:""PrismaPromise""}}}function al(e){return typeof e.then==""function""?e:Promise.resolve(e)}var ll={isEnabled(){return!1},getTraceParent(){return""00-10-10-00""},async createEngineSpan(){},getActiveContext(){},runInChildSpan(e,r){return r()}},Xi=class{isEnabled(){return this.getGlobalTracingHelper().isEnabled()}getTraceParent(r){return this.getGlobalTracingHelper().getTraceParent(r)}createEngineSpan(r){return this.getGlobalTracingHelper().createEngineSpan(r)}getActiveContext(){return this.getGlobalTracingHelper().getActiveContext()}runInChildSpan(r,t){return this.getGlobalTracingHelper().runInChildSpan(r,t)}getGlobalTracingHelper(){return globalThis.PRISMA_INSTRUMENTATION?.helper??ll}};function ul(e){return e.includes(""tracing"")?new Xi:ll}function cl(e,r=()=>{}){let t,n=new Promise(i=>t=i);return{then(i){return--e===0&&t(r()),i?.(n)}}}var Qm=[""$connect"",""$disconnect"",""$on"",""$transaction"",""$use"",""$extends""],pl=Qm;function ml(e){return typeof e==""string""?e:e.reduce((r,t)=>{let n=typeof t==""string""?t:t.level;return n===""query""?r:r&&(t===""info""||r===""info"")?""info"":n},void 0)}var Sn=class{constructor(){this._middlewares=[]}use(r){this._middlewares.push(r)}get(r){return this._middlewares[r]}has(r){return!!this._middlewares[r]}length(){return this._middlewares.length}};var fl=_(li());function Rn(e){return typeof e.batchRequestIdx==""number""}function An(e){return e===null?e:Array.isArray(e)?e.map(An):typeof e==""object""?Gm(e)?Jm(e):hr(e,An):e}function Gm(e){return e!==null&&typeof e==""object""&&typeof e.$type==""string""}function Jm({$type:e,value:r}){switch(e){case""BigInt"":return BigInt(r);case""Bytes"":return Buffer.from(r,""base64"");case""DateTime"":return new Date(r);case""Decimal"":return new Te(r);case""Json"":return JSON.parse(r);default:tr(r,""Unknown tagged value"")}}function dl(e){if(e.action!==""findUnique""&&e.action!==""findUniqueOrThrow"")return;let r=[];return e.modelName&&r.push(e.modelName),e.query.arguments&&r.push(eo(e.query.arguments)),r.push(eo(e.query.selection)),r.join("""")}function eo(e){return`(${Object.keys(e).sort().map(t=>{let n=e[t];return typeof n==""object""&&n!==null?`(${t} ${eo(n)})`:t}).join("" "")})`}var Hm={aggregate:!1,aggregateRaw:!1,createMany:!0,createOne:!0,deleteMany:!0,deleteOne:!0,executeRaw:!0,findFirst:!1,findFirstOrThrow:!1,findMany:!1,findRaw:!1,findUnique:!1,findUniqueOrThrow:!1,groupBy:!1,queryRaw:!1,runCommandRaw:!0,updateMany:!0,updateOne:!0,upsertOne:!0};function ro(e){return Hm[e]}var In=class{constructor(r){this.options=r;this.tickActive=!1;this.batches={}}request(r){let t=this.options.batchBy(r);return t?(this.batches[t]||(this.batches[t]=[],this.tickActive||(this.tickActive=!0,process.nextTick(()=>{this.dispatchBatches(),this.tickActive=!1}))),new Promise((n,i)=>{this.batches[t].push({request:r,resolve:n,reject:i})})):this.options.singleLoader(r)}dispatchBatches(){for(let r in this.batches){let t=this.batches[r];delete this.batches[r],t.length===1?this.options.singleLoader(t[0].request).then(n=>{n instanceof Error?t[0].reject(n):t[0].resolve(n)}).catch(n=>{t[0].reject(n)}):(t.sort((n,i)=>this.options.batchOrder(n.request,i.request)),this.options.batchLoader(t.map(n=>n.request)).then(n=>{if(n instanceof Error)for(let i=0;i<t.length;i++)t[i].reject(n);else for(let i=0;i<t.length;i++){let o=n[i];o instanceof Error?t[i].reject(o):t[i].resolve(o)}}).catch(n=>{for(let i=0;i<t.length;i++)t[i].reject(n)}))}}get[Symbol.toStringTag](){return""DataLoader""}};var Wm=N(""prisma:client:request_handler""),_n=class{constructor(r,t){this.logEmitter=t,this.client=r,this.dataloader=new In({batchLoader:na(async({requests:n,customDataProxyFetch:i})=>{let{transaction:o,otelParentCtx:s}=n[0],a=n.map(p=>p.protocolQuery),l=this.client._tracingHelper.getTraceParent(s),u=n.some(p=>ro(p.protocolQuery.action));return(await this.client._engine.requestBatch(a,{traceparent:l,transaction:Km(o),containsWrite:u,customDataProxyFetch:i})).map((p,m)=>{if(p instanceof Error)return p;try{return this.mapQueryEngineResult(n[m],p)}catch(f){return f}})}),singleLoader:async n=>{let i=n.transaction?.kind===""itx""?gl(n.transaction):void 0,o=await this.client._engine.request(n.protocolQuery,{traceparent:this.client._tracingHelper.getTraceParent(),interactiveTransaction:i,isWrite:ro(n.protocolQuery.action),customDataProxyFetch:n.customDataProxyFetch});return this.mapQueryEngineResult(n,o)},batchBy:n=>n.transaction?.id?`transaction-${n.transaction.id}`:dl(n.protocolQuery),batchOrder(n,i){return n.transaction?.kind===""batch""&&i.transaction?.kind===""batch""?n.transaction.index-i.transaction.index:0}})}async request(r){try{return await this.dataloader.request(r)}catch(t){let{clientMethod:n,callsite:i,transaction:o,args:s,modelName:a}=r;this.handleAndLogRequestError({error:t,clientMethod:n,callsite:i,transaction:o,args:s,modelName:a})}}mapQueryEngineResult({dataPath:r,unpacker:t},n){let i=n?.data,o=n?.elapsed,s=this.unpack(i,r,t);return process.env.PRISMA_CLIENT_GET_TIME?{data:s,elapsed:o}:s}handleAndLogRequestError(r){try{this.handleRequestError(r)}catch(t){throw this.logEmitter&&this.logEmitter.emit(""error"",{message:t.message,target:r.clientMethod,timestamp:new Date}),t}}handleRequestError({error:r,clientMethod:t,callsite:n,transaction:i,args:o,modelName:s}){if(Wm(r),zm(r,i)||r instanceof Le)throw r;if(r instanceof V&&Ym(r)){let l=hl(r.meta);Cn({args:o,errors:[l],callsite:n,errorFormat:this.client._errorFormat,originalMethod:t,clientVersion:this.client._clientVersion})}let a=r.message;if(n&&(a=Ar({callsite:n,originalMethod:t,isPanic:r.isPanic,showColors:this.client._errorFormat===""pretty"",message:a})),a=this.sanitizeMessage(a),r.code){let l=s?{modelName:s,...r.meta}:r.meta;throw new V(a,{code:r.code,clientVersion:this.client._clientVersion,meta:l,batchRequestIdx:r.batchRequestIdx})}else{if(r.isPanic)throw new ue(a,this.client._clientVersion);if(r instanceof j)throw new j(a,{clientVersion:this.client._clientVersion,batchRequestIdx:r.batchRequestIdx});if(r instanceof S)throw new S(a,this.client._clientVersion);if(r instanceof ue)throw new ue(a,this.client._clientVersion)}throw r.clientVersion=this.client._clientVersion,r}sanitizeMessage(r){return this.client._errorFormat&&this.client._errorFormat!==""pretty""?(0,fl.default)(r):r}unpack(r,t,n){if(!r||(r.data&&(r=r.data),!r))return r;let i=Object.values(r)[0],o=t.filter(a=>a!==""select""&&a!==""include""),s=An(Ai(i,o));return n?n(s):s}get[Symbol.toStringTag](){return""RequestHandler""}};function Km(e){if(e){if(e.kind===""batch"")return{kind:""batch"",options:{isolationLevel:e.isolationLevel}};if(e.kind===""itx"")return{kind:""itx"",options:gl(e)};tr(e,""Unknown transaction kind"")}}function gl(e){return{id:e.id,payload:e.payload}}function zm(e,r){return Rn(e)&&r?.kind===""batch""&&e.batchRequestIdx!==r.index}function Ym(e){return e.code===""P2009""||e.code===""P2012""}function hl(e){if(e.kind===""Union"")return{kind:""Union"",errors:e.errors.map(hl)};if(Array.isArray(e.selectionPath)){let[,...r]=e.selectionPath;return{...e,selectionPath:r}}return e}var yl=""5.10.2"";var El=yl;function bl(e){return e.map(r=>{let t={};for(let n of Object.keys(r))t[n]=wl(r[n]);return t})}function wl({prisma__type:e,prisma__value:r}){switch(e){case""bigint"":return BigInt(r);case""bytes"":return Buffer.from(r,""base64"");case""decimal"":return new Te(r);case""datetime"":case""date"":return new Date(r);case""time"":return new Date(`1970-01-01T${r}Z`);case""array"":return r.map(wl);default:return r}}var Tl=_(Hi());var q=class extends Error{constructor(r){super(r+`

PrismaClientRustPanicError:
Invalid `prisma.node.upsert()` invocation in
/Users/laplab/Desktop/prisma-serialize-empty-repro/index.ts:6:23

  3 const prisma = new PrismaClient();
  4
  5 async function main() {
→ 6     await prisma.node.upsert(
Internal error: Attempted to serialize empty result.

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v21.4.0++++++++++++%7C+%0A%7C+OS++++++++++++++%7C+darwin-arm64+++++++%7C%0A%7C+Prisma+Client+++%7C+5.10.2+++++++++++++%7C%0A%7C+Query+Engine++++%7C+5a9203d0590c951969e85a7d07215503f4672eb9%7C%0A%7C+Database++++++++%7C+postgresql+++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+undefined%0Aprisma%3AtryLoadEnv+No+Environment+variables+loaded%0Aprisma%3Aclient+checkPlatformCaching%3Apostinstall+%0Aprisma%3Aclient+checkPlatformCaching%3AciName+%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+undefined%0Aprisma%3AtryLoadEnv+No+Environment+variables+loaded%0Aprisma%3Aclient+dirname+%2FUsers%2Flaplab%2FDesktop%2Fprisma-serialize-empty-repro%2Fnode_modules%2F.pnpm%2F%40prisma%2Bclient%405.10.2_prisma%405.10.2%2Fnode_modules%2F.prisma%2Fclient%0Aprisma%3Aclient+relativePath+..%2F..%2F..%2F..%2F..%2F..%2Fprisma%0Aprisma%3Aclient+cwd+%2FUsers%2Flaplab%2FDesktop%2Fprisma-serialize-empty-repro%2Fprisma%0Aprisma%3Aclient+clientVersion+5.10.2%0Aprisma%3Aclient%3AlibraryEngine+internalSetup%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+false%0Aprisma%3Aclient%3Aengines%3AresolveEnginePath+enginePath+%2FUsers%2Flaplab%2FDesktop%2Fprisma-serialize-empty-repro%2Fnode_modules%2F.pnpm%2F%40prisma%2Bclient%405.10.2_prisma%405.10.2%2Fnode_modules%2F.prisma%2Fclient%2Flibquery_engine-darwin-arm64.dylib.node%0Aprisma%3Aclient%3AlibraryEngine+library+starting%0Aprisma%3Aclient%3AlibraryEngine+library+started%0A%60%60%60%0A%0A%23%23+Client+Snippet%0A%60%60%60ts%0A%2F%2F+PLEASE+FILL+YOUR+CODE+SNIPPET+HERE%0A%60%60%60%0A%0A%23%23+Schema%0A%60%60%60prisma%0A%2F%2F+PLEASE+ADD+YOUR+SCHEMA+HERE+IF+POSSIBLE%0A%60%60%60%0A%0A%23%23+Prisma+Engine+Query%0A%60%60%60%0A%7B%22X%22%3Atrue%7D%7D%7D%0A%60%60%60%0A&title=Internal+error%3A+Attempted+to+serialize+empty+result.&template=bug_report.yml

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue.

    at _n.handleRequestError (/Users/laplab/Desktop/prisma-serialize-empty-repro/node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/runtime/library.js:123:7215)
    at _n.handleAndLogRequestError (/Users/laplab/Desktop/prisma-serialize-empty-repro/node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/runtime/library.js:123:6188)
    at _n.request (/Users/laplab/Desktop/prisma-serialize-empty-repro/node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/runtime/library.js:123:5896)
    at async l (/Users/laplab/Desktop/prisma-serialize-empty-repro/node_modules/.pnpm/@prisma+client@5.10.2_prisma@5.10.2/node_modules/@prisma/client/runtime/library.js:128:10871) {
  clientVersion: '5.10.2'
}
```

</details>

### Expected behavior

`upsert()` operation updates record on step (7).

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgres""
  url      = env(""DATABASE_URL"")
  relationMode = ""prisma""
}

model Node {
  id Int @id @default(autoincrement())
  value Int
  
  leftId Int?
  left Node? @relation(""left"", fields: [leftId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  leftOf Node[] @relation(""left"")

  rightId Int?
  right Node? @relation(""right"", fields: [rightId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  rightOf Node[] @relation(""right"")

  @@index([leftId])
  @@index([rightId])
}
```

```ts
// Needs to be executed twice on an empty database.
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient();

async function main() {
    await prisma.node.upsert({
        where: {id: 1},
        create: {id: 1, value: 5},
        update: {value: 5}
    });
}

main();
```


### Environment & setup

- OS: macOS 14.2.1
- Database: Postgres 12
- Node.js version: v21.4.0


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.4.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2168739323,23355,Unable to copy a Json value to another table,"### Bug description

As you can see in my schema, I have one user with multiple designs and one design with multiple orders. All I want is to do something like this:
```ts
 const order = await prisma.order.create({
            data:{
                dimension : design.dimension,
                list : design.list,
                designId
            }
        })
```
I want to copy some Json fields to order but I'm getting this warning:
```bash

Type 'JsonValue' is not assignable to type 'JsonNull | InputJsonValue'.  //THIS ERROR IS FOR dimensions which is Json

Type 'JsonValue[]' is not assignable to type 'InputJsonValue[]'.
    Type 'JsonValue' is not assignable to type 'InputJsonValue'. //THESE TWO ERROR ARE FOR list which is Json[]
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  designs   Design[]
}

model Design {
  designId     String     @id @default(uuid())
  name         String
  list               Json[]
  dimension    Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  Orders    Order[]
}

model Order{
  staticId     String   @id @default(uuid())
  name         String
  list              Json[]
  dimension        Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  designId     String
  designs      Design   @relation(fields: [designId], references: [designId])
}

```

```ts
// Add your code using Prisma Client
```


### Environment & setup

Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.9.0

### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.9.0
```
",,
2168224272,23353,Can't reach database server at `aws-0-ap-southeast-1.pooler.supabase.com:6543,"I had tried 2 ways to make the connection:
first one conformed to the documents, it also resulted in error like that 
the second:
```
DATABASE_URL=""postgres://postgres.cekcaxveddzfhnmtamgx:[YOUR PASSWORD]@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1""
DIRECT_URL=""postgres://postgres.cekcaxveddzfhnmtamgx:[YOUR PASSWORD]@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres""
```
file schema.js

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_URL"")
}
```",,
2167740116,23350,"driverAdapters: `previewFeatures[""driverAdapters""]` increases edge function size by more than 50%","### Bug description

I added  previewFeatures = [""driverAdapters""] to my schema.prisma and after that my edge functions cannot be deployed to Next.js anymore because edge size increased from below 1 MB to about 1.5 MB. While I understand that additional features will take up some space, I am not sure if an increase of 50% is justified in this case.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

Keep the edge function bundle size below 1 MB even with driverAdapters.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
}

 datasource db {
  provider  = ""postgresql""
  url       = env(""DATABASE_URL"")
}
```

```ts
// Add your code using Prisma Client
import { PrismaClient } from '@prisma/client'
import { PrismaNeon } from '@prisma/adapter-neon'
import { neonConfig, Pool } from '@neondatabase/serverless'
import { WebSocket } from 'ws'

let db: PrismaClient

declare global {
  var __db: PrismaClient | undefined
}

if (process.env.NODE_ENV === 'production') {
  db = new PrismaClient()
} else {
  if (!global.__db) {
    const connectionString = `${process.env.DATABASE_URL}`
    const url = new URL(connectionString)

    if (url.hostname === 'localhost') {
      neonConfig.useSecureWebSocket = false
      neonConfig.wsProxy = (host, port) => `${host}:${port}/v2`
    }

    neonConfig.pipelineConnect = false
    neonConfig.webSocketConstructor = WebSocket

    const pool = new Pool({ connectionString })
    const adapter = new PrismaNeon(pool)
    global.__db = new PrismaClient({ adapter })
  }
  db = global.__db
}

export { db }
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```
prisma                  : 5.11.0-dev.5
@prisma/client          : 5.11.0-dev.5
Computed binaryTarget   : rhel-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v21.6.0
Query Engine (Node-API) : libquery-engine af6ceee5db79017870b8793ce19ab0440083dacd (at node_modules/@prisma/engines/libquery_engine-rhel-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli af6ceee5db79017870b8793ce19ab0440083dacd (at node_modules/@prisma/engines/schema-engine-rhel-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.11.0-1.af6ceee5db79017870b8793ce19ab0440083dacd
Default Engines Hash    : af6ceee5db79017870b8793ce19ab0440083dacd
Studio                  : 0.499.0
Preview Features        : driverAdapters

```
",,
2167129964,23345,prisma.table.create not working when vector column exists.,"### Bug description

It seems like create is not supported for tables with vector type column. Other functions like findMany() are fine.
Currently, I am using $executeRaw function,
`await prisma.$executeRaw`INSERT INTO your_table (embedding) VALUES (${embedding}::vector)`;`
but it'd be great if prisma support insert sql with create function.

### How to reproduce

1. Go to schema.prisma
2. Add vector type column to your_table
3. Run post api (create function) to the your_table
4. See error

Invalid `prisma.your_table.create()` invocation:


Operation 'createOne' for model 'your_table' does not match any query.""'


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""postgresqlExtensions""]
}

datasource db {
  provider   = ""postgresql""
  url        = env(""DATABASE_URL"")
  extensions = [pg_trgm, pgvector(map: ""vector"", schema: ""extensions"")]
}

model your_table {
  id        Int                       @id @default(autoincrement())
  embedding Unsupported(""vector(3)"")?
}
```

```ts
await prisma.your_table.create({
    data: {
      embedding: embedding,
    },
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 18.11.0


### Prisma Version

```
5.10.2
```
",,
2167005602,23343,Unexpected query leading to querying full table when using batched `findUnique()`,"### Bug description

This bug occurs when running multiple findUnique queries when extending the prisma client.

Resulting query:
```sql
SELECT
	""public"".""Post"".""tenantId"",
	""public"".""Post"".""userId"",
	""public"".""Post"".""id"",
	""public"".""Post"".""text""
FROM ""public"".""Post""
WHERE (
	(""public"".""Post"".""tenantId"" = $1 AND ""public"".""Post"".""userId"" = $2)
	OR ""public"".""Post"".""tenantId"" = $3
	OR (""public"".""Post"".""tenantId"" = $4 AND ""public"".""Post"".""userId"" = $5)
	OR ""public"".""Post"".""tenantId"" = $6
)
OFFSET $7
```

Because we are dynamically adding the `tenantId` to every query, this results in a query where all posts of the tenant are being queried (see `OR ""public"".""Post"".""tenantId"" = $3 OR`). It does return the correct results, but it causes a lot of load as the database will return all Posts for a tenant.

This was super hard to debug, but luckily found this article eventually that lead me in this direction: https://www.prisma.io/docs/orm/prisma-client/queries/query-optimization-performance

At the moment, I have changed all queries to ""findFirst"", but this is a bit of a footgun as it results in very unexpected behavior.



### How to reproduce

I have made a repo with a reproduction here: https://github.com/rgmvisser/prisma-bug-reproduction

### Expected behavior

That findUnique also takes into account the added ""where"" clause of the tenant inside the OR instead of outside. So instead of: 

```sql
SELECT
	""public"".""Post"".""tenantId"",
	""public"".""Post"".""userId"",
	""public"".""Post"".""id"",
	""public"".""Post"".""text""
FROM ""public"".""Post""
WHERE (
	(""public"".""Post"".""tenantId"" = $1 AND ""public"".""Post"".""userId"" = $2)
	OR ""public"".""Post"".""tenantId"" = $3
	OR (""public"".""Post"".""tenantId"" = $4 AND ""public"".""Post"".""userId"" = $5)
	OR ""public"".""Post"".""tenantId"" = $6
)
OFFSET $7
```

A query like:

```sql
SELECT
	""public"".""Post"".""tenantId"",
	""public"".""Post"".""userId"",
	""public"".""Post"".""id"",
	""public"".""Post"".""text""
FROM ""public"".""Post""
WHERE (
	(
		""public"".""Post"".""tenantId"" = $1
		AND ""public"".""Post"".""userId"" = $2
		AND ""public"".""Post"".""tenantId"" = $3
	)
	OR (
		""public"".""Post"".""tenantId"" = $4
		AND ""public"".""Post"".""userId"" = $5
		AND ""public"".""Post"".""tenantId"" = $6
	)
)
OFFSET $7
```


### Prisma information

# Schema
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Post {
  id       Int
  tenantId String
  userId   Int
  text     String

  @@unique([tenantId, userId])
}
```

# Code
```ts
import { PrismaClient } from ""@prisma/client"";

const prisma = new PrismaClient({ log: [""query"", ""info"", ""warn""] });

function getTenantClient(tenantId: string) {
  return prisma.$extends({
    query: {
      $allModels: {
        $allOperations({ model, operation, args, query }) {
          let argsWithTenant: Record<string, any> = args;

          if (argsWithTenant?.where?.tenantId) {
            return query(args);
          } else if (argsWithTenant?.where) {
            argsWithTenant.where = {
              ...argsWithTenant.where,
              tenantId: tenantId,
            };
          } else if (argsWithTenant) {
            argsWithTenant.where = { tenantId: tenantId };
          } else {
            argsWithTenant = { where: { tenantId: tenantId } };
          }

          return query(argsWithTenant);
        },
      },
    },
  });
}

type TenantClient = ReturnType<typeof getTenantClient>;

async function main() {
  await prisma.post.deleteMany({});

  const tenant1Client = getTenantClient(""tenant1"");
  const tenant2Client = getTenantClient(""tenant2"");

  await prisma.post.create({
    data: {
      id: 1,
      tenantId: ""tenant1"",
      userId: 1,
      text: ""Post 1!"",
    },
  });
  await prisma.post.create({
    data: {
      id: 2,
      tenantId: ""tenant1"",
      userId: 2,
      text: ""Post 2!"",
    },
  });
  await prisma.post.create({
    data: {
      id: 3,
      tenantId: ""tenant2"",
      userId: 3,
      text: ""Post 3!"",
    },
  });
  await prisma.post.create({
    data: {
      id: 4,
      tenantId: ""tenant2"",
      userId: 4,
      text: ""Post 4!"",
    },
  });

  const queryPost = (client: TenantClient, tenantId: string, userId: number) =>
    client.post.findUnique({
      where: {
        tenantId_userId: {
          tenantId,
          userId,
        },
      },
    });

  const concurrentPosts = await Promise.all([
    queryPost(tenant1Client, ""tenant1"", 1),
    queryPost(tenant2Client, ""tenant2"", 3),
  ]);

  console.log({ concurrentPosts });

  /* 
 {
  concurrentPosts: [
    { id: 1, tenantId: 'tenant1', userId: 1, text: 'Post 1!' },
    { id: 3, tenantId: 'tenant2', userId: 3, text: 'Post 3!' }
  ]
}
 */
}

main().catch((e) => console.error(e));
```

### Environment & setup

- OS: macOS
- Database: Postgres
- Node.js version: v21.5


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.5.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2166654622,23340,Wrong `binaryTarget` in Alpine-based Bun docker image,"### Bug description

When running the commands below in an Alpine-based Bun Docker container (e.g. oven/bun:1.0.30-alpine), the output shows

```
/home/bun/app # bunx prisma -v
285 | - ${o}
286 | - ${u}
287 | - ${c}`)}function qJ(e,r){return xl(()=>eu(e,r),n=>n)}async function o6(file){let dir=eval(""__dirname"");if(dir.match(nd)){let e=Zo.default.join(MJ.default,""prisma-binaries"");await(0,LJ.ensureDir)(e);let r=Zo.default.join(e,Zo.default.basename(file)),n=await Qo.default.promises.readFile(file);return await Qo.default.promises.writeFile(r,n),FJ(r),r}return file}var UJ=require(""@prisma/engines"");var GJ=$(rc());function BJ(e){let r=e.e,n=c=>`Prisma cannot find the required \`${c}\` system library in your system`,i=r.message.includes(""cannot open shared object file""),a=`Please refer to the documentation about Prisma's system requirements: ${E1(""https://pris.ly/d/system-requirements"")}`,o=`Unable to require(\`${G(e.id)}\`).`,u=$e({message:r.message,code:r.code}).with({code:""ENOENT""},()=>""File does not exist."").when(({message:c})=>i&&c.includes(""libz""),()=>`${n(""libz"")}. Please install it and try again.`).when(({message:c})=>i&&c.includes(""libgcc_s""),()=>`${n(""libgcc_s"")}. Please install it and try again.`).when(({message:c})=>i&&c.includes(""libssl""),()=>{let c=e.platformInfo.libssl?`openssl-${e.platformInfo.libssl}`:""openssl"";return`${n(""libssl"")}. Please install ${c} and try again.`}).when(({message:c})=>c.includes(""GLIBC""),()=>`Prisma has detected an incompatible version of the \`glibc\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${a}`).when(({message:c})=>e.platformInfo.platform===""linux""&&c.includes(""symbol not found""),()=>`The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \`${e.platformInfo.binaryTarget}\` binaryTarget by default. ${a}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${a}`);return`${o}
288 | ${u}
289 | 
290 | Details: ${r.message}`}function jJ(e,r){try{return require(e)}catch(n){let i=BJ({e:n,platformInfo:r,id:e});throw new Error(i)}}async function qke(e,r){r||(r=(0,UJ.getCliQueryEngineBinaryType)()),e=await eu(r,e);let n=await D1();if(r===""libquery-engine""){Hp();let i=jJ(e,n);return`libquery-engine ${i.version().commit}`}else{let{stdout:i}=await(0,GJ.default)(e,[""--version""]);return i}}function VJ(e,r){return xl(()=>qke(e,r),n=>n)}async function SE(){let r=[{name:""query-engine"",type:(0,HJ.getCliQueryEngineBinaryType)()},{name:""schema-engine"",type:""schema-engine""}],n=r.map(({name:c,type:p})=>jke(p).then(l=>[c,l])),i=await Promise.all(n).then(Object.fromEntries),a=r.map(({name:c})=>{let[p,l]=Bke(i[c]);return[{[c]:p},l]}),o=a.map(c=>c[0]),u=a.flatMap(c=>c[1]);return[o,u]}function Bke(e){let r=[],n=$e(e).with({fromEnvVar:sr.when(cj)},u=>`, resolved by ${u.fromEnvVar.value}`).otherwise(()=>""""),i=$e(e).with({path:sr.when($s)},u=>u.path.right).with({path:sr.when(Un)},u=>(r.push(u.path.left),""E_CANNOT_RESOLVE_PATH"")).exhaustive();return[`${$e(e).with({version:sr.when($s)},u=>u.version.right).with({version:sr.when(Un)},u=>(r.push(u.version.left),""E_CANNOT_RESOLVE_VERSION"")).exhaustive()} (at ${WJ.default.relative(process.cwd(),i)}${n})`,r]}async function jke(e){let r=lj(Bc(e)),n=(0,u6.pipe)(r,fx(u=>u.fromEnvVar)),i=await(0,u6.pipe)(r,pj(()=>qJ(e),u=>Tj(u.path)))(),a=await(0,u6.pipe)(i,J1,Nj(u=>VJ(u,e)))();return{path:i,version:a,fromEnvVar:n}}var zJ=$(bt());var DE=ae(""prisma:validate""),CE=class extends Error{constructor(r){let i=`${$e(r).with({_tag:""parsed""},({errorCode:a,message:o,reason:u})=>{let c=a?`Error code: ${a}`:"""";return`${u}
                                                                                                                       ^
error: Unable to require(`/tmp/bunx-0-prisma@latest/node_modules/@prisma/engines/libquery_engine-linux-musl-arm64-openssl-3.0.x.so.node`).
The Prisma engines do not seem to be compatible with your system. Please refer to the documentation about Prisma's system requirements: https://pris.ly/d/system-requirements

Details: /usr/lib/libc.so: invalid ELF header
      at jJ (/tmp/bunx-0-prisma@latest/node_modules/prisma/build/index.js:290:114)
      at /tmp/bunx-0-prisma@latest/node_modules/prisma/build/index.js:290:266

prisma                  : 5.10.2
@prisma/client          : Not found
Computed binaryTarget   : linux-musl-arm64-openssl-3.0.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v21.6.0
Query Engine (Node-API) : E_CANNOT_RESOLVE_VERSION (at ../../../tmp/bunx-0-prisma@latest/node_modules/@prisma/engines/libquery_engine-linux-musl-arm64-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../../tmp/bunx-0-prisma@latest/node_modules/@prisma/engines/schema-engine-linux-musl-arm64-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
error: Script not found ""/tmp/bunx-0-prisma@latest/node_modules/prisma/build/child""
```

(that last line is tracked in #23339 already)


It would appear that the binary target `linux-musl-arm64-openssl-3.0.x` is chosen because Alpine is detected as operating system. However, Bun requires glibc to run, so their Alpine-based container run with glibc instead of musl. It would be great if Prisma could somehow detect the installed libc more accurately (or at least check whether the runtime is Bun and then refrain from choosing any musl-related binary target).

### How to reproduce

```sh
bunx prisma -v
```

### Expected behavior

`debian-openssl-3.0.x ` or `linux-arm64-openssl-3.0.x` are chosen as binary targets.

### Prisma information

Not relevant at this point.

### Environment & setup

- OS: Alpine-based Docker container with glibc installed
- Database: N/A
- Node.js version: Bun revision 1.0.30+1424a196f

### Prisma Version

See above.",,
2166634040,23339,`Script not found` error message when running Prisma commands in Bun,"### Bug description

When running the commands below in a Bun Docker container (e.g. `oven/bun:1.0.30-slim`), the output shows

```
error: Script not found ""/home/bun/app/hello-prisma/node_modules/prisma/build/child""
```

I cannot pinpoint this issue to an exact location in Prisma’s source code, but there is a line in the minified bundle that reads

```js
childPath=path__default.default.join(eval(""__dirname""),""child"");
```

Changing `child` to `child.js` there removes the error message.


This is reported in https://github.com/oven-sh/bun/issues/9237 as well – not sure if this is an issue with Prisma or with Bun’s module resolution.

### How to reproduce

```sh
mkdir hello-prisma
cd hello-prisma
bun init -y
bun install prisma
bun prisma init
```

### Expected behavior

No error message.

### Prisma information

Not relevant at this point.

### Environment & setup

- OS: `debian:bullseye-slim`-based Docker container
- Database: N/A
- Node.js version: Bun revision 1.0.30+1424a196f


### Prisma Version

```sh
# bun prisma -v
Environment variables loaded from .env
prisma                  : 5.10.2
@prisma/client          : Not found
Computed binaryTarget   : linux-arm64-openssl-1.1.x
Operating System        : linux
Architecture            : arm64
Node.js                 : v21.6.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-linux-arm64-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-linux-arm64-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
error: Script not found ""/home/bun/app/hello-prisma/node_modules/prisma/build/child""
```

Ah – there it is again.",,
2163256765,23327,[multiSchema previewFeature] The database schema is not empty error on `prisma migrate deploy`,"### Context

- Original issue: #21003: Relevant details surfaced in discussion: the behaviour is different depending on whether `multiSchema` is enabled. The error does not happen without the preview feature.
- Discussed in https://github.com/prisma/prisma/discussions/21005 (Originally posted by **reza-ebrahimi** September  7, 2023)
- Split off from https://github.com/prisma/prisma/issues/21007 (Originally posted by **aqrln** September  7, 2023)

### Bug description

Here is my schema, after having a fesh schema and table in postgres `prisma migrate deploy` throws following error:
`The database schema is not empty`

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""POSTGRES_PRISMA_URL"")
  directUrl = env(""POSTGRES_URL_NON_POOLING"")
  schemas   = [""app""]
}

model NewTable {
  id BigInt @id

  @@schema(""app"")
}
```

### How to reproduce

1. Create a schema and table in Postgres

```
// psql
CREATE SCHEMA ""app"";
CREATE TABLE ""app"".""NewTable"" (
    ""id"" BIGINT PRIMARY KEY
);
```

2. Define the prisma schema

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""TEST_POSTGRES_URI"")
  schemas  = [""app""]
}
```

3. Run `prisma db pull`

```
❯ pnpm prisma db pull
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": PostgreSQL database ""tests"", schemas ""app"" at ""localhost:5432""

✔ Introspected 1 model and wrote it into prisma/schema.prisma in 47ms
      
Run prisma generate to generate Prisma Client.
```

4. See new model added to schema
```prisma
model NewTable {
  id BigInt @id

  @@schema(""app"")
}
```

5. Run `prisma migrate deploy`
```
❯ pnpm prisma migrate deploy
Prisma schema loaded from prisma/schema.prisma
Datasource ""db"": PostgreSQL database ""tests"", schemas ""app"" at ""localhost:5432""

No migration found in prisma/migrations

Error: P3005

The database schema is not empty. Read more about how to baseline an existing production database: https://pris.ly/d/migrate-baseline
```

This was performed on the following versions:
```json
""prisma"": ""5.10.2""
""prisma"": ""5.2.0""
```

### Expected behavior

_No response_

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider  = ""postgresql""
  url       = env(""POSTGRES_PRISMA_URL"")
  directUrl = env(""POSTGRES_URL_NON_POOLING"")
  schemas   = [""app""]
}

model NewTable {
  id BigInt @id

  @@schema(""app"")
}
```

### Environment & setup
- Database: Postgres:10

### Prisma Version
```bash
❯ pnpm prisma -v            
prisma                  : 5.2.0
Current platform        : darwin-arm64
Query Engine (Node-API) : libquery-engine 2804dc98259d2ea960602aca6b8e7fdc03c1758f (at ../node_modules/.pnpm/@prisma+engines@5.2.0/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 2804dc98259d2ea960602aca6b8e7fdc03c1758f (at ../node_modules/.pnpm/@prisma+engines@5.2.0/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.2.0-25.2804dc98259d2ea960602aca6b8e7fdc03c1758f
Default Engines Hash    : 2804dc98259d2ea960602aca6b8e7fdc03c1758f
Studio                  : 0.494.0
Preview Features        : multiSchema
```
</div>",,
2161925850,23322,"Uncaught (in promise) Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).","### Bug description

In general prisma is working fine, even in other parts of my application, but idk why prisma don't want to work for ""VerificationToken"" model

This is the error code from console:
index-browser.js:186  Uncaught (in promise) Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report
    at Object.get (index-browser.js:186:15)
    at generateVerificationToken (tokens.ts:53:41)
    at async sendVerificationCode (alertDialoge.tsx:33:29)



I checked my code a few times and it really seems to be a bug.
I'm using microsoft edge, but I have also tested on google chrome beta and the issue still remains

### How to reproduce

	const verificationToken = await prisma.verificationToken.create({
		data: {
			token: token,
			email: email,
			code: code,
			expires: expires,
		},
	});
	
	
	
This is the raw data object that I'm passing to prisma
{
    ""token"": ""2d0aef21-5603-4a94-a14c-2f6affca9d9d"",
    ""email"": ""asd@asd.asd"",
    ""code"": ""771176"",
    ""expires"": ""2024-02-29T08:04:26.885Z""
}

### Expected behavior

Expected behavior is to work

### Prisma information

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String?  @unique
  token   String?  @unique
  code    String?  @unique
  expires DateTime?

  @@unique([email, token])
}


### Environment & setup

- OS: Windows 11
- Database: MySQL
- Node.js version: 20.11.0


### Prisma Version

5.10.2",,
2160968617,23320,Error when running in docker container ,"### Bug description

when I try to use prisma within a docker container so It will be bundled with my dart api to the cloud I get this error when running `npx prisma generate`
```nodejs
 => ERROR [build 10/13] RUN npx prisma db pull                              0.7s
------                                                                           
 > [build 10/13] RUN npx prisma db pull:                                         
0.680 node:internal/fs/utils:351                                                 
0.680     throw err;                                                             
0.680     ^                                                                      
0.680 
0.680 Error: ENOENT: no such file or directory, open '/app/node_modules/.bin/prisma_schema_build_bg.wasm'
0.680     at Object.openSync (node:fs:596:3)
0.680     at Object.readFileSync (node:fs:464:35)
0.680     at /app/node_modules/.bin/prisma:16:12782
0.680     at /app/node_modules/.bin/prisma:2:355
0.680     at Object.<anonymous> (/app/node_modules/.bin/prisma:242:122)
0.680     at Module._compile (node:internal/modules/cjs/loader:1356:14)
0.680     at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
0.680     at Module.load (node:internal/modules/cjs/loader:1197:32)
0.680     at Module._load (node:internal/modules/cjs/loader:1013:12)
0.680     at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:128:12) {
0.680   errno: -2,
0.680   syscall: 'open',
0.680   code: 'ENOENT',
0.680   path: '/app/node_modules/.bin/prisma_schema_build_bg.wasm'
0.680 }
0.680 
0.680 Node.js v18.19.0
------
Dockerfile:29
--------------------
  27 |     
  28 |     # Generate Prisma Client
  29 | >>> RUN npx prisma db pull
  30 |     RUN npx prisma generate
  31 |     
--------------------
ERROR: failed to solve: process ""/bin/sh -c npx prisma db pull"" did not complete successfully: exit code: 1
```

### How to reproduce

1. make a docker file like the following : 
```docker
# Official Dart image: https://hub.docker.com/_/dart
# Specify the Dart SDK base image version using dart:<version> (ex: dart:2.17)
FROM dart:stable AS build

WORKDIR /app

# Copy pubspec.yaml and pubspec.lock
COPY pubspec.* ./

# Get dependencies
RUN dart pub get

# Copy everything else
COPY . .

# Install Node.js and npm
RUN apt-get update && apt-get install -y nodejs npm

# Update npm to the latest version
RUN npm install -g npm@latest

# Install Prisma
RUN npm install @prisma/client prisma --save-dev

# Copy Prisma schema
COPY prisma ./prisma

# Generate Prisma Client
RUN npx prisma db pull
RUN npx prisma generate


# Compile the server.dart file to native code
RUN dart compile exe bin/server.dart -o bin/server


# Copy Prisma Engine deps so to `/runtime/`
RUN FILES=""libz.so libgcc_s.so libssl.so libcrypto.so""; \
    for file in $FILES; do \
    so=""$(find / -name ""${file}*"" -print -quit)""; \
    dir=""$(dirname ""$so"")""; \
    mkdir -p ""/runtime${dir}""; \
    cp ""$so"" ""/runtime$so""; \
    echo ""Copied $so to /runtime${so}""; \
    done


FROM scratch

COPY --from=build /runtime /
COPY --from=build /app/bin/server /app/bin/
COPY --from=build /app/.env /app/.env
# COPY --from=build /app/db/test.db /app/db/test.db
COPY --from=build /app/prisma-query-engine /app/prisma-query-engine

ENV TZ=Asia/Shanghai

WORKDIR /app
CMD [""./bin/server""]

```

2. try to build it by running : `docker build -t example  .`

### Expected behavior

to generate prisma binary successfully as I am developing on mac machine and deploying to a linux server so it should be compiled again on deployment

### Prisma information

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = ""dart run orm""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}
```

### Environment & setup

- OS: macos
- Database: postgresql
- Node.js version: v21.5.0


### Prisma Version

```
^5.10.2
```
",,
2160900899,23319,Error when using multiple prisma clients generated under `@prisma/client/app-name` in nx monorepo on prisma v5.9 + ,"### Bug description

We have multiple DBs and multiple prisma clients generated to `node_modules/@prisma/client/{db-name}`
**`bar/db/prisma/schema.prisma`**
```prisma
generator client {
  provider = ""prisma-client-js""
  output   = ""../../../node_modules/@prisma/client/bar""
}

datasource db {
  provider = ""postgresql""
  url      = env(""BAR_DATABASE_URL"")
}
```

**`foo/db/prisma/schema.prisma`**
```prisma
generator client {
  provider = ""prisma-client-js""
  output   = ""../../../node_modules/@prisma/client/foo""
}

datasource db {
  provider = ""postgresql""
  url      = env(""FOO_DATABASE_URL"")
}
```

Then, we have nx libraries for each client like so:

**`foo/db/src/lib/prisma-foo.ts`**
```ts
import { PrismaClient } from '@prisma/client/foo';

export const prismaFoo = new PrismaClient({
  log: ['error', 'warn', 'info'],
  errorFormat: 'pretty',
});
```

so you can import such a client as 
```ts
import { prismaFoo } from '@nx-multi-prisma/foo/db';
```

> similarly, for the `bar` db.

It works perfectly on Prisma v5.8.1, but throws the error at runtime on versions 5.9.x and 5.10.x

The error:

```
Error: Cannot find module '/Users/alexandr/projects/fanwave/nx-multi-prisma/node_modules/@prisma/client/foo'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1181:15)
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1169:15)
    at resolveExports (node:internal/modules/cjs/loader:591:14)
    at Function.Module._findPath (node:internal/modules/cjs/loader:668:31)
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:1130:27)
    at Function.Module._resolveFilename (/Users/alexandr/projects/fanwave/nx-multi-prisma/tmp/foo-app/main-with-require-overrides.js:41:36)
    at Function.Module._load (node:internal/modules/cjs/loader:985:27)
    at Function.Module._load (/Users/alexandr/projects/fanwave/nx-multi-prisma/node_modules/.pnpm/@nx+js@17.3.2_@swc-node+register@1.6.8_@swc+core@1.3.107_@types+node@18.16.9_nx@17.3.2_typescript@5.3.3/node_modules/@nx/js/src/executors/node/node-with-require-overrides.js:18:31)
    at Module.require (node:internal/modules/cjs/loader:1235:19)
    at require (node:internal/modules/helpers:176:18)
```


### How to reproduce

clone https://github.com/alexandr2110pro/nx-multi-prisma
and follow the readme instructions

### Expected behavior

Should work.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  output   = ""../../../node_modules/@prisma/client/foo""
}

datasource db {
  provider = ""postgresql""
  url      = env(""FOO_DATABASE_URL"")
}

model FooUser {
  id    String @id @default(uuid())
  email String @unique
}
```

```ts
import { PrismaClient } from '@prisma/client/foo';

export const prismaFoo = new PrismaClient({
  log: ['error', 'warn', 'info'],
  errorFormat: 'pretty',
});
```


### Environment & setup

- OS: MacOS, Linux
- Database: PostgeSQL
- Node.js version: v20.11.1



### Prisma Version

```
5.10.2
```
",,
2160896825,23318,"Query engine exited with code 101, in Azure Functions","### Bug description

Overnight Prisma stopped working inside our environment, with stack trace

```
{ body: '""PrismaClientInitializationError: \\nInvalid `this.client().setup.findFirst()` invocation in\\nC:\\\\home\\\\site\\\\wwwroot\\\\src\\\\handlers\\\\setup\\\\getOrderTermsAndConditions.js:58:36\\n\\n 55 return prisma_1.getPrisma;\\n 56 }\\n 57 static async get() {\\n→ 58 return this.client().setup.findFirst(\\nQuery engine exited with code 101\\n\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\nthread \'main\' panicked at query-engine\\\\query-engine\\\\src\\\\opt.rs:246:53:\\nCould not open datamodel file \\""C:\\\\\\\\home\\\\\\\\site\\\\\\\\wwwroot\\\\\\\\node_modules\\\\\\\\.prisma\\\\\\\\client\\\\\\\\schema.prisma\\""\\nstack backtrace:\\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\\n at Mg.handleRequestError (C:\\\\home\\\\site\\\\wwwroot\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\binary.js:184:7096)\\n at Mg.handleAndLogRequestError (C:\\\\home\\\\site\\\\wwwroot\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\binary.js:184:6207)\\n at Mg.request (C:\\\\home\\\\site\\\\wwwroot\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\binary.js:184:5927)\\n at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\\n at async a (C:\\\\home\\\\site\\\\wwwroot\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\binary.js:189:9983)\\n at async baseHandler (C:\\\\home\\\\site\\\\wwwroot\\\\src\\\\handlers\\\\setup\\\\getOrderTermsAndConditions.js:14:19)\\n at async AzureMiddleware.run (C:\\\\home\\\\site\\\\wwwroot\\\\src\\\\handlers\\\\setup\\\\getOrderTermsAndConditions.js:735:35)\\n at async Object.handler (C:\\\\home\\\\site\\\\wwwroot\\\\src\\\\handlers\\\\setup\\\\getOrderTermsAndConditions.js:772:13)""', type: 'GET', endpoint: 'https://xxx.azurewebsites.net/api/getOrderTermsAndConditions', requestId: '9f3f40eb-1e0b-4aa6-944e-67a90cb60ed0', referer: 'unknown', status: 'ERROR', userId: 'unknown' }
```

### How to reproduce

Not clear, no code changes happend overnight

### Expected behavior

_No response_

### Prisma information

..

### Environment & setup

- OS: Windows (Azure Functions)
- Database: Azure SQL Server
- Node.js version: 18.14.1

### Prisma Version

```
5.10.2
```
",,
2160425544,23316,Prisma doesn't know which engines to download,"### Bug description

I have received this issue when deploying my site on planethoster, when typing npx prisma generate
```
App 25592 output: prisma:warn Prisma doesn't know which engines to download for the Linux distro ""undefined"". Falling back to Prisma engines built ""debian"".
App 25592 output: Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""

}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
  
}

model ActeDeGabonisation {
  id                       Int                   @id @default(autoincrement())
  nom                      String
  prenom                   String
  nationalite              String
  dateDeNaissance          String
  nif                      String
  formeJuridique           String
  raisonSociale            String
  nomCommercial            String
  province                 String
  ville                    String
  bp                       String
  telephone                String
  pays                     String
  email                    String
  etat                     String
  provenance               String
  radiation                String
  ancienNumImmatriculation Int
  typeUsageBateau          String
  autreTypeUsageBateau     String?
  typeCoque                String
  numOMI                   Int?
  numSerie                 String?
  departement              String?
  anneeConstruction        Int?
  callSign                 String?
  paysConstruction         String
  longueurMaximaleCoque    Int
  largeurMaximaleCoque     Int
  tirantDeau               Int
  creux                    Int
  jaugeBrut                Int
  jaugeNet                 Int
  portEnLourd              Int
  marqueMoteur             String
  typeMoteur               String
  nombreMoteur             Int
  puissanceMoteur          Int
  userId                   Int                   @unique(map: ""ActeDeGabonisation_userId_key"")
  users                    Users                 @relation(fields: [userId], references: [id], map: ""ActeDeGabonisation_userId_fkey"")
  gabonisationdocument     GabonisationDocument?
}

model CertificatAptitudePhysique {
  id                   Int    @id @default(autoincrement())
  nomDuMedecin         String
  nomDeLexamine        String
  prenomDeLexamine     String
  niveauDeSatisfaction String
}

model GabonisationDocument {
  id                 Int                @id @default(autoincrement())
  fileName           String?
  filePath           String?
  gabonisationId     Int                @unique(map: ""GabonisationDocument_gabonisationId_key"")
  actedegabonisation ActeDeGabonisation @relation(fields: [gabonisationId], references: [id], map: ""GabonisationDocument_gabonisationId_fkey"")
}

model Immatriculations {
  id                       Int                       @id @default(autoincrement())
  nom                      String
  prenom                   String
  nationalite              String
  dateDeNaissance          String
  nif                      String
  formeJuridique           String
  raisonSociale            String
  nomCommercial            String
  province                 String
  ville                    String
  bp                       String
  telephone                String
  pays                     String
  email                    String
  typeUsageBateau          String
  typeCoque                String
  numOMI                   Int?
  numSerie                 String?
  departement              String?
  anneeConstruction        Int
  callSign                 String?
  paysConstruction         String?
  longueurMaximaleCoque    Int
  largeurMaximaleCoque     Int
  tirantDeau               Int
  creux                    Int
  jaugeBrut                Int
  jaugeNet                 Int
  portEnLourd              Int
  marqueMoteur             String
  typeMoteur               String
  nombreMoteur             Int
  puissanceMoteur          Int
  immatriculationsdocument immatriculationsDocument?
}

model immatriculationsDocument {
  id                Int              @id @default(autoincrement())
  fileName          String?
  filePath          String?
  immatriculationId Int              @unique(map: ""ImmatriculationsDocument_immatriculationId_key"")
  immatriculations  Immatriculations @relation(fields: [immatriculationId], references: [id], map: ""ImmatriculationsDocument_immatriculationId_fkey"")
}

model IntroductionNavire {
  id                         Int                         @id @default(autoincrement())
  nom                        String
  prenom                     String
  nationalite                String
  dateDeNaissance            String
  nif                        String
  formeJuridique             String
  raisonSociale              String
  nomCommercial              String
  province                   String
  ville                      String
  bp                         String
  telephone                  String
  pays                       String
  email                      String
  etat                       String
  typeUsageBateau            String
  typeCoque                  String
  numOMI                     Int
  numSerie                   String
  departement                String
  anneeConstruction          Int
  callSign                   String
  paysConstruction           String
  longueurMaximaleCoque      Int
  largeurMaximaleCoque       Int
  tirantDeau                 Int
  creux                      Int
  jaugeBrut                  Int
  jaugeNet                   Int
  portEnLourd                Int
  marqueMoteur               String
  typeMoteur                 String
  nombreMoteur               Int
  puissanceMoteur            Int
  introductionnaviredocument IntroductionNavireDocument?
}

model IntroductionNavireDocument {
  id                   Int                @id @default(autoincrement())
  fileName             String?
  filePath             String?
  introductionNavireId Int                @unique(map: ""IntroductionNavireDocument_introductionNavireId_key"")
  introductionnavire   IntroductionNavire @relation(fields: [introductionNavireId], references: [id], map: ""IntroductionNavireDocument_introductionNavireId_fkey"")
}

model Permis {
  id             Int             @id @default(autoincrement())
  nif            String
  formeJuridique String
  raisonSociale  String
  nomCommercial  String
  genre          String
  province       String
  ville          String
  bp             String
  telephone      String
  pays           String
  email          String
  typePermis     String
  userId         Int             @unique(map: ""Permis_userId_key"")
  users          Users           @relation(fields: [userId], references: [id], map: ""Permis_userId_fkey"")
  permisdocument PermisDocument?
}

model PermisDocument {
  id       Int     @id @default(autoincrement())
  fileName String?
  filePath String?
  permisId Int     @unique(map: ""PermisDocument_permisId_key"")
  permis   Permis  @relation(fields: [permisId], references: [id], map: ""PermisDocument_permisId_fkey"")
}

model Users {
  id                 Int                 @id @default(autoincrement())
  nom                String
  prenom             String
  nationalite        String
  dateDeNaissance    String
  province           String
  ville              String
  bp                 String
  telephone          String
  pays               String
  email              String              @unique(map: ""Users_email_key"")
  password           String
  role               Role
  salt String
  actedegabonisation ActeDeGabonisation?
  permis             Permis?
}

enum Role {
  FRETEUR
  AFFRETEUR
  AGENTMARITIME
  ARMATEUR
  TRANSITAIRE
  PROPRIETAIRE
  ADMINISTRATION
  CONSIGNATAIRE
}
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->centOs
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->mysql
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->20.11.9


### Prisma Version

```

```
5.10.2",,
2160082232,23313,Batching of `findUnique()` queries fails for certain parameters,"### Bug description

[The docs on query optimization](https://www.prisma.io/docs/orm/prisma-client/queries/query-optimization-performance#solving-n1-in-graphql-with-findunique-and-prisma-clients-dataloader) state that

> The Prisma Client dataloader automatically batches findUnique queries that ✔ occur in the same tick and ✔ have the same `where` and `include` parameters.

I find this is not always true, especially when `where` includes either `OR` or `AND`. 

[Here's an example project](https://github.com/prisma/prisma-examples/blob/b8c3614714e77d2060296ef1654bbb99ec616028/typescript/graphql-nestjs/src/resolvers.user.ts#L45-L53) leveraging batching of `findUnique` queries in a resolved graphql field:

```ts
  async posts(@Root() user: User, @Context() ctx): Promise<Post[]> {
    return this.prismaService.user
      .findUnique({
        where: {
          id: user.id,
        },
      })
      .posts()
  }
```

Changing it to 

```diff
  async posts(@Root() user: User, @Context() ctx): Promise<Post[]> {
    return this.prismaService.user
      .findUnique({
        where: {
          id: user.id,
+         AND: [],
        },
      })
      .posts()
  }
```

results in batching not working.

## Background – the real world use case

For context, we're using [`@casl/prisma`](https://casl.js.org/v5/en/package/casl-prisma) to control user permissions. This means we transform a set of access rules into where args for the relevant model, so we can e.g. list all posts a user can see by implementing `allPosts` something like:

```ts
async allPosts(@Ability() ability: PrismaAbility) {
  const where = accessibleBy(ability).Posts
  return await this.prismaService.posts.findMany({
    where
  })
}
```

We're also leveraging Prisma's data loaders, which means we'll be running things like:

```ts
    const whereAccessible = accessibleBy(ability).Posts 
    return this.prismaService.user
      .findUnique({
        where: {
          id: user.id,
          AND: whereAccessible
        }
      })
      .posts()
```

and this is where batching breaks down. Despite the parameters being identical, batching fails.

I've set up a reproduction repository based on the [graphql nestjs example](https://github.com/prisma/prisma-examples/tree/latest/typescript/graphql-nestjs).

### Video demonstration


https://github.com/prisma/prisma/assets/11960052/2d3119dc-31a7-47ac-b3d4-ba7236260c52



### How to reproduce

1. Go to [eliasnorrby/prisma-dataloader-issue-reproduction](https://github.com/eliasnorrby/prisma-dataloader-issue-reproduction)
2. Follow the reproduction instructions

### Expected behavior

_No response_

### Prisma information

See reproduction repository.

### Environment & setup

- OS: macOS
- Database: PostgreSQL, SQLite
- Node.js version: v18.16.1


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.16.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/.pnpm/@prisma+engines@5.10.2/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```
",,
2158739635,23308,`prisma db pull` postgres returns `GENERATED ALWAYS AS` as `DEFAULT`,"### Bug description

I was pulling supabase auth table using `npx prisma db pull`

After generating the migration, it returns this sql:
```
CREATE TABLE ""auth"".""identities"" (
    ""provider_id"" TEXT NOT NULL,
    ""user_id"" UUID NOT NULL,
    ""identity_data"" JSONB NOT NULL,
    ""provider"" TEXT NOT NULL,
    ""last_sign_in_at"" TIMESTAMPTZ(6),
    ""created_at"" TIMESTAMPTZ(6),
    ""updated_at"" TIMESTAMPTZ(6),
    ""email"" TEXT DEFAULT (lower(identity_data ->> 'email'::text)) STORED NULL,
    ""id"" UUID NOT NULL DEFAULT gen_random_uuid(),

    CONSTRAINT ""identities_pkey"" PRIMARY KEY (""id"")
);
```


Which doesn't work, because it should be:
```
CREATE TABLE ""auth"".""identities"" (
    ""provider_id"" TEXT NOT NULL,
    ""user_id"" UUID NOT NULL,
    ""identity_data"" JSONB NOT NULL,
    ""provider"" TEXT NOT NULL,
    ""last_sign_in_at"" TIMESTAMPTZ(6),
    ""created_at"" TIMESTAMPTZ(6),
    ""updated_at"" TIMESTAMPTZ(6),
    ""email"" TEXT GENERATED ALWAYS AS (lower(identity_data ->> 'email'::text)) STORED NULL,
    ""id"" UUID NOT NULL DEFAULT gen_random_uuid(),

    CONSTRAINT ""identities_pkey"" PRIMARY KEY (""id"")
);
```

### How to reproduce

Start a free supabase auth project, connect prisma, run `npx prisma db pull`, then run:
```
npx prisma migrate diff \ 
--from-empty \ 
--to-schema-datamodel prisma/schema.prisma \ 
--script > prisma/migrations/0_init/migration.sql 
```

See the sql, when running `npx prisma migrate dev`, it doesn't work, because the `DEFAULT` can't reference column expression

### Expected behavior

The correct syntax for the db is to use `GENERATED ALWAYS AS`

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""multiSchema""]
}

datasource db {
  provider          = ""postgresql""
  url               = env(""DATABASE_URL"")
  directUrl         = env(""DIRECT_URL"")
  shadowDatabaseUrl = env(""SHADOW_DATABASE_URL"")
  schemas           = [""auth"", ""public""]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("""") @db.VarChar(64)

  @@index([instance_id], map: ""audit_logs_instance_id_idx"")
  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: ""idx_auth_code"")
  @@index([user_id, authentication_method], map: ""idx_user_id_auth_method"")
  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated(""lower((identity_data ->> 'email'::text))""))
  id              String    @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: ""identities_provider_id_provider_unique"")
  @@index([email])
  @@index([user_id])
  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: ""amr_id_pk"") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: ""mfa_amr_claims_session_id_authentication_method_pkey"")
  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: ""mfa_challenges_auth_factor_id_fkey"")

  @@index([created_at(sort: Desc)], map: ""mfa_challenge_created_at_idx"")
  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: ""factor_id_created_at_idx"")
  @@index([user_id])
  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: ""refresh_tokens_token_unique"") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema(""auth"")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema(""auth"")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema(""auth"")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: ""user_id_created_at_idx"")
  @@schema(""auth"")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema(""auth"")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema(""auth"")
}

model Profile {
  // This relation should reference the ""auth.users"" table
  user users  @relation(fields: [uid], references: [id])
  uid  String @id @unique @db.Uuid

  firstName    String
  lastName     String
  credit       Int            @default(0)
  Transactions Transactions[]

  @@schema(""public"")
}

model Transactions {
  id        Int      @id @default(autoincrement())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [uid])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@schema(""public"")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("""")
  phone_change_token          String?       @default("""") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated(""LEAST(email_confirmed_at, phone_confirmed_at)"")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("""") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("""") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]
  Profile                     Profile?

  @@index([instance_id])
  @@schema(""auth"")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema(""auth"")
}

enum code_challenge_method {
  s256
  plain

  @@schema(""auth"")
}

enum factor_status {
  unverified
  verified

  @@schema(""auth"")
}

enum factor_type {
  totp
  webauthn

  @@schema(""auth"")
}
```


### Environment & setup

- OS: WSL Ubuntu 20
- Database: PostgreSQL 15.1
- Node.js version: v20.11.0

### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : Not found
Computed binaryTarget   : debian-openssl-1.1.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
Preview Features        : multiSchema
```
",,
2157979669,23306,Prisma doesn't close connections when using Jest,"### Bug description

When running multiple test files using Jest, I would expect either of the following behaviors:
- SQL connections are reused across tests
- The SQL connections opened by a test are closed when the test completes

Neither of these behaviors occur. Instead, each test file creates a new SQL connection. When there is a large number of tests/test files, the following error eventually pops up:

```
psql: FATAL: remaining connection slots are reserved for non-replication superuser connections
```

This is true even when reusing Prisma instances as [described in the doc](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections#prismaclient-in-long-running-applications).


### How to reproduce

I made a reproduction repo: https://github.com/AurelienGasser/prisma-jest-bug-repro

It runs 2 tests Test A and Test B, and shows that even though Test B requests a Prisma client **after Test A has succeeded**, the SQL connection from Test A isn't closed _and_ a new SQL connection is created by Test B. 

```ts
// A.test.ts
test(""A"", async () => {
  const num = await getNumOpenConnections();
  console.log(`A: ${num} open connections`);
});

// B.test.ts
test(""B"", async () => {
  await new Promise((resolve) => setTimeout(resolve, 5000));
  const num = await getNumOpenConnections();
  console.log(`B: ${num} open connections`);
});

// db.ts
import { PrismaClient } from ""@prisma/client"";
export const db = ""testdb"";
export let prisma = new PrismaClient({
  datasourceUrl: `postgres://postgres:postgres@localhost:5432/${db}`,
});
export default prisma;

// lib.ts
const getNumOpenConnections = async () => {
  const query = `SELECT count(*) FROM pg_stat_activity where datname = '${db}'`;
  return ((await prisma.$queryRawUnsafe(query)) as any)[0].count;
};
```

### Expected behavior

One of the 2 following behaviors
- SQL connections are reused across tests
- The SQL connections opened by a test are closed when the test completes

### What I've tried

- Using `jest --forceExit`: doesn't fix it
- Using `.disconnect()` in an `afterEach()` hook: leads to sporadic ""Transaction already closed"" errors

### Prisma information

```prisma
datasource db {
  url      = env(""DATABASE_URL"")
  provider = ""postgresql""
}

generator client {
  provider = ""prisma-client-js""
}

model Test {
  id Int @id @default(autoincrement())
}
```

### Environment & setup

- OS: macOS
- Database: Postgres
- Node.js version: v18.19.0


### Prisma Version

```
4.12.0
```
",,
2154328391,23283,prisma generate with python on m1 not working,"### Bug description

When trying to run prisma generate this error occures everytime, tried to multiple times to reinstall with pip, from binary and reinstalling pip3:

> prisma generate

Prisma schema loaded from prisma/schema.prisma
Error: Generator ""prisma-client-py"" failed:

Traceback (most recent call last):
  File ""/Users/test/PycharmProjects/pythonProject/venv/bin/prisma-client-py"", line 5, in <module>
    from prisma.cli import main
  File ""/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/prisma/__init__.py"", line 11, in <module>
    from ._config import config as config
  File ""/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/prisma/_config.py"", line 12, in <module>
    from ._compat import (
  File ""/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/prisma/_compat.py"", line 9, in <module>
    from pydantic import BaseModel
  File ""/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/pydantic/__init__.py"", line 383, in __getattr__
    module = import_module(module_name, package=package)
  File ""/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/__init__.py"", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/pydantic/main.py"", line 12, in <module>
    import pydantic_core
  File ""/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/pydantic_core/__init__.py"", line 6, in <module>
    from ._pydantic_core import (
ImportError: dlopen(/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/pydantic_core/_pydantic_core.cpython-310-darwin.so, 0x0002): tried: '/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/pydantic_core/_pydantic_core.cpython-310-darwin.so' (mach-o file, but is an incompatible architecture (have 'arm64', need 'x86_64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/pydantic_core/_pydantic_core.cpython-310-darwin.so' (no such file), '/Users/test/PycharmProjects/pythonProject/venv/lib/python3.10/site-packages/pydantic_core/_pydantic_core.cpython-310-darwin.so' (mach-o file, but is an incompatible architecture (have 'arm64', need 'x86_64'))


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
prisma generate

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma```
// Add your schema.prisma
```
generator client {
  provider             = ""prisma-client-py""
  previewFeatures      = [""multiSchema""]
  recursive_type_depth = ""5""
}

datasource db {
  provider  = ""postgresql""
  url       = env(""DB_URL"")
  directUrl = env(""DB_DIRECT_URL"")
  schemas   = [""public""]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Test {
  id                 String   @id @default(cuid())
  test String   @unique

  @@schema(""public"")
}


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> macOS (14.2.1) (m1 pro chip)
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> PostgreSQl
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> v16.13.1 


### Prisma Version

```
Environment variables loaded from .env
prisma                : 5.8.0
@prisma/client        : Not found
Computed binaryTarget : darwin
Operating System      : darwin
Architecture          : x64
Node.js               : v16.13.1
Query Engine (Binary) : query-engine 0a83d8541752d7582de2ebc1ece46519ce72a848 (at ../../../.cache/prisma-python/binaries/5.8.0/0a83d8541752d7582de2ebc1ece46519ce72a848/node_modules/@prisma/engines/query-engine-darwin)
Schema Engine         : schema-engine-cli 0a83d8541752d7582de2ebc1ece46519ce72a848 (at ../../../.cache/prisma-python/binaries/5.8.0/0a83d8541752d7582de2ebc1ece46519ce72a848/node_modules/@prisma/engines/schema-engine-darwin)
Schema Wasm           : @prisma/prisma-schema-wasm 5.8.0-37.0a83d8541752d7582de2ebc1ece46519ce72a848
Default Engines Hash  : 0a83d8541752d7582de2ebc1ece46519ce72a848
Studio                : 0.497.0
Preview Features      : multiSchema
```
",,
2151934386,23267,"Null constraint violation on the fields: (`id`) , when using uuid for id with mySQL","### Bug description

I used uuid() within the id field ,while post , the server crashes. Instead if i use autoincrement(), it works totally fine. Idk how this error is taking place.
<img width=""1221"" alt=""error with schema"" src=""https://github.com/prisma/prisma/assets/113549918/05dd587f-2703-4f8f-be86-ba3f7804aeab"">

Here is the index js for any doubts
<img width=""1224"" alt=""Screenshot 2024-02-23 at 5 07 21 PM"" src=""https://github.com/prisma/prisma/assets/113549918/f4c3da31-1a2e-4189-ba55-a225f1fc4914"">


### How to reproduce

<!--
1. Create a schema
2. Attach it with mySQL
3. After running migrate commands and deploying
4. When I post using postman to ""POST"" it crashes.
-->


### Expected behavior

I wanted it to post, then when I get request, it must list the users.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String  @id @default(uuid()) 
  firstName String
  lastName  String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> MacOS
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> MySQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> 21.5.0


### Prisma Version

```
5.9.1
```
",,
2151706628,23264,Typescript Plugin for generating types for `schema.prisma`,"## Problem

After changing `schema.prisma` you need to regenerate the types for typescript.

## Suggested solution

Use a typescript plugin that supplies typescript with the type information from the `schema.prisma`.

Something like [gql.tada](https://github.com/0no-co/gql.tada) is doing with [@0no-co/graphqlsp](https://www.npmjs.com/package/@0no-co/graphqlsp)

So you can just import it in tsconfig and don't need to `prisma generate` the types when you make a change to the `schema.prisma`.

```
{
  ""compilerOptions"": {
    ""plugins"": [
      {
        ""name"": "".../prismasp"",
        ""schema"": ""./schema.prisma"",
        ""outputLocation"": ""./src/prisma-env.d.ts""
      }
    ],
    ...
  }
}
```

## Alternatives

I sometimes use nodemon to watch the schema and generate the types. But my IDE still don't picks up the changes sometimes. I think a typescript plugin would solve this issue.

",,
2151661032,23263,"Prisma Client Accelerate in Edge - Need additional plugin to handle ""node:"" URIs.","### Bug description

### Question

Here is my code:
```ts
prisma.ts
import { PrismaClient as PrismaClientEdge } from ""@prisma/client/edge"";

const prismaClientSingleton = () => {
  return new PrismaClientEdge().$extends(withAccelerate());
};

declare global {
  var prisma: undefined | ReturnType<typeof prismaClientSingleton>;
}

const prisma = globalThis.prisma ?? prismaClientSingleton();

if (process.env.NODE_ENV !== ""production"") globalThis.prisma = prisma;

export default prisma;
```
```ts
api.ts
import prisma from ""@/utils/server/prisma"";

export const config = {
  runtime: ""edge"",
};

const handler = async (req: Request, res: Response) => {
    const conversation = await prisma.conversations.findUnique({
      where: { id: id },
      cacheStrategy: { swr: 60, ttl: 120 },
    });
   ...
}
```
And receiving the following error:
~~~~~~~~~~~~~
You may need an additional plugin to handle ""node:"" URIs.
Import trace for requested module:
node:https
./node_modules/@prisma/extension-accelerate/dist/esm/node-fetch.js
./node_modules/@prisma/extension-accelerate/dist/esm/entry.node.js
./src/utils/server/prisma.ts
~~~~~~~~~~~~~
### How to reproduce (optional)

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior (optional)

_No response_

### Information about Prisma Schema, Client Queries and Environment (optional)

<!-- Paste your Prisma schema below. Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider  = ""mysql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_DATABASE_URL"")
}
<!-- Paste your Prisma Client queries below. -->
```ts
// Add any relevant Prisma Client queries here
```
~~~~~~~~~~~~~
- OS: Windows
- Database: Azure MySql
- Node.js version: v20.11.1
- Next.js 13

- Run `prisma -v` to see your Prisma version and paste it

prisma                  : 5.10.1 
@prisma/client          : 5.10.1 
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.498.0
",,
2151460279,23262,Inconsistent column data: Unexpected conversion failure for field Keys.private_key from String(...) to Bytes. Reason: Could not convert from `base64 encoded bytes` to `PrismaValue::Bytes`,"### Bug description

I've updated prisma to 5.10.2 and activated `previewFeatures = [""relationJoins""]`.

Then my server started raising the following error:

``` 
PrismaClientKnownRequestError: 
Invalid `prisma.wallet.findUnique()` invocation:


Inconsistent column data: Unexpected conversion failure for field Keys.private_key from String(VALUE HERE) to Bytes. Reason: Could not convert from `base64 encoded bytes` to `PrismaValue::Bytes`      
    at _n.handleRequestError (...\node_modules\@prisma\client\runtime\library.js:123:6854)
    at _n.handleAndLogRequestError (...\node_modules\@prisma\client\runtime\library.js:123:6188)
    at _n.request (...\node_modules\@prisma\client\runtime\library.js:123:5896)
    at async l (...\node_modules\@prisma\client\runtime\library.js:128:10871)
    at async main (file:///.../src/test.ts:11:24) {
  code: 'P2023',
  clientVersion: '5.10.2',
  meta: {
    modelName: 'Wallet',
    message: 'Unexpected conversion failure for field Keys.private_key from String(VALUE HERE) to Bytes. Reason: Could not convert from `base64 encoded bytes` to `PrismaValue::Bytes`'
  }
}
```

Removing `relationJoins` solves the issue.

### How to reproduce

1. Have a base64 encoded bytes object stored in a Bytes field
2. Try to retrieve this field



### Expected behavior

Return of the stored field.

### Prisma information

Here is are some relevant pieces of my prisma schema.

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""rhel-openssl-1.0.x""]
  // previewFeatures = [""relationJoins""]
}

datasource db {
  provider     = ""mysql""
  url          = env(""DATABASE_URL"")
  relationMode = ""foreignKeys""
}

model Keys {
  id          String @id @default(uuid())
  public_key  String
  private_key Bytes
  index       Int

  wallet    Wallet @relation( fields: [wallet_id], references: [id])
  wallet_id String

  @@index([wallet_id])
}

```

```ts
const wallet = await prisma.wallet.findUnique({
	where: { id: id },
	include: { 
		keys:  true
	},
});

```


### Environment & setup

- OS: Amazon Linux 2 (also managed to replicate in windows 11)
- Database: PlanetScale
- Node.js version: Node.js 18.x


### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v18.17.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
```",,
2150467876,23259,internal error: entered unreachable code,"Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | v21.6.1            | 
| OS              | windows            |
| Prisma Client   | 5.10.2             |
| Query Engine    | 5a9203d0590c951969e85a7d07215503f4672eb9|
| Database        | sqlite             |



## Logs
```
tarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.10.2""}
prisma:client:request_handler {""name"":""PrismaClientRustPanicError"",""clientVersion"":""5.10.2""}
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
```

## Client Snippet
```ts
const { PrismaClient } = require(""@prisma/client"");
const { payrollHistoryService } = require(""./payroll.history.service"");
const { compesationHistoryService } = require(""./compesation.history.service"");
const { generateUniqueId } = require(""../utils/uuid.util"");
const { getFormattedDate } = require(""../utils/date.util"");
const {
  calculateTax,
  calculatePension,
  calculateTevetLevy,
  calculateAllowances,
  calculateDeductions,
} = require(""./functions/payroll.calculations"");

const prisma = new PrismaClient();
const taxBrackets = require(""../models/malawi.tax.brackets"");
const logger = require(""../utils/logger.util"");

const payrollProcessingService = async () => {
  const formattedDate = getFormattedDate();

  const payrollId = generateUniqueId();

  // fetch all active persons
  const persons = await prisma.person.findMany({
    where: { status: true },
  });
  for (const person of persons) {
    const personIdentinty = person.id;
    try {
      // fetch salaries for each person
      const salary = await prisma.salary.findMany({
        where: { personId: parseInt(person.id) },
      });

      // log salary amount
      const income = salary[0].amount;

      // calculate tevet levy
      const tevetLevy = calculateTevetLevy(income, 0.01);

      // calculate pension
      const pension = await prisma.pension.findUnique({
        where: { id: 1 },
      });

      const percentage = pension.percentage;

      const pensionAmount = calculatePension(income, percentage);

      // calculate allowances
      const totalAllowances = await calculateAllowances(personIdentinty);

      const grossSalaryTaxable = income + totalAllowances;

      // calculate tax
      const taxAmount = calculateTax(grossSalaryTaxable, taxBrackets);

      // calculate deductions
      const totalDeductions = await calculateDeductions(personIdentinty);

      const totalBenefits = 0;

      // calculate net salary
      const netSalary = grossSalaryTaxable - totalDeductions;

      // save to pay history
      await prisma.payHistory.create({
        data: {
          base_salary: income,
          gross_salary: grossSalaryTaxable,
          net_salary: netSalary, // Use the calculated net salary
          tevet_levy: tevetLevy,
          pension_amount: pensionAmount,
          tax_amount: taxAmount,
          total_allowances: totalAllowances,
          total_deductions: totalDeductions,
          total_benefits: totalBenefits,
          payrollId: payrollId,
          created_on: formattedDate,
          person: {
            connect: {
              id: personIdentinty,
            },
          },
        },
      });

      await compesationHistoryService(payrollId);
    } catch (error) {
      logger.error(""Something happened!"", error.message);
      throw error;
    }
  }

  await payrollHistoryService(payrollId);
  return {
    success: true,
    message: ""Payroll processed successfully"",
  };
};

module.exports = { payrollProcessingService };

```

## Schema
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = ""file:../data/dev.db""
}

model Person {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String
  mobile_number      String               @default(""n/a"")
  gender             String
  dob                String
  salutation         String
  branch             String
  position           String
  department         String               @default(""n/a"")
  reports_to         String
  grade              String
  employment_type    String
  status             Boolean
  start              String
  end                String
  Salary             Salary[]
  Allowances         Allowances[]
  Benefits           Benefits[]
  Deductions         Deductions[]
  CompesationHistory CompesationHistory[]
  payHistory         payHistory[]
}

model Salary {
  id       Int    @id @default(autoincrement())
  amount   Float
  type     String @default(""SALARY"")
  currency String @default(""MWK"")
  person   Person @relation(fields: [personId], references: [id])
  personId Int
}

model Allowances {
  id           Int      @id @default(autoincrement())
  description  String
  amount       Float
  type         String   @default(""EARNING"")
  isPercentage Boolean
  created_on   DateTime @default(now())
  person       Person?  @relation(fields: [personId], references: [id])
  personId     Int
}

model Benefits {
  id           Int      @id @default(autoincrement())
  description  String
  amount       Float
  type         String   @default(""BENEFITS"")
  isPercentage Boolean
  created_on   DateTime @default(now())
  person       Person   @relation(fields: [personId], references: [id])
  personId     Int
}

model Deductions {
  id           Int      @id @default(autoincrement())
  description  String
  amount       Float
  type         String   @default(""DEDUTIONS"")
  isPercentage Boolean
  created_on   DateTime @default(now())
  person       Person   @relation(fields: [personId], references: [id])
  personId     Int
}

model CompesationHistory {
  id           Int     @id @default(autoincrement())
  description  String
  amount       Float
  isType       String
  isPercentage Boolean // New field to indicate if the amount is a percentage
  payrollId    String
  created_on   String
  person       Person? @relation(fields: [personId], references: [id])
  personId     Int
}

model payHistory {
  id               Int     @id @default(autoincrement())
  base_salary      Float
  gross_salary     Float
  net_salary       Float
  tevet_levy       Float
  pension_amount   Float
  tax_amount       Float
  total_allowances Float
  total_deductions Float
  total_benefits   Float
  payrollId        String
  created_on       String
  person           Person @relation(fields: [personId], references: [id])
  personId         Int
}

model PayrollHistory {
  id               Int    @id @default(autoincrement())
  total_gross      Float
  total_net        Float
  total_tax        Float
  total_pension    Float
  total_earnings   Float
  total_allowances Float
  total_deductions Float
  total_benefits   Float
  total_amount     Float
  total_people     Float
  payrollId        String
  created_on       String
}

```

## Prisma Engine Query
```
{""X"":true}}}
```
",,
2149848925,23250,Default value for `Json` type not successfully migrated to database schema (MySQL),"### Bug description

I spotted this issue (on MySQL DB) when doing a migration. Adding a field like `Photos Json @default(""[]"")` generates a migration without default value on it:

```sql
ALTER TABLE `Route` ADD COLUMN `Photos` JSON NOT NULL;
```

I had to add next line in the migration file to avoid data conflicts expecting empty arrays.

```sql
UPDATE Route SET `Photos` = ""[]"";
```

### How to reproduce

1. Generate schema without JSON field

```prisma
model Test {
  Id String @id @db.Char(36) @default(cuid())
}
```

2. Add a new JSON field and generate a migration

```prisma
model Test {
  Id String @id @db.Char(36) @default(cuid())
  IssueHere Json @default(""[]"")
}
```

3. Migration file will be generated without default value

```sql
ALTER TABLE `Test` ADD COLUMN `IssueHere` JSON NOT NULL;
```

### Expected behavior

Migration file to be generated with default value.

```sql
ALTER TABLE `Test` ADD COLUMN `IssueHere` JSON NOT NULL DEFAULT ""[]"";
```

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-1.1.x""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Test {
  Id String @id @db.Char(36) @default(cuid())
  IssueHere Json @default(""[]"")
}
```


### Environment & setup

- OS: WSL2 Ubuntu
- Database: MariaDB
- Node.js version: v20.11.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.4.2
@prisma/client          : 5.4.2
Current platform        : debian-openssl-1.1.x
Query Engine (Node-API) : libquery-engine ac9d7041ed77bcc8a8dbd2ab6616b39013829574 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node)
Schema Engine           : schema-engine-cli ac9d7041ed77bcc8a8dbd2ab6616b39013829574 (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.1.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.4.1-2.ac9d7041ed77bcc8a8dbd2ab6616b39013829574
Default Engines Hash    : ac9d7041ed77bcc8a8dbd2ab6616b39013829574
Studio                  : 0.494.0
```

Thanks.",,
2148701001,23239,Schema validation with custom enum and mysql,"### Bug description

Hi team,

I have an issue after pulling tables from the database. I've multiple enums that are not validate; for example:
```
enum test_forbidden_code {
  // 403 @map(""403"")
  // 401 @map(""401"")
}
```

So when I'm trying to generate the client I get an error validation message ""This line is not an enum value definition"". Is there a way to fix/bypass that? valid

### How to reproduce

* having a custom enum in MySQL db as shown as the previous block

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: macOS
- Database: MySQL
- Node.js version: v18.12.1


### Prisma Version

```
prisma                  : 5.10.1
@prisma/client          : 5.10.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.12.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.498.0
```
",,
2147589917,23234,Allow to specify location of generator with `env()`,"## Problem

I'm using Bazel to run Prisma, and it's going well so far. I've hit a snag on trying to get custom generators to work, which is that I can't seem to tell prisma *where* to find a custom generator except by the `PATH` mechanism, which Bazel does not play well with.


I've noticed that Prisma itself has a custom way of resolving the location of `prisma-client-js`, and I'd like to do similar.

## Suggested solution

Either:

1. Provide usage of `provider = env(""ZOD_PRISMA_PATH"")`
2. Standardise environment variables for injecting providers via `parseBinaryTargetsEnvValue`; e.g. `provider = ""zod-prisma""` becomes `ZOD_PRISMA_BINARY` env

## Alternatives

I'm going to give using the static rootpath that bazel generates for now.

",,
2147527828,23233,`relationJoins` MySQL converts nested Decimal to float,"### Bug description

When using `relationLoadStrategy: 'join'` in MySQL, retrieving nested models with `Decimal` fields seem to convert decimal values to floats.

### How to reproduce

https://github.com/michaelhays/prisma-relationjoins-decimal

See [these lines](https://github.com/michaelhays/prisma-relationjoins-decimal/blob/08d51d99444b890242a8e4892a25f1162914849f/run.ts#L28-L29) for what gets logged.

```ts
console.log(queryResult) // 95993.57
console.log(joinResult) // 95993.57000000001
```

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins""]
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model FirstModel {
  id           Int           @id @default(autoincrement())
  secondModels SecondModel[]
}

model SecondModel {
  id           Int        @id @default(autoincrement())
  value        Decimal
  firstModelId Int
  firstModel   FirstModel @relation(fields: [firstModelId], references: [id])

  @@index([firstModelId])
}
```

```ts
const joinResult = (await prisma.firstModel.findFirstOrThrow({
  relationLoadStrategy: 'join',
  include: { secondModels: true },
})).secondModels[0].value
```

### Environment & setup

- OS: Linux, Fedora 39
- Database: MySQL
- Node.js version: v20.11.0

### Prisma Version

```
prisma                  : 5.10.2
@prisma/client          : 5.10.2
Computed binaryTarget   : rhel-openssl-3.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-rhel-openssl-3.0.x.so.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-rhel-openssl-3.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.499.0
Preview Features        : relationJoins
```",,
2147013584,23226,"Prisma Client `ERR_INVALID_ARG_TYPE`: `Expected ""port"" to be a number between 0 and 65535`","### Bug description

When the Prisma client tries to connect to CockroachDB, it fails to parse the port as a number, and I get the following error:

```
PrismaClientKnownRequestError: 
Invalid `prisma.errorType.findMany()` invocation:


Expected ""port"" to be a number between 0 and 65535
 code: ""ERR_INVALID_ARG_TYPE""

      at new Ue (/Users/noah-slash/teaching-assistant/node_modules/@prisma/client/runtime/binary.js:17015:3)
      at handleRequestError (/Users/noah-slash/teaching-assistant/node_modules/@prisma/client/runtime/binary.js:24306:11)
      at handleAndLogRequestError (/Users/noah-slash/teaching-assistant/node_modules/@prisma/client/runtime/binary.js:24259:5)
      at /Users/noah-slash/teaching-assistant/node_modules/@prisma/client/runtime/binary.js:24241:5
prisma:engine Client Version: 5.10.1 +5ms
prisma:engine Engine Version: query-engine 5a9203d0590c951969e85a7d07215503f4672eb9 +0ms
prisma:engine Active provider: cockroachdb +0ms
```

Connection string: `postgresql://root@localhost:26257/test_db`

I ""solved"" this by going into `node_modules/@prisma/client/runtime/binary.js` and finding the line where the request was being made after some debugging. Logging the request, I got:

```
URL {
  href: ""http://127.0.0.1:57697/"",
  origin: ""http://127.0.0.1:57697"",
  protocol: ""http:"",
  username: """",
  password: """",
  host: ""127.0.0.1:57697"",
  hostname: ""127.0.0.1"",
  port: ""57697"",
  pathname: ""/"",
  hash: """",
  search: """",
  searchParams: URLSearchParams {},
  toJSON: [Function: toJSON],
  toString: [Function: toString],
}
```

I noticed that the port was a string, and this error message indicated it should have been a number. So I updated the line where the port was being parsed to wrap it in `Number()`, and now it works, but obviously this means that I'd have to do this every time I generate the client.

### How to reproduce

I'm not exactly sure. It happened once, then I changed from the default engine to the binary engine and it stopped happening, then seemingly out of nowhere it started happening again. I suspect it might have something to do with the fact that I'm using Bun instead of Node, since I haven't seen anyone else report this issue anywhere.

### Expected behavior

Should successfully connect to the database and make the query.

### Prisma information

```
generator client {
  provider   = ""prisma-client-js""
  engineType = ""binary""
}

datasource db {
  provider = ""cockroachdb""
  url      = env(""DB_CONNECTION_STRING"")
}
```

### Environment & setup

- OS: macOS
- Database: CockroachDB
- Node.js version: bun 1.0.26


### Prisma Version

```
prisma                  : 5.10.1
@prisma/client          : 5.10.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.6.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../../node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at ../../../node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.498.0
```
",,
2146948389,23225,`Invalid character` error persists on 5.10.1 in Prisma Studio,"### Bug description

Yesterday, on 5.10.0, I encountered the “Error: invalid character” bug from #23201 due to curly quotes in comments in my Prisma schema. After updating to 5.10.1, removing the old generated client, and running `prisma generate`, this error has disappeared from `prisma generate` and from normal query usage.

However, when launching `prisma studio` and running a query, I still encounter an “invalid character” error that it seems the 5.10.1 patch release missed:

<img width=""1345"" alt=""Screenshot 2024-02-21 at 9 36 18 AM"" src=""https://github.com/prisma/prisma/assets/10377391/8dc556b3-b360-4b94-a58a-f53a03145d11"">


### How to reproduce

1. Use a schema with non-ascii characters, such as [the one in `tests/functional/issues/23201-non-ascii-comments`](https://github.com/prisma/prisma/blob/210217909e221349153868c2f934c5113cff8727/packages/client/tests/functional/issues/23201-non-ascii-comments/prisma/_schema.ts)
2. Connect a database
3. Run `prisma studio`
4. Click on the name of a table to cause Prisma Studio to perform a query

### Expected behavior

Prisma Studio works with non-ascii schemas, as it does on prisma < 5.10.0

### Prisma information

[Example schema](https://github.com/prisma/prisma/blob/210217909e221349153868c2f934c5113cff8727/packages/client/tests/functional/issues/23201-non-ascii-comments/prisma/_schema.ts)

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: v20.10.0


### Prisma Version

```
prisma                  : 5.10.1
@prisma/client          : 5.10.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.498.0
```
",,
2146723235,23224,All queries return any after update to 5.10.1,"### Bug description

After updating from 5.9.0 to 5.10.1 all queries return any. When I reinstall the old version every thing works as normal.

### How to reproduce

1. Update from 5.9.0 to 5.10.1
2. All my queris now return type any

### Expected behavior

I expect to recieve the types in my schema.

### Prisma information

```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = ""file:./dev.db""
}

model School {
  id             String          @id @default(uuid())
  name           String          @unique(map: ""school name"")
  users          User[]
  subjects       Subject[]
  groups         Group[]
  activeSubjects activeSubject[]
}

model User {
  id           String         @id @default(uuid())
  password     String
  email        String         @unique(map: ""email"")
  name         String
  role         Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  activeFrom   DateTime       @default(now())
  school       School?        @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  schoolId     String?
  groups       UserInGroup[]
  weekschedule Weekschedule[]
  Assignment   Assignment[]
}

model Group {
  id           String         @id @default(uuid())
  name         String
  year         Int
  createdAt    DateTime       @default(now())
  school       School?        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId     String?
  users        UserInGroup[]
  Weekschedule Weekschedule[]
}

model UserInGroup {
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId  String
  groupId String

  @@id([userId, groupId])
}

model Subject {
  id            String          @id @default(uuid())
  name          String          @unique
  icon          String
  weekschedule  Weekschedule[]
  School        School?         @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  schoolId      String?
  activeSubject activeSubject[]
}

model activeSubject {
  school    School  @relation(fields: [schoolId], references: [id])
  schoolId  String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  @@id([schoolId, subjectId])
}

model Invite {
  id             String   @id @default(uuid())
  role           Int      @default(1)
  groupId        String?
  schoolId       String
  expirationDate DateTime
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  icon        String
  assignments Assignment[]
}

model Weekschedule {
  id          String       @id @default(uuid())
  name        String
  user        User         @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId      String       @default(""deletedUser"")
  group       Group        @relation(fields: [groupId], references: [id], onDelete: SetDefault)
  groupId     String       @default(""deletedGroup"")
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: NoAction)
  subjectId   String
  type        Int          @default(0)
  year        Int
  evaluation  Boolean      @default(true)
  medals      Boolean      @default(true)
  difficulty  Boolean      @default(true)
  public      Int          @default(0)
  studentText String?
  teacherText String?
  gold        Int?         @default(3)
  silver      Int?         @default(2)
  bronze      Int?         @default(1)
  startDate   DateTime     @default(now())
  endDate     DateTime     @default(now())
  assignments Assignment[]
}

model Assignment {
  id             String        @id @default(uuid())
  what           String
  when           String?
  where          String?
  image          String?
  type           Int           @default(1)
  timelimit      Int?
  difficulty     Int           @default(3)
  answer         Boolean       @default(false)
  homeworkDate   DateTime?
  order          Int?
  groupsize      Int           @default(1)
  longText       String?
  user           User          @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId         String        @default(""deletedUser"")
  tag            Tag?          @relation(fields: [tagId], references: [id])
  tagId          String?
  weekschedule   Weekschedule? @relation(fields: [weekscheduleId], references: [id])
  weekscheduleId String?
}
```





```
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export default defineEventHandler(async (event) => {

    const resp = prisma.userInGroup.findMany()
  
    return resp
});

```

### Environment & setup

- OS: , Windows,
- Database:  SQLite
- Node.js version: v20.6.1


### Prisma Version

```
5.10.1
```
",,
2145553116,23212,Prisma CLI ignores PRISMA_CLI_BINARY_TARGETS,"### Bug description

I'm trying to resolve an issue similar to https://github.com/prisma/prisma/issues/17002 on an x64 Linux environment where distribution detection fails. Overriding the binary targets with `PRISMA_CLI_BINARY_TARGETS` seems to be ignored.

The requested binary is downloaded to `node_modules/@prisma/engines`, but `prisma migrate` and `prisma --version` try to use the fallback `debian-openssl-1.0.x` and fail as a consequence.

### How to reproduce

1. run `PRISMA_CLI_BINARY_TARGETS=debian-openssl-3.0.x npm install`
2. content of `node_modules/@prisma/engines`:
```
dist                                          README.md
libquery_engine-debian-openssl-3.0.x.so.node  schema-engine-debian-openssl-3.0.x
LICENSE                                       scripts
package.json
```
3. run `PRISMA_CLI_BINARY_TARGETS=debian-openssl-3.0.x DEBUG=""*"" npx prisma --version`
4. output (references schema-engine-debian-openssl-**1.0.x**):

```
prisma:engines binaries to download libquery-engine, schema-engine +256ms
prisma:get-platform Don't know any platform-specific paths for ""undefined"" on x64 (x86_64) +2ms
prisma:get-platform Falling back to ""ldconfig"" and other generic paths +0ms
prisma:get-platform Command ""ldconfig -p | sed ""s/.*=>s*//"" | sed ""s|.*/||"" | grep libssl | sort | grep -v ""libssl.so.0"""" successfully returned ""libssl.so
libssl.so.1.0.0
"" +15ms
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl.so
libssl.so.1.0.0
 +0ms
prisma:get-platform The parsed libssl version is: 1.0.x +1ms
prisma:warn Prisma doesn't know which engines to download for the Linux distro ""undefined"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
prisma:loadEnv project root found at <appRoot>/package.json +365ms
prisma:tryLoadEnv Environment variables not found at null +10ms
prisma:tryLoadEnv Environment variables not found at undefined +0ms
prisma:tryLoadEnv No Environment variables loaded +0ms
prisma:get-platform Don't know any platform-specific paths for ""undefined"" on x64 (x86_64) +1ms
prisma:get-platform Falling back to ""ldconfig"" and other generic paths +0ms
prisma:get-platform Command ""ldconfig -p | sed ""s/.*=>s*//"" | sed ""s|.*/||"" | grep libssl | sort | grep -v ""libssl.so.0"""" successfully returned ""libssl.so
libssl.so.1.0.0
"" +13ms
prisma:get-platform Found libssl.so file using ""ldconfig"" or other generic paths: libssl.so
libssl.so.1.0.0
 +0ms
prisma:get-platform The parsed libssl version is: 1.0.x +1ms
prisma:warn Prisma doesn't know which engines to download for the Linux distro ""undefined"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
Error: Command failed with ENOENT: <appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x --version
spawn <appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x ENOENT
    at ChildProcess._handle.onexit (node:internal/child_process:284:19)
    at onErrorNT (node:internal/child_process:477:16)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'spawn <appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x',
  path: '<appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x',
  spawnargs: [ '--version' ],
  originalMessage: 'spawn <appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x ENOENT',
  shortMessage: 'Command failed with ENOENT: <appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x --version\n' +
    'spawn <appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x ENOENT',
  command: '<appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x --version',
  escapedCommand: '""<appRoot>/node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x"" --version',
  exitCode: undefined,
  signal: undefined,
  signalDescription: undefined,
  stdout: '',
  stderr: '',
  failed: true,
  timedOut: false,
  isCanceled: false,
  killed: false
}
prisma:getConfig Using getConfig Wasm +27ms
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
prisma                  : 5.10.1
@prisma/client          : 5.10.1
Computed binaryTarget   : debian-openssl-1.0.x
Operating System        : linux
Architecture            : x64
Node.js                 : v18.18.2
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-debian-openssl-1.0.x.so.node)
Schema Engine           : E_CANNOT_RESOLVE_VERSION (at node_modules/@prisma/engines/schema-engine-debian-openssl-1.0.x)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.498.0
prisma:getConfig Using getConfig Wasm +2ms
prisma:getConfig config data retrieved without errors in getConfig Wasm +0ms
```

### Expected behavior

`PRISMA_CLI_BINARY_TARGETS` should override the binary target.

### Prisma information

```prisma
generator client {
  provider = ""prisma-client-js""
  binaryTarget = [""debian-openssl-3.0.x""]
}
```

### Environment & setup

- OS: Linux x64 (exact distro unknown) 
- Database: SQLite
- Node.js version: 18.18.2


### Prisma Version

```
5.10.1
```
(same problem with `4.13.0`)
",,
2145542993,23211,Prisma Client Accelerate in Edge - Unknown argument cacheStrategy,"### Bug description

### Question

Here is my code:
```ts
prisma.ts
import { PrismaClient as PrismaClientEdge } from ""@prisma/client/edge"";

const prismaClientSingleton = () => {
  return new PrismaClientEdge();
};

declare global {
  var prisma: undefined | ReturnType<typeof prismaClientSingleton>;
}

const prisma = globalThis.prisma ?? prismaClientSingleton();

if (process.env.NODE_ENV !== ""production"") globalThis.prisma = prisma;

export default prisma;
```
```ts
api.ts
import prisma from ""@/utils/server/prisma"";

const handler = async (req: Request, res: Response) => {
    const conversation = await prisma.conversations.findUnique({
      where: { id: id },
      cacheStrategy: { swr: 60, ttl: 120 },
    });
   ...
}
```
And receiving the following error:
~~~~~~~~~~~~~
 [PrismaClientValidationError:
Invalid `prisma.conversations.findUnique()` invocation:

{
  where: {
    id: 1708
  },
  cacheStrategy: {
    swr: 60,
    ttl: 120
  }
}

Unknown argument `cacheStrategy`. Available options are marked with ?.] {
  name: 'PrismaClientValidationError',
  clientVersion: '5.10.1'
}
~~~~~~~~~~~~~
### How to reproduce (optional)

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior (optional)

_No response_

### Information about Prisma Schema, Client Queries and Environment (optional)

<!-- Paste your Prisma schema below. Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider  = ""mysql""
  url       = env(""DATABASE_URL"")
  directUrl = env(""DIRECT_DATABASE_URL"")
}
<!-- Paste your Prisma Client queries below. -->
```ts
// Add any relevant Prisma Client queries here
```
~~~~~~~~~~~~~
- OS: Windows
- Database: Azure MySql
- Node.js version: v20.11.1
- Next.js 13

- Run `prisma -v` to see your Prisma version and paste it

prisma                  : 5.10.1 
@prisma/client          : 5.10.1 
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.11.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.498.0

",,
2144907280,23204,5.10.0 throws error when trying to use Prisma types (enums) in the frontend.,"### Bug description

I occasionally use Prisma types in the frontend, especially enums, for validation but also for creating components. This has worked historically but in 5.10.0 I get the following error:

```
Uncaught Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).
```

This is an example of how I use a Prisma enum in React:

``` ts
import { OrderType } from ""@prisma/client"";
...

return (
...
<SelectGroup>
	{Object.keys(OrderType).map((order) => (
		<SelectItem key={order} value={order}>
			{order}
		</SelectItem>
	))}
</SelectGroup>
)
```


### How to reproduce

Updated to 5.10.0 from 5.9. 


### Expected behavior

mapping over the Prisma type to not throw an error for using the enum in the frontend.

### Prisma information

```
generator client {
    provider        = ""prisma-client-js""
    previewFeatures = [""relationJoins""]
}

datasource db {
    provider = ""mysql""
    url      = env(""DATABASE_URL"")
}

enum OrderType {
    SampleOrder
    Shopify
    Wholesale
    Links
    Manual
    Api
    WholesaleGuest
}
```

prisma client:
```ts
import { PrismaClient } from ""@prisma/client"";

const prismaClientSingleton = () => {
	return new PrismaClient({
		log:
			process.env.NODE_ENV === ""development""
				? [
						{
							emit: ""event"",
							level: ""query"",
						},
						""error"",
						""warn"",
				  ]
				: [""error""],
	});
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

const globalForPrisma = globalThis as unknown as {
	prisma: PrismaClientSingleton | undefined;
};

const prisma = globalForPrisma.prisma ?? prismaClientSingleton();

export default prisma;
export * from ""@prisma/client"";

if (process.env.NODE_ENV !== ""production"") globalForPrisma.prisma = prisma;

prisma.$on(""query"", (e) => {
	console.log(""Query: "" + e.query);
	console.log(""Params: "" + e.params);
	console.log(""Duration: "" + e.duration + ""ms"");
});

```

### Environment & setup

- OS: macOS
- Database: Planetscale / mySQL
- Node.js version: v21.6.1


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.10.0
@prisma/client          : 5.10.0
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.1
Query Engine (Node-API) : libquery-engine 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 5a9203d0590c951969e85a7d07215503f4672eb9 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.10.0-34.5a9203d0590c951969e85a7d07215503f4672eb9
Default Engines Hash    : 5a9203d0590c951969e85a7d07215503f4672eb9
Studio                  : 0.498.0
```
",,
2144653117,23201,`Error: Invalid character` when `schema.prisma` includes Chinese/Non-ASCII characters in a comment,"### Bug description
```bash
> prisma generate

Prisma schema loaded from schema.prisma
Error: 
Invalid character
```
### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = ""mysql://test@127.0.0.1:3306/test""
}

model cache {
  key        String @unique @db.VarChar(128)
  val        Json   @db.Json //数据
  expiration Int    @db.UnsignedInt
}

```

### Environment & setup

- OS: macOS
- Database: MySQL
- Node.js version:21.6.2


### Prisma Version

```
""@prisma/client"": ""5.10.0"",
 ""prisma"": ""5.10.0""
```
",,
2144296283,23195,Prisma unable to update db when enum is changed.,"### Bug description

Updated Enum from:

```
enum CompanyTransRole {
  Client 
}
```

to
```
enum CompanyTransRole {
  Customer 
}
```

and added new model 

```
model CompanyTransactionRole { 
  id                             Int                   @id @default(autoincrement())
  companyId             String
  transactionRole       CompanyTransRole        @default(Customer)
}
```

```
Error: P1014
The underlying table for model `sc_companies.CompanyTransactionRole` does not exist.
```

For this to work, I have to delete the Type in pgAdmin.

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

Database updated on db push.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```
See bug description (self explanatory).
```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v21.6.2


### Prisma Version

```
5.9.1
```
",,
2143268852,23193,Prisma doesn't work in the Cloudflare Miniflare 2 Jest test environment,"### Bug description

Hey folks, when instantiating Prisma in the Miniflare 2 Jest environment, this error is displayed:
```
PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `node`).
```

Reproduction: https://github.com/vladinator1000/prisma-miniflare-2-bug

I'm not sure what's causing this for me, I know Prisma has an extensive test suite and I wonder how you've handled your Cloudflare tests. Looks like Cloudflare are all in on Miniflare 3, but the testing story is still in development. They just redirect to the Miniflare 2 testing docs: 
![image](https://github.com/prisma/prisma/assets/1226564/d0b8dfc7-c515-4efa-8004-3277d75a554e)

Miniflare 3 page that recommends legacy: https://miniflare.dev/testing

Miniflare 2 testing docs: https://legacy.miniflare.dev/testing 

### How to reproduce

1. Clone this reproduction repo https://github.com/vladinator1000/prisma-miniflare-2-bug
2. Run `npm run itest`

### Expected behavior

Prisma connects to the database in the Miniflare environment.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
Any minimal schema can be used
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar()
}

```

```ts
import { PrismaClient } from ""@prisma/client""

describe('static import', () => { 
  test('can instantiate Prisma', async () => { 
    const prisma = new PrismaClient()
    expect(prisma).toBeTruthy()

    await prisma.$disconnect()
  })
})
```


### Environment & setup

- OS: WSL
- Database: Postgres
- Node.js version: v21.6.1


### Prisma Version

```
5.9.1
```
",,
2142561234,23190,Prisma generates duplicate type in `node_modules/.prisma/client/index.d.ts`,"### Bug description

I've been upgrading the packages of one of my NestJS projects recently, and went from Prisma 3.13 to version 5.9. But when I run `pnpm run start:dev`. I get TS errors inside this file `node_modules/.pnpm/@prisma+client@5.9.1_prisma@5.9.1/node_modules/.prisma/client/index.d.ts`. I went and check and there are indeed duplicates types.
I tried recreating a reproduction repository, but when I put the content of my `schema.prisma` in the reproduction repo, everything worked well.

I can provide my schema but wouldn't share it publicly.

I also tried downgrading, and it finally worked when I reached v4.12 (which probably means that something changed between v4.12 and v4.13 and up). Furthermore, I want to highlight that every time I tried downgrading, I removed `node_modules` reinstalled them and re-generate Prisma.

It also seems some generated types differ only on plural (like a 's') 
![image](https://github.com/prisma/prisma/assets/112630508/4abf0023-1701-4688-97bc-b3ac96f365ae)


### How to reproduce

Upgrade Prisma from v3.13 to v5.9

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
Can provide it
```

```ts
Classical NestJS Prisma Client
```


### Environment & setup

- OS: MacOS
- Database: MySQL
- Node.js version: Node 18 and tried Node 16 too

### Prisma Version

```
Tried for versions from 4.13 up to 5.9 and doesn't work
```
",,
2142419505,23187,"Vercel - Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.","### Bug description

I'm running into the following error after deploying my website to vercel with prisma 5.9.1

`Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.`

### How to reproduce

1. Add a `postinstall` script of `prisma generate`
2. Update prisma schema to point to right output path
3. Verified on vercel end that prisma client was generated in build step
![image](https://github.com/prisma/prisma/assets/9088799/04164a4f-334a-496d-9303-fda2182e90ce)
4. Receive error in vercel runtime logs when trying to access my website
![image](https://github.com/prisma/prisma/assets/9088799/9aea9ffd-2ee7-49d2-830b-f325838e6d75)


### Expected behavior

no errors

### Prisma information

Prisma schema config
```prisma

generator client {
  provider = ""prisma-client-js""
  output   = ""./generated/client""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```



Prisma client file used in application (sourced from [this guide](https://vercel.com/guides/nextjs-prisma-postgres))

```typescript
// @ts-nocheck
import { PrismaClient } from '@prisma/client';

let prisma: PrismaClient;

if (process.env.NODE_ENV === 'production') {
  prisma = new PrismaClient();
} else {
  if (!global.prisma) {
    global.prisma = new PrismaClient();
  }
  prisma = global.prisma;
}

export default prisma;
```

### Environment & setup

Vercel production environment

### Prisma Version

5.9.1",,
2142410859,23186,`npm ci` fails for Prisma inside Node 18 Alpine Docker Image,"### Bug description

Our team is building a Node application inside Docker Container, which is using Prisma. We install Prisma packages by running NPM CI during the Docker Image build (specify it as step inside Dockerfile), but recently our Auto Build, which is running on a RedHat 9 VM started to fail to build.
It seams that when we attempt to preform `npm ci` inside the node:18.14-Alpine based Image, the following error will happen:

------
 > [dependencies 4/5] RUN npm ci:
2.486 2024-02-19T11:57:17.512Z agentkeepalive sock[0#registry.npmjs.org:443::::::::true:::::::::::::] create, timeout 300001ms
3.710 2024-02-19T11:57:18.736Z agentkeepalive sock[0#registry.npmjs.org:443::::::::true:::::::::::::](requests: 1, finished: 1) free
4.845 npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
11.14 npm ERR! code 1
11.14 npm ERR! path /usr/src/app/node_modules/@prisma/engines
11.14 npm ERR! command failed
11.14 npm ERR! command sh -c node scripts/postinstall.js
11.14 npm ERR! 2024-02-19T11:57:23.527Z prisma:get-platform  Found distro info:
11.14 npm ERR! {
11.14 npm ERR!   ""targetDistro"": ""musl"",
11.14 npm ERR!   ""familyDistro"": ""alpine"",
11.14 npm ERR!   ""originalDistro"": ""alpine""
11.15 npm ERR! }
11.15 npm ERR! 2024-02-19T11:57:23.529Z prisma:get-platform  Don't know any platform-specific paths for ""alpine"" on x64 (x86_64)
11.15 npm ERR! 2024-02-19T11:57:23.529Z prisma:get-platform  Falling back to ""ldconfig"" and other generic paths
11.15 npm ERR! 2024-02-19T11:57:23.547Z prisma:get-platform  Found libssl.so file using ""ldconfig"" or other generic paths: libssl.so.3
11.15 npm ERR! 2024-02-19T11:57:23.547Z prisma:get-platform  The parsed libssl version is: 3.0.x
11.15 npm ERR! 2024-02-19T11:57:24.109Z prisma:fetch-engine:download  copying /root/.cache/prisma/master/23fdc5965b1e05fc54e5f26ed3de66776b93de64/linux-musl-openssl-3.0.x/libquery-engine to /usr/src/app/node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node
11.15 npm ERR! 2024-02-19T11:57:24.245Z prisma:fetch-engine:download  copying /root/.cache/prisma/master/23fdc5965b1e05fc54e5f26ed3de66776b93de64/linux-musl-openssl-3.0.x/schema-engine to /usr/src/app/node_modules/@prisma/engines/schema-engine-linux-musl-openssl-3.0.x
11.15 npm ERR! node:events:491
11.15 npm ERR!       throw er; // Unhandled 'error' event
11.15 npm ERR!       ^
11.15 npm ERR!
11.15 npm ERR! Error: ENOENT: no such file or directory, open '/usr/src/app/node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node'
11.15 npm ERR! Emitted 'error' event on ReadStream instance at:
11.15 npm ERR!     at emitErrorNT (node:internal/streams/destroy:151:8)
11.15 npm ERR!     at emitErrorCloseNT (node:internal/streams/destroy:116:3)
11.15 npm ERR!     at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
11.15 npm ERR!   errno: -2,
11.15 npm ERR!   code: 'ENOENT',
11.15 npm ERR!   syscall: 'open',
11.15 npm ERR!   path: '/usr/src/app/node_modules/@prisma/engines/libquery_engine-linux-musl-openssl-3.0.x.so.node'
11.15 npm ERR! }
11.15 npm ERR!
11.15 npm ERR! Node.js v18.14.2
11.15
11.15 npm ERR! A complete log of this run can be found in:
11.15 npm ERR!     /root/.npm/_logs/2024-02-19T11_57_16_953Z-debug-0.log
------

I have created a small reproduction if this on a public github repo: https://github.com/andystom/alpine_prisma_issue_reproduction

I have only been able to reproduce this error whiles running the docker build on Red Hat Enterprise Linux 9.1 (Plow) VM.  When I tested this on Windows and Alma Linux I was not able to reproduce the error.

When running the docker build command with `--no-cache` flag I can confidently recreate this issue on the RHEL 9 VM. 

Our current work-around to this issue was to switch to Debian based Slim version of the node image, which is not ideal since we prefer using Alpine base image for production. (For size and security reasons). Unfortunately, the RedHat VM for auto build is dictated by our company IT policy and we can’t switch to different one.


### How to reproduce

1. Clone the reproduction from the [git](https://github.com/andystom/alpine_prisma_issue_reproduction) onto Red Hat Enterprise Linux 9.1 (Plow) VM
2. cd to the alpine_prisma_issue_reproduction folder.
3. run following docker build command: `sudo docker build --no-cache -t alpine_prisma_issue_reproduction:test -f Dockerfile .`
4. Build will fail at the `npm ci` stage


### Expected behavior

I would expect the prisma to be installed when running `npm ci` for it inside the alpine image just like it does in the slim version. 

### Prisma information

As the issue happens before Prisma is even installed in the Alpine image I am including the schema from the minimal reproduction. 
```prisma
`generator client {
  provider = ""prisma-client-js""
}

generator tsed {
  provider = ""tsed-prisma""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

// Project

model Project {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String      @unique
  description String?
  disabled    Boolean     @default(false)
  volume      String
  group       String
  endDate     DateTime    @default(now())
}`
```

As the issue happens before Prisma is even installed in the Alpine image there is no code to actually use the Prisma in the minimal reproduction.


### Environment & setup

- OS of base Docker image: Alpine
- OS of the VM the image is build on:  Red Hat Enterprise Linux 9.1 (Plow) 
- Database: Maria DB
- Node.js version: 18.14


### Prisma Version

""prisma/client"": ""5.9.1"",
""prisma"": ""5.9.1"",
""tsed/prisma"": ""7.61.0""

",,
2142049668,23184,Unable to set `@default` with `Json` data type (PostgreSQL),"### Bug description

I wanted to give a @default value to a  property but its showing this error `Error validating: This line is not a valid field or attribute definition.` 

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1: create a new prisma.schema file.
2: define a model with some Json data type properties.
3: give @default value to it.

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  location  Location?
}
model Location {
  locationId   String @id @default(cuid())
  lat   Json[]
  long   Json[]
  merch Json[]
  seller Json[]
  dimension    Json   //@default()
  user         User   @relation(fields: [locationId], references: [id])
}
```


### Environment & setup

OS: windows 10 64x
Database: PostgreSQL
Node.js version: v20.9.0

### Prisma Version

```
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.9.0
```
",,
2141501408,23183,`push` method still unimplemented for scalar lists in CockroachDB,"### Bug description

The `push` operation is no longer defined for scalar lists, after narrowing down the datasource provider in `schema.prisma` from `postgresql` to `cockroachdb`. Pushing works when the provider is set to `postgresql`, though it appears later Prisma versions enforce setting `cockroachdb` in schema.prisma for CockroachDB instances. 

```
  prisma:client  Generated request: +0ms
  prisma:client  {
  ""modelName"": ""user"",
  ""action"": ""updateOne"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""email"": ""mock7ee@gmail.com""
      },
      ""data"": {
        ""ignored_content_list"": {
          ""push"": ""test5""
        }
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
  prisma:client:libraryEngine  sending request, this.libraryStarted: true +6s
  prisma:client:request_handler  PrismaClientKnownRequestError: Unable to match input value to any allowed input type for the field. Parse errors: [Unable to match input value to any allowed input type for the field. Parse errors: [`updateOneuser.data.ignored_content_list.push`: Field does not exist in enclosing type., Invalid argument type. `ignored_content_list` should be of any of the following types: `String[]`], Unable to match input value to any allowed input type for the field. Parse errors: [`updateOneuser.data.ignored_content_list.push`: Field does not exist in enclosing type., Invalid argument type. `ignored_content_list` should be of any of the following types: `String[]`]]
    at Er (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:36:592)
    at qr.buildQueryError (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:117:978)
    at qr.request (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:116:4074)
    at async Object.singleLoader (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:126:5212)
    at async ai.request (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:126:5704)
    at async l (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:131:9709)
    at async POST (/Users/noot/Documents/communique/src/routes/data/email/[slug]/+server.ts:83:7)
    at async Module.render_endpoint (/Users/noot/Documents/communique/node_modules/@sveltejs/kit/src/runtime/server/endpoint.js:49:18)
    at async resolve (/Users/noot/Documents/communique/node_modules/@sveltejs/kit/src/runtime/server/respond.js:454:17)
    at async Module.respond (/Users/noot/Documents/communique/node_modules/@sveltejs/kit/src/runtime/server/respond.js:330:20) {
  code: 'P2009',
  clientVersion: '5.9.1',
  meta: { kind: 'Union', errors: [ [Object], [Object] ] }
} +13s
PrismaClientValidationError: 
Invalid `prisma.user.update()` invocation:

{
  where: {
    email: ""mock7ee@gmail.com""
  },
  data: {
    ignored_content_list: {
      push: ""test5"",
      ~~~~
?     set?: String[]
    }
  }
}

Unknown argument `push`. Available options are marked with ?.
    at ri (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:119:5888)
    at ai.handleRequestError (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:126:6431)
    at ai.handleAndLogRequestError (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:126:6109)
    at ai.request (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:126:5817)
    at async l (/Users/noot/Documents/communique/node_modules/@prisma/client/runtime/library.js:131:9709)
    at async POST (/Users/noot/Documents/communique/src/routes/data/email/[slug]/+server.ts:83:7)
    at async Module.render_endpoint (/Users/noot/Documents/communique/node_modules/@sveltejs/kit/src/runtime/server/endpoint.js:49:18)
    at async resolve (/Users/noot/Documents/communique/node_modules/@sveltejs/kit/src/runtime/server/respond.js:454:17)
    at async Module.respond (/Users/noot/Documents/communique/node_modules/@sveltejs/kit/src/runtime/server/respond.js:330:20)
    at async file:///Users/noot/Documents/communique/node_modules/@sveltejs/kit/src/exports/vite/dev/index.js:524:22 {
  clientVersion: '5.9.1'
}
```

### How to reproduce

1. Initialize `schema.prisma` with CockroachDB & scalar list field
2. Attempt pushing to a scalar list in CockroachDB
3. See error



### Expected behavior

Pushing to CockroachDB should be implemented according to documentation: 
https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-scalar-lists-arrays#adding-items-to-a-scalar-list

### Prisma information
```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""cockroachdb""
  url      = env(""DATABASE_URL"")
}

model author {
  read_email_count BigInt
  sent_email_count BigInt
  open_email_count BigInt
  email_address    String      @id(map: ""author___pkey"")
  last_updated     DateTime?   @default(now()) @db.Timestamp(6)
  issue_list       String[]
  add_date         DateTime?   @default(now()) @db.Timestamp(6)
  email_id_list    String[]
  user             user        @relation(fields: [email_address], references: [email], onDelete: NoAction, map: ""author___fkey"")
  email            email[]
  recipient        recipient[]
  topic            topic[]
}

model email {
  subject         String
  body            String
  topic_list      String[]
  open_count      BigInt
  clipboard_count BigInt
  send_count      BigInt
  read_count      BigInt
  recipient_list  String[]
  rowid           String    @id(map: ""email___pkey"") @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  added_by        String
  shortid         String    @unique(map: ""shortid__key"")
  title           String?
  add_date        DateTime? @default(now()) @db.Timestamp(6)
  issue_list      String[]
  postal_code     String?
  state           String?
  country         String?
  city            String?
  last_updated    DateTime? @default(now()) @db.Timestamp(6)
  author          author    @relation(fields: [added_by], references: [email_address], onDelete: NoAction, map: ""added_by___fkey"")
  issue           issue[]
}

model issue {
  type        String?
  description String?
  rowid       String    @id(map: ""issue___pkey"") @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  added_by    String
  add_date    DateTime? @default(now()) @db.Timestamp(6)
  email_id    String
  user        user      @relation(fields: [added_by], references: [email], onDelete: NoAction, onUpdate: NoAction, map: ""added_by___fk"")
  email       email     @relation(fields: [email_id], references: [shortid], onDelete: NoAction, map: ""email_id___fk"")

  @@unique([added_by, email_id], map: ""added_by_email_id___ckey"")
}

model recipient {
  address          String    @id(map: ""recipient___pkey"")
  email_open_count BigInt
  email_read_count BigInt
  email_sent_count BigInt
  added_by         String
  email_count      BigInt
  last_updated     DateTime  @default(now()) @db.Timestamp(6)
  add_date         DateTime? @default(now()) @db.Timestamp(6)
  author           author    @relation(fields: [added_by], references: [email_address], onDelete: NoAction, map: ""added_by___fkey"")
}

model topic {
  name             String    @id(map: ""topic___pkey"")
  email_count      BigInt
  last_updated     DateTime  @default(now()) @db.Timestamp(6)
  email_open_count BigInt
  email_read_count BigInt
  email_sent_count BigInt
  added_by         String
  add_date         DateTime? @default(now()) @db.Timestamp(6)
  author           author    @relation(fields: [added_by], references: [email_address], onDelete: NoAction, map: ""added_by___fkey"")
}

model user {
  email                String    @id(map: ""user__pkey"")
  fingerprint          Json?
  ignored_content_list String[]
  address              String?
  signup_date          DateTime  @default(now()) @db.Timestamp(6)
  phone                String?
  auth_provider        String?
  last_login           DateTime? @default(now()) @db.Timestamp(6)
  sent_content_list    String[]
  privilege            BigInt?   @default(0)
  given_name           String?
  family_name          String?
  author               author?
  issue                issue[]
}
```

### Environment & setup

- OS: MacOS
- Database: CockroachDB
- Node.js version: v18.13.0


### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v18.13.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
```
",,
2141295435,23182,"Improve SQL Server error when access is denied, currently errors with `PANIC: internal error: entered unreachable code`","### Bug description

when trying to use prisma in NextJS app, the following error is thrown.

```
prisma:client:libraryEngine  library starting +0ms
thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:125:18:
internal error: entered unreachable code
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
  prisma:client:request_handler  PrismaClientRustPanicError: PANIC: internal error: entered unreachable code
```


### How to reproduce

1. Create new NextJS app with basic defaults (app structure etc.)
2. Deploy fresh docker Microsoft SQL server 2022
```sh
docker run -e ""ACCEPT_EULA=Y"" -e 'MSSQL_SA_PASSWORD=<PASSWORD>' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest
```
3. create .env
```env
DATABASE_URL=""sqlserver://localhost:1433;database=db;user=sa;password=<PASSWORD>;trustServerCertificate=true""
```
4. install prisma & prisma client
5. prisma init
6. update prisma schema
7. prisma db push
8. add records to provider table in DB for testing
9. update src/app/page.js to be:
```ts
import {PrismaClient} from ""@prisma/client"";

const prisma = new PrismaClient();

export default async function Home() {

    const data = await prisma.provider.findMany()

    return (
        <>
            {data}
        </>
    );
}
```
10. run nextjs app & navigate to page
11. error

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
}

model Provider {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}
```

```ts
import {PrismaClient} from ""@prisma/client"";

const prisma = new PrismaClient();

export default async function Home() {

    const data = await prisma.provider.findMany()

    return (
        <>
            {data}
        </>
    );
}

```


### Environment & setup

- OS: MacOS 14.3.1
- Database: Microsoft SQL Server 2022 (Docker)
- Node.js version:v21.6.2


### Prisma Version

```
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.6.2
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0

```
",,
2141242634,23181,"VS Code debugger freeze from time to time, when Prisma Client is involved","### Bug description

Since several month my debugger in vscode hangs up in specific lines of codes in several projects related to prisma. I am not the only one. First i thought it is a vscode issue. So i raised an [issue](https://github.com/microsoft/vscode/issues/205226) on microsoft vscode repo. It came out, that prisma client is causing this issue by causing a maximum call stack size exceeded error (see [here](https://github.com/microsoft/vscode/issues/205226#issuecomment-1949208635))

The [microsoft support team](https://github.com/microsoft/vscode/issues/205226#issuecomment-1951371133) idendified the issue in the [following lines in prisma](https://github.com/prisma/prisma/blob/794b61e7474cdd7b83fd2fe0144e1dc3230a220c/packages/client/src/runtime/core/compositeProxy/createCompositeProxy.ts#L119-L126)

Prisma defines the `const customInspect = Symbol.for('nodejs.util.inspect.custom')` and vscode (and i think also other IDEs) use these for watching variables. With that knowledge i also created another repository to reproduce the deep issue. There is also a inital repo, i provided to microsoft, where you can debug (see how to reproduce section). The debugger freeze and you can not go to the next step anymore. Only `console.log` statements help. Hard bugs are nearly impossible to fix or take to much time.

I would appreciate if the prisma team can fix this issue as soon as possible. Otherwise developers are unable to debug any related prisma code (especially in prisma interactive transactions these occurs more often or if you created a simple extended client) in specific scenarios.

### How to reproduce

In general calling `Symbol.for('nodejs.util.inspect.custom')` function from prisma is causing the issue and leads to infinite call stack.

You have 2 options:
Option 1: Go to the initial microsoft issue. There is a real life project, where you can reproduce the hang up by debugging like in usual node projects: https://github.com/microsoft/vscode/issues/205226#issue-2134815085 and follow the reproducing steps.

Option 2: The more deep reproducing issue, which is the inital cause of the problem. It simulates watching variables in vscode debugger:
1. Make sure docker and node 20.10.0 is installed (can also be other node version)
2. Clone repository and install dependencies `git clone git@github.com:avan2s/prisma-vscode-debugger-hangup.git && cd prisma-vscode-debugger-hangup && npm i && npm run test`
3. never come back again. It runs forever and  causes `RangeError: Maximum call stack size exceeded` 





### Expected behavior

The debugger from vscode and other ides is not hanging up. Maybe removing the symbol `Symbol.for('nodejs.util.inspect.custom')` from the client will already fix the issue. But prisma team have to decide. 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
any schema will reproduce the issue. I would recommend checking out the tag from `how to reproduce`. In my case it is:
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
  url = env(""DATABASE_URL"")
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}
```
vitest test code for reproducting the issue:
```ts

import { Prisma, PrismaClient } from '@prisma/client';
import { expect, describe, it } from 'vitest';


describe('reproducting the debugger hangup issue from prisma, whenever your are debugging prisma related stuff - there is a risk, vscode hangs up', () => {
   it('should take long time or hang up for prisma client debug variables for prisma client', async () => {
    const prisma = new PrismaClient();
    await prisma.$connect();
    // takes way to long or hangs up
    expect(prisma).toBeDefined();
    (prisma as any)[Symbol.for('nodejs.util.inspect.custom')]();
   }) 

   
   it('should take long time or hang up for prisma client debug variables in tx client', async () => {
    const prisma = new PrismaClient();
    expect(prisma).toBeDefined();
    await prisma.$connect();
    const x = await prisma.$transaction(async (txClient) => {
    // takes way to long or hangs up
        (txClient as any)[Symbol.for('nodejs.util.inspect.custom')]();
        return 0;
    });
   });

   it('should take long time or hang up for prisma client debug variables in extended client', async () => {
    const extension = Prisma.defineExtension({
        client: {
            $log: (s: string) => console.log(s)
        }
    })
    const prisma = new PrismaClient().$extends(extension);
    expect(prisma).toBeDefined();
    await prisma.$connect();
    await prisma.$log(""foo"");

    // takes way to long or hangs up
    (prisma as any)[Symbol.for('nodejs.util.inspect.custom')]();
   });

   it('throws an error while calling inspect custom', async () => {
    const extension = Prisma.defineExtension({
        client: {
            $log: (s: string) => console.log(s)
        }
    })
    const prisma = new PrismaClient().$extends(extension);
    expect(prisma).toBeDefined();
    await prisma.$connect();
    await prisma.$log(""foo"");
    const x = await prisma.$transaction(async(tx) => {
    try {
        (tx as any)[Symbol.for('nodejs.util.inspect.custom')]();
    } catch(ex) {
        // here also error occured
        expect((ex as any).message).toBe(""'ownKeys' on proxy: trap result did not include '$use'"");        
    }
    return 0;
    });
    
   });
})

```


### Environment & setup

- OS: macOS, Ubuntu 22.04
- Database: PostgreSQL (i asume all databases)
- Node.js version: v20.10.0


### Prisma Version

```
>=5.0
```
",,
2141230654,23180,Preview feature `metrics` and its API `$metrics` can not be used in extended Clients,"### Bug description

When using Prisma `metrics` preview feature and client extensions, TypeScript can't compile and throws an error like:

```
TSError: ⨯ Unable to compile TypeScript:
index.ts:25:38 - error TS2339: Property '$metrics' does not exist on type 'DynamicClientExtensionThis<TypeMap<InternalArgs & { result: {}; model: { user: { findById: () => (id: string) => Promise<{ id: string; name: string | null; email: string; } | null>; }; }; query: {}; client: {}; }>, TypeMapCb, { ...; }>'.
```

### How to reproduce

Running code: https://codesandbox.io/p/devbox/prisma-extends-with-preview-fd76zg

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  output          = ""src/generated/prisma-client""
  previewFeatures = [""metrics""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id          String    @id @default(uuid())
  name        String?
  email       String
}
```

```ts
import { PrismaClient } from ""./src/generated/prisma-client"";

const prisma = new PrismaClient();

const prismaExtended = new PrismaClient().$extends({
  model: {
    user: {
      findById: async (id: string) => prisma.user.findUnique({ where: { id } }),
    },
  },
});

(async () => {
  try {
    console.log(await prisma.$metrics.prometheus());
    console.log(await prisma.user.findUnique({ where: { id: ""123"" } }));
  } catch (error) {
    console.log(""PRISMA ERROR:"", (error as Error).toString());
  }

  // When trying to use an extended Prisma client TS can't compile because:
  // Property '$metrics' does not exist on type 'DynamicClientExtensionThis<TypeMap<InternalArgs & ...'
  try {
    console.log(await prismaExtended.$metrics.prometheus());
    console.log(await prismaExtended.user.findById(""123""));
  } catch (error) {
    console.log(""EXTENDED PRISMA ERROR:"", error);
  }
})();
```


### Environment & setup

- OS: macOS, Linux
- Database: PostgreSQL
- Node.js version: 18


### Prisma Version

```
5.9.1
```
",,
2141028128,23179,"PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`)","### Bug description

Database Error: Failed to register User.Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`)

### How to reproduce

<!--
1.  create-next-app@lastest
2. npm install prisma --save-dev
3. npx prisma init --datasource-provider mongodb
4. add model to schema.prisma
5. run npx prisma generate
6. create registerUser in lib/action.ts 

```
export async function registerUser(prevState: State, formData: FormData) {
    const validatedFields = RegisterUser.safeParse({
        name: formData.get(""name""),
        email: formData.get(""email""),
        password: formData.get(""password""),
    });
    if (!validatedFields.success) {
        return {
            errors: validatedFields.error.flatten().fieldErrors,
            message: ""Missing Fields. Failed to register User."",
        };
    }
    // Prepare data for insertion into the database
    const { name, email, password } = validatedFields.data;

    try {
        const userExisted = await prisma.user.findUnique({
            where: {
                email: email,
            },
        });
        if (userExisted) {
            throw new Error(""User with this email already exists"");
        }
        await prisma.user.create({
            data: { name, email, password },
        });
    } catch (error) {
        // If a database error occurs, return a more specific error.
        return {
            message: ""Database Error: Failed to register User."" + error,
        };
    }
}
7. create RegisterForm
""use client"";

import {
    AtSymbolIcon,
    KeyIcon,
    ExclamationCircleIcon,
} from ""@heroicons/react/24/outline"";
import { ArrowRightIcon } from ""@heroicons/react/20/solid"";
import { Button } from ""@/app/components/button"";

import { useFormState, useFormStatus } from ""react-dom"";
import { registerUser } from ""@/app/lib/actions"";
import Link from ""next/link"";
// import { RegisterFrom as TypeRegisterForm } from ""@/app/lib/definitions"";
// import { ChangeEvent, useState } from ""react"";

export default function RegisterFrom() {
    const initialState = { message: null, errors: {} };

    const [state, dispatch] = useFormState(registerUser, initialState);
    // const [formState, setFormState] = useState<TypeRegisterForm>({
    //     name: """",
    //     email: """",
    //     password: """",
    // });
    // const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    //     const targetName = e.target.name;
    //     setFormState({ [targetName]: e.target.value } as TypeRegisterForm);
    // };
    return (
        <form action={dispatch} className=""space-y-3"">
            <div className=""flex-1 rounded-lg bg-gray-50 px-6 pb-4 pt-8"">
                <h1 className={` mb-3 text-2xl`}>Register</h1>
                <div className=""w-full"">
                    <div>
                        <label
                            className=""mb-3 mt-5 block text-xs font-medium text-gray-900""
                            htmlFor=""name""
                        >
                            Name
                        </label>
                        <div className=""relative"">
                            <input
                                // onChange={handleChange}
                                className=""peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500""
                                id=""name""
                                type=""name""
                                name=""name""
                                placeholder=""Enter your name""
                            />
                            <AtSymbolIcon className=""pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900"" />
                        </div>
                    </div>
                    <div className=""mt-4"">
                        <label
                            className=""mb-3 mt-5 block text-xs font-medium text-gray-900""
                            htmlFor=""email""
                        >
                            Email
                        </label>
                        <div className=""relative"">
                            <input
                                // onChange={handleChange}
                                className=""peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500""
                                id=""email""
                                type=""email""
                                name=""email""
                                placeholder=""Enter your email address""
                            />
                            <AtSymbolIcon className=""pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900"" />
                        </div>
                        {state?.errors?.email &&
                            state.errors?.email.map((error: string) => (
                                <div
                                    className=""flex h-8 items-end space-x-1""
                                    aria-live=""polite""
                                    aria-atomic=""true""
                                >
                                    <p
                                        className=""mt-2 text-sm text-red-500""
                                        key={error}
                                    >
                                        {error}
                                    </p>
                                </div>
                            ))}
                    </div>
                    <div className=""mt-4"">
                        <label
                            className=""mb-3 mt-5 block text-xs font-medium text-gray-900""
                            htmlFor=""password""
                        >
                            Password
                        </label>
                        <div className=""relative"">
                            <input
                                // onChange={handleChange}
                                className=""peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500""
                                id=""password""
                                type=""password""
                                name=""password""
                                placeholder=""Enter password""
                                minLength={6}
                            />
                            <KeyIcon className=""pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900"" />
                        </div>
                    </div>
                    {state?.errors?.password &&
                        state.errors?.password.map((error: string) => (
                            <div
                                className=""flex h-8 items-end space-x-1""
                                aria-live=""polite""
                                aria-atomic=""true""
                            >
                                <p
                                    className=""mt-2 text-sm text-red-500""
                                    key={error}
                                >
                                    {error}
                                </p>
                            </div>
                        ))}
                </div>
                <RegisterButton />
                <p className=""mt-2 text-sm text-red-500"">{state?.message}</p>

                <div>
                    <p className="""">
                        Already have account?{"" ""}
                        <Link
                            href=""/login""
                            className=""font-bold hover:underline""
                        >
                            Login
                        </Link>
                    </p>
                </div>
            </div>
        </form>
    );
}

function RegisterButton() {
    const { pending } = useFormStatus();

    return (
        <Button className=""mt-4 w-full"" aria-disabled={pending}>
            Register <ArrowRightIcon className=""ml-auto h-5 w-5 text-gray-50"" />
        </Button>
    );
}
9. submit and see this error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}
model User {
  id        String      @id @default(uuid())  @map(""_id"")
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

```ts
 await prisma.user.create({
            data: { name, email, password },
        });

```

### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->

### Prisma Version

```
   ^5.9.1

```
",,
2139727128,23174,Schema field annotated with @updatedAt is not updated at data creation,"### Bug description

### Problem statement
Creation of new db entries fails, with the @updatedAt (see schema below) related exception below:
```
async function main() {
   await prisma.address.create(
Null constraint violation on the fields: (`updatedAt`)
    at ai.handleRequestError (C:\Dev\Web\deno\inventory\prisma\node_modules\@prisma\client\runtime\library.js:126:6775)
    at ai.handleAndLogRequestError (C:\Dev\Web\deno\inventory\prisma\node_modules\@prisma\client\runtime\library.js:126:6109)
    at ai.request (C:\Dev\Web\deno\inventory\prisma\node_modules\@prisma\client\runtime\library.js:126:5817)
    at async l (C:\Dev\Web\deno\inventory\prisma\node_modules\@prisma\client\runtime\library.js:131:9709)
    at async main (C:\Dev\Web\deno\inventory\prisma\prisma\seed.ts:9:3) {
  code: 'P2011',
  clientVersion: '5.9.1',
  meta: { modelName: 'address', constraint: [ 'updatedAt' ] }

```
I cannot specifiy the value for the field updatedAt, since the prisma generated client structures do not contain the @updatedAt-annotated field (correct). But the engine does not process it/set it either. How can I solve this issue?

### How to reproduce

1. Create the table below (s. SQL script)
2. Generate the prisma schema
3. Run the client code (e. g. `ts-node seed.ts`)

### Expected behavior

I expect the prisma client to set the current timestamp on the field ""updatedAt"" transparently, when calling `await prisma.address.create` or optionally allow me to set the field's value (not preferred).

### Prisma information

After pulling the db schema (see sql script below) and get the prisma generated schema below:

```
model address {
  id          String      @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  addresstype Int?        @db.SmallInt
  firstname   String?     @db.VarChar(100)
  lastname    String?     @db.VarChar(100)
  coremark    String?     @db.VarChar(150)
  street      String?     @db.VarChar(150)
  streetno    String?     @db.VarChar(20)
  pobox       String?     @db.VarChar(20)
  regioncode  String?     @db.VarChar(10)
  countrycode String?     @db.VarChar(10)
}

```
```ts
// Add your code using Prisma Client
import { PrismaClient } from '@prisma/client';
import { address } from './generated/client/index';

const prisma = new PrismaClient();
async function main() {
  await prisma.address.create({
    data: {
      ""addresstype"": 1,
      ""firstname"": ""John"",
      ""lastname"": ""Doe"",
      ""coremark"": ""Apartment 101"",
      ""street"": ""Main Street"",
      ""streetno"": ""123"",
      ""pobox"": ""PO Box 456"",
      ""region"": ""Cityville"",
      ""regioncode"": ""CV"",
      ""countrycode"": ""US"",
    }
  });
}
main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
  })
```


### Environment & setup

- OS: Windows 11
- Database: PostgreSQL
- Node.js version: v21.6.2
- npm: 10.4.0

### Prisma Version

- prisma@5.9.1
- @prisma/client@5.9.1",,
2137903205,23160,Failing  to run `npx prisma generate`,"### Bug description

Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Error: Get DMMF: NodeAPIQueryEngineLibrary.dmmf is not a function



### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->

I dont know :(


### Expected behavior

_No response_

### Prisma information


```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

generator zod {
  provider              = ""zod-prisma""
  output                = ""./zod"" 
  relationModel         = true 
  modelCase             = ""camelCase"" 
  modelSuffix           = ""Schema"" 
  useDecimalJs          = true 
  prismaJsonNullability = true 
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
```

```ts
import { PrismaClient } from ""@prisma/client"";

declare global {
  // allow global `var` declarations
  // eslint-disable-next-line no-var
  var db: PrismaClient | undefined;
}

export const db =
  global.db ||
  new PrismaClient({
    log: [""query""],
  });

if (process.env.NODE_ENV !== ""production"") global.db = db;


```


### Environment & setup

- OS: Windows 11
- Database: PostgreSQL
- Node.js version: 21.5.0

### Prisma Version

```prisma
Prisma CLI Version : 3.15.2
```
",,
2137259243,23153,Next.js: using `Prisma.sql` errors after upgrading to 5.9.1 (from 5.8.1),"### Bug description

I get it whenever I try to access `Prisma.sql` which makes sense given that after running `prisma generate` it is generated as:
```typescript
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
```

not to mention that `runtimeDescription` is never being defined to begin with.

### How to reproduce

Afaik:
1. upgrade from 5.8.1 to 5.9.1
2. run `prisma generate`
3. look at `node_modules/.prisma/client/index-browser.js`

### Expected behavior

I'd expect the prisma client to generate normally

### Prisma information

I don't feel comfortably sharing my schema

### Environment & setup

- OS: macOS & ubuntu
- Database: PostgreSQL
- Node.js version: v20


### Prisma Version

v5.9.1",,
2135368242,23141,Prisma doesn't know which engines to download with `Linux Mint`,"### Bug description

```
prisma:warn Prisma doesn't know which engines to download for the Linux distro ""org.freedesktop.platform"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
prisma:warn Prisma doesn't know which engines to download for the Linux distro ""org.freedesktop.platform"". Falling back to Prisma engines built ""debian"".
Please report your experience by creating an issue at https://github.com/prisma/prisma/issues so we can add your distro to the list of known supported distros.
```

This is just a prisma error, failing to detect my system.
For full system details check below. (doubt github will allow me to deposit all of this data)
https://termbin.com/lddw

### How to reproduce

<!--
As simple as run the code on any linux mint device.
-->


### Expected behavior

No error occuring.

### Prisma information

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
  previewFeatures = [""jsonProtocol""]
}

datasource db {
  provider = ""postgresql""
  url = env(""POSTGRES_PRISMA_URL"") // uses connection pooling
  directUrl = env(""POSTGRES_URL_NON_POOLING"") // uses a direct connection
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model auth {
  id       Int       @id @default(autoincrement())
  email    String    @unique @db.VarChar(255)
  name     String?   @db.VarChar(255)
  username String    @unique @db.VarChar(255)
  password String?   @db.VarChar(255)
  time     DateTime? @default(now()) @db.Timestamptz(6)
  role     String?   @default(""User"") @db.VarChar(255)
}

model users {
  id        Int      @id @default(autoincrement())
  username  String?  @db.VarChar(255)
  userid    String?  @db.VarChar(255)
  banstatus Boolean? @default(false)
  banreason String?  @db.VarChar(2550)
  role      String?  @default(""User"") @db.VarChar(255)
}

### Environment & setup

- OS: Linux Mint 21.3 Virginia base: Ubuntu 22.04 jammy
- Database: Postgres
- Node.js version: 20.9.0


### Prisma Version

```
4.16.2
```
",,
2135287663,23140,`include` `_count` leads to error when using Turso,"### Bug description

When using Turso and attempting to generate an aggregated count, an error similar to the following is thrown 
```
Invalid `prisma.property.findUnique()` invocation:
Inconsistent column data: Conversion failed: expected a either an i64 or a f64 in column '_aggr_count_leases', found null""
```

This does not occur locally nor when querying a simple SQLite DB

### How to reproduce

With a Turso setup, run a query similar to the following
```ts
const property = await prisma.property.findUnique({
                    where: { id, managers: { some: { managerId } } },
                    include: {
                        _count: {
                            select: {
                                apartments: true,
                            }
                        },
                    },
                });
```

### Expected behavior

_No response_

### Prisma information

```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters""]
  binaryTargets   = [""native"", ""debian-openssl-1.1.x""]
  output          = ""./generated/client""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model Property {
  id           String   @id @default(uuid())

  // ...

  managers       ManagesProperty[]
  apartments     Apartment[]
}

model Apartment {
  id            String   @id @default(uuid())

  // ...

  propertyId    String
  property   Property           @relation(fields: [propertyId], references: [id])
  leases     ApartmentLease[]
}

model ApartmentLease {
  id            String          @id @default(uuid())
  apartment     Apartment       @relation(fields: [apartmentId], references: [id])
  apartmentId   String
  lease         Lease           @relation(fields: [leaseId], references: [id])
  leaseId       String
}

model Lease {
  id                   String    @id @default(uuid())

  // ...

  from                 DateTime
  to                   DateTime

  apartments ApartmentLease[]
}
```

### Environment & setup

- Database: Turso (LibSQL)
- Bun 1.0.25


### Prisma Version

5.5.2
",,
2135130658,23138,`Only reachable with String types.`,"### Bug description

```
    at si.handleRequestError (F:\VQode\siingio\node_modules\@prisma\client\runtime\library.js:125:7178)
    at si.handleAndLogRequestError (F:\VQode\siingio\node_modules\@prisma\client\runtime\library.js:125:6151)
    at si.request (F:\VQode\siingio\node_modules\@prisma\client\runtime\library.js:125:5859)
    at async l (F:\VQode\siingio\node_modules\@prisma\client\runtime\library.js:130:9805)
    at async messagesAPI.beforeGet (webpack-internal:///(api)/./pages/api/messages/[[...id]].ts:45:34)
    at async messagesAPI.handleGet (webpack-internal:///(api)/./libs/rest-handlers.ts:47:17)
    at async messagesAPI.handleRequest (webpack-internal:///(api)/./libs/rest-handlers.ts:187:17) {
  clientVersion: '5.8.0'
}
thread 'tokio-runtime-worker' panicked at query-engine\connectors\mongodb-query-connector\src\filter.rs:753:22:
Only reachable with String types.
error======> PrismaClientRustPanicError:
Invalid `prisma.messages.findMany()` invocation:


Only reachable with String types.

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.
```
facing this issue

Here is my query:

```typescript
const messages = await prisma.messages.findMany({
  where: {
    chatRoomId: { contains: roomId, mode: 'insensitive' },
  },
});
console.log('messages===>', messages);
```

and here is my `Messages` model:

```prisma
model Messages {
  id                   String      @id @default(auto()) @map(""_id"") @db.ObjectId
  sender               Users       @relation(""sender"", fields: [senderId], references: [id])
  senderId             String      @db.ObjectId
  edited               Boolean     @default(false)
  timestamp            DateTime    @default(now())
  content              String
  chatRoom             ChatRooms   @relation(fields: [chatRoomId], references: [id])
  chatRoomId           String      @db.ObjectId
  file                 File?
  seenBy               Users[]     @relation(fields: [seenByIds], references: [id])
  seenByIds            String[]    @db.ObjectId
  emojis               Json?
  replies              Messages[]  @relation(""parentMessage"")
  parentMessage        Messages?   @relation(""parentMessage"", fields: [parentMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentMessageId      String?     @db.ObjectId
  lastMessageChatRooms ChatRooms[] @relation(""lastMessage"")
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @default(now())
  deleted              Boolean     @default(false)
}
```",,
2134864039,23135,"I'm getting ""Your database schema is not in sync with your migration history"" every time I change something","### Bug description

Every time I want to make a change in my schema.prisma file, the terminal is saying that I have to reset my database.

For example this is my ""Issues"" mode

model Issue {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  description      String   @db.Text
  status           String   @default(""open"")
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  assigned_to_user_id String   @db.VarChar(255)
  assigned_to_user User? @relation(fields: [assigned_to_user_id], references: [id])
}

When I add new column, for example`
just_test_column      String   @db.Text

And the I run `npx prisma migrate dev`, it's asking me to reset my database.



### How to reproduce

This is the error message`

PS E:\Win11Dev\Xampp\htdocs\issue-tracker-v4> npx prisma migrate dev
Environment variables loaded from .env
Prisma schema loaded from prisma\schema.prisma
Datasource ""db"": MySQL database ""Issue_tracker"" at ""localhost:3306""

Drift detected: Your database schema is not in sync with your migration history.

The following is a summary of the differences between the expected database schema given your migrations files, and the actual schema of the database.

It should be understood as the set of changes to get from the expected schema to the actual schema.

[*] Changed the `account` table
  [-] Removed foreign key on columns (userId)

[*] Changed the `issue` table
  [-] Removed foreign key on columns (assigned_to_user_id)

[*] Changed the `session` table
  [-] Removed foreign key on columns (userId)

× We need to reset the MySQL database ""Issue_tracker"" at ""localhost:3306""
Do you want to continue? All data will be lost. ... no

Reset cancelled.

### Expected behavior

I expect prisma to not require reset every time I change something

### Prisma information

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

model Issue {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  description      String   @db.Text
  descriptasdion      String   @db.Text
  status           String   @default(""open"")
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  assigned_to_user_id String   @db.VarChar(255)
  assigned_to_user User? @relation(fields: [assigned_to_user_id], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  assigned_issues Issue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


### Environment & setup

- OS: Windows 11
- Database: MySql
- Node.js version: 20.11.0

### Prisma Version

    ""@auth/prisma-adapter"": ""^1.3.3"",
    ""@next-auth/prisma-adapter"": ""^1.0.7"",
    ""@prisma/client"": ""^5.9.1"",
    ""prisma"": ""^5.9.1"",",,
2134636878,23132,prisma on docker,"### Bug description

nestjs prisma create container docker  @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2133950066,23124,Extension's `$connect` method is not used by Prisma query methods unless it's invoked explicitly,"### Bug description

When using a Prisma extension with a client $connect method, this is not invoked by the automatic connection of query methods (findFirst, findMany etc...). 
It is invoked only by explicitly calling prismaExtension.$connect().

### How to reproduce

```
const prisma = new PrismaClient()

const prismaExtension = prisma.$extends({
  client: {
    async $connect() {
      console.warn('Connecting to database')
      await prisma.$connect()
    }
  }
})

prismaExtension.user.findFirst() // Won't log 'Connecting to database'
// prismaExtension.$connect() // Will log 'Connecting to database'
```

### Expected behavior

Prisma query methods should use the provided extension $connect method on automatic connection

### Prisma information

```
const prisma = new PrismaClient()

const prismaExtension = prisma.$extends({
  client: {
    async $connect() {
      console.warn('Connecting to database')
      await prisma.$connect()
    }
  }
})

prismaExtension.user.findFirst() // Won't log 'Connecting to database'
// prismaExtension.$connect() // Will log 'Connecting to database'
```

### Environment & setup

Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
Binaries:
  Node: 20.11.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.1.0
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.3.3
Next.js Config:
  output: standalone
Database: SQL Server

### Prisma Version

5.9.1",,
2132409891,23108,After adding a prisma client extension it is not possible anymore to define event based logging handlers,"### Bug description

It is not possible (since version >=5.0.0) to define a handler for [event based logging](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/logging#event-based-logging) after adding an extension to the prisma client. The `$on` method is missing and was working in the 4 major release even with extensions.
`prismaClientWithSomeExtension.$on(""query"", (event) => queryEvents.push(event));`

### How to reproduce


1. Create a prisma client of your choice and instantiate it using log events (like in the docs):
```typescript 
const prisma = new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
    {
      emit: 'stdout',
      level: 'error',
    },
    {
      emit: 'stdout',
      level: 'info',
    },
    {
      emit: 'stdout',
      level: 'warn',
    },
  ],
}).$extends({}); // I just add an empty extension, the issue will be reproducable with any extension

// define the event handler
prisma.$on(""query"", (event) => console.log(event)); // ERROR $on!

prisma.$on('query', (e) => {
  console.log('Query: ' + e.query)
  console.log('Params: ' + e.params)
  console.log('Duration: ' + e.duration + 'ms')
});
```

3. The error is: `Property '$on' does not exist on type 'DynamicClientExtensionThis<TypeMap<InternalArgs & { result: {}; model: {}; query: {}; client: { $begin: () => (txOptions?: TransactionOptions | undefined) => Promise<FlatTransactionClient>; }; }>, TypeMapCb, { ...; }>'.ts(2339)` 


### Expected behavior

The $on method can still be used in order to handle logging events, after adding an extension. This is especially useful when writing integration tests in order to asserting queries, that are running against the database.

### Prisma information

You can use any schema, i use:
```prisma
generator client {
  provider        = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model AppUser {
  id        BigInt @id @default(autoincrement())
  firstname String
  lastname  String
  email     String
  posts     Post[]

  @@map(""app_user"")
}

model Post {
  id             BigInt       @id @default(autoincrement())
  comment        String
  userId         BigInt
  user           AppUser      @relation(fields: [userId], references: [id])

  @@map(""post"")
}
```

Tyoescript code reproducing this issue:

```typescript
const prisma = new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
    {
      emit: 'stdout',
      level: 'error',
    },
    {
      emit: 'stdout',
      level: 'info',
    },
    {
      emit: 'stdout',
      level: 'warn',
    },
  ],
}).$extends({}); // I just add an empty extension, the issue will be reproducable with any extension

// define the event handler
prisma.$on(""query"", (event) => console.log(event)); // ERROR $on!

prisma.$on('query', (e) => {
  console.log('Query: ' + e.query)
  console.log('Params: ' + e.params)
  console.log('Duration: ' + e.duration + 'ms')
});
```


### Environment & setup

- OS: macOS, Debian
- Database: PostgreSQL
- Node.js version: v20.10.0


### Prisma Version

All versions >=5
```
^5.0.0
```
",,
2132019440,23104,Prisma Accelerate not working with trpc,"### Bug description

```
Cannot fetch data from service:
fetch failed
    at eval (./src/trpc/server.ts:62:98)
Cause: PrismaClientKnownRequestError: 
Invalid prisma.student.findMany() invocation:


Cannot fetch data from service:
fetch failed
    at ai.handleRequestError (/Users/mohammed.afif/Developer/apps/fl/eduvault/node_modules/.pnpm/@prisma+client@5.9.1_prisma@5.9.1/node_modules/@prisma/client/runtime/library.js:126:6775)
    ... 8 lines matching cause stack trace ...
    at async resolve (webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@10.45.1/node_modules/@trpc/server/dist/index.mjs:494:24) {
  code: 'INTERNAL_SERVER_ERROR',
  name: 'TRPCError',
  [cause]: PrismaClientKnownRequestError: 
  Invalid prisma.student.findMany() invocation:
```

### How to reproduce

using t3 stack with planetscale database and prisma accelerate


### Expected behavior

Works without prisma accelerate 

### Prisma information

```prisma
generator client {
    provider = ""prisma-client-js""
}

datasource db {
    provider     = ""mysql""
    url          = env(""DATABASE_URL"")
    directUrl    = env(""DIRECT_DATABASE_URL"")
    relationMode = ""prisma""
}

model Post {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    role          Role      @default(USER)
    image         String?
    referral      Referral?
    points        Reward?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    students      Student[]
    // achievements  Achievement[]
}

model Referral {
    id        String   @default(cuid())
    code      String   @unique
    count     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    @@index([code])
    @@index([userId])
}

model Reward {
    id        String   @default(cuid())
    points    Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// add a Role enum to your schema
enum Role {
    USER
    ADMIN
}

model Student {
    id         String        @id @default(cuid())
    name       String
    achivments Achievement[]
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

model Achievement {
    id          String   @id @default(cuid())
    name        String
    description String
    files       File[]
    grade       String   @default(""1"")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String

    @@index([name])
    @@index([studentId])
}

model File {
    id        String   @id @default(cuid())
    name      String
    type      String
    url       String
    key       String
    size      Int
    extension String
    height    Int?
    width     Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    achievementId String

    @@index([name])
    @@index([achievementId])
}

```

```ts
import { PrismaClient } from ""@prisma/client"";
import { withAccelerate } from ""@prisma/extension-accelerate"";

import { env } from ""@/env"";

const prismaClientSingleton = () => {
  return new PrismaClient().$extends(withAccelerate());
};

type PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>;

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClientSingleton | undefined;
};

export const db =
  globalForPrisma.prisma ??
  new PrismaClient({
    log:
      env.NODE_ENV === ""development"" ? [""query"", ""error"", ""warn""] : [""error""],
  }).$extends(withAccelerate());

if (env.NODE_ENV !== ""production"") globalForPrisma.prisma = db;

```


### Environment & setup

- OS: macOS
- Database: PlanetScale
- Node.js version: 20


### Prisma Version

```
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.9.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/.pnpm/@prisma+engines@5.9.1/node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/.pnpm/@prisma+engines@5.9.1/node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
```
",,
2131079282,23093,5.9.1 regression: ReadonlyDeep_2 indirectly exported,"### Bug description

```
Exported variable 'blah' has or is using name 'ReadonlyDeep_2' from external module ""/Users/jack/src/platform/backend/node_modules/@prisma/client/runtime/library"" but cannot be named.
```

Via:
```
  export const dmmf: runtime.BaseDMMF
```
```
export declare type BaseDMMF = Pick<DMMF.Document, 'datamodel'>;
```
```
export declare namespace DMMF {
    export type Document = ReadonlyDeep_2<{
        datamodel: Datamodel;
        schema: Schema;
        mappings: Mappings;
    }>;
```

```
declare type ReadonlyDeep_2<O> = {
    +readonly [K in keyof O]: ReadonlyDeep_2<O[K]>;
};
```

### How to reproduce

Refer to `Prisma.dmmf.datamodel`

### Expected behavior

_No response_

### Prisma information

5.8.1 works
5.9.1 doesn't.

### Environment & setup

osx
cockroach

### Prisma Version

```
prisma                  : 5.8.1
@prisma/client          : 5.9.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.2.0
Query Engine (Node-API) : libquery-engine 78caf6feeaed953168c64e15a249c3e9a033ebe2 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 78caf6feeaed953168c64e15a249c3e9a033ebe2 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.8.1-1.78caf6feeaed953168c64e15a249c3e9a033ebe2
Default Engines Hash    : 78caf6feeaed953168c64e15a249c3e9a033ebe2
Studio                  : 0.497.0
Preview Features        : metrics, tracing
```
",,
2130718417,23091,Error in driver-adapter-utils with `tsc`:  `Cannot find namespace 'debug'.`,"### Bug description

When trying to use '@prisma/adapter-pg' as described in [Using the node-postgres driver](https://www.prisma.io/docs/orm/overview/databases/postgresql#using-the-node-postgres-driver) I am getting the compilation error:

```
> npx tsc

node_modules/@prisma/driver-adapter-utils/dist/index.d.ts:44:29 - error TS2503: Cannot find namespace 'debug'.

44 export declare const Debug: debug.Debug;
                               ~~~~~

Found 1 error in node_modules/@prisma/driver-adapter-utils/dist/index.d.ts:44

Process finished with exit code 2
```



### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

create simple Prisma test project with previewFeatures = [""driverAdapters""] and 

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""driverAdapters"", ""postgresqlExtensions"", ""views"", ""tracing""]
}

datasource db {
  provider    = ""postgresql""
  url         = env(""DATABASE_URL"")
  extensions  = [uuidOssp(map: ""uuid-ossp"")]
}

model employees {
  // employee_id String @id @default(uuid())
  employee_id String @id @default(dbgenerated(""uuid_generate_v4()"")) @db.Uuid
  preferredUserName String @db.VarChar(255) @unique

  title String? @db.VarChar(255)
  roles String[]

  active Boolean @default(true)
  employment_type String? @db.VarChar(255)
  hourly_rate Decimal? @db.Decimal

  first_name String? @db.VarChar(255)
  last_name String? @db.VarChar(255)
  emails String[]
  phone_numbers String[]

  //Contact information
  address_line1 String? @db.VarChar(255)
  address_line2 String? @db.VarChar(255)
  city String? @db.VarChar(255)
  state String? @db.VarChar(255)
  postal_code String? @db.VarChar(20)
  country String? @db.VarChar(255)
}

```

```ts
//Broken in current Prisma version 5.9.1. 
import {Pool} from 'pg'
import {PrismaPg} from '@prisma/adapter-pg'
import {PrismaClient} from '@prisma/client'

const connectionString = `${process.env.DATABASE_URL}`

const pool = new Pool({connectionString})
const adapter = new PrismaPg(pool)
const prisma = new PrismaClient({
    log: ['query'],
    adapter: adapter
})
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.6.1


### Prisma Version

```
    ""@prisma/adapter-pg"": ""^5.9.1"",
    ""@prisma/client"": ""^5.9.1""
    ""pg"": ""^8.11.3"",
```
",,
2130477108,23089,Form data will not submit due to store_id missing when present,"Problem Description.

The main objective is for the user to be able to create a sub-category with a list of styles displayed in a table that can be edited or deleted when the user sees fit. I used PrismaDB to create a relation one-to-many between the sub-category and styles. A form was made for creating or editing subcategories, handling user interactions, and managing form state and validation. The table consists of the styles the user has inputted. The style values stored in saveStyles ` const [saveStyle, setSaveStyle] = useState<{ name: string }[]>([]);` were mapped in the onSubmit function with the rest of the data.

Upon submitting the form, the following errors are shown. The error suggests that there's a problem with the way I'm trying to create a SubCategory. It seems that I'm attempting to create a SubCategory with styles, but there might be an issue with how I'm structuring the styles field in the prisma.subCategory.create() call:

```
SUB_CATEGORIES_POST PrismaClientValidationError: 
Invalid `prisma.subCategory.create()` invocation:

{
  data: {
    name: ""Shoes"",
    store_id: ""..."",
    category_id: ""..."",
    styles: {
      createMany: {
        data: [
          {
            name: ""Trainers""
          },
          {
            name: ""Sandals""
          }
        ]
      }
    }
  },
  include: {
    styles: true
  }
}

Argument `store_id` is missing.
```
```

API Error: 
AxiosError {message: 'Request failed with status code 500', name: 'AxiosError', code: 'ERR_BAD_RESPONSE', config: {…}, request: XMLHttpRequest, …}
code
: 
""ERR_BAD_RESPONSE""
config
: 
{transitional: {…}, adapter: Array(2), transformRequest: Array(1), transformResponse: Array(1), timeout: 0, …}
message
: 
""Request failed with status code 500""
name
: 
""AxiosError""
request
: 
XMLHttpRequest {onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
response
: 
{data: 'Internal error', status: 500, statusText: 'Internal Server Error', headers: AxiosHeaders, config: {…}, …}
stack
: 
""AxiosError: Request failed with status code 500\n  ""
[[Prototype]]
: 
Error
```
```
const subCategory = await prismadb.subCategory.create({
  data: {
    name,
    category_id,
    styles: {
      createMany: {
        data: styles.map((style: string) => ({ name: style })),
      },
    },
    store_id: params.store_id,
  },
  include: {
    styles: true,
  },
});
```

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider     = ""mysql""
  url          = env(""DATABASE_URL"")
  relationMode = ""prisma""
}

model Store {
  id             String        @id @default(uuid())
  name           String
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  categories     Category[]    @relation(""StoreToCategory"")
  sub_categories SubCategory[] @relation(""StoreToSubCategory"")
  styles         Style[]       @relation(""StoreToStyle"")
  products       Product[]     @relation(""StoreToProduct"")
}

model Category {
  id             String        @id @default(uuid())
  store_id       String
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  store          Store         @relation(""StoreToCategory"", fields: [store_id], references: [id])
  products       Product[]     @relation(""CategoryToProduct"")
  sub_categories SubCategory[] @relation(""CategoryToSubCategory"")

  @@index([store_id])
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store_id    String
  category_id String
  category    Category  @relation(""CategoryToSubCategory"", fields: [category_id], references: [id])
  store       Store     @relation(""StoreToSubCategory"", fields: [store_id], references: [id])
  products    Product[] @relation(""SubCategoryToProduct"")
  styles      Style[]   

  @@index([store_id])
  @@index([category_id])
}

model Style {
  id             String      @id @default(uuid())
  name           String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  store_id       String
  subcategory_id String
  subcategory    SubCategory @relation(fields: [subcategory_id], references: [id])
  store          Store       @relation(""StoreToStyle"", fields: [store_id], references: [id])
  products       Product[]   @relation(""StyleToProduct"")

  @@index([subcategory_id])
  @@index([store_id])
}
...
model Product {
  id             String        @id @default(uuid())
  store_id       String
  category_id    String
  subcategory_id String
  style_id       String
  name           String
  store          Store         @relation(""StoreToProduct"", fields: [store_id], references: [id])
  category       Category      @relation(""CategoryToProduct"", fields: [category_id], references: [id])
  subCategory    SubCategory   @relation(""SubCategoryToProduct"", fields: [subcategory_id], references: [id])
  style          Style         @relation(""StyleToProduct"", fields: [style_id], references: [id])

  @@unique([subcategory_id, colour_id, name])
  @@index([category_id])
  @@index([subcategory_id])
  @@index([style_id])
}

```",,
2129698614,23081,Error in schema.prisma for enums  with multiple database schemas,"### Bug description

Why would an enum needs a schema? Error without it.

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
  @@schema(""sc_users"")
}

model User {
  id                    String                 @id @default(cuid())
  role                  UserRole  
  @@schema(""sc_users"")
}

![Screenshot 2024-02-12 170606](https://github.com/prisma/prisma/assets/225284/8c731bbb-6dca-4ad0-a1f2-d4efd97b0329)


### How to reproduce

Add models in prisma.schema file.

### Expected behavior

No error for enums.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v21.5.0
- NextJS version: v14


### Prisma Version

```
^5.9.1
```
",,
2129651670,23079,Prisma client in unable to run on edge run time.,"I am using Auth.js to implement authentication in my application and prisma as an ORM.

I have following the documentation in auth.js website and implemented everything as it says in the docs.

You can refer here to get an idea: https://authjs.dev/guides/upgrade-to-v5.

Here's how my auth.ts file looks like:
```
import NextAuth from ""next-auth""
import { UserRole } from ""@prisma/client"";
import { PrismaAdapter } from ""@auth/prisma-adapter"";

import { db } from ""@/lib/db"";
import authConfig from ""@/auth.config"";
import { getAccountByUserId, getUserById } from ""@/data/user"";
// import { getTwoFactorConfirmationByUserId } from ""@/data/two-factor-confirmation"";
// import { getAccountByUserId } from ""./data/account"";

export const {
  handlers: { GET, POST },
  auth,
  signIn,
  signOut,
  // update,
} = NextAuth({
  pages: {
    signIn: ""/auth/login"",
    error: ""/auth/error"",
  },
  // events: {
  //   async linkAccount({ user }) {
  //     await db.user.update({
  //       where: { id: user.id },
  //       data: { emailVerified: new Date() }
  //     })
  //   }
  // },
  callbacks: {
    // async signIn({ user, account }) {
    //   // Allow OAuth without email verification
    //   if (account?.provider !== ""credentials"") return true;

    //   const existingUser = await getUserById(user.id);

    //   // Prevent sign in without email verification
    //   if (!existingUser?.emailVerified) return false;

    //   if (existingUser.isTwoFactorEnabled) {
    //     const twoFactorConfirmation = await getTwoFactorConfirmationByUserId(existingUser.id);

    //     if (!twoFactorConfirmation) return false;

    //     // Delete two factor confirmation for next sign in
    //     await db.twoFactorConfirmation.delete({
    //       where: { id: twoFactorConfirmation.id }
    //     });
    //   }

    //   return true;
    // },
    async session({ token, session }) {
      if (token.sub && session.user) {
        session.user.id = token.sub;
      }

      if (token.role && session.user) {
        session.user.role = token.role as UserRole;
      }

      if (session.user) {
        session.user.isTwoFactorEnabled = token.isTwoFactorEnabled as boolean;
      }

      if (session.user) {
        session.user.name = token.name;
        session.user.email = token.email;
        session.user.isOAuth = token.isOAuth as boolean;
      }

      return session;
    },
    async jwt({ token }) {
      if (!token.sub) return token;

      const existingUser = await getUserById(token.sub);

      if (!existingUser) return token;

      const existingAccount = await getAccountByUserId(
        existingUser.id
      );

      token.isOAuth = !!existingAccount;
      token.name = existingUser.name;
      token.email = existingUser.email;
      token.role = existingUser.role;
      token.isTwoFactorEnabled = existingUser.isTwoFactorEnabled;

      return token;
    }
  },
  adapter: PrismaAdapter(db),
  session: { strategy: ""jwt"" },
  ...authConfig,
});
```

Here's auth.config.ts:
```
import bcrypt from ""bcryptjs"";
import type { NextAuthConfig } from ""next-auth"";
import Credentials from ""next-auth/providers/credentials"";
import Github from ""next-auth/providers/github"";
import Google from ""next-auth/providers/google"";

import { LoginSchema } from ""@/schemas"";
import { getUserByEmail } from ""@/data/user"";

export default {
  providers: [
    Google({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
    Github({
      clientId: process.env.GITHUB_CLIENT_ID,
      clientSecret: process.env.GITHUB_CLIENT_SECRET,
    }),
    Credentials({
      async authorize(credentials) {
        const validatedFields = LoginSchema.safeParse(credentials);

        if (validatedFields.success) {
          const { email, password } = validatedFields.data;
          
          const user = await getUserByEmail(email);
          if (!user || !user.password) return null;

          const passwordsMatch = await bcrypt.compare(
            password,
            user.password,
          );

          if (passwordsMatch) return user;
        }

        return null;
      }
    })
  ],
} satisfies NextAuthConfig
```

Here's /api/auth/[...nextauth]/route.ts
```
export { GET, POST } from ""@/auth"";
```


Please let me know if you find any issue in the code.

Any help is highly appreciated.

BR, Moyez Rabbani :)",,
2128577461,23072,"prisma errors should return message as message, not whole stack trace","## Problem

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
So basically when dealing with prisma errors in typescript, we need to return a proper message based on type of prisma error we got. We check this by checking the instance of error using `error instanceof errorClass` and so we get following kind of error object:

```
PrismaClientValidationError {
	name: """",
	clientVersion: ,
	stack: ,
	message ,
}
```
Where the stack and message are same. Since these 2 are same, it makes either of the key:value a duplicate property and absolutely difficult to throw in the message to the user. Because when return error.message, it throws out the whole stack.

<details>
<summary>Example error</summary>

```console
PrismaClientValidationError {
    name: 'PrismaClientValidationError',
    clientVersion: '5.8.0',
    stack: 'PrismaClientValidationError: \n' +
      'Invalid `prisma.product.update()` invocation:\n' +
      '\n' +
     so on.

      'Argument `stock`: Invalid value provided. Expected Int or IntFieldUpdateOperationsInput, provided String.\n' +
      stack trace here,
    message: '\n' +
       'Invalid `prisma.product.update()` invocation:\n' +
      '\n' +
     so on.

      'Argument `stock`: Invalid value provided. Expected Int or IntFieldUpdateOperationsInput, provided String.\n' +
      stack trace here,
  }

```

</details>

## Suggested solution

<!-- A clear and concise description of what you want to happen. -->

A better way to throw in the error is by actually returning the message, not the whole stack trace again.

<details>
<summary>Example Solution error</summary>

```console
  PrismaClientValidationError {
    name: 'PrismaClientValidationError',
    clientVersion: '5.8.0',
    stack: 'PrismaClientValidationError: \n' +
      'Invalid `prisma.product.update()` invocation:\n' +
      '\n' +
     so on.

      'Argument `stock`: Invalid value provided. Expected Int or IntFieldUpdateOperationsInput, provided String.\n' +
      stack trace here

    message: 'Argument `stock`: Invalid value provided. Expected Int or IntFieldUpdateOperationsInput, provided String.'      
  }
```

</details>

## Alternatives

<!-- A clear and concise description of any alternative solutions or features you've considered. -->
None

## Additional context

<!-- Add any other context or screenshots about the feature request here. -->
none",,
2127285723,23052," Generator ""nexus-prisma"" failed with prisma version `5.9~`","### Bug description

`npx prisma generate` fails when I update prisma version from `5.8.1` to `5.9~`

ok
package.json
```
""dependencies"": {
    ""@apollo/server"": ""4.10.0"",
    ""@jcm/nexus-plugin-relay-global-id"": ""0.2.0"",
    ""@jcm/nexus-plugin-relay-node-interface"": ""0.2.0"",
    ""@prisma/client"": ""5.8.1"",
    ""@skeet-framework/utils"": ""1.2.4"",
    ""firebase-admin"": ""12.0.0"",
    ""graphql"": ""16.8.1"",
    ""graphql-depth-limit"": ""1.1.0"",
    ""graphql-middleware"": ""6.1.35"",
    ""graphql-query-complexity"": ""0.12.0"",
    ""graphql-relay"": ""0.10.0"",
    ""graphql-shield"": ""7.6.5"",
    ""nexus"": ""1.3.0"",
    ""nexus-prisma"": ""2.0.3"",
    ""prisma"": ""5.8.1""
  },
 ```

error
```
""dependencies"": {
    ""@apollo/server"": ""4.10.0"",
    ""@jcm/nexus-plugin-relay-global-id"": ""0.2.0"",
    ""@jcm/nexus-plugin-relay-node-interface"": ""0.2.0"",
    ""@prisma/client"": ""5.9.1"",
    ""@skeet-framework/utils"": ""1.2.4"",
    ""firebase-admin"": ""12.0.0"",
    ""graphql"": ""16.8.1"",
    ""graphql-depth-limit"": ""1.1.0"",
    ""graphql-middleware"": ""6.1.35"",
    ""graphql-query-complexity"": ""0.12.0"",
    ""graphql-relay"": ""0.10.0"",
    ""graphql-shield"": ""7.6.5"",
    ""nexus"": ""1.3.0"",
    ""nexus-prisma"": ""2.0.3"",
    ""prisma"": ""5.9.1""
  },
 ```

I test `~5.8.1` was okay.
I get the title's error since the version `5.9.0`

Thank you!



### How to reproduce

package.json
```
""dependencies"": {
    ""@apollo/server"": ""4.10.0"",
    ""@jcm/nexus-plugin-relay-global-id"": ""0.2.0"",
    ""@jcm/nexus-plugin-relay-node-interface"": ""0.2.0"",
    ""@prisma/client"": ""5.9.1"",
    ""@skeet-framework/utils"": ""1.2.4"",
    ""firebase-admin"": ""12.0.0"",
    ""graphql"": ""16.8.1"",
    ""graphql-depth-limit"": ""1.1.0"",
    ""graphql-middleware"": ""6.1.35"",
    ""graphql-query-complexity"": ""0.12.0"",
    ""graphql-relay"": ""0.10.0"",
    ""graphql-shield"": ""7.6.5"",
    ""nexus"": ""1.3.0"",
    ""nexus-prisma"": ""2.0.3"",
    ""prisma"": ""5.9.1""
  },
 ```

`npx prisma generate`

```
Error: Generator ""nexus-prisma"" failed:

node:internal/modules/cjs/loader:598
      throw e;
      ^
Error: Cannot find module '/Users/fumi/Dev/ts/skeet-framework/templates/skeet-graphql/graphql/node_modules/@prisma/client/generator-build'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1181:15)
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1169:15)
    at resolveExports (node:internal/modules/cjs/loader:591:14)
    at Module._findPath (node:internal/modules/cjs/loader:668:31)
    at Module._resolveFilename (node:internal/modules/cjs/loader:1130:27)
    at Module._load (node:internal/modules/cjs/loader:985:27)
    at Module.require (node:internal/modules/cjs/loader:1235:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (/Users/fumi/Dev/ts/skeet-framework/templates/skeet-graphql/graphql/node_modules/nexus-prisma/dist-cjs/lib/prisma-utils/externalToInternalDMMF.js:6:52)
    at Module._compile (node:internal/modules/cjs/loader:1376:14) {
  code: 'MODULE_NOT_FOUND',
  path: '/Users/fumi/Dev/ts/skeet-framework/templates/skeet-graphql/graphql/node_modules/@prisma/client/package.json'
}
Node.js v20.11.0
```

### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

generator nexusPrisma {
  provider = ""nexus-prisma""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}
```

```bash
npx prisma generate
```


### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 20.11.0


### Prisma Version

```
5.9.1
```
",,
2126067669,23033,"After adding new models to my schema, the migration SQL attempted to update a field on table before creating the table","### Bug description

I had an enum named IntensityType that I was not using in my code at all.  I wanted to use that name for a different set of enums, so I changed the first enum name to IntensityCategory, and added the Intensity Type enum below. 

I also added a new model Intensity, which has IntensityType as a field.

When I tried to migrate I ran into an error that the model Intensity does nto exist. 

When I looked at the SQL, it tried tup update Intensity before creating it: 


```
-- AlterEnum
BEGIN;
CREATE TYPE ""IntensityType_new"" AS ENUM ('Effort', 'Pace', 'Profile');
ALTER TABLE ""Intensity"" ALTER COLUMN ""type"" TYPE ""IntensityType_new"" USING (""type""::text::""IntensityType_new"");
ALTER TYPE ""IntensityType"" RENAME TO ""IntensityType_old"";
ALTER TYPE ""IntensityType_new"" RENAME TO ""IntensityType"";
DROP TYPE ""IntensityType_old"";
COMMIT;

-- CreateTable
CREATE TABLE ""Intensity"" (
    ""id"" SERIAL NOT NULL,
    ""type"" ""IntensityType"" NOT NULL,
    ""description"" TEXT,
    ""time"" TEXT,
    ""profileValue"" INTEGER,
    ""roundId"" INTEGER NOT NULL,

    CONSTRAINT ""Intensity_pkey"" PRIMARY KEY (""id"")
);
```

Now it does not give me an option to reset the database, and I am stuck about what to do next

### How to reproduce

I have not tried to reproduce this in a new project


### Expected behavior

Expected the table Intensity to be created before trying to update the table

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma

enum IntensityCategory { // this was IntensityType and I changed it
  Drill
  Recovery
  Power
}

//these items were brand new
model Intensity {
  id           Int           @id @default(autoincrement())
  type         IntensityType
  description  String?       @map(""description"") 

}

enum IntensityType {
  Max
  Convesational
  Recovery
}
```

```ts
// Add your code using Prisma Client

import { PrismaClient } from '@prisma/client'

const prismaClientSingleton = () => {
    return new PrismaClient()
}

declare global {
    var prisma: undefined | ReturnType<typeof prismaClientSingleton>
}

const prisma = globalThis.prisma ?? prismaClientSingleton()

export default prisma

if (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->

Mac OS
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
PostgresSQL on supabase

- Node.js version: <!--[Run `node -v` to see your Node.js version]-->
- v21.4.0



### Prisma Version

```
 5.8.0

```

### This is the error I received: 
```

Error: P3006

Migration `20240208202824_add_intensity_and_recovery_tables_for_round_details` failed to apply cleanly to the shadow database. 
Error code: P1014
Error:
The underlying table for model `Intensity` does not exist.

```",,
2125425482,23023,JSON Filtering uses wrong getter which then skips using index,"### Bug description

Prisma uses slow operator `#>` for accessing string json fields instead of `->>`

### How to reproduce

While using JSONB field on Postgres with Prisma, we have manually created an index to make search one specific key in the JSON faster.

The field definition in schema:
```prisma
  transactionData                   Json?
```

The manually created GIN Index:
```sql
CREATE INDEX IF NOT EXISTS trgm_idx_transactionDataOrderId ON ""LicenseItemModels"" USING GIN ((""transactionData""->>'orderId') gin_trgm_ops);
```


The prisma typescript code:
```ts
await prisma.licenseModel.findMany({
      skip: offset,
      take: limit,
      orderBy: { id: 'desc' },
      select: { id: true, email: true, createdAt: true },
      where: {
        LicenseItemModels: {
          some: {
            OR: [
              {
                email: {
                  contains: search,
                  mode: 'insensitive',
                },
              },
              {
                transactionId: {
                  contains: search,
                  mode: 'insensitive',
                },
              },
              {
                licenseKey: {
                  contains: search,
                  mode: 'insensitive',
                },
              },
              {
                transactionData: {
                  string_contains: search,
                  path: ['orderId'],
                },
              },
            ],
          },
        },
      },
    });

```


The original query skips index, and uses SEQ scan instead:
```sql
SELECT
  ""public"".""LicenseModels"".""id"",
  ""public"".""LicenseModels"".""email"",
  ""public"".""LicenseModels"".""createdAt""
FROM
  ""public"".""LicenseModels""
WHERE (""public"".""LicenseModels"".""id"") IN (
  SELECT
    ""t0"".""id""
  FROM
    ""public"".""LicenseModels"" AS ""t0""
    INNER JOIN ""public"".""LicenseItemModels"" AS ""j0"" ON (""j0"".""licenseId"") = (""t0"".""id"")
 
 WHERE ((""j0"".""email"" ILIKE '%3326-1584%'
      OR ""j0"".""transactionId"" ILIKE '%3326-1584%'
      OR ""j0"".""licenseKey"" ILIKE '%3326-1584%'
      OR ((""j0"".""transactionData"" #>> ARRAY['orderId']::text[])
        LIKE '%3326-1584%'
        AND JSONB_TYPEOF((""j0"".""transactionData"" #> ARRAY['orderId']::text[])::jsonb) = 'string'))
    AND ""t0"".""id"" IS NOT NULL))
ORDER BY
  ""public"".""LicenseModels"".""id"" DESC;
```
![CleanShot 2024-02-08 at 17 12 51@2x](https://github.com/prisma/prisma/assets/1025587/93323f85-ac35-4247-9287-0907ddb9504f)



Now, when you try to query it manually by using get string operator `->>`, then the index is used and query is fast:
```sql
SELECT
  ""public"".""LicenseModels"".""id"",
  ""public"".""LicenseModels"".""email"",
  ""public"".""LicenseModels"".""createdAt""
FROM
  ""public"".""LicenseModels""
WHERE (""public"".""LicenseModels"".""id"") IN (
  SELECT
    ""t0"".""id""
  FROM
    ""public"".""LicenseModels"" AS ""t0""
    INNER JOIN ""public"".""LicenseItemModels"" AS ""j0"" ON (""j0"".""licenseId"") = (""t0"".""id"")
 
 WHERE ((""j0"".""email"" ILIKE '%3326-1584%'
      OR ""j0"".""transactionId"" ILIKE '%3326-1584%'
      OR ""j0"".""licenseKey"" ILIKE '%3326-1584%'
      OR ((""j0"".""transactionData""->>'orderId')
        LIKE '%3326-1584%'
        AND JSONB_TYPEOF((""j0"".""transactionData"" #> ARRAY['orderId']::text[])::jsonb) = 'string')
        )
    AND ""t0"".""id"" IS NOT NULL))
ORDER BY
  ""public"".""LicenseModels"".""id"" DESC
  ```
![CleanShot 2024-02-08 at 17 11 04@2x](https://github.com/prisma/prisma/assets/1025587/0b0dda73-c034-45bb-a35b-2d9f276a1cda)


### Expected behavior

Prisma should use operator that allows it to use indexes

### Prisma information

```ts
await prisma.licenseModel.findMany({
      skip: offset,
      take: limit,
      orderBy: { id: 'desc' },
      select: { id: true, email: true, createdAt: true },
      where: {
        LicenseItemModels: {
          some: {
            OR: [
              {
                email: {
                  contains: search,
                  mode: 'insensitive',
                },
              },
              {
                transactionId: {
                  contains: search,
                  mode: 'insensitive',
                },
              },
              {
                licenseKey: {
                  contains: search,
                  mode: 'insensitive',
                },
              },
              {
                transactionData: {
                  string_contains: search,
                  path: ['orderId'],
                },
              },
            ],
          },
        },
      },
    });

```

### Environment & setup

- OS: macOS, Ubuntu
- Database: PostgreSQL
- Node.js version: v20.10.0 -v



### Prisma Version

```
5.3.1
```
",,
2124931220,23017,Forbid properties in types that can cause runtime failures,"## Problem

Prisma Client's killer feature is the quality of its types. However, while the types can prevent runtime failures due to omission of a property, Prisma Client still fails at runtime if you specify an additional property. Prisma Client types should be robust enough to prevent runtime failures related to object structure. 

## Suggested solution

Use this utility type around prisma client arg types to ensure that only supported properties can be specified.  

```ts
type DisallowExtraProperties<T> = T & {
  [P in keyof any]: P extends keyof T ? T[P] : never;
};
```

## Alternatives

Ignore additional properties instead of erroring at runtime. 

## Additional context

N/a",,
2124335036,23014,"prisma pagination ""take"" not working for values higher than 10","### Bug description

The take method doesnt seem to be working with values higher than 10? I have 12 records in my DB, and im requesting 15 (via take) and its returning 10

Ive tried playing around with the cursor value and even removing it, but can never get more records than 10


### How to reproduce

When I take values such as:

```
prisma.customer.findMany({
      where: {
        workplaceId: ctx.workplaceId,
      },
      include: {
        dependants: true,
        billingAddress: true,
      },
      orderBy: {
        id: 'desc'
      },
      cursor: {
        id: ""clscnra27004z1soz1lryw7hl""
      },
      take: 3
    });
  })
```

it will return 3 records

but if I put 15 in there (I have 12 records in the db btw) - it only returns 10 records

```
prisma.customer.findMany({
      where: {
        workplaceId: ctx.workplaceId,
      },
      include: {
        dependants: true,
        billingAddress: true,
      },
      orderBy: {
        id: 'desc'
      },
      cursor: {
        id: ""clscnra27004z1soz1lryw7hl""
      },
      take: 15
    });
  })
```

==> 10 records returned

### Expected behavior

should return 12 records or max 15

### Prisma information

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""rhel-openssl-1.0.x""]
  output          = ""../node_modules/.prisma/client""
}

datasource db {
  provider     = ""postgresql""
  url          = env(""DATABASE_URL"")
  directUrl    = env(""DIRECT_URL"")
  relationMode = ""foreignKeys""
}

....

### Environment & setup

- OS: macOS
- Database: PostgreSQL
- Node.js version: 19.7.0


### Prisma Version

```
 ""@types/node"": ""^20.4.2"",
""prisma"": ""5.8.0"",
""typescript"": ""5.3.2""
```
",,
2123869904,23009,"[""native"", ""debian-openssl-3.0.x""] in prisma.schema only downloads ""native"" engine","### Bug description

UPDATE: I was able to workaround this by putting the following in my github action.  Without that, it would stop at ""native"" and only pick up `debian-openssl-1.1.x`, 

```yaml
env:
  PRISMA_CLI_BINARY_TARGETS: 'debian-openssl-3.0.x'
```


I'm having trouble making my github action build -> google cloud function work.

My `prisma.schema` file has the following:

```
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""] //  ""debian-openssl-3.0.x"" for google functions
}
```

However, after having the github action run `prisma generate`, there are no engine files present in the `node_modules/@prisma/client` folder, nor next to the `prisma.schema` file.

The two engine files that are available are in the `node_modules/@prisma/engines folder`, and only contain  `[""libquery_engine-debian-openssl-1.1.x.so.node"",""schema-engine-debian-openssl-1.1.x""`], but is missing the `""debian-openssl-3.0.x""`

Oddly when I run `openssl version` in the github action, it gets 3.0.2 --- not sure why `node_modules/@prisma/engines` would only contain `[""libquery_engine-debian-openssl-1.1.x.so.node"",""schema-engine-debian-openssl-1.1.x""]` ?

```
  openssl version
  shell: /usr/bin/bash -e {0}
OpenSSL 3.0.2 15 Mar 2022 (Library: OpenSSL 3.0.2 15 Mar 2022)
```

I need to build the project on a different platform (github actions) than the run is happening (google cloud function), so it's very problematic that there's no `""debian-openssl-3.0.x""` engine downloaded.

Is there a way I can get this engine via the prisma CLI or soemthing, during my build step?  I didn't see a way to do this in the prisma CLI, but maybe just missed it.



### Have you tried to copy the engine in the suggested location? Did that work?

I can't, it's not available in the github action environment

### Which package manager are you using?
Yarn

### Is your workspace a monorepo setup?

Yes

### Is your setup hosting multiple packages in a single workspace?

No, the google cloud function is not

### Is a bundler in use? If yes, which one?

Yes, it's a custom one we wrote, so we can copy in the engine files ourselves... if they were the right version

### Is a framework in use? If yes, which one?

Sort of... the google cloud ""framework""

### Your project uses TypeScript or just JavaScript?

Typescript

### When you saw our message, did it happen locally or in deployment?

Deployment

### Where is your project deployed?

- Build: github action
- Deploy / run: google cloud function gen2  

### Paste the error message

```
PrismaClientInitializationError: Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".
This is likely caused by a bundler that has not copied ""libquery_engine-debian-openssl-3.0.x.so.node"" next to the resulting bundle.
Ensure that ""libquery_engine-debian-openssl-3.0.x.so.node"" has been copied next to the bundle or in """".
We would appreciate if you could take the time to share some information with us.
Please help us by answering a few questions: https://pris.ly/engine-not-found-bundler-investigation
The following locations have been searched:
  /workspace
  /
  /home/runner/work/REDACTED/REDACTED/node_modules/@prisma/client
  /.prisma/client
  /tmp/prisma-engines
    at ul (/workspace/index.js:85928:805)
    at async Object.loadLibrary (/workspace/index.js:85975:9937)
    at async qr.loadEngine (/workspace/index.js:85977:448)
    at async qr.instantiateLibrary (/workspace/index.js:85976:9762)

Error: Process exited with code 16
    at process.<anonymous> (/layers/google.nodejs.yarn/yarn_modules/node_modules/@google-cloud/functions-framework/build/src/invoker.js:92:22)
    at process.emit (node:events:517:28)
    at process.emit (node:domain:489:12)
    at process.exit (node:internal/process/per_thread:191:15)
    at sendCrashResponse (/layers/google.nodejs.yarn/yarn_modules/node_modules/@google-cloud/functions-framework/build/src/logger.js:44:9)
    at process.<anonymous> (/layers/google.nodejs.yarn/yarn_modules/node_modules/@google-cloud/functions-framework/build/src/invoker.js:88:44)
    at process.emit (node:events:517:28)
    at process.emit (node:domain:489:12)
    at emit (node:internal/process/promises:149:20)
    at processPromiseRejections (node:internal/process/promises:283:27)
```

### How to reproduce

I'm not sure why my github action environment has openssl-1.1.x in it, but it would seem it does. I verified it *also* has openssl 3.0.2

`yarn build-fns` is what looks at and copies over the engines files that have been downloaded.

the relevant code is at:

```ts
  const PRISMA_ENGINES_DIR = 'node_modules/@prisma/engines';
  const prismaDir = path.resolve(__dirname, '../', PRISMA_ENGINES_DIR);
  const prismaFiles = await readdir(prismaDir);
  const engineFiles = prismaFiles.filter((file) => file.match(/engine/));

  console.log(
    'Copying ',
    engineFiles.length,
    'prisma engines to dist folder:',
    JSON.stringify(engineFiles),
  );

  console.log(
    'DEBUG: prismaDir has',
    prismaFiles.length,
    'files:',
    JSON.stringify(prismaFiles),
  );
```


Here's my github action template

```yaml
  production-deploy:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'v18.18.2'
          cache: 'yarn'
      - name: Install dependencies
        run: |
          yarn global add node-gyp
          yarn install --frozen-lockfile
      - name: Verify OpenSSL Version
        run: openssl version
      - name: Generate Prisma
        run: yarn prisma generate
      - name: Build function
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'
        run: yarn build-fns @MYREPO/${{ inputs.function }}
```

The rest of the template focuses on deployment to google cloud

### Expected behavior

To also have the `debian-openssl-3.0.x` engine files on the system after `prisma generate`, instead of just `debian-openssl-1.1.x`

### Prisma information


```ts
generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""] //  ""debian-openssl-3.0.x"" for google functions
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

```
models follow this in my prisma schema

### Environment & setup

- OS: ubuntu/debian
- Database: MongoDB
- Node.js version: 18


### Prisma Version

```json
{
    ""@prisma/client"": ""5.9.1"",
    ""mongodb"": ""6.3.0"",
    ""prisma"": ""5.9.1""
}
```
",,
2122173202,22996,Uncaught Error: @prisma/client did not initialize yet.,"### Bug description

Uncaught Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report
    at new PrismaClient (file://D:\NextJS\next-blog\node_modules\.prisma\client\default.js:43:11)
    at eval (webpack-internal:///(rsc)/./src/utils/auth.js:17:16)
    at (rsc)/./src/utils/auth.js (file://D:\NextJS\next-blog\.next\server\app\api\auth\[...nextauth]\route.js:192:1)
    at __webpack_require__ (file://D:\NextJS\next-blog\.next\server\webpack-runtime.js:33:43)
    at eval (webpack-internal:///(rsc)/./src/app/api/auth/[...nextauth]/route.js:6:69)
    at (rsc)/./src/app/api/auth/[...nextauth]/route.js (file://D:\NextJS\next-blog\.next\server\app\api\auth\[...nextauth]\route.js:182:1)
    at __webpack_require__ (file://D:\NextJS\next-blog\.next\server\webpack-runtime.js:33:43)
    at eval (webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.js&appDir=D%3A%5CNextJS%5Cnext-blog%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CNextJS%5Cnext-blog&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!:17:111)
    at (rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&page=%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2F%5B...nextauth%5D%2Froute.js&appDir=D%3A%5CNextJS%5Cnext-blog%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CNextJS%5Cnext-blog&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! (file://D:\NextJS\next-blog\.next\server\app\api\auth\[...nextauth]\route.js:172:1)
    at __webpack_require__ (file://D:\NextJS\next-blog\.next\server\webpack-runtime.js:33:43)
    at __webpack_exec__ (file://D:\NextJS\next-blog\.next\server\app\api\auth\[...nextauth]\route.js:202:39)
    at <unknown> (file://D:\NextJS\next-blog\.next\server\app\api\auth\[...nextauth]\route.js:203:413)
    at __webpack_require__.X (file://D:\NextJS\next-blog\.next\server\webpack-runtime.js:168:21)
    at <unknown> (file://D:\NextJS\next-blog\.next\server\app\api\auth\[...nextauth]\route.js:203:47)
    at Object.<anonymous> (file://D:\NextJS\next-blog\.next\server\app\api\auth\[...nextauth]\route.js:206:3)
    at Module._compile (node:internal/modules/cjs/loader:1376:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)
    at Module.load (node:internal/modules/cjs/loader:1207:32)
    at Module._load (node:internal/modules/cjs/loader:1023:12)
    at Module.require (node:internal/modules/cjs/loader:1235:19)
    at mod.require (file://D:\NextJS\next-blog\node_modules\next\dist\server\require-hook.js:65:28)
    at require (node:internal/modules/helpers:176:18)
    at requirePage (file://D:\NextJS\next-blog\node_modules\next\dist\server\require.js:109:84)
    at <unknown> (file://D:\NextJS\next-blog\node_modules\next\dist\server\load-components.js:74:84)
    at async loadComponentsImpl (file://D:\NextJS\next-blog\node_modules\next\dist\server\load-components.js:74:26)
    at async DevServer.findPageComponentsImpl (file://D:\NextJS\next-blog\node_modules\next\dist\server\next-server.js:675:36)

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

How can i solve this error

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model Account {
  id                 String  @id @default(cuid()) @map(""_id"")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map(""_id"")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map(""_id"")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String @id @map(""_id"")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

```ts
// Add your code using Prisma Client
```
import { PrismaClient } from ""@prisma/client"";

let prisma;

if (process.env.NODE_ENV === ""production"") {
  prisma = new PrismaClient();
} else {
  if (!global.prisma) {
    global.prisma = new PrismaClient();
  }
  prisma = global.prisma;
}

export default prisma;


### Environment & setup

Windows 11, 
MongoDB
Node >20

### Prisma Version

```
""prisma"": ""^5.9.1"",
```
",,
2121993195,22992,"Prisma Postgres stopped working out of sudden, saying database string is invalid","### Bug description

I was debugging my Next.js project with Prisma as my ORM. Everything was working fine. I logged into the dashboard page which lists all products from the Vercel Postgres database by using Prisma client.

Out of sudden, Prisma stopped working and no data can be fetched, basically any operations via Prisma error out. Here is an error example:

```
Invalid `prisma.artworks.findMany()` invocation:

The provided database string is invalid. The provided arguments are not supported in database URL. Please refer to the documentation in https://www.prisma.io/docs/reference/database-reference/connection-urls for constructing a correct connection string. In some cases, certain characters must be escaped. Please check the string for any illegal characters.

```

I have not changed anything in the .env or .env.local files, I did not even open those 2 files. So I opened the Vercel website, and copied the database connection strings again and put it into these 2 environment config files,

```
POSTGRES_URL=""postgres://default:<mypassword>@ep-divine-smoke-00439065-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb""
POSTGRES_PRISMA_URL=""postgres://default:<mypassword>@ep-divine-smoke-00439065-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb?pgbouncer=true&connect_timeout=15""
POSTGRES_URL_NON_POOLING=""postgres://default:<mypassword>@ep-divine-smoke-00439065.us-east-1.postgres.vercel-storage.com:5432/verceldb""
POSTGRES_USER=""default""
POSTGRES_HOST=""ep-divine-smoke-00439065-pooler.us-east-1.postgres.vercel-storage.com""
POSTGRES_PASSWORD=""<mypassword>""
POSTGRES_DATABASE=""verceldb""

```

(I replaced the real password with <mypassword> in this post, but the real env files have the correct password which I copied from Vercel without any change).

Also copied the code for use in Prisma's schema file like below:
```

datasource db {    
  provider = ""postgresql""    
  url = env(""POSTGRES_PRISMA_URL"") // uses connection pooling    
  directUrl = env(""POSTGRES_URL_NON_POOLING"") // uses a direct connection    
}
```

Also I just notice that I can pull my db schema from the Vercel PostgreSql database, this means the database connection string actually works. The issue could come from Prisma.

![image](https://github.com/prisma/prisma/assets/5151146/02f77184-9048-41e1-859d-e4472a3fe6fb)

Also, I am able to launch the Prisma Studio and see all the data. So this is for sure the issue from `PrismaClient`.


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->
1. create a next project
2. create a project on Vercel which has a storage with Postgres
3. copy the code snippet from .env.local tab in Storage section on the Vercel platform
4. create the `.env` file and pasted in the code snippet
5. Also copy the code snippet from Prisma tab on Vercel's storage section and pasted in `schema.prisma` 
6. Pull and generate the code for the Database in the next.js project, `npx prisma db pull` and `npx prisma generate`,
7. Run any operations with the PrismaClient to see the error

### Expected behavior

I expect it to work as previously.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
datasource db {
  provider  = ""postgresql""
  url       = env(""POSTGRES_PRISMA_URL"")
  directUrl = env(""POSTGRES_URL_NON_POOLING"")
}

generator client {
  provider = ""prisma-client-js""
}

model likes {
  userid    String    @db.Uuid
  artworkid String    @db.Uuid
  likeddate DateTime? @default(now()) @db.Timestamp(6)
  artworks  artworks  @relation(fields: [artworkid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userid, artworkid])
}

...... and other models
```

```ts
// Add your code using Prisma Client
import { PrismaClient, artworkimages, artworks, artworktags, tags, users } from '@prisma/client'
const prisma = new PrismaClient();

export async function getAllUsers(): Promise<users[]> {
  try {
    const activeUsers = await prisma.users.findMany({
      where: { isactive: true }
    });

    return activeUsers;
  } catch (error) {
    console.error('Failed to fetch user:', error);
    throw new Error('Failed to fetch user.');
  }
}

```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]--> Windows 11 Pro
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]--> PostgreSQL
- Node.js version: <!--[Run `node -v` to see your Node.js version]--> v20.9.0


### Prisma Version

```
""@prisma/client"": ""^5.9.1"",
```
",,
2121127968,22979,`Error: Cannot find module ... at createEsmNotFoundErr (node:internal/modules/cjs/loader:1181:15)`,"### Bug description

After update to

```
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.10.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules\@prisma\engines\query_engine-windows.dll.node) 
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules\@prisma\engines\schema-engine-windows.exe)   
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
```

I receive this error

```
Error: Cannot find module 'C:\test\node_modules\@prisma\client\test\default'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1181:15)
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1169:15)
    at resolveExports (node:internal/modules/cjs/loader:591:14)
    at Function.Module._findPath (node:internal/modules/cjs/loader:668:31)
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:1130:27)
    at Function.Module._load (node:internal/modules/cjs/loader:985:27)
    at Function.Module._load (C:\test\node_modules\@nx\js\src\executors\node\node-with-require-overrides.js:18:31)
    at Module.require (node:internal/modules/cjs/loader:1235:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (C:\test\apps\test\src\main.ts:23:38)
```

it seem that https://github.com/prisma/prisma/issues/22875 not resolve it :(

I suspect that the problem is with the generation, in particulary I generate the client in differente place, my schema prisma is

```
generator client {
  provider = ""prisma-client-js""
  output   = ""../node_modules/@prisma/client/test""
}
```

and I import the client as 

```
import { Prisma, PrismaClient } from '@prisma/client/test';
```

as you suggest in the [docs](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#using-a-custom-output-path)

could be this the problem?
",,
2121125039,22978,"Rust Panic Error, `PANIC: internal error: entered unreachable code`","### Bug description

Adapted From: https://github.com/prisma/prisma/issues/22918

```
Server Error
PrismaClientRustPanicError: 
Invalid `prisma.products.findMany()` invocation:

PANIC: internal error: entered unreachable code
```

### How to reproduce

1. Go to: https://github.com/ImaginativeWork/next-iis-deploy-02
2. Change 'DATABASE_URL=""sqlserver://[your-microsoft-sql-server]:1433;database=TestProducts;initialCatalog=TestProducts;integratedSecurity=true;trustServerCertificate=true;providerName=System.Data.SqlClient""'
3. Run, using IIS Manager

**server.js**
```
// import { createServer } from 'http';
// import { parse } from 'url';

const { createServer } = require('http')
const { parse } = require('url')
const next = require('next')

const dev = process.env.NODE_ENV !== 'production'
const hostname = 'localhost'
const port = process.env.PORT || 3000;

// when using middleware `hostname` and `port` must be provided below
const app = next({ dev, hostname, port })
const handle = app.getRequestHandler()

app.prepare().then(() => {
  createServer(async (req, res) => {
    try {
      
      // Be sure to pass `true` as the second argument to `url.parse`.
      // This tells it to parse the query portion of the URL.
      const parsedUrl = parse(req.url, true)
      const { pathname, query } = parsedUrl
 
      if (pathname === '/a') {
        await app.render(req, res, '/a', query)
      } else if (pathname === '/b') {
        await app.render(req, res, '/b', query)
      } else {
        await handle(req, res, parsedUrl)
      }
    } catch (err) {
      console.error('Error occurred handling', req.url, err)
      res.statusCode = 500
      res.end('internal server error')
    }
  })
    .once('error', (err) => {
      console.error(err)
      process.exit(1)
    })
    .listen(port, () => {
      console.log(`> Ready on http://${hostname}:${port}`)
    })
});

const requestListener = function(req, res) {
  res.writeHead(200);
  res.write('process.env.NODE_ENV: ' + process.env.NODE_ENV + '\n');
  res.write('hostname: ' + hostname + '\n');
  res.write('port: ' + port + '\n');
  res.write('app: ' + app + ' | ' + JSON.stringify(app) + '\n');
  // res.write('parsedUrl\n');
  // res.write('parsedUrl: ' + parsedUrl + ' | ' + JSON.stringify(parsedUrl) + '\n');
  res.end('My first server - another change ' + Date() + ' dev: ' + dev);
}

// const server = createServer(requestListener);
// server.listen(port, function () {
//   console.log('Example app listening on port ' + port + '!');
// });
```

**web.config**
```
<?xml version=""1.0"" encoding=""utf-8""?>
<configuration>
  <configSections />
  <connectionStrings />
  <startup />
  <appSettings>
    <add key=""TelerikWinFormsThemeName"" value=""Fluent""></add>
    <add key=""ClientSettingsProvider.ServiceUri"" value=""""></add>
  </appSettings>
  <system.web>
    <membership defaultProvider=""ClientAuthenticationMembershipProvider"">
      <providers>
        <add name=""ClientAuthenticationMembershipProvider"" type=""System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=NotSureIfThisIsASecret"" serviceUri="""" />
      </providers>
    </membership>
    <roleManager defaultProvider=""ClientRoleProvider"" enabled=""true"">
      <providers>
        <add name=""ClientRoleProvider"" type=""System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=NotSureIfThisIsASecret"" serviceUri="""" cacheTimeout=""86400"" />
      </providers>
    </roleManager>
  </system.web>
  <system.webServer>
    <!-- https://learn.microsoft.com/en-us/troubleshoot/developer/webapps/iis/health-diagnostic-performance/http-403-14-forbidden-webpage -->
    <!-- <directoryBrowse enabled=""true"" /> -->
    <directoryBrowse enabled=""false"" />
    <!-- http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx -->
    <webSocket enabled=""false"" />
    <handlers>
      <!-- Indicates that the server.js file is a node.js site to be handled by the iisnode module -->
      <add name=""iisnode"" path=""server.js"" verb=""*"" modules=""iisnode"" />
    </handlers>
    <httpPlatform stdoutLogEnabled=""false"" 
      stdoutLogFile="".\node.log"" startupTimeLimit=""20"" processPath=""C:\Program Files\nodejs\node.exe"" arguments="".\server.js"">
      <environmentVariables>
        <environmentVariable name=""PORT"" value=""%HTTP_PLATFORM_PORT%"" />
        <!-- <environmentVariable name=""NODE_ENV"" value=""Production"" /> -->
      </environmentVariables>
    </httpPlatform>

    <rewrite>
      <rules>
        <clear />
        <rule name=""NodeInspector"" patternSyntax=""ECMAScript"" stopProcessing=""false"">
          <match url=""^server.js\/debug[\/]?"" />
          <conditions logicalGrouping=""MatchAll"" trackAllCaptures=""false"" />
        </rule>

        <!-- The next two rules actually launch the app -->
        <rule name=""StaticContent"">
          <conditions logicalGrouping=""MatchAll"" trackAllCaptures=""false"" />
          <action type=""Rewrite"" url=""public{REQUEST_URI}"" />
        </rule>
        <rule name=""DynamicContent"">
          <conditions logicalGrouping=""MatchAll"" trackAllCaptures=""false"">
            <add input=""{REQUEST_FILENAME}"" matchType=""IsFile"" negate=""true"" />
          </conditions>
          <action type=""Rewrite"" url=""server.js"" />
        </rule>

        <!-- Do not interfere with requests for node-inspector debugging -->
        <!-- First we consider whether the incoming URL matches a physical file in the /public folder -->
        <!-- All other URLs are mapped to the node.js site entry point -->
      </rules>
    </rewrite>

    <!-- 'bin' directory has no special meaning in node.js and apps can be placed in it -->
    <security>
      <requestFiltering>
        <hiddenSegments>
          <add segment=""node_modules"" />
        </hiddenSegments>
      </requestFiltering>
    </security>

    <!-- Make sure error responses are left untouched -->
    <httpErrors existingResponse=""PassThrough"" />

    <!-- <iisnode node_env=""production"" /> -->
    <iisnode node_env=""development"" loggingEnabled=""false"" debuggingEnabled=""true"" />
      <modules>
        <add name=""UriCacheModule"" />
        <add name=""FileCacheModule"" />
        <add name=""TokenCacheModule"" />
        <add name=""TracingModule"" />
        <add name=""RequestMonitorModule"" />
        <add name=""ManagedEngine64"" preCondition=""integratedMode,runtimeVersionv2.0,bitness64,winx86_64"" />
        <add name=""ManagedEngine"" preCondition=""integratedMode,runtimeVersionv2.0,bitness32,winx86_64"" />
        <add name=""ManagedEngineV4.0_32bit"" preCondition=""integratedMode,runtimeVersionv4.0,bitness32,winx86_64"" />
        <add name=""ManagedEngineV4.0_64bit"" preCondition=""integratedMode,runtimeVersionv4.0,bitness64,winx86_64"" />
      </modules>
  </system.webServer>
</configuration>
```
5. See error

### Expected behavior

Show table data
![Database Table - no server](https://github.com/prisma/prisma/assets/48955978/ed4e7506-f3f6-453f-99c8-1f7f9abe11aa)



### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlserver""
  url      = env(""DATABASE_URL"")
}

model Products {
  ID       Int     @id(map: ""PK__Products__3214EC270EA330E9"")
  Name     String  @db.VarChar(255)
  Price    String? @db.VarChar(255)
  Quantity Int?
}
```

**pages/api/products.js**
```ts
// Add your code using Prisma Client
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import prisma from ""../../lib/prisma"";

export default async function handle(req, res) {

  const products = await prisma.product.findMany();

  const experimentalProducts = await prisma.products.findMany();

  // const products = await ""Replace this with database items"";
  
  res.json(products);
}
```

### Environment & setup

- OS: Windows 10
- Database: SQL Server
- Node.js version: 20.9.0
- Web Server: IIS version 10

```
{
  ""name"": ""next-iis-deploy-02"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""node server.js"",
    ""lint"": ""next lint""
  },
  ""dependencies"": {
    ""next"": ""14.0.1"",
    ""react"": ""^18"",
    ""react-dom"": ""^18""
  },
  ""devDependencies"": {
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""autoprefixer"": ""^10.0.1"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.0.1"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.3.0"",
    ""typescript"": ""^5""
  }
}
```

### Prisma Version

```
$ npx prisma -v
Environment variables loaded from .env
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.9.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
```",,
2120535740,22972,`Got an error reading communication packets` with MariaDB > 10.4,"### Bug description

Using any MariaDB Version > 10.4 leads to random connection errors with the prisma query engine.
Tested with different Prisma versions, on different OS/Architectures. Native mysql connectors doesn't face this problem.

**mysql error log**
`Aborted connection 5 to db: '****' user: '****' host: '*****' (Got an error reading communication packets)`
This not only causes connections to fail sometimes but also spams the db server with tons of errors in logs&statistics

**Nasty Workaround**
Increase your wait_timeout or keep the connection alive within your wait_timeout range `SELECT 1` etc.

### How to reproduce

Fresh setup of MariaDB > 10.4
Any Prisma version
Simple script with connect, select 1, disconnect.
8/10 it will connect but produce these errors in the mysql logs

### Expected behavior

Fixating 10.4 at the docs for MariaDB.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
generator client {
   provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")

}

model test {
  id    Int    @id @default(autoincrement())
  name  String
}
```

```ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  let res= await prisma.$queryRaw`SELECT 1`
  console.log(res)
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
```


### Environment & setup

- OS: Windows 11 AMD64 / Ubuntu 22.04 ARM
- Database: MariaDB > 10.4
- Node.js version: v20.10.0


### Prisma Version

```
prisma@5.9.1
```
",,
2120326631,22971,`relationJoins` preview feature: called `Option::unwrap()` on a `None` value,"### Bug description

When loading a relation with the `relationJoins` preview feature enabled on `postgres`. the query fails with an `Called 'Option::unwrap()' on a 'None' value` error when calling a `findMany` on a model which loads a relation.


## Logs
```
prisma:tryLoadEnv Environment variables not found at null
prisma:tryLoadEnv Environment variables loaded from /Users/markus/Sites/relation-join-panic/.env
prisma:client checkPlatformCaching:postinstall 
prisma:client checkPlatformCaching:ciName 
prisma:tryLoadEnv Environment variables not found at null
prisma:tryLoadEnv Environment variables loaded from /Users/markus/Sites/relation-join-panic/.env
prisma:client dirname /Users/markus/Sites/relation-join-panic/node_modules/.prisma/client
prisma:client relativePath ../../../prisma
prisma:client cwd /Users/markus/Sites/relation-join-panic/prisma
prisma:client clientVersion 5.9.1
prisma:client:libraryEngine internalSetup
prisma:client:libraryEngine sending request, this.libraryStarted: false
prisma:client:engines:resolveEnginePath enginePath /Users/markus/Sites/relation-join-panic/node_modules/.prisma/client/libquery_engine-darwin-arm64.dylib.node
prisma:client:libraryEngine library starting
prisma:client:libraryEngine library started
prisma:client:libraryEngine sending request, this.libraryStarted: true
prisma:client:libraryEngine sending request, this.libraryStarted: true
```

### How to reproduce

I created a reproduction repo here: https://github.com/mmachatschek/relation-join-panic

### Expected behavior

Loading of the relation with the preview feature enabled should work

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = ""prisma-client-js""
  previewFeatures = [""relationJoins"", ""nativeDistinct""]
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model User {
  id        String    @id @default(cuid())
  post      Post?     @relation(""User_post"", fields: [postId], references: [id])
  postId    String?   @map(""post"")
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())

  @@index([postId])
  @@index([updatedAt])
  @@index([createdAt])
}

model Post {
  id             String    @id @default(cuid())
  title          String    @unique @default("""")
  updatedAt      DateTime? @updatedAt
  createdAt      DateTime? @default(now())
  from_User_post User[]    @relation(""User_post"")

  @@index([updatedAt])
  @@index([createdAt])
}

```

```ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  const post = await prisma.post.create({
    data: {
      title: 'Hello, World!',
    },
  });
  const user = await prisma.user.create({
    data: {
      postId: post.id,
    },
  });
  const users = await prisma.user.findMany({
    include: {
      post: true,
    },
  });
  console.log(users);
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });

```


### Environment & setup

| Name            | Version            |
|-----------------|--------------------|
| Node            | v20.11.0           | 
| OS              | darwin-arm64       |
| Prisma Client   | 5.9.1              |
| Query Engine    | 23fdc5965b1e05fc54e5f26ed3de66776b93de64|
| Database        | postgresql         |

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
Preview Features        : nativeDistinct, relationJoins
```",,
2119937637,22970,MongoDB: `AND` operator giving different results based on order of queries,"### Bug description
These queries giving different results, while native mongodb `$and` operator have predictable behaviour(results are equal, no matter the order)

### How to reproduce

1. Create similar model
```js
type Prop1 {}
type Prop2 {}
model MainModel {
  prop1  Prop1?
  prop2  Prop2?
}
```
2. Run these queries
```js
await prisma.model.count({where: {AND: [{prop1: {isNot: null}}, {prop2: {is: {name: ""TEST""}}}]}})
await prisma.model.count({where: {AND: [{prop2: {is: {name: ""TEST""}}}, {prop1: {isNot: null}}]}})
```
3. prop2 query ignored completely in first case

### Expected behavior

_No response_

### Prisma information
```
generator client {
  provider = ""prisma-client-js""
  binaryTargets = [""native"", ""linux-musl-openssl-3.0.x""]
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

type Prop1 {}
type Prop2 {}
model MainModel {
  prop1  Prop1?
  prop2  Prop2?
}
```

### Environment & setup

- OS: macos Ventura 13.6; Debian 12
- Database: MongoDB
- Node.js version:  v20.7.0


### Prisma Version

```
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v20.7.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
```
",,
2119842454,22968,"`ERROR: zero-length delimited identifier at or near """"""""`","### Bug description

Anything I try to do with prisma (migrations, pushes, etc) fails with the following error:

```
Error: Schema engine error:
ERROR: zero-length delimited identifier at or near """"""""
```

This persists even after nuking and re-initializing the entire database.

### How to reproduce

1. Start a NextJS project, add Prisma, and create a postgres DB (mine is running in a container, if that matters)
2. Write a schema.prisma file, I'll include mine below
3. Run `yarn run prisma migrate dev --name init`, `yarn run prisma db push`, or another similar command

### Expected behavior

The DB is adjusted to fit the schema, with new tables created to match the config file.

### Prisma information

```
// schema.prisma

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

model Submission {
  id        Int      @id @unique @default(autoincrement())
  ip        String
  content   String
  notes     String
  tags      String[]
  timestamp DateTime @default(now())
}

model Post {
  id        Int      @id @unique @default(autoincrement())
  content   String
  notes     String
  tags      String[]
  upvotes   Int
  downvotes Int
  revoked   Boolean  @default(false)
  timestamp DateTime @default(now())
  Report    Report[]
}

model Report {
  id           Int            @id @unique @default(autoincrement())
  post         Post          @relation(fields: [postId], references: [id])
  reason       String
  closed       Boolean        @default(false)
  timestamp    DateTime       @default(now())
  postId       Int
  ReportAction ReportAction[]
}

model ReportAction {
  id        Int      @id @unique @default(autoincrement())
  report    Report   @relation(fields: [reportId], references: [id])
  decision  Boolean
  timestamp DateTime @default(now())
  reportId  Int
}

model NewsPost {
  id        Int      @id @unique @default(autoincrement())
  content   String
  author    String
  timestamp DateTime @default(now())
}
```

(there is no client code involved, this error happens with migrations and other CLI operations)

### Environment & setup

- OS: Windows
- Database: PostgreSQL
- Node.js version: v20.11.0


### Prisma Version

```
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : windows
Operating System        : win32
Architecture            : x64
Node.js                 : v20.11.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules\@prisma\engines\query_engine-windows.dll.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules\@prisma\engines\schema-engine-windows.exe)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
Studio                  : 0.497.0
```
",,
2119809985,22967,Generated prisma client name in 5.9+ clashes with ESLint's `import/no-extraneous-dependencies`,"### Bug description

With Prisma 5.9, the name of the generated prisma package is autogenerated. One of the popular eslint plugins related to validating imports clashes with this as the generated package name is not part of the package's dependency tree.

See [`import/no-extraneous-dependencies`](https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-extraneous-dependencies.md) for an explanation of how it works.

### How to reproduce

Clone this repo: https://github.com/cpojer/prisma-eslint-repro

Run:
```
pnpm install
pnpm eslint .
```

and you'll see an eslint error that was not present with Prisma 5.8 or less.

### Expected behavior

I would prefer Prisma not to autogenerate such package names. In general, I'd prefer if prisma could give me a single generated JS file and one/two binary files that I can embed into my project instead of being too magical. For this situation in particular, I would prefer Prisma not to clash with popular ESLint plugins.

### Prisma information

See repro.

### Environment & setup

Latest Mac OS, node, pnpm as of February 6th 2024.

### Prisma Version

5.9.1.",,
2117186719,22947,Got error 'internal error: entered unreachable code' when trying to perform an upsert.,"### Bug description

Got error: `PrismaClientRustPanicError: Invalid 'client.tag.upsert()'` when trying to perform a seed using Prisma + SQLite.

### How to reproduce

1. Clone this repository: https://github.com/asynched/prisma-upsert-bug-repro
2. Install the dependencies with `bun i`
3. Run `bun prisma migrate dev`
4. Run `bun run seed`
5. See error

### Expected behavior

Expected tags to be created or updated when running `client.tag.upsert`

### Prisma information

### Schema

```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""sqlite""
  url      = env(""DATABASE_URL"")
}

model User {
  id       String  @id() @default(cuid())
  name     String
  username String  @unique()
  email    String  @unique()
  avatar   String
  password String
  bio      String  @default("""")
  banned   Boolean @default(false)
  verified Boolean @default(false)

  videos   Video[]
  sessions Session[]

  createdAt DateTime @default(now()) @map(""created_at"")
  updatedAt DateTime @default(now()) @updatedAt() @map(""updated_at"")

  @@map(""users"")
}

model Session {
  id        String @id() @default(cuid())
  token     String @unique()
  ip        String
  userAgent String @map(""user_agent"")
  device    String

  userId String @map(""user_id"")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(""created_at"")
  updatedAt DateTime @default(now()) @updatedAt() @map(""updated_at"")

  @@map(""sessions"")
}

model Video {
  id          String @id() @default(cuid())
  title       String
  description String
  url         String @unique()

  userId String     @map(""user_id"")
  user   User       @relation(fields: [userId], references: [id])
  tags   VideoTag[]

  createdAt DateTime @default(now()) @map(""created_at"")
  updatedAt DateTime @default(now()) @updatedAt() @map(""updated_at"")

  @@map(""videos"")
}

model Tag {
  id   String @id() @default(cuid())
  name String @unique()

  videos VideoTag[]

  createdAt DateTime @default(now()) @map(""created_at"")
  updatedAt DateTime @default(now()) @updatedAt() @map(""updated_at"")

  @@map(""tags"")
}

model VideoTag {
  videoId String @map(""video_id"")
  tagId   String @map(""tag_id"")

  video Video @relation(fields: [videoId], references: [id])
  tag   Tag   @relation(fields: [tagId], references: [id])

  @@id([videoId, tagId])
  @@map(""video_tags"")
}
```

### Query

```ts
import { PrismaClient } from '@prisma/client'

async function seed() {
  const client = new PrismaClient()

  console.log('Creating user')
  const user = await client.user.create({
    data: {
      name: 'Jeffrey Danley',
      email: 'jeff@mail.com',
      username: 'Fireship',
      avatar:
        'https://yt3.googleusercontent.com/ytc/AIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA=s100-c-k-c0x00ffffff-no-rj',
      password: 'password123',
      bio: 'High-intensity ⚡ code tutorials and tech news to help you ship your app faster. New videos every week covering the topics every programmer should know.',
    },
  })

  const videos = [
    {
      name: 'My browser, my paste.',
      url: '/static/videos/browser-paste.mp4',
      tags: ['Programming', 'Web Development', 'JavaScript'],
    },
    {
      name: 'Yo mama so FAT32',
      url: '/static/videos/file-types.mp4',
      tags: ['Programming', 'Operating Systems'],
    },
    {
      name: 'CSS in 3D',
      url: '/static/videos/pages-in-3d.mp4',
      tags: ['Programming', 'Web Development', 'CSS'],
    },
    {
      name: 'Web development in a nutshell',
      url: '/static/videos/story-of-web.mp4',
      tags: ['Programming', 'Web Development'],
    },
  ]

  for (const video of videos) {
    console.log('Creating video')
    const tags = await Promise.all(
      video.tags.map((name) =>
        client.tag.upsert({
          where: { name },
          update: {},
          create: { name },
        })
      )
    )

    const created = await client.video.create({
      data: {
        title: video.name,
        description: video.name,
        url: video.url,
        userId: user.id,
      },
    })

    console.log('Adding tags')
    await Promise.all(
      tags.map((tag) =>
        client.videoTag.create({ data: { videoId: created.id, tagId: tag.id } })
      )
    )
  }
}

seed()
```

### Logs

```
  prisma:tryLoadEnv  Environment variables not found at null +0ms
  prisma:tryLoadEnv  Environment variables loaded from /home/ederlima/www/education-shorts/.env +0ms
  prisma:client  checkPlatformCaching:postinstall undefined +0ms
  prisma:client  checkPlatformCaching:ciName undefined +0ms
  prisma:tryLoadEnv  Environment variables not found at null +2ms
  prisma:tryLoadEnv  Environment variables loaded from /home/ederlima/www/education-shorts/.env +0ms
  prisma:client  dirname /home/ederlima/www/education-shorts/node_modules/.prisma/client +0ms
  prisma:client  relativePath ../../../prisma +0ms
  prisma:client  cwd /home/ederlima/www/education-shorts/prisma +0ms
  prisma:client  clientVersion 5.9.1 +0ms
  prisma:client:libraryEngine  internalSetup +0ms
Creating user
  prisma:client  Prisma Client call: +4ms
  prisma:client  prisma.user.create({
  data: {
    name: ""Jeffrey Danley"",
    email: ""jeff@mail.com"",
    username: ""Fireship"",
    avatar: ""https://yt3.googleusercontent.com/ytc/AIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA=s100-c-k-c0x00ffffff-no-rj"",
    password: ""password123"",
    bio: ""High-intensity ⚡ code tutorials and tech news to help you ship your app faster. New videos every week covering the topics every programmer should know.""
  }
}) +1ms
  prisma:client  Generated request: +0ms
  prisma:client  {
  ""modelName"": ""User"",
  ""action"": ""createOne"",
  ""query"": {
    ""arguments"": {
      ""data"": {
        ""name"": ""Jeffrey Danley"",
        ""email"": ""jeff@mail.com"",
        ""username"": ""Fireship"",
        ""avatar"": ""https://yt3.googleusercontent.com/ytc/AIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA=s100-c-k-c0x00ffffff-no-rj"",
        ""password"": ""password123"",
        ""bio"": ""High-intensity ⚡ code tutorials and tech news to help you ship your app faster. New videos every week covering the topics every programmer should know.""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
  prisma:client:libraryEngine  sending request, this.libraryStarted: false +4ms
  prisma:get-platform  Found distro info:
{
  ""targetDistro"": ""debian"",
  ""familyDistro"": ""debian"",
  ""originalDistro"": ""ubuntu""
} +0ms
  prisma:get-platform  Trying platform-specific paths for ""debian"" (and ""ubuntu"") +0ms
  prisma:get-platform  Found libssl.so file using platform-specific paths: libssl.so.3 +2ms
  prisma:get-platform  The parsed libssl version is: 3.0.x +0ms
  prisma:client:engines:resolveEnginePath  enginePath /home/ederlima/www/education-shorts/node_modules/.prisma/client/libquery_engine-debian-openssl-3.0.x.so.node +0ms
  prisma:client:libraryEngine  library starting +8ms
  prisma:client:libraryEngine  library started +1ms
Creating video
  prisma:client  Prisma Client call: +17ms
  prisma:client  prisma.tag.upsert({
  where: {
    name: ""Programming""
  },
  update: {},
  create: {
    name: ""Programming""
  }
}) +1ms
  prisma:client  Generated request: +0ms
  prisma:client  {
  ""modelName"": ""Tag"",
  ""action"": ""upsertOne"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""name"": ""Programming""
      },
      ""update"": {},
      ""create"": {
        ""name"": ""Programming""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
  prisma:client:libraryEngine  sending request, this.libraryStarted: true +9ms
  prisma:client  Prisma Client call: +0ms
  prisma:client  prisma.tag.upsert({
  where: {
    name: ""Web Development""
  },
  update: {},
  create: {
    name: ""Web Development""
  }
}) +0ms
  prisma:client  Generated request: +0ms
  prisma:client  {
  ""modelName"": ""Tag"",
  ""action"": ""upsertOne"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""name"": ""Web Development""
      },
      ""update"": {},
      ""create"": {
        ""name"": ""Web Development""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
  prisma:client:libraryEngine  sending request, this.libraryStarted: true +0ms
  prisma:client  Prisma Client call: +0ms
  prisma:client  prisma.tag.upsert({
  where: {
    name: ""JavaScript""
  },
  update: {},
  create: {
    name: ""JavaScript""
  }
}) +0ms
  prisma:client  Generated request: +0ms
  prisma:client  {
  ""modelName"": ""Tag"",
  ""action"": ""upsertOne"",
  ""query"": {
    ""arguments"": {
      ""where"": {
        ""name"": ""JavaScript""
      },
      ""update"": {},
      ""create"": {
        ""name"": ""JavaScript""
      }
    },
    ""selection"": {
      ""$composites"": true,
      ""$scalars"": true
    }
  }
}
 +0ms
  prisma:client:libraryEngine  sending request, this.libraryStarted: true +1ms
thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:167:18:
internal error: entered unreachable code
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'tokio-runtime-worker' panicked at libs/user-facing-errors/src/quaint.rs:167:18:
internal error: entered unreachable code
  prisma:client:request_handler  PrismaClientRustPanicError: internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v20.6.1++++++++++++%7C+%0A%7C+OS++++++++++++++%7C+debian-openssl-3.0.x%7C%0A%7C+Prisma+Client+++%7C+5.9.1++++++++++++++%7C%0A%7C+Query+Engine++++%7C+23fdc5965b1e05fc54e5f26ed3de66776b93de64%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+loaded+from+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2F.env%0Aprisma%3Aclient+checkPlatformCaching%3Apostinstall+%0Aprisma%3Aclient+checkPlatformCaching%3AciName+%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+loaded+from+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2F.env%0Aprisma%3Aclient+dirname+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2Fnode_modules%2F.prisma%2Fclient%0Aprisma%3Aclient+relativePath+..%2F..%2F..%2Fprisma%0Aprisma%3Aclient+cwd+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2Fprisma%0Aprisma%3Aclient+clientVersion+5.9.1%0Aprisma%3Aclient%3AlibraryEngine+internalSetup%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.user.create%28%7B%0A++data%3A+%7B%0A++++name%3A+%22Jeffrey+Danley%22%2C%0A++++email%3A+%22jeff%40mail.com%22%2C%0A++++username%3A+%22Fireship%22%2C%0A++++avatar%3A+%22https%3A%2F%2Fyt3.googleusercontent.com%2Fytc%2FAIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA%3Ds100-c-k-c0x00ffffff-no-rj%22%2C%0A++++password%3A+%22password123%22%2C%0A++++bio%3A+%22High-intensity+%E2%9A%A1+code+tutorials+and+tech+news+to+help+you+ship+your+app+faster.+New+videos+every+week+covering+the+topics+every+programmer+should+know.%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22User%22%2C%0A++%22action%22%3A+%22createOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22data%22%3A+%7B%0A++++++++%22name%22%3A+%22Jeffrey+Danley%22%2C%0A++++++++%22email%22%3A+%22jeff%40mail.com%22%2C%0A++++++++%22username%22%3A+%22Fireship%22%2C%0A++++++++%22avatar%22%3A+%22https%3A%2F%2Fyt3.googleusercontent.com%2Fytc%2FAIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA%3Ds100-c-k-c0x00ffffff-no-rj%22%2C%0A++++++++%22password%22%3A+%22password123%22%2C%0A++++++++%22bio%22%3A+%22High-intensity+%E2%9A%A1+code+tutorials+and+tech+news+to+help+you+ship+your+app+faster.+New+videos+every+week+covering+the+topics+every+programmer+should+know.%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+false%0Aprisma%3Aget-platform+Found+distro+info%3A%0A%7B%0A++%22targetDistro%22%3A+%22debian%22%2C%0A++%22familyDistro%22%3A+%22debian%22%2C%0A++%22originalDistro%22%3A+%22ubuntu%22%0A%7D%0Aprisma%3Aget-platform+Trying+platform-specific+paths+for+%22debian%22+%28and+%22ubuntu%22%29%0Aprisma%3Aget-platform+Found+libssl.so+file+using+platform-specific+paths%3A+libssl.so.3%0Aprisma%3Aget-platform+The+parsed+libssl+version+is%3A+3.0.x%0Aprisma%3Aclient%3Aengines%3AresolveEnginePath+enginePath+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2Fnode_modules%2F.prisma%2Fclient%2Flibquery_engine-debian-openssl-3.0.x.so.node%0Aprisma%3Aclient%3AlibraryEngine+library+starting%0Aprisma%3Aclient%3AlibraryEngine+library+started%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.tag.upsert%28%7B%0A++where%3A+%7B%0A++++name%3A+%22Programming%22%0A++%7D%2C%0A++update%3A+%7B%7D%2C%0A++create%3A+%7B%0A++++name%3A+%22Programming%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22Tag%22%2C%0A++%22action%22%3A+%22upsertOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22where%22%3A+%7B%0A++++++++%22name%22%3A+%22Programming%22%0A++++++%7D%2C%0A++++++%22update%22%3A+%7B%7D%2C%0A++++++%22create%22%3A+%7B%0A++++++++%22name%22%3A+%22Programming%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.tag.upsert%28%7B%0A++where%3A+%7B%0A++++name%3A+%22Web+Development%22%0A++%7D%2C%0A++update%3A+%7B%7D%2C%0A++create%3A+%7B%0A++++name%3A+%22Web+Development%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22Tag%22%2C%0A++%22action%22%3A+%22upsertOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22where%22%3A+%7B%0A++++++++%22name%22%3A+%22Web+Development%22%0A++++++%7D%2C%0A++++++%22update%22%3A+%7B%7D%2C%0A++++++%22create%22%3A+%7B%0A++++++++%22name%22%3A+%22Web+Development%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.tag.upsert%28%7B%0A++where%3A+%7B%0A++++name%3A+%22JavaScript%22%0A++%7D%2C%0A++update%3A+%7B%7D%2C%0A++create%3A+%7B%0A++++name%3A+%22JavaScript%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22Tag%22%2C%0A++%22action%22%3A+%22upsertOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22where%22%3A+%7B%0A++++++++%22name%22%3A+%22JavaScript%22%0A++++++%7D%2C%0A++++++%22update%22%3A+%7B%7D%2C%0A++++++%22create%22%3A+%7B%0A++++++++%22name%22%3A+%22JavaScript%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0A%60%60%60%0A%0A%23%23+Client+Snippet%0A%60%60%60ts%0A%2F%2F+PLEASE+FILL+YOUR+CODE+SNIPPET+HERE%0A%60%60%60%0A%0A%23%23+Schema%0A%60%60%60prisma%0A%2F%2F+PLEASE+ADD+YOUR+SCHEMA+HERE+IF+POSSIBLE%0A%60%60%60%0A%0A%23%23+Prisma+Engine+Query%0A%60%60%60%0A%7B%22X%22%3Atrue%7D%7D%7D%0A%60%60%60%0A&title=internal+error%3A+entered+unreachable+code&template=bug_report.yml

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 

    at qr.buildQueryError (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:117:813)
    at qr.request (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:116:4074)
    at async Object.singleLoader (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:126:5212)
    at async ai.request (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:126:5704)
    at async l (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:131:9709)
    at async Promise.all (index 1)
    at seed (/home/ederlima/www/education-shorts/scripts/seed.ts:44:18) {
  clientVersion: '5.9.1'
} +0ms
/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:126
`)}var No=({clientMethod:e,activeProvider:t})=>r=>{let n="""",i;if(Array.isArray(r)){let[o,...s]=r;n=o,i={values:Br(s||[]),__prismaRawParameters__:!0}}else switch(t){case""sqlite"":case""mysql"":{n=r.sql,i={values:Br(r.values),__prismaRawParameters__:!0};break}case""cockroachdb"":case""postgresql"":case""postgres"":{n=r.text,i={values:Br(r.values),__prismaRawParameters__:!0};break}case""sqlserver"":{n=Ql(r),i={values:Br(r.values),__prismaRawParameters__:!0};break}default:throw new Error(`The ${t} provider does not support ${e}`)}return i?.values?Wl(`prisma.${e}(${n}, ${i.values})`):Wl(`prisma.${e}(${n})`),{query:n,parameters:i}},zl={requestArgsToMiddlewareArgs(e){return[e.strings,...e.values]},middlewareArgsToRequestArgs(e){let[t,...r]=e;return new fe(t,r)}},Yl={requestArgsToMiddlewareArgs(e){return[e]},middlewareArgsToRequestArgs(e){return e[0]}};function Lo(e){return function(r){let n,i=(o=e)=>{try{return o===void 0||o?.kind===""itx""?n??(n=Zl(r(o))):Zl(r(o))}catch(s){return Promise.reject(s)}};return{then(o,s){return i().then(o,s)},catch(o){return i().catch(o)},finally(o){return i().finally(o)},requestTransaction(o){let s=i(o);return s.requestTransaction?s.requestTransaction(o):s},[Symbol.toStringTag]:""PrismaPromise""}}}function Zl(e){return typeof e.then==""function""?e:Promise.resolve(e)}var Xl={isEnabled(){return!1},getTraceParent(){return""00-10-10-00""},async createEngineSpan(){},getActiveContext(){},runInChildSpan(e,t){return t()}},$o=class{isEnabled(){return this.getGlobalTracingHelper().isEnabled()}getTraceParent(t){return this.getGlobalTracingHelper().getTraceParent(t)}createEngineSpan(t){return this.getGlobalTracingHelper().createEngineSpan(t)}getActiveContext(){return this.getGlobalTracingHelper().getActiveContext()}runInChildSpan(t,r){return this.getGlobalTracingHelper().runInChildSpan(t,r)}getGlobalTracingHelper(){return globalThis.PRISMA_INSTRUMENTATION?.helper??Xl}};function eu(e){return e.includes(""tracing"")?new $o:Xl}function tu(e,t=()=>{}){let r,n=new Promise(i=>r=i);return{then(i){return--e===0&&r(t()),i?.(n)}}}function ru(e){return typeof e==""string""?e:e.reduce((t,r)=>{let n=typeof r==""string""?r:r.level;return n===""query""?t:t&&(r===""info""||t===""info"")?""info"":n},void 0)}var ni=class{constructor(){this._middlewares=[]}use(t){this._middlewares.push(t)}get(t){return this._middlewares[t]}has(t){return!!this._middlewares[t]}length(){return this._middlewares.length}};var iu=D(Ui());function ii(e){return typeof e.batchRequestIdx==""number""}function oi(e){return e===null?e:Array.isArray(e)?e.map(oi):typeof e==""object""?Tg(e)?_g(e):kt(e,oi):e}function Tg(e){return e!==null&&typeof e==""object""&&typeof e.$type==""string""}function _g({$type:e,value:t}){switch(e){case""BigInt"":return BigInt(t);case""Bytes"":return Buffer.from(t,""base64"");case""DateTime"":return new Date(t);case""Decimal"":return new Ne(t);case""Json"":return JSON.parse(t);default:gt(t,""Unknown tagged value"")}}function nu(e){if(e.action!==""findUnique""&&e.action!==""findUniqueOrThrow"")return;let t=[];return e.modelName&&t.push(e.modelName),e.query.arguments&&t.push(qo(e.query.arguments)),t.push(qo(e.query.selection)),t.join("""")}function qo(e){return`(${Object.keys(e).sort().map(r=>{let n=e[r];return typeof n==""object""&&n!==null?`(${r} ${qo(n)})`:r}).join("" "")})`}var Cg={aggregate:!1,aggregateRaw:!1,createMany:!0,createOne:!0,deleteMany:!0,deleteOne:!0,executeRaw:!0,findFirst:!1,findFirstOrThrow:!1,findMany:!1,findRaw:!1,findUnique:!1,findUniqueOrThrow:!1,groupBy:!1,queryRaw:!1,runCommandRaw:!0,updateMany:!0,updateOne:!0,upsertOne:!0};function jo(e){return Cg[e]}var si=class{constructor(t){this.options=t;this.tickActive=!1;this.batches={}}request(t){let r=this.options.batchBy(t);return r?(this.batches[r]||(this.batches[r]=[],this.tickActive||(this.tickActive=!0,process.nextTick(()=>{this.dispatchBatches(),this.tickActive=!1}))),new Promise((n,i)=>{this.batches[r].push({request:t,resolve:n,reject:i})})):this.options.singleLoader(t)}dispatchBatches(){for(let t in this.batches){let r=this.batches[t];delete this.batches[t],r.length===1?this.options.singleLoader(r[0].request).then(n=>{n instanceof Error?r[0].reject(n):r[0].resolve(n)}).catch(n=>{r[0].reject(n)}):(r.sort((n,i)=>this.options.batchOrder(n.request,i.request)),this.options.batchLoader(r.map(n=>n.request)).then(n=>{if(n instanceof Error)for(let i=0;i<r.length;i++)r[i].reject(n);else for(let i=0;i<r.length;i++){let o=n[i];o instanceof Error?r[i].reject(o):r[i].resolve(o)}}).catch(n=>{for(let i=0;i<r.length;i++)r[i].reject(n)}))}}get[Symbol.toStringTag](){return""DataLoader""}};var Ag=$(""prisma:client:request_handler""),ai=class{constructor(t,r){this.logEmitter=r,this.client=t,this.dataloader=new si({batchLoader:Ha(async({requests:n,customDataProxyFetch:i})=>{let{transaction:o,otelParentCtx:s}=n[0],a=n.map(p=>p.protocolQuery),l=this.client._tracingHelper.getTraceParent(s),u=n.some(p=>jo(p.protocolQuery.action));return(await this.client._engine.requestBatch(a,{traceparent:l,transaction:Rg(o),containsWrite:u,customDataProxyFetch:i})).map((p,d)=>{if(p instanceof Error)return p;try{return this.mapQueryEngineResult(n[d],p)}catch(f){return f}})}),singleLoader:async n=>{let i=n.transaction?.kind===""itx""?ou(n.transaction):void 0,o=await this.client._engine.request(n.protocolQuery,{traceparent:this.client._tracingHelper.getTraceParent(),interactiveTransaction:i,isWrite:jo(n.protocolQuery.action),customDataProxyFetch:n.customDataProxyFetch});return this.mapQueryEngineResult(n,o)},batchBy:n=>n.transaction?.id?`transaction-${n.transaction.id}`:nu(n.protocolQuery),batchOrder(n,i){return n.transaction?.kind===""batch""&&i.transaction?.kind===""batch""?n.transaction.index-i.transaction.index:0}})}async request(t){try{return await this.dataloader.request(t)}catch(r){let{clientMethod:n,callsite:i,transaction:o,args:s,modelName:a}=t;this.handleAndLogRequestError({error:r,clientMethod:n,callsite:i,transaction:o,args:s,modelName:a})}}mapQueryEngineResult({dataPath:t,unpacker:r},n){let i=n?.data,o=n?.elapsed,s=this.unpack(i,t,r);return process.env.PRISMA_CLIENT_GET_TIME?{data:s,elapsed:o}:s}handleAndLogRequestError(t){try{this.handleRequestError(t)}catch(r){throw this.logEmitter&&this.logEmitter.emit(""error"",{message:r.message,target:t.clientMethod,timestamp:new Date}),r}}handleRequestError({error:t,clientMethod:r,callsite:n,transaction:i,args:o,modelName:s}){if(Ag(t),Mg(t,i)||t instanceof Ve)throw t;if(t instanceof H&&Sg(t)){let l=su(t.meta);ri({args:o,errors:[l],callsite:n,errorFormat:this.client._errorFormat,originalMethod:r,clientVersion:this.client._clientVersion})}let a=t.message;if(n&&(a=Kt({callsite:n,originalMethod:r,isPanic:t.isPanic,showColors:this.client._errorFormat===""pretty"",message:a})),a=this.sanitizeMessage(a),t.code){let l=s?{modelName:s,...t.meta}:t.meta;throw new H(a,{code:t.code,clientVersion:this.client._clientVersion,meta:l,batchRequestIdx:t.batchRequestIdx})}else{if(t.isPanic)throw new be(a,this.client._clientVersion);if(t instanceof W)throw new W(a,{clientVersion:this.client._clientVersion,batchRequestIdx:t.batchRequestIdx});if(t instanceof O)throw new O(a,this.client._clientVersion);if(t instanceof be)throw new be(a,this.client._clientVersion)}throw t.clientVersion=this.client._clientVersion,t}sanitizeMessage(t){return this.client._errorFormat&&this.client._errorFormat!==""pretty""?(0,iu.default)(t):t}unpack(t,r,n){if(!t||(t.data&&(t=t.data),!t))return t;let i=Object.values(t)[0],o=r.filter(a=>a!==""select""&&a!==""include""),s=oi(co(i,o));return n?n(s):s}get[Symbol.toStringTag](){return""RequestHandler""}};function Rg(e){if(e){if(e.kind===""batch"")return{kind:""batch"",options:{isolationLevel:e.isolationLevel}};if(e.kind===""itx"")return{kind:""itx"",options:ou(e)};gt(e,""Unknown transaction kind"")}}function ou(e){return{id:e.id,payload:e.payload}}function Mg(e,t){return ii(e)&&t?.kind===""batch""&&e.batchRequestIdx!==t.index}function Sg(e){return e.code===""P2009""||e.code===""P2012""}function su(e){if(e.kind===""Union"")return{kind:""Union"",errors:e.errors.map(su)};if(Array.isArray(e.selectionPath)){let[,...t]=e.selectionPath;return{...e,selectionPath:t}}return e}var au=""5.9.1"";var lu=au;function uu(e){return e.map(t=>{let r={};for(let n of Object.keys(t))r[n]=cu(t[n]);return r})}function cu({prisma__type:e,prisma__value:t}){switch(e){case""bigint"":return BigInt(t);case""bytes"":return Buffer.from(t,""base64"");case""decimal"":return new Ne(t);case""datetime"":case""date"":return new Date(t);case""time"":return new Date(`1970-01-01T${t}Z`);case""array"":return t.map(cu);default:return t}}var fu=D(Do());var U=class extends Error{constructor(t){super(t+`


PrismaClientRustPanicError: 
Invalid `client.tag.upsert()` invocation in
/home/ederlima/www/education-shorts/scripts/seed.ts:46:20

  43 console.log('Creating video')
  44 const tags = await Promise.all(
  45   video.tags.map((name) =>
→ 46     client.tag.upsert(
internal error: entered unreachable code

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

https://github.com/prisma/prisma/issues/new?body=Hi+Prisma+Team%21+My+Prisma+Client+just+crashed.+This+is+the+report%3A%0A%23%23+Versions%0A%0A%7C+Name++++++++++++%7C+Version++++++++++++%7C%0A%7C-----------------%7C--------------------%7C%0A%7C+Node++++++++++++%7C+v20.6.1++++++++++++%7C+%0A%7C+OS++++++++++++++%7C+debian-openssl-3.0.x%7C%0A%7C+Prisma+Client+++%7C+5.9.1++++++++++++++%7C%0A%7C+Query+Engine++++%7C+23fdc5965b1e05fc54e5f26ed3de66776b93de64%7C%0A%7C+Database++++++++%7C+sqlite+++++++++++++%7C%0A%0A%0A%0A%23%23+Logs%0A%60%60%60%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+loaded+from+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2F.env%0Aprisma%3Aclient+checkPlatformCaching%3Apostinstall+%0Aprisma%3Aclient+checkPlatformCaching%3AciName+%0Aprisma%3AtryLoadEnv+Environment+variables+not+found+at+null%0Aprisma%3AtryLoadEnv+Environment+variables+loaded+from+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2F.env%0Aprisma%3Aclient+dirname+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2Fnode_modules%2F.prisma%2Fclient%0Aprisma%3Aclient+relativePath+..%2F..%2F..%2Fprisma%0Aprisma%3Aclient+cwd+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2Fprisma%0Aprisma%3Aclient+clientVersion+5.9.1%0Aprisma%3Aclient%3AlibraryEngine+internalSetup%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.user.create%28%7B%0A++data%3A+%7B%0A++++name%3A+%22Jeffrey+Danley%22%2C%0A++++email%3A+%22jeff%40mail.com%22%2C%0A++++username%3A+%22Fireship%22%2C%0A++++avatar%3A+%22https%3A%2F%2Fyt3.googleusercontent.com%2Fytc%2FAIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA%3Ds100-c-k-c0x00ffffff-no-rj%22%2C%0A++++password%3A+%22password123%22%2C%0A++++bio%3A+%22High-intensity+%E2%9A%A1+code+tutorials+and+tech+news+to+help+you+ship+your+app+faster.+New+videos+every+week+covering+the+topics+every+programmer+should+know.%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22User%22%2C%0A++%22action%22%3A+%22createOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22data%22%3A+%7B%0A++++++++%22name%22%3A+%22Jeffrey+Danley%22%2C%0A++++++++%22email%22%3A+%22jeff%40mail.com%22%2C%0A++++++++%22username%22%3A+%22Fireship%22%2C%0A++++++++%22avatar%22%3A+%22https%3A%2F%2Fyt3.googleusercontent.com%2Fytc%2FAIf8zZTUVa5AeFd3m5-4fdY2hEaKof3Byp8VruZ0f0FNEA%3Ds100-c-k-c0x00ffffff-no-rj%22%2C%0A++++++++%22password%22%3A+%22password123%22%2C%0A++++++++%22bio%22%3A+%22High-intensity+%E2%9A%A1+code+tutorials+and+tech+news+to+help+you+ship+your+app+faster.+New+videos+every+week+covering+the+topics+every+programmer+should+know.%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+false%0Aprisma%3Aget-platform+Found+distro+info%3A%0A%7B%0A++%22targetDistro%22%3A+%22debian%22%2C%0A++%22familyDistro%22%3A+%22debian%22%2C%0A++%22originalDistro%22%3A+%22ubuntu%22%0A%7D%0Aprisma%3Aget-platform+Trying+platform-specific+paths+for+%22debian%22+%28and+%22ubuntu%22%29%0Aprisma%3Aget-platform+Found+libssl.so+file+using+platform-specific+paths%3A+libssl.so.3%0Aprisma%3Aget-platform+The+parsed+libssl+version+is%3A+3.0.x%0Aprisma%3Aclient%3Aengines%3AresolveEnginePath+enginePath+%2Fhome%2Federlima%2Fwww%2Feducation-shorts%2Fnode_modules%2F.prisma%2Fclient%2Flibquery_engine-debian-openssl-3.0.x.so.node%0Aprisma%3Aclient%3AlibraryEngine+library+starting%0Aprisma%3Aclient%3AlibraryEngine+library+started%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.tag.upsert%28%7B%0A++where%3A+%7B%0A++++name%3A+%22Programming%22%0A++%7D%2C%0A++update%3A+%7B%7D%2C%0A++create%3A+%7B%0A++++name%3A+%22Programming%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22Tag%22%2C%0A++%22action%22%3A+%22upsertOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22where%22%3A+%7B%0A++++++++%22name%22%3A+%22Programming%22%0A++++++%7D%2C%0A++++++%22update%22%3A+%7B%7D%2C%0A++++++%22create%22%3A+%7B%0A++++++++%22name%22%3A+%22Programming%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.tag.upsert%28%7B%0A++where%3A+%7B%0A++++name%3A+%22Web+Development%22%0A++%7D%2C%0A++update%3A+%7B%7D%2C%0A++create%3A+%7B%0A++++name%3A+%22Web+Development%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22Tag%22%2C%0A++%22action%22%3A+%22upsertOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22where%22%3A+%7B%0A++++++++%22name%22%3A+%22Web+Development%22%0A++++++%7D%2C%0A++++++%22update%22%3A+%7B%7D%2C%0A++++++%22create%22%3A+%7B%0A++++++++%22name%22%3A+%22Web+Development%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0Aprisma%3Aclient+Prisma+Client+call%3A%0Aprisma%3Aclient+prisma.tag.upsert%28%7B%0A++where%3A+%7B%0A++++name%3A+%22JavaScript%22%0A++%7D%2C%0A++update%3A+%7B%7D%2C%0A++create%3A+%7B%0A++++name%3A+%22JavaScript%22%0A++%7D%0A%7D%29%0Aprisma%3Aclient+Generated+request%3A%0Aprisma%3Aclient+%7B%0A++%22modelName%22%3A+%22Tag%22%2C%0A++%22action%22%3A+%22upsertOne%22%2C%0A++%22query%22%3A+%7B%0A++++%22arguments%22%3A+%7B%0A++++++%22where%22%3A+%7B%0A++++++++%22name%22%3A+%22JavaScript%22%0A++++++%7D%2C%0A++++++%22update%22%3A+%7B%7D%2C%0A++++++%22create%22%3A+%7B%0A++++++++%22name%22%3A+%22JavaScript%22%0A++++++%7D%0A++++%7D%2C%0A++++%22selection%22%3A+%7B%0A++++++%22%24composites%22%3A+true%2C%0A++++++%22%24scalars%22%3A+true%0A++++%7D%0A++%7D%0A%7D%0A%0Aprisma%3Aclient%3AlibraryEngine+sending+request%2C+this.libraryStarted%3A+true%0A%60%60%60%0A%0A%23%23+Client+Snippet%0A%60%60%60ts%0A%2F%2F+PLEASE+FILL+YOUR+CODE+SNIPPET+HERE%0A%60%60%60%0A%0A%23%23+Schema%0A%60%60%60prisma%0A%2F%2F+PLEASE+ADD+YOUR+SCHEMA+HERE+IF+POSSIBLE%0A%60%60%60%0A%0A%23%23+Prisma+Engine+Query%0A%60%60%60%0A%7B%22X%22%3Atrue%7D%7D%7D%0A%60%60%60%0A&title=internal+error%3A+entered+unreachable+code&template=bug_report.yml

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 

    at ai.handleRequestError (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:126:7136)
    at ai.handleAndLogRequestError (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:126:6109)
    at ai.request (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:126:5817)
    at async l (/home/ederlima/www/education-shorts/node_modules/@prisma/client/runtime/library.js:131:9709)
    at async Promise.all (index 1)
    at seed (/home/ederlima/www/education-shorts/scripts/seed.ts:44:18) {
  clientVersion: '5.9.1'
}

Node.js v20.6.1
error: script ""seed"" exited with code 1
```

### Environment & setup

- OS: Ubuntu 22.04
- Database: SQLite
- Node.js version: 20.6.1
- Package manager: Bun 1.0.25


### Prisma Version

```
5.9.1
```
",,
2116981460,22946,Introspection fails for this specific MySQL table,"### Bug description

Got error message:
```
Oops, an unexpected error occurred!
Error in Schema engine.
Reason: [schema-engine/sql-schema-describer/src/mysql.rs:307:21] called `Result::unwrap()` on an `Err` value: ""Getting table_name from Resultrow ResultRow { columns: [], values: [Value { typed: Bytes(Some([101, 50, 101, 95, 112, 114, 111, 106, 101, 99, 116, 95, 108, 105, 115, 116])), native_column_type: None }, Value { typed: Text(Some(\""\"")), native_column_type: None }, Value { typed: Text(Some(\""project_table\"")), native_column_type: None }] } as String failed""
```

more debug info:
```
⠋ Introspecting based on datasource defined in prisma/schema.prisma  prisma:schemaEngine:stderr  {""timestamp"":""2024-02-04T08:46:34.602706Z"",""level"":""ERROR"",""fields"":{""message"":""[schema-engine/sql-schema-describer/src/mysql.rs:307:21] called `Result::unwrap()` on an `Err` value: \""Getting table_name from Resultrow ResultRow { columns: [], values: [Value { typed: Bytes(Some([101, 50, 101, 95, 112, 114, 111, 106, 101, 99, 116, 95, 108, 105, 115, 116])), native_column_type: None }, Value { typed: Text(Some(\\\""\\\"")), native_column_type: None }, Value { typed: Text(Some(\\\""project_table\\\"")), native_column_type: None }] } as String failed\"""",""is_panic"":true,""backtrace"":""   0: backtrace::capture::Backtrace::new\n   1: schema_engine::set_panic_hook::{{closure}}\n   2: std::panicking::rust_panic_with_hook\n   3: std::panicking::begin_panic_handler::{{closure}}\n   4: std::sys_common::backtrace::__rust_end_short_backtrace\n   5: _rust_begin_unwind\n   6: core::panicking::panic_fmt\n   7: core::result::unwrap_failed\n   8: <quaint::connector::result_set::result_row::ResultRow as sql_schema_describer::getters::Getter>::get_expect_string\n   9: sql_schema_describer::mysql::SqlSchemaDescriber::get_table_names::{{closure}}::{{closure}}\n  10: <sql_schema_describer::mysql::SqlSchemaDescriber as sql_schema_describer::SqlSchemaDescriberBackend>::describe::{{closure}}::{{closure}}\n  11: <sql_schema_describer::mysql::SqlSchemaDescriber as sql_schema_describer::SqlSchemaDescriberBackend>::describe::{{closure}}\n  12: sql_schema_connector::flavour::mysql::connection::Connection::describe_schema::{{closure}}::{{closure}}\n  13: <sql_schema_connector::flavour::mysql::MysqlFlavour as sql_schema_connector::flavour::SqlFlavour>::describe_schema::{{closure}}::{{closure}}\n  14: sql_schema_connector::flavour::mysql::with_connection::{{closure}}\n  15: <sql_schema_connector::SqlSchemaConnector as schema_connector::schema_connector::SchemaConnector>::introspect::{{closure}}\n  16: <schema_core::state::EngineState as schema_core::api::GenericApi>::introspect::{{closure}}::{{closure}}::{{closure}}\n  17: schema_core::state::EngineState::with_connector_for_schema::{{closure}}::{{closure}}::{{closure}}\n  18: schema_core::state::EngineState::with_connector_for_schema::{{closure}}::{{closure}}\n  19: tokio::runtime::task::raw::poll\n  20: tokio::runtime::scheduler::multi_thread::worker::Context::run_task\n  21: tokio::runtime::task::raw::poll\n  22: tokio::runtime::task::UnownedTask<S>::run\n  23: std::sys_common::backtrace::__rust_begin_short_backtrace\n  24: core::ops::function::FnOnce::call_once{{vtable.shim}}\n  25: std::sys::unix::thread::Thread::new::thread_start\n  26: __pthread_joiner_wake\n"",""location"":""schema-engine/sql-schema-describer/src/mysql.rs:307:21""},""target"":""schema_engine"",""span"":{""schema"":""boss_def"",""sql_schema"":""SqlSchema { namespaces: [], tables: [], enums: [], enum_variants: [], table_columns: [], foreign_keys: [], table_default_values: [], view_default_values: [], foreign_key_columns: [], indexes: [], index_columns: [], check_constraints: [], views: [], view_columns: [], procedures: [], user_defined_types: [], connector_data: <ConnectorData> }"",""name"":""get_table_names""},""spans"":[{""name"":""describe_schema""},{""schemas"":""[\""boss_def\""]"",""name"":""describe""},{""schema"":""boss_def"",""sql_schema"":""SqlSchema { namespaces: [], tables: [], enums: [], enum_variants: [], table_columns: [], foreign_keys: [], table_default_values: [], view_default_values: [], foreign_key_columns: [], indexes: [], index_columns: [], check_constraints: [], views: [], view_columns: [], procedures: [], user_defined_types: [], connector_data: <ConnectorData> }"",""name"":""get_table_names""}]} +821ms
✖ Introspecting based on datasource defined in prisma/schema.prisma
```


my table structure is:
```
CREATE TABLE `project_list` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',
  `project_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'project name',
  `task_status` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'project status',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create at',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update at',
  PRIMARY KEY (`id`)
) ENGINE = InnoDB AUTO_INCREMENT = 5 DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'project_table'
```


### How to reproduce

when run `prisma db pull` command

### Expected behavior

_No response_

### Prisma information

```
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mysql""
  url      = env(""DATABASE_URL"")
}

```

### Environment & setup

- OS: macOS
- Database: mysql
- Node.js version: v21.5.0

### Prisma Version

```
Environment variables loaded from .env
prisma                  : 5.9.1
@prisma/client          : 5.9.1
Computed binaryTarget   : darwin-arm64
Operating System        : darwin
Architecture            : arm64
Node.js                 : v21.5.0
Query Engine (Node-API) : libquery-engine 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/libquery_engine-darwin-arm64.dylib.node)
Schema Engine           : schema-engine-cli 23fdc5965b1e05fc54e5f26ed3de66776b93de64 (at node_modules/@prisma/engines/schema-engine-darwin-arm64)
Schema Wasm             : @prisma/prisma-schema-wasm 5.9.0-32.23fdc5965b1e05fc54e5f26ed3de66776b93de64
Default Engines Hash    : 23fdc5965b1e05fc54e5f26ed3de66776b93de64
```",,
2116701586,22944," Type error: Module '""@prisma/client""' has no exported member","### Bug description

trying to run docker build . with [this repository ](https://github.com/morganwestcoding/forme-nextjs)

When i run it It goes to step => ERROR [6/6] RUN npm run build 

Then I get this error:

```
 ./src/app/types/index.ts:1:9
30.53 Type error: Module '""@prisma/client""' has no exported member 'Listing'.
30.53 
30.53 > 1 | import {Listing , User, Reservation, Post, Service} from '@prisma/client'
30.53     |         ^
30.53   2 |
30.53   3 | export type SafeService = {
30.53   4 |   id: string;
```

I've checked my node modules and the models are in `node_modules/.prisma/client/index.d.ts`

in my `node_modules/@prisma/client/index.d.ts` I have `export * from '.prisma/client/default'`

Can someone please help me i've been trying to resolve this for days, and extra points if you help me succsessfully launc

docker build . and help me deploy to vercel

I've removed my node modules and package-lock.json and npm installed

I've tried npx prisma generate 

Nothing has worked and i am still getting this error

<img width=""678"" alt=""Screenshot 2024-02-03 at 2 30 44 PM"" src=""https://github.com/prisma/prisma/assets/17777272/55934769-b223-4d45-add7-47b0de3d3715"">


### How to reproduce

<!--
Run docker build . in terminal
-->


### Expected behavior

I expected the docker build . to successfully create a container image so i can deploy to vercel.

### Prisma information

```
generator client {
  provider = ""prisma-client-js""
}

datasource db {
  provider = ""mongodb""
  url      = env(""DATABASE_URL"")
}

model User {
  id             String    @id @default(auto()) @map(""_id"") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
  posts          Post[]         // This line represents the relation to the Post model
}

model Account {
  id                String  @id @default(auto()) @map(""_id"") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map(""_id"") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  category      String
  locationValue String
  userId        String   @db.ObjectId
  services    Service[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  
  
}

model Reservation {
  id         String   @id @default(auto()) @map(""_id"") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Service {
  id          String   @id @default(auto()) @map(""_id"") @db.ObjectId
  serviceName String
  price       Int
  category    String
  listingId   String   @db.ObjectId
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Post {
  id         String   @id @default(auto()) @map(""_id"") @db.ObjectId
  content    String
  imageSrc   String?
  location   String?
  tag        String?
  photo      String?
  category   String
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])

  // Include other fields and relations, but ensure 'userId' is not duplicated
}


model Category {
  id            String   @id @default(auto()) @map(""_id"") @db.ObjectId
  name          String
  description   String?
}

```




### Environment & setup

MacOS
MongoDb
Node 18.x


### Prisma Version

```
""prisma"": ""^5.9.1"",
""@prisma/client"": ""^5.9.1"",
```
",,
2116667723,22943,"PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`)","### Bug description

I am using,
- NextJS 14.1.0
- Prisma ^5.8.0
- Typescript, App router

This was the error that was thrown in the browser,
***
Error: PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `unknown`).
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues
***
### How to reproduce

Run any simple query using server actions for `App router` such as,

`
const query = await prisma.blog.create({title:""title"", body:""hello world""});
`

Or using any query in a file with 
`
import React from 'react';
`
kept anywhere in the code.

### Expected behavior

Code is following documentation so data should be fetched using the query underneath. 

### Prisma information

Schema I am using:
```
model BlogPost {
  id        Int            @id @default(autoincrement())
  title     String         @db.VarChar(128)
  body      Json
  tags      String         @db.VarChar(32)
  category  String         @db.VarChar(32)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  published Boolean        @default(true)
  likes     Likes[]
  dislikes  Dislikes[]
  reports   ReportBlogs[]
  commnets  BlogComments[]
  userID    Int?
  author    User?          @relation(fields: [userID], references: [id])

  @@index([userID])
}
```

Code I have been using:
```
export async function getBlogsCategory(): Promise<CategoriesProps> {
  try {
    const blogsByCategory: { category: string }[] | null = await Prisma.blogPost.findMany({
      select: {
        category: true,
      },
      distinct: [""category""],
    });
    if (blogsByCategory) {
      return {
        message: ""Blog found"",
        error: """",
        data: blogsByCategory,
      };
    } else {
      return {
        message: ""Wrong blog"",
        error: ""Wrong blog"",
        data: null,
      };
    }
  } catch (err) {
    return {
      message: ""Error retrieving blog, try again?"",
      error: ""Error retrieving blog, connection failure."",
      data: null,
    };
  }
}
```

### Environment & setup

- OS: windows 10, linux mint
- Database: PlanetScale MySQL, Docker MySQL, Apache MySQL
- Node.js version: v20.8.0


### Prisma Version

prisma: ^5.8.0
",,
2116418057,22937,Prisma client - Better types (select-where link),"## Problem

When selecting some fields as non-nullable, I'm still getting `T | null` type while `null` is invalid here. This also applies to enum selects, when selected type is simply too wide to achieve due to `where` query

## Suggested solution

### Derive types from `where` statements

#### For example i'll use this schema:
```prisma
model User {
  id        String  @id @default(dbgenerated(""gen_random_uuid()"")) @db.Uuid
  role      Role    @default(USER)
  firstName String  @db.VarChar(64)
  lastName  String  @db.VarChar(64)
  email     String  @unique @db.VarChar(256)
  password  String? @db.Char(128)
}

enum Role {
  ADMIN
  USER
  GUEST
}
```

### Examples

#### 1. Non-null selection

```ts
const { id, password } = await prisma.user.findFirstOrThrow({
  select: { id: true, password: true },
  where: { password: { not: null } },
});
```

Password must be returned with `string` type instead of `string | null` here

#### 2. Exact selection

```ts
const { id, role } = await prisma.user.findFirstOrThrow({
  select: { id: true, role: true },
  where: { role: ""USER"" },
});
```

Role must have `USER` type only, not general `Role` type

#### 3. `in` selection

```ts
const { id, role } = await prisma.user.findFirstOrThrow({
  select: { id: true, role: true },
  where: { role: { in: [""USER"", ""GUEST""] } },
});
```

Role must now be `USER | GUEST` type (`keyof typeof where.role.in`)

#### 4. `notIn` selection

```ts
const { id, role } = await prisma.user.findFirstOrThrow({
  select: { id: true, role: true },
  where: { role: { notIn: [""USER"", ""GUEST""] } },
});
```

Role must now be `ADMIN` type (`Exclude<Role, ""USER"" | ""GUEST"">`)

This behavior should apply to all queries with `where` statement with operators like `equals`/`not`, `in`/`notIn`

#### 

## Alternatives

Querying something and then manually fixing the types like:

```ts
const { password, ...rest } = await prisma.user.findFirstOrThrow({
  select: { id: true, firstName: true, lastName: true, password: true },
  where: { password: { not: null } },
});

return { password: password!, ...rest };
```

looks very ugly, but you must do such type conversions every time you create functions like `getUsersWithPassword` when you expect `User` to actually have `password` non-nullable

## Additional context

None
",,
2116242345,22935,prisma cannot fond module,"### Bug description

Debugger listening on ws://localhost:9229/fc3291dd-e888-4d69-8276-57a1e0c65957
Debugger listening on ws://localhost:9229/fc3291dd-e888-4d69-8276-57a1e0c65957
For help, see: https://nodejs.org/en/docs/inspector

Error: Cannot find module 'C:\Users\Lepisode\Downloads\black-hat-variable-name\node_modules\@prisma\client\black-hat-variable-name'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1181:15)        
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1169:15)       
    at resolveExports (node:internal/modules/cjs/loader:591:14)
    at Function.Module._findPath (node:internal/modules/cjs/loader:668:31)    
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:1130:27)
    at Function.Module._load (node:internal/modules/cjs/loader:985:27)        
    at Function.Module._load (C:\Users\Lepisode\Downloads\black-hat-variable-name\node_modules\@nx\js\src\executors\node\node-with-require-overrides.js:18:31)
    at Module.require (node:internal/modules/cjs/loader:1235:19)
    at require (node:internal/modules/helpers:176:18)
    at Array.__webpack_modules__ (C:\Users\Lepisode\Downloads\black-hat-variable-name\dist\apps\server\main.js:117:18)
    
    
![image](https://github.com/prisma/prisma/assets/82086890/875a417d-f8ec-492f-8fe3-16c3d4741481)


### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4. See error
-->


### Expected behavior

_No response_

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
```prisma
// Add your schema.prisma
```

```ts
// Add your code using Prisma Client
```


### Environment & setup

- OS: <!--[e.g. macOS, Windows, Debian, CentOS, ...]-->
- Database: <!--[PostgreSQL, MySQL, PlanetScale, MariaDB, SQL Server, SQLite, MongoDB or CockroachDB]-->
- Node.js version: <!--[Run `node -v` to see your Node.js version]-->


### Prisma Version

```

```
",,
2115209821,22932,When using FindUniqueArgs or FindFirstArgs there are no types for includes.,"### Bug description

```
ERROR in ./apps/backend/src/modules/course-pass/course-pass.service.ts:443:57
TS2339: Property 'courses' does not exist on type '{ id: number; result: number; isFinal: boolean; wasCompleted: boolean; wasSuccessfullyPassed: boolean; endsAt: Date; createdAt: Date; updatedAt: Date; groupId: number; studentId: number; }'.
    441 |                 studentId: coursePass.studentId,
    442 |                 groupId: coursePass.groupId,
  > 443 |                 courses: { some: { courseId: coursePass.courses[0].courseId } },
        |                                                         ^^^^^^^
    444 |               },
    445 |             }),
    446 |           ]);
```

### How to reproduce

<!--
1. Go to '...'
2. Change '....'
3. Run '....'
4.  See error
-->



### Expected behavior

When using **Prisma.CoursePassFindUniqueArgs** or **Prisma.CoursePassFindFirstArgs** (for **findUnique** and **findFirst** respectively) I get an error:
```
    const findArgs: Prisma.CoursePassFindUniqueArgs = {
      where: { id },
      include: includeArgs,
    };
```
If remove type for findArgs, the error disappears:
```
    const findArgs = {
      where: { id },
      include: includeArgs,
    };
```
So basically query works but types are wrong.

### Prisma information

<!-- Do not include your database credentials when sharing your Prisma schema! -->
### schema.prisma
```prisma
model Course {
  id                         Int                       @id @default(autoincrement())
  name                       String                    @default("""")
  ...
  createdAt                  DateTime                  @default(now()) @map(""created_at"") @db.Timestamptz()
  updatedAt                  DateTime                  @default(now()) @updatedAt @map(""updated_at"") @db.Timestamptz()
  // relations
  ...
  coursePasses               CourseOnCoursePass[]
}

model CoursePass {
  id                    Int                  @id @default(autoincrement())
  result                Float
  ...
  createdAt             DateTime             @default(now()) @db.Timestamptz()
  updatedAt             DateTime             @default(now()) @updatedAt @db.Timestamptz()
  // relations
  group                 Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId               Int
  student               Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId             Int
  ...
  courses               CourseOnCoursePass[]
}

model CourseOnCoursePass {
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     Int
  coursePass   CoursePass @relation(fields: [coursePassId], references: [id], onDelete: Cascade)
  coursePassId Int

  @@unique([courseId, coursePassId])
  @@index([courseId, coursePassId])
}
```
### ./apps/backend/src/modules/course-pass/course-pass.service.ts
```ts
    const includeArgs: Prisma.CoursePassInclude = {
      courses: {
        include: {
          course: true,
        },
      },
      ...(student && {
        tasks: {
          include: {
            answer: true,
            question: {
              include: {
                answers: true,
              },
            },
          },
        },
      }),
    };

    const findArgs: Prisma.CoursePassFindUniqueArgs = {
      where: { id },
      include: includeArgs,
    };
    
    ...
    ...
    ...

          const [courseOnStudent, countSingleCoursePasses] = await Promise.all([
            await tx.coursesOnStudents.findFirst({
              where: { groupId: coursePass.groupId, studentId: coursePass.studentId },
            }),
            await tx.coursePass.count({
              where: {
                isFinal: false,
                studentId: coursePass.studentId,
                groupId: coursePass.groupId,
                courses: { some: { courseId: coursePass.courses[0].courseId } },
              },
            }),
          ]);

```


### Environment & setup

- OS: Windows 10
- Database: PostgreSQL
- Node.js version: v20.11.0


### Prisma Version

```
@prisma/client@5.8.1
```
",,
2114323327,22927,Missing export @prisma/client/generator-build,"### Bug description

Hey there, I'm not sure whether this is a `nexus-prisma` or `@prisma/client` issue. So, I've decided to post it here first. Please let me know if I should better file an issue over at `nexus-prisma`.

Starting with version `5.9.0`, we're seeing this issue that the `nexus-prisma` generator fails to run. It seems like `generator-build` isn't a thing anymore. 

![CleanShot 2024-02-02 at 08 46 44](https://github.com/prisma/prisma/assets/187786/71657c89-cf4f-44f5-8354-158a6cd7893e)


### How to reproduce

Run `prisma generate` with the `nexus-prisma`.

### Expected behavior

_No response_

### Prisma information

![CleanShot 2024-02-02 at 08 50 02](https://github.com/prisma/prisma/assets/187786/3f7ffd05-3488-416d-8619-ec42079111bd)


### Environment & setup

- Database: Postgres
- Node.js version: Latest (21.6.1)


### Prisma Version

Starting from 5.9.0",,
