issue_id,issue_number,issue_title,issue_body,comment_id,comment_body
2685623443,1495,"feat: For useRealtimeRuns, allow to disambiguate an empty array from the initial loading state","### Is your feature request related to a problem? Please describe.

I want to show a loading state in the UI while useRealtimeRuns loads the _initial_ runs. 

Currently, while loading, useRealtimeRuns simply returns an empty array that cannot be disambiguated from the initial loading state.


### Describe the solution you'd like to see

This might be as simple as returning ""isLoading"" from ""useSWR"" in the implementation of ""useRealtimeHooks"".

### Describe alternate solutions

No loading state gets show, bad UX.

### Additional information

_No response_",,
2682753501,1490,bug: Error: Unable to resolve module @trigger.dev/core/v3 ,"### Provide environment information

""@trigger.dev/react-hooks"": ""^3.2.1"",
React native

### Describe the bug

Hi - I'm trying to use the react hooks as stated in the documentation but whenever I try to call authentication or subscribe I get the below error. Can someone please help.

```
Error: Unable to resolve module @trigger.dev/core/v3 from /Users/USER/other/PROJECT/node_modules/@trigger.dev/react-hooks/dist/commonjs/hooks/useApiClient.js: @trigger.dev/core/v3 could not be found within the project or in these directories:
  node_modules
  3 | Object.defineProperty(exports, ""__esModule"", { value: true });
  4 | exports.useApiClient = useApiClient;
> 5 | const v3_1 = require(""@trigger.dev/core/v3"");
    |                       ^
  6 | const contexts_js_1 = require(""../contexts.js"");
  7 | /**
  8 |  * Hook to create an API client instance using authentication context or provided options.
    at ModuleResolver.resolveDependency (Users/USER/other/PROJECT/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:138:15)
    at DependencyGraph.resolveDependency (Users/USER/other/PROJECT/node_modules/metro/src/node-haste/DependencyGraph.js:231:43)
    at Users/USER/other/PROJECT//node_modules/metro/src/lib/transformHelpers.js:156:21
    at resolveDependencies (Users/USER/other/PROJECT/node_modules/metro/src/DeltaBundler/buildSubgraph.js:42:25)
    at visit (Users/USER/other/PROJECT/node_modules/metro/src/DeltaBundler/buildSubgraph.js:83:30)
    at async Promise.all (index 1)
    at async visit (/Users/USER/other/PROJECT/node_modules/metro/src/DeltaBundler/buildSubgraph.js:92:5)
    at async Promise.all (index 17)
    at async visit (Users/USER/other/PROJECT/node_modules/metro/src/DeltaBundler/buildSubgraph.js:92:5)
    at async Promise.all (index 7)
```

### Reproduction repo

https://github.com/triggerdotdev/trigger.dev

### To reproduce

Build react native application and install package as stated in docs

### Additional information

_No response_",2496759580,"Hi there! I understand you're encountering a module resolution error while trying to use @trigger.dev/react-hooks in your React Native project.

The error you're seeing suggests there's a compatibility issue between the React Native environment and the @trigger.dev packages. Looking at the underlying issue, this is happening because @trigger.dev/react-hooks is trying to import from @trigger.dev/core/v3, but this dependency isn't being resolved correctly in the React Native environment.

Here's what I suggest to resolve this:

1. First, make sure you have all the necessary dependencies installed:
```bash
npm install @trigger.dev/react-hooks@3.2.1 @trigger.dev/core@3.2.1
```

2. Since you're using React Native, you'll need to add the core package explicitly to your dependencies in package.json:
```json
{
  ""dependencies"": {
    ""@trigger.dev/react-hooks"": ""^3.2.1"",
    ""@trigger.dev/core"": ""^3.2.1""
  }
}
```

3. After updating your dependencies, clear your React Native bundler cache:
```bash
# For Metro bundler
npx react-native start --reset-cache
```

Important considerations:
- React Native has specific module resolution rules that can sometimes conflict with packages designed primarily for web React
- Make sure all your @trigger.dev packages are on the same version to avoid compatibility issues
- You might need to configure Metro bundler to properly resolve these packages

If you're still experiencing issues after trying these steps, please let me know:
1. What version of React Native you're using
2. Your metro.config.js configuration (if you have customized it)
3. Whether you're using Expo or bare React Native

The error appears to be a module resolution issue rather than a functional one, so once we get the packages properly resolved, you should be able to use the React hooks as documented.

Let me know if you need any clarification or run into other issues!"
2679812742,1487,Expand realtime filtering to include date range and run status,https://x.com/madarco/status/1859604916966182918,,
2666435567,1480,"bug: `prismaExtension`'s version detection only works when ""@prisma/client"" is added to `additionalPackages`","### Provide environment information

  System:
    OS: macOS 15.1
    CPU: (11) arm64 Apple M3 Pro
    Memory: 133.08 MB / 18.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.18.0 - /opt/homebrew/opt/node@20/bin/node
    npm: 10.8.2 - /opt/homebrew/opt/node@20/bin/npm
    pnpm: 9.12.3 - /opt/homebrew/opt/node@20/bin/pnpm

### Describe the bug

Running `pnpm dlx trigger.dev@latest deploy` fails when using `prismaExtension`'s default config.

Based on [this doc](https://trigger.dev/docs/config/config-file#prisma), the `prismaExtension` should automatically detect the installed version. Without a `version`, the deployment succeeds and silently reports an error:

```bash
% pnpm trigger deploy

Trigger.dev (3.2.0)
------------------------------------------------------
┌  Deploying project
│
◇  Retrieved your account details for ...
│
◇  Successfully built project
✘ [ERROR] Failed to apply extension PrismaExtension onBuildComplete Error: PrismaExtension could not determine the version of @prisma/client. It's possible that the @prisma/client was not used in the project. If this isn't the case, please provide a version in the PrismaExtension options.

      at PrismaExtension.onBuildComplete
  (/Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/@trigger.dev+build@3.2.0_typescript@5.6.3/node_modules/@trigger.dev/build/dist/commonjs/extensions/prisma.js:55:19)
      at notifyExtensionOnBuildComplete
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/build/extensions.js:16:33)
      at async buildWorker
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/build/buildWorker.js:70:21)
      at async _deployCommand
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/commands/deploy.js:120:27)
      at async
  file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/commands/deploy.js:77:16
      at async
  file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/cli/common.js:54:28
      at async wrapCommandAction
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/cli/common.js:40:12)
      at async deployCommand
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/commands/deploy.js:76:12)
      at async
  file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/commands/deploy.js:71:13
      at async handleTelemetry
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/cli/common.js:30:9)
      at async Command.<anonymous>
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/commands/deploy.js:69:9)
      at async Command.parseAsync
  (/Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/commander@9.5.0/node_modules/commander/lib/command.js:935:5)
      at async main
  (file:///Users/guillaume/alephic/trigger-prisma-bug/node_modules/.pnpm/trigger.dev@3.2.0_typescript@5.6.3/node_modules/trigger.dev/dist/esm/index.js:5:5)


│
◇  Successfully deployed version 20241117.8
│
└  Version 20241117.8 deployed with 1 detected task 
```

When adding `version: ""5.22.0""`, the deployment fails entirely:

```bash
% pnpm trigger deploy  

Trigger.dev (3.2.0)
------------------------------------------------------
┌  Deploying project
│
◇  Retrieved your account details for ...
│
◇  Successfully built project
▲ [WARNING] prismaExtension could not resolve the DATABASE_URL environment variable. Make sure you add it to your environment variables. See our docs for more info: https://trigger.dev/docs/deploy-environment-variables


│
◇  Failed to deploy project
│
└  Error: Error building image. Full build logs have been saved to /var/folders/4j/sp9fwh5s369b28x_jjckbgd40000gn/T/trigger-Z2WsDu/build-gwivrttk.log
```

Here's a snippet of the build error:

```
------
> [build 6/7] RUN node node_modules/prisma/build/index.js generate --schema=./prisma/schema.prisma:
#17 0.456 Prisma schema loaded from prisma/schema.prisma
#17 0.579 Error: Command failed with ENOENT: pnpm add @prisma/client@5.22.0 --silent
#17 0.579 spawn pnpm ENOENT
------
Error: failed to solve: process ""/bin/sh -c node node_modules/prisma/build/index.js generate --schema=./prisma/schema.prisma"" did not complete successfully: exit code: 1
```

### Workaround

Adding ""@prisma/client"" to `additionalPackages` fixes the issue:

```tsx
import { defineConfig } from ""@trigger.dev/sdk/v3"";
import { additionalPackages } from ""@trigger.dev/build/extensions/core"";
import { prismaExtension } from ""@trigger.dev/build/extensions/prisma"";

export default defineConfig({
  build: {
    extensions: [
      prismaExtension({ schema: ""prisma/schema.prisma"" }),
      additionalPackages({ packages: [""@prisma/client@5.22.0""] }),
    ]
  }
})
```

### Reproduction repo

https://github.com/gmathieu/trigger-prisma-bug

### To reproduce

- Check out the https://github.com/gmathieu/trigger-prisma-bug
- run `pnpm install`
- Replace `project` with your project ID in `trigger.config.ts` 

Note: Don't worry about `DATABASE_URL` warnings, we're only testing the deployment cycle.

#### Scenario 1: silent failure

- run `pnpm trigger deploy`

#### Scenario 2: build failure with version

- Uncomment [the version](https://github.com/gmathieu/trigger-prisma-bug/blob/daf426141ab496c95d0ee5bc7bad3f429a427c73/trigger.config.ts#L14)
- run `pnpm trigger deploy`

#### Scenario 3: successful deployment with `additionalPackages`

- Uncomment [additionalPackages](https://github.com/gmathieu/trigger-prisma-bug/blob/daf426141ab496c95d0ee5bc7bad3f429a427c73/trigger.config.ts#L20-L22)
- run `pnpm trigger deploy`

Note: `additionalPackages` properly populates the manifest's externals [here](https://github.com/triggerdotdev/trigger.dev/blob/332854bbcbc53703e64e9a5dd71944deabe51f2b/packages/build/src/extensions/prisma.ts#L101-L111), so version can be omitted. 


### Additional information

_No response_",2496773472,"Hi! I understand the issue you're experiencing with the `prismaExtension`'s version detection. This appears to be a known limitation in how the extension currently works with Prisma dependencies.

Here's how to resolve this issue:

1. Update your `trigger.config.ts` to use both the `prismaExtension` and `additionalPackages` together:

```typescript
import { defineConfig } from ""@trigger.dev/sdk/v3"";
import { additionalPackages } from ""@trigger.dev/build/extensions/core"";
import { prismaExtension } from ""@trigger.dev/build/extensions/prisma"";

export default defineConfig({
  build: {
    extensions: [
      prismaExtension({ 
        schema: ""prisma/schema.prisma""
        // Note: You don't need to specify version when using additionalPackages
      }),
      additionalPackages({ 
        packages: [""@prisma/client@5.22.0""] 
      }),
    ]
  }
})
```

This configuration ensures that:
- The Prisma schema is properly loaded
- The correct version of `@prisma/client` is available during build
- The version detection will work correctly

Be aware that:
- You should match the version of `@prisma/client` to what's in your project's package.json
- Make sure your DATABASE_URL environment variable is properly configured for deployment

This is currently the recommended workaround until the version detection functionality is improved in a future release.

Let me know if you need any clarification or run into any other issues!"
2666328334,1479,Errors from the providers aren't handled,"## The Problem

Providers _mostly_ don't report any errors they encounter back up to the core system. This means that if something fails, it's possible for it to just cause an unlimited ""hang"". In my case the hang causes the trigger to have been marked as `started`, when it hasn't actually been started. In the docker provider for example, errors are caught and simply ignored ([example](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/docker-provider/src/index.ts#L134-L148)).

I'm not familiar with the codebase so please let me know if there any mistakes. I spent some time following around the providers, and found a few examples like the following where, a effectively a request to deploy the trigger is just sent but never followed up upon.

https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/v3/marqs/sharedQueueConsumer.server.ts#L544-L560

I'm guessing what needs to happen is that the provider needs some way to return an error code, which core can then ""bubble up"" by changing the deployment status. I didn't want to attempt to make changes without creating an issue first, as I'm missing a lot of context. I'm also not sure how prs such as #1470 interact with this issue for example.

## Example Reproduction

I originally reported this in #1476, but moved it here as I realised my issue was a symptom of a wider problem that I described above. I encountered this while I was setting up authentication for my self hosted docker registry. Trigger would try to deploy a task, and the docker provider would fail to run it, because it couldn't download the image. This would cause trigger to hang exponentially, as it was unaware that the docker provider failed to run the task.

During my testing last night I added a scheduled task that runs every 20 minutes. I then forgot about it, and was messing around with some other things in trigger. After some sleep, I came back to it and noticed that there was a long list of ""running"" scheduled tasks. Upon further investigation, before going to sleep I had made an incomplete deployment which resulted in a missing docker image from the registry. This lead to the same place where, trigger tries to deploy the image, it fails to, but trigger has no idea. This lead to the long list of running tasks, the longest of which was hanging for ~14 hours.

![image](https://github.com/user-attachments/assets/49fc91fb-bde0-4f37-80c1-4abb441fef29)

<details>
<summary>Screenshot of the runs list</summary>

For reference, when the task is working correctly it takes ~2 seconds from start to finish.

![image](https://github.com/user-attachments/assets/218c4417-4e38-47ec-88f5-adc61389536b)

</details>

",2482943270,"Thanks for digging into this and creating two very thorough issues!

The self-hosting story isn't great at the moment, this being part of the problem. We're going to make some big changes in the next couple of months. One of those changes means providers will go away completely - there will only be a single runtime-agnostic image to run per deployment.

There's currently no easy way to fail a task from the provider. Also, any changes here would also touch parts that affect our cloud deployment.

I think for those reasons, it makes more sense not to touch this at all currently. This will be fixed by the new self-hosted setup.

However, what you could do in the meantime to prevent this and other issues is to set a [max duration](https://trigger.dev/docs/runs/max-duration) on your tasks. This would at least prevent tasks running forever and ""alert"" to investigate any underlying causes, including provider errors. Not ideal, but I think it's the best we can do for now."
2665656296,1477,Runs API failing with 403 when using access token with broad scopes (not run specific),"### Provide environment information

""@trigger.dev/react-hooks"": ""^3.2.0"",
""@trigger.dev/sdk"": ""^3.1.2"",
""@trigger.dev/build"": ""^3.1.2"",

### Describe the bug

Front-end API access returns 403 for access token with broad scopes.

Possibly introduce by https://github.com/triggerdotdev/trigger.dev/pull/1402.

### Reproduction repo

http://sorry.out.of.time.com

### To reproduce

Steps to repro:

Create a token as documented here [](https://trigger.dev/docs/frontend/overview#scopes)
```
const publicToken = await auth.createPublicToken({
  scopes: {
    read: {
      runs: true,
    },
  },
});
```

Paste the generate token to the JWT debugger [](https://jwt.io/#debugger-io) and observe that the scopes array in the decoded payload is empty.
When making a request with this token, the response from ""https://api.trigger.dev/api/v3/runs/"" is 403.


Analysis from looking at the code:
In https://github.com/triggerdotdev/trigger.dev/blob/332854bbcbc53703e64e9a5dd71944deabe51f2b/packages/trigger-sdk/src/v3/auth.ts
```
function flattenScopes(permissions: PublicTokenPermissions): string[] {
  const flattenedPermissions: string[] = [];

  for (const [action, properties] of Object.entries(permissions)) {
    if (properties) {
      if (typeof properties === ""boolean"" && properties) {
        flattenedPermissions.push(action);
      } else if (typeof properties === ""object"") {
        for (const [property, value] of Object.entries(properties)) {
          if (Array.isArray(value)) {
            for (const item of value) {
              flattenedPermissions.push(`${action}:${property}:${item}`);
            }
          } else if (typeof value === ""string"") {
            flattenedPermissions.push(`${action}:${property}:${value}`);
          }
        }
      }
    }
  }

  return flattenedPermissions;
}
```

The check 
```
if (typeof properties === ""boolean"" && properties) {
```
seems incorrect. The action is 'read' but 'properties' is not a boolean, it is'{ runs: true }'.


For what it's worth, when forcing TS to accept an object in the shape that ""flattenScopes"" expects
```
return auth.createPublicToken({
scopes: {
     read: true,
} as any)
```
the JWT claims have the expected (?) shape but the API still gives me 403.

### Additional information

_No response_",2481314515,"An ugly workaround to allow reading all runs
```
import { apiClientManager } from '@trigger.dev/core/v3'
import { generateJWT } from '@trigger.dev/core/v3'

export async function getTriggerDevAccessToken() {
  const apiClient = apiClientManager.clientOrThrow()

  const claims = await apiClient.generateJWTClaims()

  return generateJWT({
    secretKey: apiClient.accessToken,
    payload: {
      ...claims,
      scopes: ['read:runs'],
    },
  })
}
```"
2665656296,1477,Runs API failing with 403 when using access token with broad scopes (not run specific),"### Provide environment information

""@trigger.dev/react-hooks"": ""^3.2.0"",
""@trigger.dev/sdk"": ""^3.1.2"",
""@trigger.dev/build"": ""^3.1.2"",

### Describe the bug

Front-end API access returns 403 for access token with broad scopes.

Possibly introduce by https://github.com/triggerdotdev/trigger.dev/pull/1402.

### Reproduction repo

http://sorry.out.of.time.com

### To reproduce

Steps to repro:

Create a token as documented here [](https://trigger.dev/docs/frontend/overview#scopes)
```
const publicToken = await auth.createPublicToken({
  scopes: {
    read: {
      runs: true,
    },
  },
});
```

Paste the generate token to the JWT debugger [](https://jwt.io/#debugger-io) and observe that the scopes array in the decoded payload is empty.
When making a request with this token, the response from ""https://api.trigger.dev/api/v3/runs/"" is 403.


Analysis from looking at the code:
In https://github.com/triggerdotdev/trigger.dev/blob/332854bbcbc53703e64e9a5dd71944deabe51f2b/packages/trigger-sdk/src/v3/auth.ts
```
function flattenScopes(permissions: PublicTokenPermissions): string[] {
  const flattenedPermissions: string[] = [];

  for (const [action, properties] of Object.entries(permissions)) {
    if (properties) {
      if (typeof properties === ""boolean"" && properties) {
        flattenedPermissions.push(action);
      } else if (typeof properties === ""object"") {
        for (const [property, value] of Object.entries(properties)) {
          if (Array.isArray(value)) {
            for (const item of value) {
              flattenedPermissions.push(`${action}:${property}:${item}`);
            }
          } else if (typeof value === ""string"") {
            flattenedPermissions.push(`${action}:${property}:${value}`);
          }
        }
      }
    }
  }

  return flattenedPermissions;
}
```

The check 
```
if (typeof properties === ""boolean"" && properties) {
```
seems incorrect. The action is 'read' but 'properties' is not a boolean, it is'{ runs: true }'.


For what it's worth, when forcing TS to accept an object in the shape that ""flattenScopes"" expects
```
return auth.createPublicToken({
scopes: {
     read: true,
} as any)
```
the JWT claims have the expected (?) shape but the API still gives me 403.

### Additional information

_No response_",2481425254,"This has been fixed in #1470, which should be going live this week"
2665656296,1477,Runs API failing with 403 when using access token with broad scopes (not run specific),"### Provide environment information

""@trigger.dev/react-hooks"": ""^3.2.0"",
""@trigger.dev/sdk"": ""^3.1.2"",
""@trigger.dev/build"": ""^3.1.2"",

### Describe the bug

Front-end API access returns 403 for access token with broad scopes.

Possibly introduce by https://github.com/triggerdotdev/trigger.dev/pull/1402.

### Reproduction repo

http://sorry.out.of.time.com

### To reproduce

Steps to repro:

Create a token as documented here [](https://trigger.dev/docs/frontend/overview#scopes)
```
const publicToken = await auth.createPublicToken({
  scopes: {
    read: {
      runs: true,
    },
  },
});
```

Paste the generate token to the JWT debugger [](https://jwt.io/#debugger-io) and observe that the scopes array in the decoded payload is empty.
When making a request with this token, the response from ""https://api.trigger.dev/api/v3/runs/"" is 403.


Analysis from looking at the code:
In https://github.com/triggerdotdev/trigger.dev/blob/332854bbcbc53703e64e9a5dd71944deabe51f2b/packages/trigger-sdk/src/v3/auth.ts
```
function flattenScopes(permissions: PublicTokenPermissions): string[] {
  const flattenedPermissions: string[] = [];

  for (const [action, properties] of Object.entries(permissions)) {
    if (properties) {
      if (typeof properties === ""boolean"" && properties) {
        flattenedPermissions.push(action);
      } else if (typeof properties === ""object"") {
        for (const [property, value] of Object.entries(properties)) {
          if (Array.isArray(value)) {
            for (const item of value) {
              flattenedPermissions.push(`${action}:${property}:${item}`);
            }
          } else if (typeof value === ""string"") {
            flattenedPermissions.push(`${action}:${property}:${value}`);
          }
        }
      }
    }
  }

  return flattenedPermissions;
}
```

The check 
```
if (typeof properties === ""boolean"" && properties) {
```
seems incorrect. The action is 'read' but 'properties' is not a boolean, it is'{ runs: true }'.


For what it's worth, when forcing TS to accept an object in the shape that ""flattenScopes"" expects
```
return auth.createPublicToken({
scopes: {
     read: true,
} as any)
```
the JWT claims have the expected (?) shape but the API still gives me 403.

### Additional information

_No response_",2482888998,"Great, thanks a lot!"
2665656296,1477,Runs API failing with 403 when using access token with broad scopes (not run specific),"### Provide environment information

""@trigger.dev/react-hooks"": ""^3.2.0"",
""@trigger.dev/sdk"": ""^3.1.2"",
""@trigger.dev/build"": ""^3.1.2"",

### Describe the bug

Front-end API access returns 403 for access token with broad scopes.

Possibly introduce by https://github.com/triggerdotdev/trigger.dev/pull/1402.

### Reproduction repo

http://sorry.out.of.time.com

### To reproduce

Steps to repro:

Create a token as documented here [](https://trigger.dev/docs/frontend/overview#scopes)
```
const publicToken = await auth.createPublicToken({
  scopes: {
    read: {
      runs: true,
    },
  },
});
```

Paste the generate token to the JWT debugger [](https://jwt.io/#debugger-io) and observe that the scopes array in the decoded payload is empty.
When making a request with this token, the response from ""https://api.trigger.dev/api/v3/runs/"" is 403.


Analysis from looking at the code:
In https://github.com/triggerdotdev/trigger.dev/blob/332854bbcbc53703e64e9a5dd71944deabe51f2b/packages/trigger-sdk/src/v3/auth.ts
```
function flattenScopes(permissions: PublicTokenPermissions): string[] {
  const flattenedPermissions: string[] = [];

  for (const [action, properties] of Object.entries(permissions)) {
    if (properties) {
      if (typeof properties === ""boolean"" && properties) {
        flattenedPermissions.push(action);
      } else if (typeof properties === ""object"") {
        for (const [property, value] of Object.entries(properties)) {
          if (Array.isArray(value)) {
            for (const item of value) {
              flattenedPermissions.push(`${action}:${property}:${item}`);
            }
          } else if (typeof value === ""string"") {
            flattenedPermissions.push(`${action}:${property}:${value}`);
          }
        }
      }
    }
  }

  return flattenedPermissions;
}
```

The check 
```
if (typeof properties === ""boolean"" && properties) {
```
seems incorrect. The action is 'read' but 'properties' is not a boolean, it is'{ runs: true }'.


For what it's worth, when forcing TS to accept an object in the shape that ""flattenScopes"" expects
```
return auth.createPublicToken({
scopes: {
     read: true,
} as any)
```
the JWT claims have the expected (?) shape but the API still gives me 403.

### Additional information

_No response_",2490269276,Fix verified with 3.2.1. Thank you! Closing.
2665164670,1476,"bug: when the image fails to be pulled from the registry, the deployment hangs","### Provide environment information

n/a

### Describe the bug

I have a self-hosted registry for trigger exclusively, and I noticed while debugging the setup that when the image failed to be pulled the task just kept going seemingly unaware. I can't recall if this happened when the image was missing, but it definitely happened if the authentication failed.	

### Reproduction repo

n/a

### To reproduce

Self host a registry, and use it with trigger. I'd try kicking it offline, and if that error does appear in the task logs then try adding auth to the registry but not the docker-provider container. Self hosting the registry was rather simple with docker:

```yaml
  trigger-registry:
    container_name: trigger-registry
    image: registry:2
    restart: always
    volumes:
      - ./rdata:/var/lib/registry
      - ./auth:/auth
 ```

See [the guide on built-in auth](https://distribution.github.io/distribution/about/deploying/#native-basic-auth) if you need.

### Additional information

_No response_",2481395783,"I set up a scheduled task yesterday as a demo which just does one fetch request. The task takes about ~2s from start to finish (incl pulling the image). The docker registry went offline and this is the result of that :laughing:

![image](https://github.com/user-attachments/assets/6ff75a9e-53ce-499a-ad81-725c9424dfa4)

All of these runs are still queued too. The oldest of which is running for 14 hours

![image](https://github.com/user-attachments/assets/ebd135ec-a67f-4527-b368-adeaf38609f2)
"
2665164670,1476,"bug: when the image fails to be pulled from the registry, the deployment hangs","### Provide environment information

n/a

### Describe the bug

I have a self-hosted registry for trigger exclusively, and I noticed while debugging the setup that when the image failed to be pulled the task just kept going seemingly unaware. I can't recall if this happened when the image was missing, but it definitely happened if the authentication failed.	

### Reproduction repo

n/a

### To reproduce

Self host a registry, and use it with trigger. I'd try kicking it offline, and if that error does appear in the task logs then try adding auth to the registry but not the docker-provider container. Self hosting the registry was rather simple with docker:

```yaml
  trigger-registry:
    container_name: trigger-registry
    image: registry:2
    restart: always
    volumes:
      - ./rdata:/var/lib/registry
      - ./auth:/auth
 ```

See [the guide on built-in auth](https://distribution.github.io/distribution/about/deploying/#native-basic-auth) if you need.

### Additional information

_No response_",2481423154,"It looks like it's because these errors aren't returned up from the docker provider, they're simply logged and then ignored.

https://github.com/triggerdotdev/trigger.dev/blob/main/apps/docker-provider/src/index.ts#L134-L148"
2665164670,1476,"bug: when the image fails to be pulled from the registry, the deployment hangs","### Provide environment information

n/a

### Describe the bug

I have a self-hosted registry for trigger exclusively, and I noticed while debugging the setup that when the image failed to be pulled the task just kept going seemingly unaware. I can't recall if this happened when the image was missing, but it definitely happened if the authentication failed.	

### Reproduction repo

n/a

### To reproduce

Self host a registry, and use it with trigger. I'd try kicking it offline, and if that error does appear in the task logs then try adding auth to the registry but not the docker-provider container. Self hosting the registry was rather simple with docker:

```yaml
  trigger-registry:
    container_name: trigger-registry
    image: registry:2
    restart: always
    volumes:
      - ./rdata:/var/lib/registry
      - ./auth:/auth
 ```

See [the guide on built-in auth](https://distribution.github.io/distribution/about/deploying/#native-basic-auth) if you need.

### Additional information

_No response_",2481429562,"There only seems to be one example of a provider shell handler providing a more detailed error: https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/src/v3/apps/provider.ts#L235-L241

I think fixing this will require work from the core team, I'll make a better issue for this"
2665164670,1476,"bug: when the image fails to be pulled from the registry, the deployment hangs","### Provide environment information

n/a

### Describe the bug

I have a self-hosted registry for trigger exclusively, and I noticed while debugging the setup that when the image failed to be pulled the task just kept going seemingly unaware. I can't recall if this happened when the image was missing, but it definitely happened if the authentication failed.	

### Reproduction repo

n/a

### To reproduce

Self host a registry, and use it with trigger. I'd try kicking it offline, and if that error does appear in the task logs then try adding auth to the registry but not the docker-provider container. Self hosting the registry was rather simple with docker:

```yaml
  trigger-registry:
    container_name: trigger-registry
    image: registry:2
    restart: always
    volumes:
      - ./rdata:/var/lib/registry
      - ./auth:/auth
 ```

See [the guide on built-in auth](https://distribution.github.io/distribution/about/deploying/#native-basic-auth) if you need.

### Additional information

_No response_",2481437427,Moved to #1479
2655798890,1473,[TRI-3988] Support imports with aliases inside the trigger.config file,"## Problem

If you are using imports in your trigger.config file with aliases you've defined in your tsconfig.json paths, you will get an error like this:

```
X Error: Cannot find module '@services/environment' 
```

You can't use import aliases that you've setup in your tsconfig.json file inside of the trigger.config.ts file. They work in all other files inside the /trigger folder but just not in this file.

They don't work because we use [https://github.com/unjs/c12](https://github.com/unjs/c12) to load the config file and it doesn't automatically read tsconfig aliases.

[https://github.com/unjs/jiti/issues/166](https://github.com/unjs/jiti/issues/166)

## Workaround

If you experience this problem, for now you can change the path to a relative folder path import.

## Potential built-in solution

There is an `alias` option when using jiti and it looks like we might be able to read the relevant tsconfig paths and populate this with them. [https://github.com/unjs/jiti?tab=readme-ov-file#alias](https://github.com/unjs/jiti?tab=readme-ov-file#alias)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-3988](https://linear.app/triggerdotdev/issue/TRI-3988/support-imports-with-aliases-inside-the-triggerconfig-file)</sub>",2484773383,Hey @matt-aitken please assign this issue to me?
2651823801,1468,feat: Ability to change the node version,"### Is your feature request related to a problem? Please describe.

In a data processing pipeline which uses a lot of grouping operations introduced in node v21 the code fails with.
```
TypeError: Map.groupBy(...).entries(...).map is not a function
```
From what I see trigger runs on node v20.

### Describe the solution you'd like to see

Allow users to change the node version in their trigger config. I understand that this will increase the testing and maintenance cost a LOT so it's probably not worth implementing.

### Describe alternate solutions

1. Document how to conditionally polifill unavailable features 
2. Warn if one uses too new features unavailable in the runtime 

### Additional information

_No response_",2470354650,"For now I've added poly-fills directly to trigger.config.ts
```ts
// Add polifills for Node v22
// https://github.com/triggerdotdev/trigger.dev/issues/1468
import 'core-js/actual/iterator';
import 'core-js/actual/object';
import 'core-js/actual/map';
```"
2651823801,1468,feat: Ability to change the node version,"### Is your feature request related to a problem? Please describe.

In a data processing pipeline which uses a lot of grouping operations introduced in node v21 the code fails with.
```
TypeError: Map.groupBy(...).entries(...).map is not a function
```
From what I see trigger runs on node v20.

### Describe the solution you'd like to see

Allow users to change the node version in their trigger config. I understand that this will increase the testing and maintenance cost a LOT so it's probably not worth implementing.

### Describe alternate solutions

1. Document how to conditionally polifill unavailable features 
2. Warn if one uses too new features unavailable in the runtime 

### Additional information

_No response_",2470501613,"Thanks, this is useful especially with the polyfills!

We're going to be adding a new `runtime` option for Node 22 quite soon."
2651814835,1467,"prioritize location of `trigger.config.ts` file to set the ""base"" path instead of package.json","Some monorepo setups don't have a package.json inside the individual workspace (instead they just have 1 at the root of the monorepo), which messes up some path resolution logic during the dev command. We should use the `trigger.config.ts` file path instead of the package.json to determine the ""base"" path when running the dev command to fix this.",,
2651059248,1466,feat: Support custom run command so I can use dotenvx,"### Is your feature request related to a problem? Please describe.

I manage environment vars with [dotenvx](https://dotenvx.com/). The way is works is that you store encrypted env vars in your repo, and you have just one secret key that gets used to unencrypt everything else at runtime. Makes env management across multiple platforms much easier.

The problem is that you unencrypt vars by using a custom run command, ex.:

`dotenvx run -- my_script.ts`

This doesn't work well with trigger.dev. Could you allow me to set custom run commands for my tasks?

### Describe the solution you'd like to see

Allow a custom run command to be specified in the task config, or support doing this with extensions.

### Describe alternate solutions

My temp solutions:
- don't use dotenvx for the vars that I want to use with my trigger.dev tasks
- Wrap my task script so that instead of calling directly, my task does something like `run_bash('dotenvx run -- node my_script.js')`. Haven't tested this yet; it would probably work but I assume it would cause me to lose my telemetry.

### Additional information

_No response_",2494296592,"@warrenbhw I'm not familiar enough with trigger.dev but could you instead load dotenvx in code using the `.config()` method?

```js
// somejob.js
require('@dotenvx/dotenvx').config()
console.log(`Hello ${process.env.HELLO}`)
```"
2651059248,1466,feat: Support custom run command so I can use dotenvx,"### Is your feature request related to a problem? Please describe.

I manage environment vars with [dotenvx](https://dotenvx.com/). The way is works is that you store encrypted env vars in your repo, and you have just one secret key that gets used to unencrypt everything else at runtime. Makes env management across multiple platforms much easier.

The problem is that you unencrypt vars by using a custom run command, ex.:

`dotenvx run -- my_script.ts`

This doesn't work well with trigger.dev. Could you allow me to set custom run commands for my tasks?

### Describe the solution you'd like to see

Allow a custom run command to be specified in the task config, or support doing this with extensions.

### Describe alternate solutions

My temp solutions:
- don't use dotenvx for the vars that I want to use with my trigger.dev tasks
- Wrap my task script so that instead of calling directly, my task does something like `run_bash('dotenvx run -- node my_script.js')`. Haven't tested this yet; it would probably work but I assume it would cause me to lose my telemetry.

### Additional information

_No response_",2495368334,Let me give this a shot! Thanks 
2646926666,1465,bug: Creating Personal Access Tokens on selfhosted site creates undefined error,"### Provide environment information

  System:
    OS: Linux 6.8 Debian GNU/Linux 11 (bullseye) 11 (bullseye)
    CPU: (4) x64 Intel(R) N100
    Memory: 11.64 GB / 15.37 GB
    Container: Yes
    Shell: 5.1.4 - /bin/bash
  Binaries:
    Node: 20.11.1 - /usr/local/bin/node
    npm: 10.2.4 - /usr/local/bin/npm
    pnpm: 8.15.5 - /usr/local/bin/pnpm

### Describe the bug

After creating a Personal Access Tokens and adding the name (any string) I then trigger the following error: 
<img width=""359"" alt=""image"" src=""https://github.com/user-attachments/assets/5a69cb77-6a0e-4c4a-95e9-55b0130365cf"">


### Reproduction repo

not applicable 

### To reproduce

1. I am running this on a coolify project using the following docker compose: 
```
# documentation: https://trigger.dev
# slogan: The open source Background Jobs framework for TypeScript
# tags: trigger.dev, background jobs, typescript, trigger, jobs, cron, scheduler
# logo: svgs/trigger.png
# port: 3000
x-common-env: &common-env
  PORT: 3030
  REMIX_APP_PORT: 3000
  NODE_ENV: production
  RUNTIME_PLATFORM: docker-compose
  V3_ENABLED: true
  INTERNAL_OTEL_TRACE_DISABLED: 1
  INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
  POSTGRES_USER: $SERVICE_USER_POSTGRES
  POSTGRES_PASSWORD: $SERVICE_PASSWORD_POSTGRES
  POSTGRES_DB: ${POSTGRES_DB:-trigger}
  MAGIC_LINK_SECRET: $SERVICE_PASSWORD_64_MAGIC
  SESSION_SECRET: $SERVICE_PASSWORD_64_SESSION
  ENCRYPTION_KEY: $SERVICE_PASSWORD_64_ENCRYPTION
  PROVIDER_SECRET: $SERVICE_PASSWORD_64_PROVIDER
  COORDINATOR_SECRET: $SERVICE_PASSWORD_64_COORDINATOR
  DATABASE_HOST: postgresql:5432
  DATABASE_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  DIRECT_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_TLS_DISABLED: true
  COORDINATOR_HOST: 127.0.0.1
  COORDINATOR_PORT: 9020
  WHITELISTED_EMAILS: """"
  ADMIN_EMAILS: """"
  DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: 300
  DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: 100
  DEPLOY_REGISTRY_HOST: docker.io
  DEPLOY_REGISTRY_NAMESPACE: trigger
  REGISTRY_HOST: ${DEPLOY_REGISTRY_HOST}
  REGISTRY_NAMESPACE: ${DEPLOY_REGISTRY_NAMESPACE}
  AUTH_GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID}
  AUTH_GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET}
  RESEND_API_KEY: ${RESEND_API_KEY}
  FROM_EMAIL: ${FROM_EMAIL}
  REPLY_TO_EMAIL: ${REPLY_TO_EMAIL}
  LOGIN_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  APP_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  DEV_OTEL_EXPORTER_OTLP_ENDPOINT: $SERVICE_FQDN_TRIGGER_3000/otel
  OTEL_EXPORTER_OTLP_ENDPOINT: ""http://trigger:3040/otel""
  ELECTRIC_ORIGIN: http://electric:3000
services:
  trigger:
    image: ghcr.io/triggerdotdev/trigger.dev:v3
    environment:
      SERVICE_FQDN_TRIGGER_3000: """"
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      electric:
        condition: service_healthy
    healthcheck:
      test: ""timeout 10s bash -c ':> /dev/tcp/127.0.0.1/3000' || exit 1""
      interval: 10s
      timeout: 5s
      retries: 5
  electric:
    image: electricsql/electric
    environment:
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  redis:
    image: ""redis:7""
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test:
        - CMD-SHELL
        - ""redis-cli -h localhost -p 6379 ping""
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data
  postgresql:
    image: postgres:16-alpine
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      <<: *common-env
    command:
      - -c
      - wal_level=logical
    healthcheck:
      test: [""CMD-SHELL"", ""pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}""]
      interval: 5s
      timeout: 20s
      retries: 10
  docker-provider:
    image: ghcr.io/triggerdotdev/provider/docker:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $PROVIDER_SECRET
  coordinator:
    image: ghcr.io/triggerdotdev/coordinator:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $COORDINATOR_SECRET
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  ```
2. Create a new access token
3. Error will then trigger

### Additional information

Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
tokens:24 
        
        
       GET https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015 net::ERR_BLOCKED_BY_CLIENT
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
chunk-LYHQCUWL.js:8 TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459)
overrideMethod @ hook.js:608
xi @ chunk-LYHQCUWL.js:8
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
chunk-JBSYHZX3.js:2 React Router caught the following error during render TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459) {componentStack: '\n    at re (https://trigger.claasen.cc/build/route…claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)'}componentStack: ""\n    at re (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:4909)\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:4583\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-Y6JHH73C.js:1:384\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:3527\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2339\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2087\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7410\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at se (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:1327)\n    at ee (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:4672)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:5173\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at ne (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:601)\n    at div\n    at j (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1895)\n    at div\n    at div\n    at div\n    at G (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1047)\n    at div\n    at fo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3658)\n    at X (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:3588)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at div\n    at yt (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3548)\n    at div\n    at div\n    at vo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3424)\n    at L\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at body\n    at html\n    at rs (https://trigger.claasen.cc/build/root-JWRAFXBJ.js:14:109345)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at dr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:22722)\n    at Qo (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:30169)\n    at gr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21257)\n    at Mn (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:28244)\n    at $t (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:14:2378)\n    at Ui (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:24:2690)\n    at x (https://trigger.claasen.cc/build/_shared/chunk-XEZL6SGQ.js:1:185)\n    at y (https://trigger.claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)""[[Prototype]]: Object
overrideMethod @ hook.js:608
componentDidCatch @ chunk-JBSYHZX3.js:2
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
",2466618974,I am happy to share access if required. 
2646926666,1465,bug: Creating Personal Access Tokens on selfhosted site creates undefined error,"### Provide environment information

  System:
    OS: Linux 6.8 Debian GNU/Linux 11 (bullseye) 11 (bullseye)
    CPU: (4) x64 Intel(R) N100
    Memory: 11.64 GB / 15.37 GB
    Container: Yes
    Shell: 5.1.4 - /bin/bash
  Binaries:
    Node: 20.11.1 - /usr/local/bin/node
    npm: 10.2.4 - /usr/local/bin/npm
    pnpm: 8.15.5 - /usr/local/bin/pnpm

### Describe the bug

After creating a Personal Access Tokens and adding the name (any string) I then trigger the following error: 
<img width=""359"" alt=""image"" src=""https://github.com/user-attachments/assets/5a69cb77-6a0e-4c4a-95e9-55b0130365cf"">


### Reproduction repo

not applicable 

### To reproduce

1. I am running this on a coolify project using the following docker compose: 
```
# documentation: https://trigger.dev
# slogan: The open source Background Jobs framework for TypeScript
# tags: trigger.dev, background jobs, typescript, trigger, jobs, cron, scheduler
# logo: svgs/trigger.png
# port: 3000
x-common-env: &common-env
  PORT: 3030
  REMIX_APP_PORT: 3000
  NODE_ENV: production
  RUNTIME_PLATFORM: docker-compose
  V3_ENABLED: true
  INTERNAL_OTEL_TRACE_DISABLED: 1
  INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
  POSTGRES_USER: $SERVICE_USER_POSTGRES
  POSTGRES_PASSWORD: $SERVICE_PASSWORD_POSTGRES
  POSTGRES_DB: ${POSTGRES_DB:-trigger}
  MAGIC_LINK_SECRET: $SERVICE_PASSWORD_64_MAGIC
  SESSION_SECRET: $SERVICE_PASSWORD_64_SESSION
  ENCRYPTION_KEY: $SERVICE_PASSWORD_64_ENCRYPTION
  PROVIDER_SECRET: $SERVICE_PASSWORD_64_PROVIDER
  COORDINATOR_SECRET: $SERVICE_PASSWORD_64_COORDINATOR
  DATABASE_HOST: postgresql:5432
  DATABASE_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  DIRECT_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_TLS_DISABLED: true
  COORDINATOR_HOST: 127.0.0.1
  COORDINATOR_PORT: 9020
  WHITELISTED_EMAILS: """"
  ADMIN_EMAILS: """"
  DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: 300
  DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: 100
  DEPLOY_REGISTRY_HOST: docker.io
  DEPLOY_REGISTRY_NAMESPACE: trigger
  REGISTRY_HOST: ${DEPLOY_REGISTRY_HOST}
  REGISTRY_NAMESPACE: ${DEPLOY_REGISTRY_NAMESPACE}
  AUTH_GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID}
  AUTH_GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET}
  RESEND_API_KEY: ${RESEND_API_KEY}
  FROM_EMAIL: ${FROM_EMAIL}
  REPLY_TO_EMAIL: ${REPLY_TO_EMAIL}
  LOGIN_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  APP_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  DEV_OTEL_EXPORTER_OTLP_ENDPOINT: $SERVICE_FQDN_TRIGGER_3000/otel
  OTEL_EXPORTER_OTLP_ENDPOINT: ""http://trigger:3040/otel""
  ELECTRIC_ORIGIN: http://electric:3000
services:
  trigger:
    image: ghcr.io/triggerdotdev/trigger.dev:v3
    environment:
      SERVICE_FQDN_TRIGGER_3000: """"
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      electric:
        condition: service_healthy
    healthcheck:
      test: ""timeout 10s bash -c ':> /dev/tcp/127.0.0.1/3000' || exit 1""
      interval: 10s
      timeout: 5s
      retries: 5
  electric:
    image: electricsql/electric
    environment:
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  redis:
    image: ""redis:7""
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test:
        - CMD-SHELL
        - ""redis-cli -h localhost -p 6379 ping""
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data
  postgresql:
    image: postgres:16-alpine
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      <<: *common-env
    command:
      - -c
      - wal_level=logical
    healthcheck:
      test: [""CMD-SHELL"", ""pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}""]
      interval: 5s
      timeout: 20s
      retries: 10
  docker-provider:
    image: ghcr.io/triggerdotdev/provider/docker:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $PROVIDER_SECRET
  coordinator:
    image: ghcr.io/triggerdotdev/coordinator:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $COORDINATOR_SECRET
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  ```
2. Create a new access token
3. Error will then trigger

### Additional information

Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
tokens:24 
        
        
       GET https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015 net::ERR_BLOCKED_BY_CLIENT
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
chunk-LYHQCUWL.js:8 TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459)
overrideMethod @ hook.js:608
xi @ chunk-LYHQCUWL.js:8
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
chunk-JBSYHZX3.js:2 React Router caught the following error during render TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459) {componentStack: '\n    at re (https://trigger.claasen.cc/build/route…claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)'}componentStack: ""\n    at re (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:4909)\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:4583\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-Y6JHH73C.js:1:384\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:3527\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2339\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2087\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7410\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at se (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:1327)\n    at ee (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:4672)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:5173\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at ne (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:601)\n    at div\n    at j (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1895)\n    at div\n    at div\n    at div\n    at G (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1047)\n    at div\n    at fo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3658)\n    at X (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:3588)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at div\n    at yt (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3548)\n    at div\n    at div\n    at vo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3424)\n    at L\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at body\n    at html\n    at rs (https://trigger.claasen.cc/build/root-JWRAFXBJ.js:14:109345)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at dr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:22722)\n    at Qo (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:30169)\n    at gr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21257)\n    at Mn (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:28244)\n    at $t (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:14:2378)\n    at Ui (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:24:2690)\n    at x (https://trigger.claasen.cc/build/_shared/chunk-XEZL6SGQ.js:1:185)\n    at y (https://trigger.claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)""[[Prototype]]: Object
overrideMethod @ hook.js:608
componentDidCatch @ chunk-JBSYHZX3.js:2
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
",2466662852,Seems to also have an issue when trying to create a token via the CLI. I am guessing it's related. 
2646926666,1465,bug: Creating Personal Access Tokens on selfhosted site creates undefined error,"### Provide environment information

  System:
    OS: Linux 6.8 Debian GNU/Linux 11 (bullseye) 11 (bullseye)
    CPU: (4) x64 Intel(R) N100
    Memory: 11.64 GB / 15.37 GB
    Container: Yes
    Shell: 5.1.4 - /bin/bash
  Binaries:
    Node: 20.11.1 - /usr/local/bin/node
    npm: 10.2.4 - /usr/local/bin/npm
    pnpm: 8.15.5 - /usr/local/bin/pnpm

### Describe the bug

After creating a Personal Access Tokens and adding the name (any string) I then trigger the following error: 
<img width=""359"" alt=""image"" src=""https://github.com/user-attachments/assets/5a69cb77-6a0e-4c4a-95e9-55b0130365cf"">


### Reproduction repo

not applicable 

### To reproduce

1. I am running this on a coolify project using the following docker compose: 
```
# documentation: https://trigger.dev
# slogan: The open source Background Jobs framework for TypeScript
# tags: trigger.dev, background jobs, typescript, trigger, jobs, cron, scheduler
# logo: svgs/trigger.png
# port: 3000
x-common-env: &common-env
  PORT: 3030
  REMIX_APP_PORT: 3000
  NODE_ENV: production
  RUNTIME_PLATFORM: docker-compose
  V3_ENABLED: true
  INTERNAL_OTEL_TRACE_DISABLED: 1
  INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
  POSTGRES_USER: $SERVICE_USER_POSTGRES
  POSTGRES_PASSWORD: $SERVICE_PASSWORD_POSTGRES
  POSTGRES_DB: ${POSTGRES_DB:-trigger}
  MAGIC_LINK_SECRET: $SERVICE_PASSWORD_64_MAGIC
  SESSION_SECRET: $SERVICE_PASSWORD_64_SESSION
  ENCRYPTION_KEY: $SERVICE_PASSWORD_64_ENCRYPTION
  PROVIDER_SECRET: $SERVICE_PASSWORD_64_PROVIDER
  COORDINATOR_SECRET: $SERVICE_PASSWORD_64_COORDINATOR
  DATABASE_HOST: postgresql:5432
  DATABASE_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  DIRECT_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_TLS_DISABLED: true
  COORDINATOR_HOST: 127.0.0.1
  COORDINATOR_PORT: 9020
  WHITELISTED_EMAILS: """"
  ADMIN_EMAILS: """"
  DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: 300
  DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: 100
  DEPLOY_REGISTRY_HOST: docker.io
  DEPLOY_REGISTRY_NAMESPACE: trigger
  REGISTRY_HOST: ${DEPLOY_REGISTRY_HOST}
  REGISTRY_NAMESPACE: ${DEPLOY_REGISTRY_NAMESPACE}
  AUTH_GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID}
  AUTH_GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET}
  RESEND_API_KEY: ${RESEND_API_KEY}
  FROM_EMAIL: ${FROM_EMAIL}
  REPLY_TO_EMAIL: ${REPLY_TO_EMAIL}
  LOGIN_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  APP_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  DEV_OTEL_EXPORTER_OTLP_ENDPOINT: $SERVICE_FQDN_TRIGGER_3000/otel
  OTEL_EXPORTER_OTLP_ENDPOINT: ""http://trigger:3040/otel""
  ELECTRIC_ORIGIN: http://electric:3000
services:
  trigger:
    image: ghcr.io/triggerdotdev/trigger.dev:v3
    environment:
      SERVICE_FQDN_TRIGGER_3000: """"
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      electric:
        condition: service_healthy
    healthcheck:
      test: ""timeout 10s bash -c ':> /dev/tcp/127.0.0.1/3000' || exit 1""
      interval: 10s
      timeout: 5s
      retries: 5
  electric:
    image: electricsql/electric
    environment:
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  redis:
    image: ""redis:7""
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test:
        - CMD-SHELL
        - ""redis-cli -h localhost -p 6379 ping""
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data
  postgresql:
    image: postgres:16-alpine
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      <<: *common-env
    command:
      - -c
      - wal_level=logical
    healthcheck:
      test: [""CMD-SHELL"", ""pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}""]
      interval: 5s
      timeout: 20s
      retries: 10
  docker-provider:
    image: ghcr.io/triggerdotdev/provider/docker:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $PROVIDER_SECRET
  coordinator:
    image: ghcr.io/triggerdotdev/coordinator:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $COORDINATOR_SECRET
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  ```
2. Create a new access token
3. Error will then trigger

### Additional information

Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
tokens:24 
        
        
       GET https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015 net::ERR_BLOCKED_BY_CLIENT
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
chunk-LYHQCUWL.js:8 TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459)
overrideMethod @ hook.js:608
xi @ chunk-LYHQCUWL.js:8
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
chunk-JBSYHZX3.js:2 React Router caught the following error during render TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459) {componentStack: '\n    at re (https://trigger.claasen.cc/build/route…claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)'}componentStack: ""\n    at re (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:4909)\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:4583\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-Y6JHH73C.js:1:384\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:3527\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2339\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2087\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7410\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at se (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:1327)\n    at ee (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:4672)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:5173\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at ne (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:601)\n    at div\n    at j (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1895)\n    at div\n    at div\n    at div\n    at G (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1047)\n    at div\n    at fo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3658)\n    at X (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:3588)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at div\n    at yt (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3548)\n    at div\n    at div\n    at vo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3424)\n    at L\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at body\n    at html\n    at rs (https://trigger.claasen.cc/build/root-JWRAFXBJ.js:14:109345)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at dr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:22722)\n    at Qo (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:30169)\n    at gr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21257)\n    at Mn (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:28244)\n    at $t (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:14:2378)\n    at Ui (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:24:2690)\n    at x (https://trigger.claasen.cc/build/_shared/chunk-XEZL6SGQ.js:1:185)\n    at y (https://trigger.claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)""[[Prototype]]: Object
overrideMethod @ hook.js:608
componentDidCatch @ chunk-JBSYHZX3.js:2
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
",2496823578,"Hi there! I've analyzed your issue with Personal Access Token creation, and I think I can help resolve this.

The error you're experiencing appears to be related to known token handling issues that have been fixed in recent versions. Based on the error patterns and similar reported issues, here's what we need to do:

1. First, let's verify and upgrade your Trigger.dev version:
   - The token-related issues have been fixed in versions 3.1.1 and 3.2.1
   - Update your docker-compose configuration to use the latest v3 image:
   ```yaml
   image: ghcr.io/triggerdotdev/trigger.dev:latest-v3
   ```

2. Check your environment configuration:
   Make sure these environment variables are properly set:
   - SESSION_SECRET
   - ENCRYPTION_KEY
   - MAGIC_LINK_SECRET
   These are critical for token generation and authentication.

3. After upgrading, clean up your existing state:
   ```bash
   docker-compose down
   docker volume prune  # Be careful with this if you have other important volumes
   docker-compose up -d
   ```

4. When creating new tokens, ensure you're using the correct scope format:
   ```typescript
   const publicToken = await auth.createPublicToken({
     scopes: {
       read: {
         runs: true
       }
     }
   });
   ```

If you're still experiencing issues after implementing these changes, please provide:
- Your current Trigger.dev version
- The specific CLI error message
- Any error messages in the server logs

References:
- Issue #1477: Token permission fixes in v3.2.1
- Issue #1443: Token access improvements in v3.1.1

Important Notes:
- Backup your data before performing any upgrades
- Existing tokens may need to be regenerated after the upgrade
- Monitor the logs during the upgrade process for any migration errors

Let me know if you need any clarification or run into any issues during the upgrade process!"
2646926666,1465,bug: Creating Personal Access Tokens on selfhosted site creates undefined error,"### Provide environment information

  System:
    OS: Linux 6.8 Debian GNU/Linux 11 (bullseye) 11 (bullseye)
    CPU: (4) x64 Intel(R) N100
    Memory: 11.64 GB / 15.37 GB
    Container: Yes
    Shell: 5.1.4 - /bin/bash
  Binaries:
    Node: 20.11.1 - /usr/local/bin/node
    npm: 10.2.4 - /usr/local/bin/npm
    pnpm: 8.15.5 - /usr/local/bin/pnpm

### Describe the bug

After creating a Personal Access Tokens and adding the name (any string) I then trigger the following error: 
<img width=""359"" alt=""image"" src=""https://github.com/user-attachments/assets/5a69cb77-6a0e-4c4a-95e9-55b0130365cf"">


### Reproduction repo

not applicable 

### To reproduce

1. I am running this on a coolify project using the following docker compose: 
```
# documentation: https://trigger.dev
# slogan: The open source Background Jobs framework for TypeScript
# tags: trigger.dev, background jobs, typescript, trigger, jobs, cron, scheduler
# logo: svgs/trigger.png
# port: 3000
x-common-env: &common-env
  PORT: 3030
  REMIX_APP_PORT: 3000
  NODE_ENV: production
  RUNTIME_PLATFORM: docker-compose
  V3_ENABLED: true
  INTERNAL_OTEL_TRACE_DISABLED: 1
  INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
  POSTGRES_USER: $SERVICE_USER_POSTGRES
  POSTGRES_PASSWORD: $SERVICE_PASSWORD_POSTGRES
  POSTGRES_DB: ${POSTGRES_DB:-trigger}
  MAGIC_LINK_SECRET: $SERVICE_PASSWORD_64_MAGIC
  SESSION_SECRET: $SERVICE_PASSWORD_64_SESSION
  ENCRYPTION_KEY: $SERVICE_PASSWORD_64_ENCRYPTION
  PROVIDER_SECRET: $SERVICE_PASSWORD_64_PROVIDER
  COORDINATOR_SECRET: $SERVICE_PASSWORD_64_COORDINATOR
  DATABASE_HOST: postgresql:5432
  DATABASE_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  DIRECT_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_TLS_DISABLED: true
  COORDINATOR_HOST: 127.0.0.1
  COORDINATOR_PORT: 9020
  WHITELISTED_EMAILS: """"
  ADMIN_EMAILS: """"
  DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: 300
  DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: 100
  DEPLOY_REGISTRY_HOST: docker.io
  DEPLOY_REGISTRY_NAMESPACE: trigger
  REGISTRY_HOST: ${DEPLOY_REGISTRY_HOST}
  REGISTRY_NAMESPACE: ${DEPLOY_REGISTRY_NAMESPACE}
  AUTH_GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID}
  AUTH_GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET}
  RESEND_API_KEY: ${RESEND_API_KEY}
  FROM_EMAIL: ${FROM_EMAIL}
  REPLY_TO_EMAIL: ${REPLY_TO_EMAIL}
  LOGIN_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  APP_ORIGIN: $SERVICE_FQDN_TRIGGER_3000
  DEV_OTEL_EXPORTER_OTLP_ENDPOINT: $SERVICE_FQDN_TRIGGER_3000/otel
  OTEL_EXPORTER_OTLP_ENDPOINT: ""http://trigger:3040/otel""
  ELECTRIC_ORIGIN: http://electric:3000
services:
  trigger:
    image: ghcr.io/triggerdotdev/trigger.dev:v3
    environment:
      SERVICE_FQDN_TRIGGER_3000: """"
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      electric:
        condition: service_healthy
    healthcheck:
      test: ""timeout 10s bash -c ':> /dev/tcp/127.0.0.1/3000' || exit 1""
      interval: 10s
      timeout: 5s
      retries: 5
  electric:
    image: electricsql/electric
    environment:
      <<: *common-env
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  redis:
    image: ""redis:7""
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test:
        - CMD-SHELL
        - ""redis-cli -h localhost -p 6379 ping""
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data
  postgresql:
    image: postgres:16-alpine
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      <<: *common-env
    command:
      - -c
      - wal_level=logical
    healthcheck:
      test: [""CMD-SHELL"", ""pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}""]
      interval: 5s
      timeout: 20s
      retries: 10
  docker-provider:
    image: ghcr.io/triggerdotdev/provider/docker:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $PROVIDER_SECRET
  coordinator:
    image: ghcr.io/triggerdotdev/coordinator:v3
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    depends_on:
      trigger:
        condition: service_healthy
    environment:
      <<: *common-env
      PLATFORM_HOST: trigger
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: ""false""
      PLATFORM_SECRET: $COORDINATOR_SECRET
    healthcheck:
      test:
        - CMD-SHELL
        - pwd
  ```
2. Create a new access token
3. Error will then trigger

### Additional information

Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
tokens:24 
        
        
       GET https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015 net::ERR_BLOCKED_BY_CLIENT
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
chunk-LYHQCUWL.js:8 TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459)
overrideMethod @ hook.js:608
xi @ chunk-LYHQCUWL.js:8
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
chunk-JBSYHZX3.js:2 React Router caught the following error during render TypeError: Cannot read properties of undefined (reading 'split')
    at L (chunk-4QLYPARN.js:1:2114)
    at chunk-GVVQJ7TX.js:1:1694
    at Object.pa [as useMemo] (chunk-LYHQCUWL.js:6:23795)
    at r.useMemo (chunk-FTYKMG53.js:1:6137)
    at oe (chunk-GVVQJ7TX.js:1:1644)
    at re (account.tokens-CBMHX44X.js:1:4940)
    at du (chunk-LYHQCUWL.js:6:19466)
    at _i (chunk-LYHQCUWL.js:8:3133)
    at Ba (chunk-LYHQCUWL.js:8:44432)
    at Ua (chunk-LYHQCUWL.js:8:39459) {componentStack: '\n    at re (https://trigger.claasen.cc/build/route…claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)'}componentStack: ""\n    at re (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:4909)\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:4583\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-Y6JHH73C.js:1:384\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:3527\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2339\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:2087\n    at div\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3130\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:2725\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:3847\n    at https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7410\n    at Ce (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:7705)\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at se (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:1327)\n    at ee (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:4672)\n    at https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:5173\n    at u (https://trigger.claasen.cc/build/_shared/chunk-HLDNCM5C.js:1:996)\n    at ne (https://trigger.claasen.cc/build/_shared/chunk-XJK4FH5I.js:1:601)\n    at div\n    at j (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1895)\n    at div\n    at div\n    at div\n    at G (https://trigger.claasen.cc/build/_shared/chunk-WZVPZJ3P.js:1:1047)\n    at div\n    at fo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3658)\n    at X (https://trigger.claasen.cc/build/routes/account.tokens-CBMHX44X.js:1:3588)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at div\n    at yt (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3548)\n    at div\n    at div\n    at vo (https://trigger.claasen.cc/build/_shared/chunk-ALXCXKJV.js:1:3424)\n    at L\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at _n (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21220)\n    at body\n    at html\n    at rs (https://trigger.claasen.cc/build/root-JWRAFXBJ.js:14:109345)\n    at So (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:18639)\n    at dr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:22722)\n    at Qo (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:30169)\n    at gr (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:21257)\n    at Mn (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:2:28244)\n    at $t (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:14:2378)\n    at Ui (https://trigger.claasen.cc/build/_shared/chunk-JBSYHZX3.js:24:2690)\n    at x (https://trigger.claasen.cc/build/_shared/chunk-XEZL6SGQ.js:1:185)\n    at y (https://trigger.claasen.cc/build/_shared/chunk-DGKAL6G7.js:1:186)""[[Prototype]]: Object
overrideMethod @ hook.js:608
componentDidCatch @ chunk-JBSYHZX3.js:2
i.componentDidCatch.t.callback @ chunk-LYHQCUWL.js:8
Co @ chunk-LYHQCUWL.js:6
Ao @ chunk-LYHQCUWL.js:8
Ra @ chunk-LYHQCUWL.js:8
If @ chunk-LYHQCUWL.js:8
Bf @ chunk-LYHQCUWL.js:8
hn @ chunk-LYHQCUWL.js:8
Fa @ chunk-LYHQCUWL.js:8
Sl @ chunk-LYHQCUWL.js:1
hl @ chunk-LYHQCUWL.js:1
Show 1 more frame
Show less
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
root-JWRAFXBJ.js:9 
        
        
       POST https://trigger.claasen.cc/account/tokens?_data=routes%2Faccount.tokens 400 (Bad Request)
window._fetchProxy @ root-JWRAFXBJ.js:9
window._highlightFetchPatch @ root-JWRAFXBJ.js:9
Fr @ chunk-JBSYHZX3.js:18
await in Fr
da @ chunk-JBSYHZX3.js:24
action @ chunk-JBSYHZX3.js:24
m @ chunk-JBSYHZX3.js:2
ot @ chunk-JBSYHZX3.js:2
wa @ chunk-JBSYHZX3.js:1
Ea @ chunk-JBSYHZX3.js:1
(anonymous) @ chunk-JBSYHZX3.js:2
w.createElement.ce.onSubmit @ chunk-JBSYHZX3.js:2
oc @ chunk-LYHQCUWL.js:5
ac @ chunk-LYHQCUWL.js:5
cc @ chunk-LYHQCUWL.js:5
po @ chunk-LYHQCUWL.js:5
As @ chunk-LYHQCUWL.js:5
(anonymous) @ chunk-LYHQCUWL.js:5
ku @ chunk-LYHQCUWL.js:8
cs @ chunk-LYHQCUWL.js:5
Fl @ chunk-LYHQCUWL.js:5
Xi @ chunk-LYHQCUWL.js:5
Nc @ chunk-LYHQCUWL.js:5
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-redemption'.
Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'private-state-token-issuance'.
Error with Permissions-Policy header: Unrecognized feature: 'browsing-topics'.
",2496833298,Thank you'll have a go at it.
2629782794,1454,Missing export tasks from `@trigger.dev/sdk/v3`,"This is happening because of our new [browser](https://github.com/triggerdotdev/trigger.dev/blob/58def055d0181e6aeaea5ea7b489e147acfa1fd6/packages/trigger-sdk/package.json#L86) export condition that doesn't export some things that aren't compatible with browsers, but apparently this is effecting edge runtimes (I'm guessing that bundle with the ""browser"" custom condition but have not confirmed this.

We should export more from the browser export, especially the `tasks` export, but currently it's not so simple because it will pull in stuff that isn't compatible (opentelemetry).",2452516273,A list of runtime keys: https://runtime-keys.proposal.wintercg.org/#workerd
2629782794,1454,Missing export tasks from `@trigger.dev/sdk/v3`,"This is happening because of our new [browser](https://github.com/triggerdotdev/trigger.dev/blob/58def055d0181e6aeaea5ea7b489e147acfa1fd6/packages/trigger-sdk/package.json#L86) export condition that doesn't export some things that aren't compatible with browsers, but apparently this is effecting edge runtimes (I'm guessing that bundle with the ""browser"" custom condition but have not confirmed this.

We should export more from the browser export, especially the `tasks` export, but currently it's not so simple because it will pull in stuff that isn't compatible (opentelemetry).",2452520946,"Yup, looks like Cloudflare workers will bundle with the ""browser"" condition:

https://github.com/cloudflare/workers-sdk/blob/3ee1353d317c0e137a14f3091b32eecd575cc7a4/packages/wrangler/src/deployment-bundle/bundle.ts#L56

If we added a ""workerd"" or ""worker"" condition that exports the same as the ""default"" export then this would probably fix the issue for CF workers. I'm guessing we could do a similar thing for Vercel Edge functions"
2628944092,1451,Realtime not returning runs when they are have large payloads or outputs,,2452610414,This will be fixed alongside the realtime streams release next week.
2628203191,1446,Issue on docs: useRealtime Batch does not exist.,"Path: /frontend/react-hooks 

I kept getting the following error when trying to import the function:

```The requested module '@trigger.dev/react-hooks' does not provide an export named 'useRealtimeBatch```. It's because the actual hook function in the library is defined as `useBatch` and not `useRealtimeBatch`.",2452628445,This has been fixed in 3.1.1
2627604909,1445,bug: webapp billing period description,"### Describe the bug

Minor bug on the billing period message that displays an invalid period range:

<img width=""1176"" alt=""image"" src=""https://github.com/user-attachments/assets/d58769ee-6168-49ab-9252-0dc2353ff896"">

Should be from Oct1 to Oct 31 (or Nov 1) but not Nov 30. Might be because today is the last day of the month?

Current locale: GMT-5

https://github.com/triggerdotdev/trigger.dev/blob/da08e5015f297d21619aa45190fafd0b0ca460dd/apps/webapp/app/routes/_app.orgs.%24organizationSlug.v3.billing/route.tsx#L44-L56",2457063863,Yes I'm sure you're correct on why this is happening. The UTC dates are correct but then we display using our `<DateTime>` React component which renders in your local browser timezone by default…
2627604909,1445,bug: webapp billing period description,"### Describe the bug

Minor bug on the billing period message that displays an invalid period range:

<img width=""1176"" alt=""image"" src=""https://github.com/user-attachments/assets/d58769ee-6168-49ab-9252-0dc2353ff896"">

Should be from Oct1 to Oct 31 (or Nov 1) but not Nov 30. Might be because today is the last day of the month?

Current locale: GMT-5

https://github.com/triggerdotdev/trigger.dev/blob/da08e5015f297d21619aa45190fafd0b0ca460dd/apps/webapp/app/routes/_app.orgs.%24organizationSlug.v3.billing/route.tsx#L44-L56",2457068272,"Actually ignore my last comment. That wouldn't explain why it's coming back as November 30… 😕  This is strange because the code you've included runs on our server which is UTC. 

The way to fix this is with the debugger on and setting your timezone"
2626883047,1443,Auto-generated public token returned from `batchTrigger` doesn't have read access to individual runs,"We should add specific permissions to read each run, instead of just the batch. For now you can workaround this by creating another token that has access to each run in the batch:

```ts
import { auth, tasks } from ""@trigger.dev/sdk/v3"";

const handle = await tasks.batchTrigger(""my-task"", [ /* stuff here */]);

const publicToken = await auth.createPublicToken({
  scopes: { read: { runs: handle.runs.map((r) => r.id) } }
})
```

",2452628682,This has been fixed in 3.1.1
2624859521,1440,bug: SDK typings broken on v3.1.0,"### Provide environment information

  System:
    OS: macOS 15.0.1
    CPU: (10) arm64 Apple M1 Max
    Memory: 415.19 MB / 64.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.0.0 - ~/.nvm/versions/node/v22.0.0/bin/node
    Yarn: 4.5.0 - ~/.nvm/versions/node/v22.0.0/bin/yarn
    npm: 10.5.1 - ~/.nvm/versions/node/v22.0.0/bin/npm
    bun: 1.1.29 - ~/.bun/bin/bun

### Describe the bug

Typings are broken on the 3.1.0 SDK release. Working on 3.0.13.

<img width=""762"" alt=""Screenshot 2024-10-30 at 12 42 07 PM"" src=""https://github.com/user-attachments/assets/9f72b947-0714-4944-8365-b014f3ab7330"">


### Reproduction repo

...

### To reproduce

Install 3.1.0. In case it matters, I've got `""type"": ""module"",` in my `package.json` file.

### Additional information

_No response_",2447932179,What's your tsconfig.json?
2624859521,1440,bug: SDK typings broken on v3.1.0,"### Provide environment information

  System:
    OS: macOS 15.0.1
    CPU: (10) arm64 Apple M1 Max
    Memory: 415.19 MB / 64.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.0.0 - ~/.nvm/versions/node/v22.0.0/bin/node
    Yarn: 4.5.0 - ~/.nvm/versions/node/v22.0.0/bin/yarn
    npm: 10.5.1 - ~/.nvm/versions/node/v22.0.0/bin/npm
    bun: 1.1.29 - ~/.bun/bin/bun

### Describe the bug

Typings are broken on the 3.1.0 SDK release. Working on 3.0.13.

<img width=""762"" alt=""Screenshot 2024-10-30 at 12 42 07 PM"" src=""https://github.com/user-attachments/assets/9f72b947-0714-4944-8365-b014f3ab7330"">


### Reproduction repo

...

### To reproduce

Install 3.1.0. In case it matters, I've got `""type"": ""module"",` in my `package.json` file.

### Additional information

_No response_",2448685936,"🤦‍♂️  we've got `""customConditions"": [""workerd"", ""worker"", ""browser""]` in there because historically we've mostly working in cloudflare environments. That was the issue - feel free to close. Thanks!"
2624859521,1440,bug: SDK typings broken on v3.1.0,"### Provide environment information

  System:
    OS: macOS 15.0.1
    CPU: (10) arm64 Apple M1 Max
    Memory: 415.19 MB / 64.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.0.0 - ~/.nvm/versions/node/v22.0.0/bin/node
    Yarn: 4.5.0 - ~/.nvm/versions/node/v22.0.0/bin/yarn
    npm: 10.5.1 - ~/.nvm/versions/node/v22.0.0/bin/npm
    bun: 1.1.29 - ~/.bun/bin/bun

### Describe the bug

Typings are broken on the 3.1.0 SDK release. Working on 3.0.13.

<img width=""762"" alt=""Screenshot 2024-10-30 at 12 42 07 PM"" src=""https://github.com/user-attachments/assets/9f72b947-0714-4944-8365-b014f3ab7330"">


### Reproduction repo

...

### To reproduce

Install 3.1.0. In case it matters, I've got `""type"": ""module"",` in my `package.json` file.

### Additional information

_No response_",2452628859,This has been fixed in 3.1.1
2609424632,1431,"[TRI-3840] Logging infinitely recursive javascript objects crashes, inside flattenAttributes.","## Problem

If you try and log an object that has a circular reference, our `flattenAttributes` code will exceed the stack depth and fail. 

Example: a user that has blog posts that have an author (that points back at the user).

This is a major issue with MongoDB which returns JS objects like this.

## Solution
Detect circular objects and don't add them to the log output, put a placeholder string instead.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-3840](https://linear.app/triggerdotdev/issue/TRI-3840/logging-infinitely-recursive-javascript-objects-crashes-inside)</sub>",2434393941,hey @matt-aitken solve this issue please checkout this PR #1433 
2602560351,1422,"bug: TaskIndexingImportError: Could not load the ""sharp"" module using the linux-x64 runtime","### Provide environment information

  System:
    OS: Linux 6.6 Debian GNU/Linux 12 (bookworm) 12 (bookworm)
    CPU: (8) x64 unknown
    Memory: 5.85 GB / 7.66 GB
    Container: Yes
    Shell: 5.2.15 - /bin/bash
  Binaries:
    Node: 20.17.0 - /usr/local/bin/node
    Yarn: 1.22.22 - /usr/local/bin/yarn
    npm: 10.8.2 - /usr/local/bin/npm

### Describe the bug

Can't get the `sharp` module to work no matter what I do.

```
│         x Could not load the ""sharp"" module using the linux-x64 runtime
│         Possible solutions:
│         - Ensure optional dependencies can be installed:
│             npm install --include=optional sharp
│         - Ensure your package manager supports multi-platform installation:
│             See https://sharp.pixelplumbing.com/install#cross-platform
│         - Add platform-specific dependencies:
│             npm install --os=linux --cpu=x64 sharp
│         - Consult the installation documentation:
│             See https://sharp.pixelplumbing.com/install in src/blog/process_img.ts
```

It is possible that this is somewhat a red herring, as just adding the sharp module by itself to package.json (but not using it) did deploy correctly, however, with the full file it doesn't work.

I've tried all of the install suggestions, I've tried running from within docker (using `node:20`) in addition to my host (macos, m3). Spent over a day fighting with this.

### Reproduction repo

https://github.com/logimix-v/bug-trigger.dev-sharp

### To reproduce

Check out the above repo and run
```
npm i
cd pkgs/trigger
npx trigger.dev@3.0.13 deploy
```
(may need to change project ref)

### Additional information

I've also gotten TLS errors with `--log-level debug`, I'm not sure if they're related. I've tried lots of combinations of states, so this may be due to something else I changed trying to get this to work.

```
◓  Deploying version 20241021.17#1 [depot] launching amd64 machine
| 
◐  Deploying version 20241021.17#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| 
| #2 [depot] launching amd64 machine
| 
◑  Deploying version 20241021.17#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| ------
|  > [depot] launching amd64 machine:
| ------
| ------
|  > [depot] launching amd64 machine:
| ------
| 
◒  Deploying version 20241021.17.2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Build result {
|   ok: false,
|   error: 'Error building image',
|   logs: '#1 [depot] launching amd64 machine\n' +
|     '#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '#2 [depot] launching amd64 machine\n' +
|     '#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     'Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority'
| }
◇  Failed to deploy project
```

The trigger.dev project seems really cool and I'd love to use it! Appreciate any assistance with this.",2429066769,"I was able to make some progress here by promoting all of the dependencies used by my trigger.dev library to top-level workspace dependencies (which didn't seem to be enough) and then also list `sharp` in `additionalPackages: [""sharp""]`, as follows:
```ts
import { defineConfig } from ""@trigger.dev/sdk/v3"";

export default defineConfig({
  project: ""..."",
  runtime: ""node"",
  logLevel: ""log"",
  // Set the maxDuration to 300 seconds for all tasks. See https://trigger.dev/docs/runs/max-duration
  // maxDuration: 300, 
  retries: {
    enabledInDev: false,
    default: {
      maxAttempts: 3,
      minTimeoutInMs: 1000,
      maxTimeoutInMs: 10000,
      factor: 2,
      randomize: true,
    },
  },
  dirs: [""pkgs""],
  // HOLY ... LIFESAVER
  additionalPackages: [""sharp""]
});
```

I do get deprecation warnings but they just say to use the same field so I'm not sure if it is really an issue.

I still can't tell what the actual issue was or if this is the correct solution. It kind of seems like trigger doesn't work when run as a subpackage in a monorepo, but the docs seem to suggest that is an intended use case."
2602560351,1422,"bug: TaskIndexingImportError: Could not load the ""sharp"" module using the linux-x64 runtime","### Provide environment information

  System:
    OS: Linux 6.6 Debian GNU/Linux 12 (bookworm) 12 (bookworm)
    CPU: (8) x64 unknown
    Memory: 5.85 GB / 7.66 GB
    Container: Yes
    Shell: 5.2.15 - /bin/bash
  Binaries:
    Node: 20.17.0 - /usr/local/bin/node
    Yarn: 1.22.22 - /usr/local/bin/yarn
    npm: 10.8.2 - /usr/local/bin/npm

### Describe the bug

Can't get the `sharp` module to work no matter what I do.

```
│         x Could not load the ""sharp"" module using the linux-x64 runtime
│         Possible solutions:
│         - Ensure optional dependencies can be installed:
│             npm install --include=optional sharp
│         - Ensure your package manager supports multi-platform installation:
│             See https://sharp.pixelplumbing.com/install#cross-platform
│         - Add platform-specific dependencies:
│             npm install --os=linux --cpu=x64 sharp
│         - Consult the installation documentation:
│             See https://sharp.pixelplumbing.com/install in src/blog/process_img.ts
```

It is possible that this is somewhat a red herring, as just adding the sharp module by itself to package.json (but not using it) did deploy correctly, however, with the full file it doesn't work.

I've tried all of the install suggestions, I've tried running from within docker (using `node:20`) in addition to my host (macos, m3). Spent over a day fighting with this.

### Reproduction repo

https://github.com/logimix-v/bug-trigger.dev-sharp

### To reproduce

Check out the above repo and run
```
npm i
cd pkgs/trigger
npx trigger.dev@3.0.13 deploy
```
(may need to change project ref)

### Additional information

I've also gotten TLS errors with `--log-level debug`, I'm not sure if they're related. I've tried lots of combinations of states, so this may be due to something else I changed trying to get this to work.

```
◓  Deploying version 20241021.17#1 [depot] launching amd64 machine
| 
◐  Deploying version 20241021.17#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| 
| #2 [depot] launching amd64 machine
| 
◑  Deploying version 20241021.17#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| ------
|  > [depot] launching amd64 machine:
| ------
| ------
|  > [depot] launching amd64 machine:
| ------
| 
◒  Deploying version 20241021.17.2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Build result {
|   ok: false,
|   error: 'Error building image',
|   logs: '#1 [depot] launching amd64 machine\n' +
|     '#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '#2 [depot] launching amd64 machine\n' +
|     '#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     'Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority'
| }
◇  Failed to deploy project
```

The trigger.dev project seems really cool and I'd love to use it! Appreciate any assistance with this.",2434323719,"I get the exact same problem, thanks for the solution!

@logimix-v  I think this is what the err means, moving the setting to extensions:

```
  build: {
    extensions: [
      additionalPackages({ packages: [""sharp""] })
    ]
  },
```"
2602560351,1422,"bug: TaskIndexingImportError: Could not load the ""sharp"" module using the linux-x64 runtime","### Provide environment information

  System:
    OS: Linux 6.6 Debian GNU/Linux 12 (bookworm) 12 (bookworm)
    CPU: (8) x64 unknown
    Memory: 5.85 GB / 7.66 GB
    Container: Yes
    Shell: 5.2.15 - /bin/bash
  Binaries:
    Node: 20.17.0 - /usr/local/bin/node
    Yarn: 1.22.22 - /usr/local/bin/yarn
    npm: 10.8.2 - /usr/local/bin/npm

### Describe the bug

Can't get the `sharp` module to work no matter what I do.

```
│         x Could not load the ""sharp"" module using the linux-x64 runtime
│         Possible solutions:
│         - Ensure optional dependencies can be installed:
│             npm install --include=optional sharp
│         - Ensure your package manager supports multi-platform installation:
│             See https://sharp.pixelplumbing.com/install#cross-platform
│         - Add platform-specific dependencies:
│             npm install --os=linux --cpu=x64 sharp
│         - Consult the installation documentation:
│             See https://sharp.pixelplumbing.com/install in src/blog/process_img.ts
```

It is possible that this is somewhat a red herring, as just adding the sharp module by itself to package.json (but not using it) did deploy correctly, however, with the full file it doesn't work.

I've tried all of the install suggestions, I've tried running from within docker (using `node:20`) in addition to my host (macos, m3). Spent over a day fighting with this.

### Reproduction repo

https://github.com/logimix-v/bug-trigger.dev-sharp

### To reproduce

Check out the above repo and run
```
npm i
cd pkgs/trigger
npx trigger.dev@3.0.13 deploy
```
(may need to change project ref)

### Additional information

I've also gotten TLS errors with `--log-level debug`, I'm not sure if they're related. I've tried lots of combinations of states, so this may be due to something else I changed trying to get this to work.

```
◓  Deploying version 20241021.17#1 [depot] launching amd64 machine
| 
◐  Deploying version 20241021.17#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| 
| #2 [depot] launching amd64 machine
| 
◑  Deploying version 20241021.17#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| ------
|  > [depot] launching amd64 machine:
| ------
| ------
|  > [depot] launching amd64 machine:
| ------
| 
◒  Deploying version 20241021.17.2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Build result {
|   ok: false,
|   error: 'Error building image',
|   logs: '#1 [depot] launching amd64 machine\n' +
|     '#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '#2 [depot] launching amd64 machine\n' +
|     '#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     'Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority'
| }
◇  Failed to deploy project
```

The trigger.dev project seems really cool and I'd love to use it! Appreciate any assistance with this.",2437120997,"According to the document [here](https://trigger.dev/docs/config/config-file#external:~:text=Any%20packages%20that%20install%20or%20build%20a%20native%20binary%20should%20be%20added%20to%20external%2C%20as%20native%20binaries%20cannot%20be%20bundled.%20For%20example%2C%20re2%2C%20sharp%2C%20and%20sqlite3%20should%20be%20added%20to%20external.), the `sharp` package should be added as `external`."
2602560351,1422,"bug: TaskIndexingImportError: Could not load the ""sharp"" module using the linux-x64 runtime","### Provide environment information

  System:
    OS: Linux 6.6 Debian GNU/Linux 12 (bookworm) 12 (bookworm)
    CPU: (8) x64 unknown
    Memory: 5.85 GB / 7.66 GB
    Container: Yes
    Shell: 5.2.15 - /bin/bash
  Binaries:
    Node: 20.17.0 - /usr/local/bin/node
    Yarn: 1.22.22 - /usr/local/bin/yarn
    npm: 10.8.2 - /usr/local/bin/npm

### Describe the bug

Can't get the `sharp` module to work no matter what I do.

```
│         x Could not load the ""sharp"" module using the linux-x64 runtime
│         Possible solutions:
│         - Ensure optional dependencies can be installed:
│             npm install --include=optional sharp
│         - Ensure your package manager supports multi-platform installation:
│             See https://sharp.pixelplumbing.com/install#cross-platform
│         - Add platform-specific dependencies:
│             npm install --os=linux --cpu=x64 sharp
│         - Consult the installation documentation:
│             See https://sharp.pixelplumbing.com/install in src/blog/process_img.ts
```

It is possible that this is somewhat a red herring, as just adding the sharp module by itself to package.json (but not using it) did deploy correctly, however, with the full file it doesn't work.

I've tried all of the install suggestions, I've tried running from within docker (using `node:20`) in addition to my host (macos, m3). Spent over a day fighting with this.

### Reproduction repo

https://github.com/logimix-v/bug-trigger.dev-sharp

### To reproduce

Check out the above repo and run
```
npm i
cd pkgs/trigger
npx trigger.dev@3.0.13 deploy
```
(may need to change project ref)

### Additional information

I've also gotten TLS errors with `--log-level debug`, I'm not sure if they're related. I've tried lots of combinations of states, so this may be due to something else I changed trying to get this to work.

```
◓  Deploying version 20241021.17#1 [depot] launching amd64 machine
| 
◐  Deploying version 20241021.17#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| 
| #2 [depot] launching amd64 machine
| 
◑  Deploying version 20241021.17#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| ------
|  > [depot] launching amd64 machine:
| ------
| ------
|  > [depot] launching amd64 machine:
| ------
| 
◒  Deploying version 20241021.17.2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Build result {
|   ok: false,
|   error: 'Error building image',
|   logs: '#1 [depot] launching amd64 machine\n' +
|     '#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '#2 [depot] launching amd64 machine\n' +
|     '#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     'Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority'
| }
◇  Failed to deploy project
```

The trigger.dev project seems really cool and I'd love to use it! Appreciate any assistance with this.",2437273228,"We also have a Sharp example that recommends [marking it as external](https://trigger.dev/docs/guides/examples/sharp-image-processing#adding-the-build-configuration). This is required so the `sharp` package can install the (correct) binary. There are a few tricky packages like this which can't be bundled. Marking them as external is generally the solution.

@logimix-v Are you still getting the TLS cert deploy issue?"
2602560351,1422,"bug: TaskIndexingImportError: Could not load the ""sharp"" module using the linux-x64 runtime","### Provide environment information

  System:
    OS: Linux 6.6 Debian GNU/Linux 12 (bookworm) 12 (bookworm)
    CPU: (8) x64 unknown
    Memory: 5.85 GB / 7.66 GB
    Container: Yes
    Shell: 5.2.15 - /bin/bash
  Binaries:
    Node: 20.17.0 - /usr/local/bin/node
    Yarn: 1.22.22 - /usr/local/bin/yarn
    npm: 10.8.2 - /usr/local/bin/npm

### Describe the bug

Can't get the `sharp` module to work no matter what I do.

```
│         x Could not load the ""sharp"" module using the linux-x64 runtime
│         Possible solutions:
│         - Ensure optional dependencies can be installed:
│             npm install --include=optional sharp
│         - Ensure your package manager supports multi-platform installation:
│             See https://sharp.pixelplumbing.com/install#cross-platform
│         - Add platform-specific dependencies:
│             npm install --os=linux --cpu=x64 sharp
│         - Consult the installation documentation:
│             See https://sharp.pixelplumbing.com/install in src/blog/process_img.ts
```

It is possible that this is somewhat a red herring, as just adding the sharp module by itself to package.json (but not using it) did deploy correctly, however, with the full file it doesn't work.

I've tried all of the install suggestions, I've tried running from within docker (using `node:20`) in addition to my host (macos, m3). Spent over a day fighting with this.

### Reproduction repo

https://github.com/logimix-v/bug-trigger.dev-sharp

### To reproduce

Check out the above repo and run
```
npm i
cd pkgs/trigger
npx trigger.dev@3.0.13 deploy
```
(may need to change project ref)

### Additional information

I've also gotten TLS errors with `--log-level debug`, I'm not sure if they're related. I've tried lots of combinations of states, so this may be due to something else I changed trying to get this to work.

```
◓  Deploying version 20241021.17#1 [depot] launching amd64 machine
| 
◐  Deploying version 20241021.17#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| 
| #2 [depot] launching amd64 machine
| 
◑  Deploying version 20241021.17#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| ------
|  > [depot] launching amd64 machine:
| ------
| ------
|  > [depot] launching amd64 machine:
| ------
| 
◒  Deploying version 20241021.17.2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Build result {
|   ok: false,
|   error: 'Error building image',
|   logs: '#1 [depot] launching amd64 machine\n' +
|     '#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '#2 [depot] launching amd64 machine\n' +
|     '#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     'Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority'
| }
◇  Failed to deploy project
```

The trigger.dev project seems really cool and I'd love to use it! Appreciate any assistance with this.",2439586830,"@yingzhox Ah, thanks! That makes sense.

@JohnCido Thanks for the link, I swear I read through all of the docs but missed the help tip.

@nicktrn Haven't touched this since I got it working a few days ago, so can't comment. The TLS cert issue was harder to reproduce in the first place, but I got it a handful of times when I was first trying. Let's say I haven't seen it anymore, and I'll make a new ticket for it if I run into it again. Thanks for following up.

Noted. So the conclusion is that marking it `external` is preferable over using `additionalPackages`? Can you comment on the difference between these two things? Also it seems like `external` uses `package.json` and not `package-lock.json` - is my understanding correct? What is the best way to get reproducible builds?"
2602560351,1422,"bug: TaskIndexingImportError: Could not load the ""sharp"" module using the linux-x64 runtime","### Provide environment information

  System:
    OS: Linux 6.6 Debian GNU/Linux 12 (bookworm) 12 (bookworm)
    CPU: (8) x64 unknown
    Memory: 5.85 GB / 7.66 GB
    Container: Yes
    Shell: 5.2.15 - /bin/bash
  Binaries:
    Node: 20.17.0 - /usr/local/bin/node
    Yarn: 1.22.22 - /usr/local/bin/yarn
    npm: 10.8.2 - /usr/local/bin/npm

### Describe the bug

Can't get the `sharp` module to work no matter what I do.

```
│         x Could not load the ""sharp"" module using the linux-x64 runtime
│         Possible solutions:
│         - Ensure optional dependencies can be installed:
│             npm install --include=optional sharp
│         - Ensure your package manager supports multi-platform installation:
│             See https://sharp.pixelplumbing.com/install#cross-platform
│         - Add platform-specific dependencies:
│             npm install --os=linux --cpu=x64 sharp
│         - Consult the installation documentation:
│             See https://sharp.pixelplumbing.com/install in src/blog/process_img.ts
```

It is possible that this is somewhat a red herring, as just adding the sharp module by itself to package.json (but not using it) did deploy correctly, however, with the full file it doesn't work.

I've tried all of the install suggestions, I've tried running from within docker (using `node:20`) in addition to my host (macos, m3). Spent over a day fighting with this.

### Reproduction repo

https://github.com/logimix-v/bug-trigger.dev-sharp

### To reproduce

Check out the above repo and run
```
npm i
cd pkgs/trigger
npx trigger.dev@3.0.13 deploy
```
(may need to change project ref)

### Additional information

I've also gotten TLS errors with `--log-level debug`, I'm not sure if they're related. I've tried lots of combinations of states, so this may be due to something else I changed trying to get this to work.

```
◓  Deploying version 20241021.17#1 [depot] launching amd64 machine
| 
◐  Deploying version 20241021.17#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| 
| #2 [depot] launching amd64 machine
| 
◑  Deploying version 20241021.17#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| ------
|  > [depot] launching amd64 machine:
| ------
| ------
|  > [depot] launching amd64 machine:
| ------
| 
◒  Deploying version 20241021.17.2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority
| 
| Build result {
|   ok: false,
|   error: 'Error building image',
|   logs: '#1 [depot] launching amd64 machine\n' +
|     '#1 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '#2 [depot] launching amd64 machine\n' +
|     '#2 ERROR: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '------\n' +
|     '> [depot] launching amd64 machine:\n' +
|     '------\n' +
|     '2024/10/21 12:29:04 error releasing builder: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\n' +
|     'Error: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority'
| }
◇  Failed to deploy project
```

The trigger.dev project seems really cool and I'd love to use it! Appreciate any assistance with this.",2440001539,"Hey @logimix-v - I'll quote from our docs to answer this and provide a summary of the differences.

`additionalPackages`:
> This allows you to _include additional packages in the build that are not automatically included via imports_. This is useful if you want to install a package that includes a CLI tool that you want to invoke in your tasks via `exec`. We will try to automatically resolve the version of the package but **you can specify the version by using the `@` symbol**

`external`:
> When a package is _excluded from the bundle_, it will be added to a dynamically generated package.json file in the build directory. The version of the package **will be the same as the version found in your `node_modules` directory**.


In summary:
- `additionalPackages` is best used for external tools that you don't import but may use in scripts, e.g. wrangler. Due to this, you can also specify the version to use, unless you're happy with `latest`.
- `external` will only affect packages used via imports - we will exclude them from the bundle. This is useful if a package doesn't play well with bundling. Error messages like the one you received are good indicators here. We will use the correct version as per your package manager's _lockfile_ by checking the version found in `node_modules` after running install.
- In both cases we will add the package to the resulting `package.json` - the difference is where the version comes from.

For reproducible builds, marking packages as external will have no effect on versions used. The only important thing is to always use a specific version for additional packages, for example:

```ts
build: {
  extensions: [additionalPackages({ packages: [""wrangler@1.19.0""] })],
}
```"
2602454588,1421,Issue on docs (typo),"Path: /idempotency

idempotenceKeys should be idempotencyKeys

code block 3 and 5.",2443831477,"Hello @j-fdion 
I want to solve this problem."
2591540070,1414,[TRI-3871] The new alerts modal doesn't work if you have a Slack connection that is revoked/expired,"## Problem

If you try and add a new alert when you have already connected a Slack account that has been revoked/expired the page won't load and will error out. This means it's impossible to add new alerts (of any kind) until the relevant row from the `OrganizationIntegration` table has been removed.

## Reproduce

1. Add a new alert using Slack
![CleanShot 2024-10-16 at 11 59 13@2x](https://github.com/user-attachments/assets/504fd5c3-f3b2-48ac-8186-87f75404c83a)

2. After it is added, revoke access to your Slack. https://slack.com/intl/en-gb/help/articles/360003125231-Remove-apps-and-customised-integrations-from-your-workspace

3. Delete the original alert and try add a new one. You should see an error and be unable to do it.



<sub>[TRI-3871](https://linear.app/triggerdotdev/issue/TRI-3871/the-new-alerts-modal-doesnt-work-if-you-have-a-slack-connection-that)</sub>",,
2589198418,1411,[TRI-3867] Updating lots of environment variables at once fails with a transaction timeout,"When we bulk upsert environment variables we wrap the entire thing in a database transaction. If there are a lot of env vars (e.g. more than 100) then the transaction can timeout.

You can see in the current code that the transaction is wrapped around the for loop: https://github.com/triggerdotdev/trigger.dev/blob/feb4fcdac675aa6c18fde4b0a96e87abc80102e2/apps/webapp/app/v3/environmentVariables/environmentVariablesRepository.server.ts#L138

Instead we should move that transaction inside the for loop. We still need the transaction so we always create all the resources for each env var and don't leave any of them dangling.

<sub>[TRI-3867](https://linear.app/triggerdotdev/issue/TRI-3867/updating-lots-of-environment-variables-at-once-fails-with-a)</sub>",2416058702,hey @matt-aitken working in this issue
2589198418,1411,[TRI-3867] Updating lots of environment variables at once fails with a transaction timeout,"When we bulk upsert environment variables we wrap the entire thing in a database transaction. If there are a lot of env vars (e.g. more than 100) then the transaction can timeout.

You can see in the current code that the transaction is wrapped around the for loop: https://github.com/triggerdotdev/trigger.dev/blob/feb4fcdac675aa6c18fde4b0a96e87abc80102e2/apps/webapp/app/v3/environmentVariables/environmentVariablesRepository.server.ts#L138

Instead we should move that transaction inside the for loop. We still need the transaction so we always create all the resources for each env var and don't leave any of them dangling.

<sub>[TRI-3867](https://linear.app/triggerdotdev/issue/TRI-3867/updating-lots-of-environment-variables-at-once-fails-with-a)</sub>",2416122724,@matt-aitken Checkout this #1413  
2585755890,1406,"bug: TypeError: (0 , import_react.cache) is not a function","### Provide environment information

  System:
    OS: Linux 5.15 Ubuntu 22.04.2 LTS 22.04.2 LTS (Jammy Jellyfish)
    CPU: (32) x64 AMD Ryzen 9 7950X 16-Core Processor
    Memory: 84.82 GB / 93.87 GB
    Container: Yes
    Shell: 5.1.16 - /bin/bash
  Binaries:
    Node: 21.2.0 - ~/.nvm/versions/node/v21.2.0/bin/node
    Yarn: 1.22.21 - ~/.nvm/versions/node/v21.2.0/bin/yarn
    npm: 10.2.3 - ~/.nvm/versions/node/v21.2.0/bin/npm
    pnpm: 8.10.5 - ~/.nvm/versions/node/v21.2.0/bin/pnpm
    Watchman: 2023.12.04.00 - /home/linuxbrew/.linuxbrew/bin/watchman

### Describe the bug

I'm new to Trigger.dev, while trying to define the following task

`import { task } from ""@trigger.dev/sdk/v3"";
import { callReplicate } from '@/app/actions/replicate';
import { supabaseAdmin } from ""@/lib/supabase/admin"";

export const processImageTask = task({
    id: ""process-image-task"",
    run: async (payload: { jobId: string }, { ctx }) => {
      // Fetch the job details from Supabase
      const { data: job, error: jobError } = await supabaseAdmin
        .from('jobs')
        .select('*')
        .eq('id', payload.jobId)
        .single();

      console.log(`trigger/process-image.ts job: ${JSON.stringify(job)}`);
  
      if (jobError || !job) {
        throw new Error('Job not found or failed to fetch job details.');
      }
  
      // Update job status to 'processing'
      await supabaseAdmin
        .from('jobs')
        .update({ status: 'processing' })
        .eq('id', payload.jobId);
  
      // Call the Replicate API to process the image
      const { data: result, error } = await callReplicate({
        type: ""image-text-extractor"",
        input: {
          image: job.image_url,
        },
      });   

      console.log(`trigger/process-image.ts result: ${JSON.stringify(result)}`);
  
      if (error) {
        throw new Error(`Image processing failed: ${error}`);
      }
  
      // Return the extracted text as the output of the task
      return { result };
    },
    onSuccess: async (payload, output, { ctx }) => {
      // Update job status to 'complete' and save the result
      await supabaseAdmin
        .from('jobs')
        .update({
          status: 'complete',
          result: JSON.stringify(output.result),
          updated_at: new Date().toISOString(),
        })
        .eq('id', payload.jobId);
    },
    onFailure: async (payload, error, { ctx }) => {
      // Update job status to 'failed'
      await supabaseAdmin
        .from('jobs')
        .update({
          status: 'failed',
          updated_at: new Date().toISOString(),
        })
        .eq('id', payload.jobId);
    },
  });`

I receive the following error

`■  Error: Could not import trigger/process-image.ts
│  
│         TypeError: (0 , import_react.cache) is not a function
│             at file:///home/user/project/lib/supabase/admin.ts:25:32
│             at ModuleJob.run (node:internal/modules/esm/module_job:218:25)
│             at ModuleLoader.import (node:internal/modules/esm/loader:329:24)
│             at tryImport (file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/indexing/registerTasks.ts:54:20)
│             at registerTasks (file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/indexing/registerTasks.ts:8:29)
│             at bootstrap (file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/entryPoints/dev-index-worker.ts:88:24)
│             at file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/entryPoints/dev-index-worker.ts:98:49`

In file:///home/user/project/lib/supabase/admin.ts, I have

`import {cache} from ""react"";`

Why is this happening?


### Reproduction repo

I don't know how to provide Stackblitz/CodeSandbox, but this should be(?) easy to advice on.

### To reproduce

Use ``import {cache} from ""react"";`` in task definition.

### Additional information

_No response_",2411208185,"Which version of react are you using? If you are on React 18.x, unfortunately I don't think there's anything that can be done as that `cache` import is only available to experimental or canary releases of React (see [here](https://react.dev/reference/react/cache)). If you are using Next.js you will be on one of those releases, which is why this works. One thing you could try is adding the `react-server` import condition in your `trigger.config.ts` file:

https://trigger.dev/docs/config/config-file#conditions"
2585755890,1406,"bug: TypeError: (0 , import_react.cache) is not a function","### Provide environment information

  System:
    OS: Linux 5.15 Ubuntu 22.04.2 LTS 22.04.2 LTS (Jammy Jellyfish)
    CPU: (32) x64 AMD Ryzen 9 7950X 16-Core Processor
    Memory: 84.82 GB / 93.87 GB
    Container: Yes
    Shell: 5.1.16 - /bin/bash
  Binaries:
    Node: 21.2.0 - ~/.nvm/versions/node/v21.2.0/bin/node
    Yarn: 1.22.21 - ~/.nvm/versions/node/v21.2.0/bin/yarn
    npm: 10.2.3 - ~/.nvm/versions/node/v21.2.0/bin/npm
    pnpm: 8.10.5 - ~/.nvm/versions/node/v21.2.0/bin/pnpm
    Watchman: 2023.12.04.00 - /home/linuxbrew/.linuxbrew/bin/watchman

### Describe the bug

I'm new to Trigger.dev, while trying to define the following task

`import { task } from ""@trigger.dev/sdk/v3"";
import { callReplicate } from '@/app/actions/replicate';
import { supabaseAdmin } from ""@/lib/supabase/admin"";

export const processImageTask = task({
    id: ""process-image-task"",
    run: async (payload: { jobId: string }, { ctx }) => {
      // Fetch the job details from Supabase
      const { data: job, error: jobError } = await supabaseAdmin
        .from('jobs')
        .select('*')
        .eq('id', payload.jobId)
        .single();

      console.log(`trigger/process-image.ts job: ${JSON.stringify(job)}`);
  
      if (jobError || !job) {
        throw new Error('Job not found or failed to fetch job details.');
      }
  
      // Update job status to 'processing'
      await supabaseAdmin
        .from('jobs')
        .update({ status: 'processing' })
        .eq('id', payload.jobId);
  
      // Call the Replicate API to process the image
      const { data: result, error } = await callReplicate({
        type: ""image-text-extractor"",
        input: {
          image: job.image_url,
        },
      });   

      console.log(`trigger/process-image.ts result: ${JSON.stringify(result)}`);
  
      if (error) {
        throw new Error(`Image processing failed: ${error}`);
      }
  
      // Return the extracted text as the output of the task
      return { result };
    },
    onSuccess: async (payload, output, { ctx }) => {
      // Update job status to 'complete' and save the result
      await supabaseAdmin
        .from('jobs')
        .update({
          status: 'complete',
          result: JSON.stringify(output.result),
          updated_at: new Date().toISOString(),
        })
        .eq('id', payload.jobId);
    },
    onFailure: async (payload, error, { ctx }) => {
      // Update job status to 'failed'
      await supabaseAdmin
        .from('jobs')
        .update({
          status: 'failed',
          updated_at: new Date().toISOString(),
        })
        .eq('id', payload.jobId);
    },
  });`

I receive the following error

`■  Error: Could not import trigger/process-image.ts
│  
│         TypeError: (0 , import_react.cache) is not a function
│             at file:///home/user/project/lib/supabase/admin.ts:25:32
│             at ModuleJob.run (node:internal/modules/esm/module_job:218:25)
│             at ModuleLoader.import (node:internal/modules/esm/loader:329:24)
│             at tryImport (file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/indexing/registerTasks.ts:54:20)
│             at registerTasks (file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/indexing/registerTasks.ts:8:29)
│             at bootstrap (file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/entryPoints/dev-index-worker.ts:88:24)
│             at file:///home/user/.pnpm-store/v3/tmp/dlx-36225/node_modules/.pnpm/trigger.dev@3.0.12/node_modules/trigger.dev/src/entryPoints/dev-index-worker.ts:98:49`

In file:///home/user/project/lib/supabase/admin.ts, I have

`import {cache} from ""react"";`

Why is this happening?


### Reproduction repo

I don't know how to provide Stackblitz/CodeSandbox, but this should be(?) easy to advice on.

### To reproduce

Use ``import {cache} from ""react"";`` in task definition.

### Additional information

_No response_",2496839950,"Hi there! I understand you're running into an issue with the React cache function in your Trigger.dev task. Let me help you resolve this.

The error you're seeing is because the React `cache` function is part of React's Server Components features, which requires specific configuration to work properly in different contexts. For your Trigger.dev task, there are two ways to resolve this:

1. If you need to use React server components features, add the following to your `trigger.config.ts` file:

```typescript
export default {
  // ... other config
  conditions: {
    // Add react-server condition to support React Server Components
    import: [""react-server""]
  }
}
```

2. Alternatively, if you don't specifically need React's server components features, I recommend removing the React cache usage and implementing a different caching solution. For example:

```typescript
// Instead of React's cache
let cachedClient: SupabaseClient | null = null;

export const supabaseAdmin = (() => {
  if (cachedClient) return cachedClient;
  
  cachedClient = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  );
  
  return cachedClient;
})();
```

This solution uses a simple module-level singleton pattern which achieves similar caching behavior without depending on React's experimental features.

The second approach is more reliable for Trigger.dev tasks since they run in a Node.js environment where React server components features aren't typically needed.

Let me know if you need any clarification or run into any other issues!

References:
- Similar issue resolved in [Trigger.dev GitHub issue #331](https://github.com/triggerdotdev/trigger.dev/issues/331)
- [Trigger.dev documentation on configuration](https://trigger.dev/docs/config/config-file#conditions)"
2579130622,1399,Issue on docs [ffmpeg#local-development],"Path:[ /guides/examples/ffmpeg-video-processing]

The local development guide does not include which packages to add for local development.

Based on this thread, it appears to be @ffmpeg-installer but just want to flag that this documentation needs to be completed

https://discord.com/channels/1066956501299777596/1286424272289402931/1286436915293458432


",2464649540,"@johnconnorquigley we've added a prerequisites at the top that you need to have ffmpeg installed on your local machine. https://trigger.dev/docs/guides/examples/ffmpeg-video-processing

It's actually not ffmpeg-installed, that was the hacky way to do it before we had build extensions."
2573242746,1390,Support deploying and using external private registry packages,"Currently we can support private registry NPM packages that are bundled, but we cannot support any that are external (and thus installed with `npm i` during the image build phase).

To support this we'll need to copy the `.npmrc` file before running `npm i`. It would be good if everything for this would be in a build extension that copies the local `.npmrc` file and adds an NPM_TOKEN build env var.",2408639158,please Checkout this PR #1405
2573242746,1390,Support deploying and using external private registry packages,"Currently we can support private registry NPM packages that are bundled, but we cannot support any that are external (and thus installed with `npm i` during the image build phase).

To support this we'll need to copy the `.npmrc` file before running `npm i`. It would be good if everything for this would be in a build extension that copies the local `.npmrc` file and adds an NPM_TOKEN build env var.",2408964390,hey @ericallam  can you please provide me more context about this issue 
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2453258879,"same here, Safari 18.1 (20619.2.8.11.10) / macOS 15.1 / trigger.dev docker 3.1.1"
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2453358086,"Are you both testing this on localhost? Webapp and worker on the same machine or split setup? Likely an env var issue as it worked fine when I just tried it with:
```
git clone https://github.com/triggerdotdev/docker trigger-docker
cd trigger-docker
./start.sh
# then login at http://localhost:3040/
```

I'd start fresh an see after which step it fails, my guess is it's one of these env vars:
```
# Only uncomment these once you've set up a domain and are trying to access the webapp through it
# On localhost, these should be commented out as below
# TRIGGER_PROTOCOL=https
# TRIGGER_DOMAIN=<your_subdomain>.ngrok-free.app
```

For a completely fresh start, you can nuke your DB, reset your .env and pull in any changes like so:
```
./stop.sh -v
rm .env
git pull
./start.sh
``` "
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2453844141,This doesn’t explain why it works on Chrome but not on Safari.
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2457044440,"Ah right, I didn't see that part! This sounds familiar - I think we had an issue with magic links on Safari before. #186 "
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2457226105,"I found TRIGGER_PROTOCOL env not working when I set WEBAPP_PUBLISH_IP=192.168.1.x. It still runs on local , but magic link always generate https link even set TRIGGER_PROTOCOL=http."
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2457478438,"I don't think that `WEBAPP_PUBLISH_IP` should change anything, but it's possible that `TRIGGER_PROTOCOL` is being ignored. Is this the full or split setup? Also, when changing any env vars, make sure to restart all services. `./stop.sh && ./start.sh` should do it."
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2461147042,@nicktrn I use the full setup to self-host Trigger.dev on a home server. I set WEBAPP_PUBLISH_IP=192.168.1.x to allow another client PC to access it via http://192.168.1.x:3040.
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2461709009,"> I found TRIGGER_PROTOCOL env not working when I set WEBAPP_PUBLISH_IP=192.168.1.x. It still runs on local , but magic link always generate https link even set TRIGGER_PROTOCOL=http.

Okay, I tracked this down to the external package we're using for magic link auth. It sets the protocol to ""https"" unless you're accessing the webapp via ""localhost"" or ""127.0.0.1"".

![image](https://github.com/user-attachments/assets/010923bc-6fc9-4e39-a93b-c5eaf11ec388)

I don't see us changing this because it's very niche.

You could solve both problems quite easily if you're only accessing the webapp locally and have no need to secure logins. Setting 
`NODE_ENV=development` in your .env will disable magic link auth and log you in automatically.

An alternative would be to access the webapp only via the external domain, even when accessing on your local network.
"
2568295446,1384,Localhost magic link redirect on Safari (MacOS),"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (8) arm64 Apple M2
    Memory: 77.13 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.2.0 - /opt/homebrew/bin/node
    Yarn: 1.22.19 - /opt/homebrew/bin/yarn
    npm: 10.7.0 - /opt/homebrew/bin/npm

### Describe the bug

In safari Browser on mac after you click on the magic link from the email the browser redirect you to the login page ]
```http://localhost:3040/login?redirectTo=%2F``` which show you the login page again.
This works without issues in chrome. I get redirected to ```http://localhost:3040/confirm-basic-details```

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

git clone https://github.com/triggerdotdev/docker
cd docker 
cp .env.example .env
follow the self hosting tutorial in the doc to set .env
..
./start.sh
go to http://localhost:3040/ in Safari (MacOs)
create account and check your email.
click on the magic link


### Additional information

_No response_",2461976166,@nicktrn Thank you for help!
2554215276,1369,bug: TRIGGER_SECRET_KEY is being set to undefined when using Vite,"### Provide environment information

```
  System:
    OS: macOS 14.6.1
    CPU: (8) arm64 Apple M1 Pro
    Memory: 184.53 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.9.0 - /opt/homebrew/bin/node
    Yarn: 1.22.22 - /opt/homebrew/bin/yarn
    npm: 10.8.3 - /opt/homebrew/bin/npm
    pnpm: 9.11.0 - /opt/homebrew/bin/pnpm
```

### Describe the bug

Somehow my TRIGGER_SECRET_KEY is not getting passed through when using Vite.

Running:
```import { TRIGGER_SECRET_KEY, TRIGGER_SECRET_KEYY, TRIGGER_API_URL } from '$env/static/private';```

I get `undefined, tr_dev_xyz, http://127.0.0.1:3040` which is strange. If I call the secret key `TRIGGER_SECRET_KEYY` instead of `TRIGGER_SECRET_KEY` it passes through no problem. I've grepped my codebase and I'm not doing anything with this environment variable anywhere. 

### Reproduction repo

n/a

### To reproduce

Using SvelteKit to trigger a task, and Vite to load up my `.env` file.

### Additional information

_No response_",2478231037,"A temporary work around is to use [dotenv](https://www.npmjs.com/package/dotenv)

```js
// hooks.server.ts

import 'dotenv/config'
```"
2554215276,1369,bug: TRIGGER_SECRET_KEY is being set to undefined when using Vite,"### Provide environment information

```
  System:
    OS: macOS 14.6.1
    CPU: (8) arm64 Apple M1 Pro
    Memory: 184.53 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 22.9.0 - /opt/homebrew/bin/node
    Yarn: 1.22.22 - /opt/homebrew/bin/yarn
    npm: 10.8.3 - /opt/homebrew/bin/npm
    pnpm: 9.11.0 - /opt/homebrew/bin/pnpm
```

### Describe the bug

Somehow my TRIGGER_SECRET_KEY is not getting passed through when using Vite.

Running:
```import { TRIGGER_SECRET_KEY, TRIGGER_SECRET_KEYY, TRIGGER_API_URL } from '$env/static/private';```

I get `undefined, tr_dev_xyz, http://127.0.0.1:3040` which is strange. If I call the secret key `TRIGGER_SECRET_KEYY` instead of `TRIGGER_SECRET_KEY` it passes through no problem. I've grepped my codebase and I'm not doing anything with this environment variable anywhere. 

### Reproduction repo

n/a

### To reproduce

Using SvelteKit to trigger a task, and Vite to load up my `.env` file.

### Additional information

_No response_",2481351822,"Do you have a reproduction available? @Woolworths I can take a look if so, as it's SvelteKit related"
2550451335,1363,investigate adding module-sync export condition,"https://github.com/nodejs/node/pull/54648

We'll also want to keep an eye on how we should handle this in our build process (e.g. we might need /want to add module-sync to our esbuild conditions).",,
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376519337,/bounty $100
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376519482,"## 💎 $100 bounty [• Trigger.dev (YC W23)](https://console.algora.io/org/triggerdotdev)

### Steps to solve:
1. **Start working**: Comment `/attempt #1362` with your implementation plan
2. **Submit work**: Create a pull request including `/claim #1362` in the PR body to claim the bounty
3. **Receive payment**: 100% of the bounty is received 2-5 days post-reward. [Make sure you are eligible for payouts](https://docs.algora.io/bounties/payments#supported-countries-regions)

Thank you for contributing to triggerdotdev/trigger.dev!

**[Add a bounty](https://console.algora.io/org/triggerdotdev/bounties/community?fund=triggerdotdev%2Ftrigger.dev%231362)** • **[Share on socials](https://twitter.com/intent/tweet?text=%24100+bounty%21+%F0%9F%92%8E+https%3A%2F%2Fgithub.com%2Ftriggerdotdev%2Ftrigger.dev%2Fissues%2F1362&related=algoraio)**"
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376527888,"/attempt #1362

<div id=""algora-attempt"" />

| [Algora profile](https://console.algora.io/@/varshith257) | Completed bounties | Tech | Active attempts | Options |
| --- | --- | --- | --- | --- |
| @varshith257 | 13 bounties from 7 projects | <div align=""center"">TypeScript, Go</div> | <div align=""center""></div> | [Cancel attempt](https://console.algora.io/api/bounties/cm1j4t0640012kx03tegpcjvp/cancel-attempt) |"
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376528000,@varshith257: The Trigger.dev (YC W23) team prefers to assign a single contributor to the issue rather than let anyone attempt it right away. We recommend waiting for a confirmation from a member before getting started.
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376530109,@ericallam I would like to a step on this . Can I get it assigned?
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376567860,"@varshith257 I can't remember how to assign things with Algora or if that's even possible, but here is a gif instead:

![bart-simpson-episode-20-gif](https://github.com/user-attachments/assets/d39c9702-704a-4e3c-97c4-e1c3ac862702)
"
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376689299,"@ericallam I would like to work on it, Can I get it assigned?"
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376703635,"I've been informed that GitHub has issue assignment built in, and gifs don't count. So I've assigned @varshith257 (and myself), to this issue. @Kritik-J thanks for the offer, but since @varshith257 came first I'll give them a crack at it 🫡"
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2376761659,@ericallam It's fine with gif too 😄
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2383518269,@varshith257 any updates?
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2383620851,@ericallam Will draft PR soon
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2411152626,/attempt #1362
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2411152714,@Wackyator: Another person is already attempting this issue. Please don't start working on this issue unless you were explicitly asked to do so.
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2419704994,/attempt #1362
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2419705106,@lostinvsc: Another person is already attempting this issue. Please don't start working on this issue unless you were explicitly asked to do so.
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2419705810,He is taking too much time
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2419709206,@Wackyator how are things going with this issue? Anything I can help with?
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2420019740,"@ericallam I've mentioned something in the discord thread that I require some help on, I've created a draft PR for the time being. "
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2422007510,💡 @Wackyator submitted a [pull request](https://github.com/triggerdotdev/trigger.dev/pull/1417) that claims the bounty. You can [visit your bounty board](https://console.algora.io/org/triggerdotdev/bounties) to reward.
2550130085,1362,doc need: creating a new reference project and deploying it locally,"We're missing a doc in the repo (ideally at `references/README.md`) that details how to:

- Create a new reference project by copying the `hello-world` reference project
- Get the dev CLI command running against a local instance of Trigger.dev (e.g. the webapp)
- Get the deploy CLI command running against a local instance of Trigger.dev by setting up and running the webapp alongside the coordinator and docker-provider:

```sh
pnpm run dev --filter webapp --filter coordinator --filter docker-provider
```

Then deploying it like so:

```sh
pnpm exec trigger deploy --self-hosted --load-image
```

This README should also make sure the CONTRIBUTING.md guidelines are enough to get the webapp running locally.

This new README should be sufficient for a new contributor to come in from scratch and create a new reference project and both run it in dev and deploy it.",2422683071,"🎉🎈 @Wackyator has been awarded **$100**! 🎈🎊

- [Share on socials](https://console.algora.io/awards/cm2ejruoe000ek303v09ni8zp)
- [Give feedback](https://console.algora.io/claims/cm2ejruoe000ek303v09ni8zp)"
2550106708,1361,Create a libreoffice build extension to allow docx/pptx to PDF conversion,"[Papermark](https://www.papermark.io/) is using Trigger.dev v3 but they have to resort to calling out to a separate service (gotenberg.dev) they are running on fly.io to do docx/pptx to PDF conversion (you can see the code [here](https://github.com/mfts/papermark/blob/ff90054a5ef94eb41a7a62374ebc954728afde47/lib/trigger/convert-files.ts#L86)).

It would be great if they could remove the gotenburg.dev call and do the conversion right there in their Trigger.dev task. For that, we will need a [Build extension](https://trigger.dev/docs/config/extensions/overview) that adds the libreoffice system packages and anything else that is necessary for the conversion (fonts, etc.), and then this package could be used: [libreoffice](https://www.npmjs.com/package/libreoffice-convert)

The extension should try to be as lightweight as possible (e.g. don't install X11). Is it possible to run LibreOffice in ""headless"" mode?

Whoever creates this extension should make sure and test it inside a new `references` project in the repo, and run against a local version of trigger.dev. You can copy the `hello-world` reference project to get something running quickly.",2416488838,"hi @ericallam , can i work on this. 
thanks

and, can i do this for installing libreoffice on the image?
```
apt-get install -y \
    libreoffice \
    --no-install-recommends
```
it's either that or:
```
apt-get install -y \
    libreoffice-writer \
    libreoffice-calc \
    libreoffice-impress \
    fonts-liberation \
    --no-install-recommends \
```

both of these work for pdf conversion but the latter might give out errors for some niche edge cases.

p.s.
libreoffice can indeed run in headless mode like thils:
`libreoffice --headless --convert-to pdf filename.docx`
but the libreoffice-convert library is doing the same underhood. ([reference](https://github.com/elwerene/libreoffice-convert/blob/master/index.js))

thanks again
"
2550084522,1360,bug: No links on Windows with the dev command,"### Provide environment information

  System:
    OS: Windows 11 10.0.22621
    CPU: (12) x64 12th Gen Intel(R) Core(TM) i7-1255U
    Memory: 8.78 GB / 31.62 GB
  Binaries:
    Node: 20.17.0 - ~\AppData\Local\pnpm\node.EXE
    npm: 10.8.2 - ~\AppData\Local\pnpm\npm.CMD
    pnpm: 9.9.0 - ~\AppData\Local\pnpm\pnpm.EXE
    bun: 1.1.3 - ~\.bun\bin\bun.EXE

### Describe the bug

The dev command (ie `pnpm dlx trigger.dev@latest dev`) outputs links to ""Test tasks"" and ""View runs"" with hyperlink behind them.
I'm on Windows with Powershell 7  (v7.4.5 to be exact) and there are no links or URLs visible.

Although Powershell does support clicking URLs, it probably does not support a link with text and url.

Fallback to display plain urls would be awesome.
Like Matt said:

https://discord.com/channels/1066956501299777596/1066956844553207828/1288797406711775273

### Reproduction repo

n/a

### To reproduce

Get a PC.
Run dev command in Powershell.

### Additional information

_No response_",,
2549826629,1358,Update the prisma extension to force binaryTarget of debian-openssl-3.0.x,"If you see this error:

```
PrismaClientInitializationError: 
Invalid `prisma.users.findUnique()` invocation:


Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".

This happened because Prisma Client was generated for ""debian-openssl-1.1.x"", but the actual deployment required ""debian-openssl-3.0.x"".
Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

The following locations have been searched:
  /app/node_modules/.prisma/client
  /
  ```
  
You can fix it yourself by adding `""native"", ""debian-openssl-3.0.x""` to your `binaryTargets` array, like it says in the error above. Prisma allows generating many targets so this shouldn't impact your existing app that uses Prisma, it just means that Trigger.dev can also work.

## Prisma extension

We need to investigate whether we can solve this automatically without requiring any changes to the prisma schema file, by adding some code to our prisma extension somehow.
",2387263342,"Also seeing this on 3.0.9. Worked fine on 56 beta:

```
◇  Failed to deploy project
│
■  Error: PrismaClientInitializationError
│  
│         PrismaClientInitializationError: Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".
│         
│         This happened because Prisma Client was generated for ""darwin-arm64"", but the actual deployment required ""debian-openssl-3.0.x"".
│         Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:
│         
│         generator client {
│           provider      = ""prisma-client-js""
│           binaryTargets = [""native"", ""debian-openssl-3.0.x""]
│         }
```"
2549826629,1358,Update the prisma extension to force binaryTarget of debian-openssl-3.0.x,"If you see this error:

```
PrismaClientInitializationError: 
Invalid `prisma.users.findUnique()` invocation:


Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".

This happened because Prisma Client was generated for ""debian-openssl-1.1.x"", but the actual deployment required ""debian-openssl-3.0.x"".
Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

The following locations have been searched:
  /app/node_modules/.prisma/client
  /
  ```
  
You can fix it yourself by adding `""native"", ""debian-openssl-3.0.x""` to your `binaryTargets` array, like it says in the error above. Prisma allows generating many targets so this shouldn't impact your existing app that uses Prisma, it just means that Trigger.dev can also work.

## Prisma extension

We need to investigate whether we can solve this automatically without requiring any changes to the prisma schema file, by adding some code to our prisma extension somehow.
",2387266478,"Adding `binaryTargets = [""native"", ""debian-openssl-3.0.x""]` and running `prisma generate` results in this error:

```
Error: PrismaClientInitializationError
│  
│         PrismaClientInitializationError: Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".
│         
│         This is likely caused by a bundler that has not copied ""libquery_engine-debian-openssl-3.0.x.so.node"" next to the resulting bundle.
│         Ensure that ""libquery_engine-debian-openssl-3.0.x.so.node"" has been copied next to the bundle or in ""../node_modules/.pnpm/@prisma+client@5.20.0_prisma@5.20.0/node_modules/.prisma/client"".
│         
│         We would appreciate if you could take the time to share some information with us.
│         Please help us by answering a few questions: https://pris.ly/engine-not-found-bundler-investigation
│         
│         The following locations have been searched:
```

Reverting my Trigger package update for now."
2549826629,1358,Update the prisma extension to force binaryTarget of debian-openssl-3.0.x,"If you see this error:

```
PrismaClientInitializationError: 
Invalid `prisma.users.findUnique()` invocation:


Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".

This happened because Prisma Client was generated for ""debian-openssl-1.1.x"", but the actual deployment required ""debian-openssl-3.0.x"".
Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

The following locations have been searched:
  /app/node_modules/.prisma/client
  /
  ```
  
You can fix it yourself by adding `""native"", ""debian-openssl-3.0.x""` to your `binaryTargets` array, like it says in the error above. Prisma allows generating many targets so this shouldn't impact your existing app that uses Prisma, it just means that Trigger.dev can also work.

## Prisma extension

We need to investigate whether we can solve this automatically without requiring any changes to the prisma schema file, by adding some code to our prisma extension somehow.
",2387272063,Can confirm that reverting to `3.0.0-beta.56` fixes the issues.
2549826629,1358,Update the prisma extension to force binaryTarget of debian-openssl-3.0.x,"If you see this error:

```
PrismaClientInitializationError: 
Invalid `prisma.users.findUnique()` invocation:


Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".

This happened because Prisma Client was generated for ""debian-openssl-1.1.x"", but the actual deployment required ""debian-openssl-3.0.x"".
Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

The following locations have been searched:
  /app/node_modules/.prisma/client
  /
  ```
  
You can fix it yourself by adding `""native"", ""debian-openssl-3.0.x""` to your `binaryTargets` array, like it says in the error above. Prisma allows generating many targets so this shouldn't impact your existing app that uses Prisma, it just means that Trigger.dev can also work.

## Prisma extension

We need to investigate whether we can solve this automatically without requiring any changes to the prisma schema file, by adding some code to our prisma extension somehow.
",2387279402,I'm using a Turborepo btw. `prisma` is installed in the `web` app where I'm trying to run trigger deploy
2549826629,1358,Update the prisma extension to force binaryTarget of debian-openssl-3.0.x,"If you see this error:

```
PrismaClientInitializationError: 
Invalid `prisma.users.findUnique()` invocation:


Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".

This happened because Prisma Client was generated for ""debian-openssl-1.1.x"", but the actual deployment required ""debian-openssl-3.0.x"".
Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

The following locations have been searched:
  /app/node_modules/.prisma/client
  /
  ```
  
You can fix it yourself by adding `""native"", ""debian-openssl-3.0.x""` to your `binaryTargets` array, like it says in the error above. Prisma allows generating many targets so this shouldn't impact your existing app that uses Prisma, it just means that Trigger.dev can also work.

## Prisma extension

We need to investigate whether we can solve this automatically without requiring any changes to the prisma schema file, by adding some code to our prisma extension somehow.
",2387303675,@elie222 did you use the [prisma extension](https://trigger.dev/docs/config/config-file#prisma) when using 3.0.9?
2549826629,1358,Update the prisma extension to force binaryTarget of debian-openssl-3.0.x,"If you see this error:

```
PrismaClientInitializationError: 
Invalid `prisma.users.findUnique()` invocation:


Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".

This happened because Prisma Client was generated for ""debian-openssl-1.1.x"", but the actual deployment required ""debian-openssl-3.0.x"".
Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

The following locations have been searched:
  /app/node_modules/.prisma/client
  /
  ```
  
You can fix it yourself by adding `""native"", ""debian-openssl-3.0.x""` to your `binaryTargets` array, like it says in the error above. Prisma allows generating many targets so this shouldn't impact your existing app that uses Prisma, it just means that Trigger.dev can also work.

## Prisma extension

We need to investigate whether we can solve this automatically without requiring any changes to the prisma schema file, by adding some code to our prisma extension somehow.
",2387527569,"> @elie222 did you use the [prisma extension](https://trigger.dev/docs/config/config-file#prisma) when using 3.0.9?

Didn't try it. Will try tomorrow. Thanks!"
2549826629,1358,Update the prisma extension to force binaryTarget of debian-openssl-3.0.x,"If you see this error:

```
PrismaClientInitializationError: 
Invalid `prisma.users.findUnique()` invocation:


Prisma Client could not locate the Query Engine for runtime ""debian-openssl-3.0.x"".

This happened because Prisma Client was generated for ""debian-openssl-1.1.x"", but the actual deployment required ""debian-openssl-3.0.x"".
Add ""debian-openssl-3.0.x"" to `binaryTargets` in the ""schema.prisma"" file and run `prisma generate` after saving it:

generator client {
  provider      = ""prisma-client-js""
  binaryTargets = [""native"", ""debian-openssl-3.0.x""]
}

The following locations have been searched:
  /app/node_modules/.prisma/client
  /
  ```
  
You can fix it yourself by adding `""native"", ""debian-openssl-3.0.x""` to your `binaryTargets` array, like it says in the error above. Prisma allows generating many targets so this shouldn't impact your existing app that uses Prisma, it just means that Trigger.dev can also work.

## Prisma extension

We need to investigate whether we can solve this automatically without requiring any changes to the prisma schema file, by adding some code to our prisma extension somehow.
",2467264384,Tried the prisma extension on 3.1.2 and still seeing the issue
2543756538,1349,docs: make a note about zod-prisma-types generator,"Suggest updating to

```
generator zod {
  provider = ""npx --yes zod-prisma-types""
}
```",2374195427,"can I get a little more context here?
"
2543756538,1349,docs: make a note about zod-prisma-types generator,"Suggest updating to

```
generator zod {
  provider = ""npx --yes zod-prisma-types""
}
```",2401960847,"Hi @ericallam,

I would like to work on this issue. Could you please assign it to me?

Thanks!
YoosufAathil"
2543730421,1348,Update friendly missing package error message for the new build system,"```
■  Error: zod-prisma-types not found
│  
│  If it's a package: Include it in config.additionalPackages
│  If it's a binary:  Please get in touch and we'll see what we can do!
```",,
2542630027,1344,Detecting of duplicate task IDs no longer works in 3.0+,We used to detect duplicate taskIDs in the `.beta` versions but that's been removed in the new build system that was released in 3.0.0. We should put this back in as it can be quite confusing,,
2542128461,1343,Make payload/output offloading threshold size and other limits customizable,"Right now everything is hardcoded, but we really need to make these env vars and document them for self-hosters:

https://github.com/triggerdotdev/trigger.dev/blob/04645e83293ab8a04a094a84697b20b2b08d6142/packages/core/src/v3/limits.ts#L3-L11",,
2541016383,1342,Bug on docs,"Path: /config/config-file

There is not such export from sdk v3

```ts
import { defineConfig } from ""@trigger.dev/sdk/v3"";
```

<img width=""760"" alt=""Screenshot 2024-09-22 at 4 20 31 PM"" src=""https://github.com/user-attachments/assets/1a710ac2-1c7c-4a12-b1d3-45a40102baa4"">

Due to this, I am not able to figure out how to get prisma running properly on trigger. Any help would be appreciated.

My current config looks like - 

```ts
import type { TriggerConfig } from ""@trigger.dev/sdk/v3"";
import { prismaExtension } from ""@trigger.dev/build/extensions/prisma"";

export const config: TriggerConfig = {
  project: ""..."",
  logLevel: ""log"",
  retries: {
    enabledInDev: true,
    default: {
      maxAttempts: 3,
      minTimeoutInMs: 1000,
      maxTimeoutInMs: 10000,
      factor: 2,
      randomize: true,
    },
  },
  dependenciesToBundle: [/.*/],
};
```",,
2539048957,1338,dev CLI should automatically load `dev.vars` file as an env var,"Should be added to the list here: 

https://github.com/triggerdotdev/trigger.dev/blob/35c8e35674c9776381eedfe6d1e25c4edd8ca12b/packages/cli-v3/src/utilities/dotEnv.ts/#L5",,
2538720971,1337,bug: Contributing documentation is not up to date ,"### Provide environment information

  System:
    OS: macOS 15.0
    CPU: (8) arm64 Apple M3
    Memory: 108.17 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.15.0 - ~/.nvm/versions/node/v20.15.0/bin/node
    npm: 10.7.0 - ~/.nvm/versions/node/v20.15.0/bin/npm
    pnpm: 9.4.0 - ~/.nvm/versions/node/v20.15.0/bin/pnpm
    bun: 1.1.24 - /opt/homebrew/bin/bun

### Describe the bug

In https://github.com/triggerdotdev/trigger.dev/commit/2b5771f38c5fad8ced8253d95b3fa409dc8e6be6#diff-146a4e04ce046d5184406f9f5f9833062c07c29abaae05a918ab5e5eb84b2071L32 , the `triggerdev` bin was remove.

The documentation still refer to `triggerdev` instead of `trigger`:
https://github.com/triggerdotdev/trigger.dev/blob/764f03a3c50b1d0bb21a02e32a72a51823b62fba/CONTRIBUTING.md?plain=1#L117

### Reproduction repo

https://github.com/triggerdotdev/trigger.dev

### To reproduce

/

### Additional information

_No response_",,
2538694290,1336,"During dev, fixing a typescript error in a single file leads to tasks in those files not getting indexed","I think this just happened (will need to reproduce properly):

- Running the dev command
- There were typescript errors in a file with tasks
- I fixed those typescript errors by editing a monorepo dependency (`@trigger.dev/core`)
- Those tasks failed to get indexed after the fix

I think it may be related to the contentHash on the background worker and this line:

https://github.com/triggerdotdev/trigger.dev/blob/764f03a3c50b1d0bb21a02e32a72a51823b62fba/apps/webapp/app/v3/services/createBackgroundWorker.server.ts#L52

It may be that we need to make sure the contentHash is updated in these cases. Not sure this is really an issue, but something I want to make sure doesn't happen not in the monorepo.",,
2538638893,1334,bug: audioWaveform extension breaks apt-get install for next extensions when building the docker image,"### Provide environment information

-   System:
    -  OS: macOS 15.0
    -  CPU: (8) arm64 Apple M3
    -  Memory: 95.38 MB / 16.00 GB
    -  Shell: 5.9 - /bin/zsh
-   Binaries:
    -  Node: 20.11.1 - ~/.nvm/versions/node/v20.11.1/bin/node
    -  npm: 10.2.4 - ~/.nvm/versions/node/v20.11.1/bin/npm
    -  pnpm: 8.15.5 - ~/.nvm/versions/node/v20.11.1/bin/pnpm
    -  bun: 1.1.24 - /opt/homebrew/bin/bun

### Describe the bug

The `audioWaveform` extension breaks the package installation (`apt-get install`) for the following extensions.  

### Reproduction repo

https://github.com/ThibautCuchet/trigger.dev/tree/issue-audiowaveform

### To reproduce

In `references/v3-catalog/trigger.config.ts`, I added a debug extension after `audioWaveform` : 
```typescript
      audioWaveform(),
      {
        name: ""debug"",
        onBuildComplete: (ctx) => {
          ctx.addLayer({
            id: ""debug"",
            image: {
              instructions: [""RUN apt-get update"", ""RUN apt-get install -y curl""],
            }
          })
        }
      },
```

Running `pnpm exec trigger deploy --profile local --self-hosted`, will raise an error during the build of the docker image : 
```shell
Containerfile:8
--------------------
6 |     RUN rm audiowaveform*.deb
7 |     RUN apt-get update
8 | >>> RUN apt-get install -y curl
9 |
10 |     ENV DEBIAN_FRONTEND=noninteractive
--------------------
ERROR: failed to solve: process ""/bin/sh -c apt-get install -y curl"" did not complete successfully: exit code: 100
```

Moving the `debug` extension before `audioWaveform`, doens't have this bug : 
```typescript
      {
        name: ""debug"",
        onBuildComplete: (ctx) => {
          ctx.addLayer({
            id: ""debug"",
            image: {
              instructions: [""RUN apt-get update"", ""RUN apt-get install -y curl""],
            }
          })
        }
      },
      audioWaveform(),
```

### Additional information

This error breaks the deployment of `references/v3-catalog` in production because the new `puppeteer` extension needs to install packages.
https://github.com/triggerdotdev/trigger.dev/blob/b999c86e2330cc106928c12c5cb4c95406cdbe10/references/v3-catalog/trigger.config.ts#L83

```shell
------
Containerfile:7
--------------------
5 |     RUN dpkg -i audiowaveform_1.10.1-1-12_amd64.deb || true
6 |     RUN rm audiowaveform*.deb
7 | >>> RUN apt-get update && apt-get install curl gnupg -y   && curl --location --silent https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -   && sh -c 'echo ""deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"" >> /etc/apt/sources.list.d/google.list'   && apt-get update   && apt-get install google-chrome-stable -y --no-install-recommends   && rm -rf /var/lib/apt/lists/*
8 |
9 |     ENV DEBIAN_FRONTEND=noninteractive
--------------------
ERROR: failed to solve: process ""/bin/sh -c apt-get update && apt-get install curl gnupg -y   && curl --location --silent https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -   && sh -c 'echo \""deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\"" >> /etc/apt/sources.list.d/google.list'   && apt-get update   && apt-get install google-chrome-stable -y --no-install-recommends   && rm -rf /var/lib/apt/lists/*"" did not complete successfully: exit code: 100
```",,
2538632463,1333,Using import.meta.env fails inside of a trigger.dev build,"From what I can tell, `import.meta.env` is a vite thing that populates `import.meta.env` with environment variables.

https://import-meta-env.org/guide/getting-started/introduction.html

An example usage is here: 

https://github.com/usetonearm/core-web/blob/d178a6277306e9bfe0cde49c6550ceae33475292/packages/supabase/src/get-supabase-client-keys.ts#L6

They do have an esbuild plugin that we should look into seeing if it solves the issue. ",,
2536695656,1329,[TRI-3635] Chore: Automatically create a GitHub Release in the publish.yml workflow when there's a v.docker.x,"null

<sub>[TRI-3635](https://linear.app/triggerdotdev/issue/TRI-3635/chore-automatically-create-a-github-release-in-the-publishyml-workflow)</sub>",,
2536013805,1327, Build fails with TypedSQL enabled but prisma migrations disabled,"### Provide environment information

```
  System:
    OS: Linux 6.10 Ubuntu 22.04.5 LTS 22.04.5 LTS (Jammy Jellyfish)
    CPU: (32) x64 AMD Ryzen 9 5950X 16-Core Processor
    Memory: 115.65 GB / 125.68 GB
    Container: Yes
    Shell: 5.1.16 - /bin/bash
  Binaries:
    Node: 22.8.0 - /usr/bin/node
    Yarn: 1.22.19 - /usr/bin/yarn
    npm: 10.8.2 - /usr/bin/npm
```

### Describe the bug

After applying the workaround from #1325, that is copying the `sql` folder into the location expected by the cli `npx trigger.dev@latest deploy` still fails with
```
└  Error: Error building image. Full build logs have been saved to /tmp/trigger-mQAkpy/build-jvbf0cg5.log
```
```
#17 [build 6/6] RUN node node_modules/prisma/build/index.js generate --schema=./prisma/schema.prisma --sql
#17 0.546 Prisma schema loaded from prisma/schema.prisma
#17 0.561 Error: Prisma schema validation - (get-config wasm)
#17 0.561 Error code: P1012
#17 0.561 error: Environment variable not found: DATABASE_URL.
#17 0.561   -->  prisma/schema.prisma:8
#17 0.561    |
#17 0.561  7 |   provider = ""postgresql""
#17 0.561  8 |   url      = env(""DATABASE_URL"")
#17 0.561    |
#17 0.561
#17 0.561 Validation Error Count: 1
#17 0.561 [Context: getConfig]
#17 0.561
#17 0.561 Prisma CLI Version : 5.19.1
#17 ERROR: process ""/bin/sh -c node node_modules/prisma/build/index.js generate --schema=./prisma/schema.prisma --sql"" did not complete successfully: exit code: 1
------
> [build 6/6] RUN node node_modules/prisma/build/index.js generate --schema=./prisma/schema.prisma --sql:
#17 0.561   -->  prisma/schema.prisma:8
#17 0.561    |
#17 0.561  7 |   provider = ""postgresql""
#17 0.561  8 |   url      = env(""DATABASE_URL"")
#17 0.561    |
#17 0.561
#17 0.561 Validation Error Count: 1
#17 0.561 [Context: getConfig]
#17 0.561
#17 0.561 Prisma CLI Version : 5.19.1
------
Error: failed to solve: process ""/bin/sh -c node node_modules/prisma/build/index.js generate --schema=./prisma/schema.prisma --sql"" did not complete successfully: exit code: 1
```
This is expected as prisma needs to connect to a live database during the build when TypedSQL is enabled. By exposing the secrets to the build the resulting container could leak them, how does the build system handle the secrets?


### Reproduction repo

N/A

### To reproduce

Try deploying a project with prisma and TypedSQL enabled.

### Additional information

_No response_",,
2535961274,1325,Build fails with TypedSQL enabled due to directory layout,"https://github.com/triggerdotdev/trigger.dev/blob/b3a6f4e0ac62f10f6c539c933e7ec46b8843c87e/packages/build/src/extensions/prisma.ts#L131

The code in the CLI expects the directory layout to be:
```
<project_root>/sql - sql files for TypedSQL
<project_root>/<prisma_dir> - prisma directory
<project_root>/<prisma_dir>/<schema_name> - Prisma schema
```
While in reality the directory layout is:
```
<project_root>/<prisma_dir> - prisma directory
<project_root>/<prisma_dir>/sql - sql files for TypedSQL
<project_root>/<prisma_dir>/<schema_name> - Prisma schema
```

This results in builds failing:
```
✘ [ERROR] Failed to apply extension PrismaExtension onBuildComplete Error: ENOENT: no such file or directory, scandir '/workspaces/mapanfz/sql'

      at async readdir (node:internal/fs/promises:950:18)
      at async PrismaExtension.onBuildComplete
  (/workspaces/mapanfz/node_modules/@trigger.dev/build/dist/commonjs/extensions/prisma.js:75:30)
      at async notifyExtensionOnBuildComplete
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/build/extensions.js:16:17)
      at async buildWorker
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/build/buildWorker.js:70:21)
      at async _deployCommand
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/commands/deploy.js:120:27)
      at async
  file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/commands/deploy.js:77:16
      at async
  file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/cli/common.js:54:28
      at async wrapCommandAction
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/cli/common.js:40:12)
      at async deployCommand
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/commands/deploy.js:76:12)
      at async
  file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/commands/deploy.js:71:13
      at async handleTelemetry
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/cli/common.js:30:9)
      at async Command.<anonymous>
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/commands/deploy.js:69:9)
      at async Command.parseAsync
  (/home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/commander/lib/command.js:935:5)
      at async main
  (file:///home/vscode/.npm/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/index.js:5:5) {
    errno: -2,
    code: 'ENOENT',
    syscall: 'scandir',
    path: '/workspaces/mapanfz/sql'
  }
```
As a workaround I've added `/sql` to my gitignore and before running the deploy i just copy over the sql folder from the prisma directory.",,
2529188122,1311,bug: CLI not usable from PNPM,"### Provide environment information

  System:
    OS: macOS 15.0
    CPU: (14) arm64 Apple M3 Max
    Memory: 2.70 GB / 36.00 GB
    Shell: 5.9 - /bin/zsh

  Binaries:
    Node: 20.15.1 - ~/.nvm/versions/node/v20.15.1/bin/node
    npm: 10.7.0 - ~/.nvm/versions/node/v20.15.1/bin/npm
    pnpm: 9.10.0 - /opt/homebrew/bin/pnpm
    bun: 1.1.24 - ~/.bun/bin/bun

### Describe the bug

Calling the CLI through `pnpm dlx` is not working because it detects multiple executable binaries.

```bash
> pnpm dlx trigger.dev@3.0.1 dev

 ERR_PNPM_DLX_MULTIPLE_BINS  Could not determine executable to run. trigger.dev has multiple binaries: triggerdev, trigger

Try one of the following:
pnpm --package=trigger.dev dlx triggerdev
pnpm --package=trigger.dev dlx trigger
```

When trying the recommended solution from PNPM of specifying the package, the CLI fails.

```bash
> pnpm --package=trigger.dev dlx triggerdev@3.0.1 deploy --env staging --skip-typecheck

 ENOENT  Command failed with ENOENT: triggerdev@3.0.1 deploy --env staging --skip-typecheck
spawn triggerdev@3.0.1 ENOENT

pnpm: Command failed with ENOENT: triggerdev@3.0.1 deploy --env staging --skip-typecheck
spawn triggerdev@3.0.1 ENOENT
    at ChildProcess._handle.onexit (node:internal/child_process:286:19)
    at onErrorNT (node:internal/child_process:484:16)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)
 ELIFECYCLE  Command failed with exit code 254.
```

### Reproduction repo

https://stackblitz.com/edit/stackblitz-starters-vyz9ci?file=package.json

### To reproduce

Check out the [Stackblitz example](https://stackblitz.com/edit/stackblitz-starters-vyz9ci?file=package.json) and try running these commands:
- `pnpm run example1`
- `pnpm run example2`

### Additional information

_No response_",,
2514306735,1290,[TRI-3569] Truncated logs should be clearly labelled,"We truncate logs when they have large amounts of data. This means it's not possible to dump a single log message with 20MB of data in it on us at the moment for performance reasons.

There are a few different limits, visible in the code here: https://discord.com/channels/1066956501299777596/1282596480984678412/1282712980613500999

We will always have some kinds of limits on logs, so we should make it very clear when we truncate things. This could be an extra column in the `TaskEvent` table and then we can display something in the UI with a link to docs about it.

<sub>[TRI-3569](https://linear.app/triggerdotdev/issue/TRI-3569/truncated-logs-should-be-clearly-labelled)</sub>",,
2514249358,1289,[TRI-3566] Logging strips out key/value pairs when the value is `0`,"If you do this:

```ts
logger.log(""Some text"", { foo: ""bar"", val: 0 });
```

The properties that are stored are just:

```json
{ ""foo"": ""bar"" }
```

It should include `""val"": 0` as well. This is most likely a bug when we flatten the attributes into a flat structure. A classic falsy check bug is my guess.

<sub>[TRI-3566](https://linear.app/triggerdotdev/issue/TRI-3566/logging-strips-out-keyvalue-pairs-when-the-value-is-0)</sub>",,
2508768788,1282,can't deploy anymore using `npx trigger.dev@beta deploy`,"### Provide environment information

  System:
    OS: macOS 14.1
    CPU: (10) arm64 Apple M1 Pro
    Memory: 82.69 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 21.7.3 - ~/.nvm/versions/node/v21.7.3/bin/node
    Yarn: 1.22.22 - ~/.nvm/versions/node/v21.7.3/bin/yarn
    npm: 10.5.0 - ~/.nvm/versions/node/v21.7.3/bin/npm
    pnpm: 9.5.0 - ~/.nvm/versions/node/v21.7.3/bin/pnpm
    bun: 1.1.18 - ~/.bun/bin/bun

### Describe the bug

This was working yesterday on my computer but today I'm receiving this error 
<img width=""566"" alt=""image"" src=""https://github.com/user-attachments/assets/ec568cfa-50ca-421c-aa14-d493c5a06ddd"">

It's also not working with Github Actions

### Reproduction repo

no repo

### To reproduce

run `npx trigger.dev@beta deploy`

### Additional information

_No response_",,
2506579931,1280,Can't deploy using Github Actions on Turborepo,"### Describe the bug

Can't deploy with Github Actions

<img width=""642"" alt=""image"" src=""https://github.com/user-attachments/assets/cd90fb90-0272-4046-a393-84b67d1bd649"">

### Reproduction repo

_

### To reproduce

use the Github Action provided by the docs

### Additional information

It's a turbo repo",,
2495518763,1276,[TRI-3504] Make it clear when log properties have been clipped,"We limit the length of log properties but don't make it clear that this has happened. We should make this clearer somehow, e.g. by adding a property that says this?

<sub>[TRI-3504](https://linear.app/triggerdotdev/issue/TRI-3504/make-it-clear-when-log-properties-have-been-clipped)</sub>",,
2470530384,1260,Go SDK,"### Is your feature request related to a problem? Please describe.

As of now, Trigger.dev only support JS-SDK. Please add support for Go SDK as well.

### Describe the solution you'd like to see

_

### Describe alternate solutions

Use built-in [Go routines](https://go.dev/tour/concurrency/1)

### Additional information

_No response_",,
2469326256,1258,bug:  Failed to resolve dependencies,"### Provide environment information

  System:
    OS: macOS 14.6.1
    CPU: (10) arm64 Apple M1 Max
    Memory: 1.04 GB / 32.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.16.0 - ~/.proto/shims/node
    npm: 10.8.2 - ~/.proto/shims/npm
    pnpm: 9.7.1 - ~/.proto/shims/pnpm
    bun: 1.1.24 - ~/.proto/shims/bun
    Watchman: 2024.03.18.00 - /opt/homebrew/bin/watchman

### Describe the bug

I get the following error when trying to deploy an app within a pnpm monorepo that imports a workspace package ""@repo/lib"":

```
Failed to resolve dependencies: Command failed with exit code 1: npm install --package-lock-only --ignore-scripts --no-audit '--legacy-peer-deps=false' '--strict-peer-deps=false'

npm error code E404
npm error 404 Not Found - GET https://registry.npmjs.org/@repo%2flib - Not found
npm error 404
npm error 404  '@repo/lib@1.0.0' is not in this registry.
npm error 404
npm error 404 Note that you can also install from a
npm error 404 tarball, folder, http url, or git url.
...
```

The dependency is specified in the apps package.json like:

```
""@repo/lib"": ""workspace:*"",
```

But I still get the error even if I add this to the config:

```
dependenciesToBundle: [""@repo/lib""],
```

### Reproduction repo

You can run something like `pnpx create-turbo@latest` to create a similar pnpm monorepo to reproduce

### To reproduce

See above

### Additional information

_No response_",,
2453425687,1248,Initial Environment variables documentation,"The documentation about environment variables misses these 2 things:
- No documentation for loading from .env file to trigger.dev cloud environment at initial load
- When using envvars.retrieve, there's no direct way of knowing current environment. I could workaround that by create another var, but that introduces another var so it's not that good.

Path: /deploy-environment-variables",,
2433491166,1238,[TRI-3194] Dev command child runs don't execute (Windows WSL),"### Provide environment information

Running Windows with WSL.

System:
    OS: Linux 5.15 Ubuntu 22.04.3 LTS 22.04.3 LTS (Jammy Jellyfish)
    CPU: (16) x64 AMD Ryzen 7 PRO 7840HS w/ Radeon 780M Graphics
    Memory: 19.77 GB / 30.68 GB
    Container: Yes
    Shell: 5.8.1 - /usr/bin/zsh
  Binaries:
    Node: 18.19.1 - \~\~/.nvm/versions/node/v18.19.1/bin/node
    Yarn: 1.22.22 - /mnt/c/Program Files/nodejs/yarn
    npm: 10.2.4 - \~\~/.nvm/versions/node/v18.19.1/bin/npm
    pnpm: 8.15.3 - \~\~/.nvm/versions/node/v18.19.1/bin/pnpm

### Describe the bug

Child runs don't work, they just stay in the ""queued"" status until they expire. There are no other runs executing.

### Reproduction repo

–

### To reproduce

```ts
export const parentTask = task({
  id: 'parent'
  run: async (payload: { organizationId: string }) => {
    console.log(`Start parent`);
    
    await childTask.triggerAndWait({
       organizationId: payload.organizationId
    });
  }
});

const childTask = task({
  id: 'child',
  run: async (payload: { organizationId: string }) => {
    console.log(`Child task`);
  }
});
```

""Start parent"" is logged on the console. Child is stuck in ""Executing"" and also doesn't log anything. Config I have:

```ts
export const config: TriggerConfig = {
  project: 'proj_xx',
  logLevel: 'log',
  retries: {
    enabledInDev: true,
    default: {
      maxAttempts: 3,
      minTimeoutInMs: 1000,
      maxTimeoutInMs: 10000,
      factor: 2,
      randomize: true
    }
  }
};
```

### Additional information

*No response*

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-3194](https://linear.app/triggerdotdev/issue/TRI-3194/dev-command-child-runs-dont-execute-windows-wsl)</sub>",,
2419659113,1231,Allow specifying package manager for typecheck,"https://github.com/triggerdotdev/trigger.dev/blob/da592d867adc84f65855fc2f152a1ee1b48cc650/packages/cli-v3/src/commands/deploy.ts#L1660

Because I'm using pnpm, my Github action for deploys are failing because the typecheck step only uses npm. 

Possible solutions:
- Add a flag to the deploy command for specifying the package manager
- Detect the package manager used by the project by looking for a `pnpm-lock.yaml`/`npm-lock.yaml` file etc

I know I can fix this by making npm available, but I'd rather stick with pnpm since it's managing my monorepo deps.",,
2416984287,1228,[TRI-3068] Strip out more unicode null characters,"It seems like some TaskEvents aren't being checked for unicode null characters:

```
400 ""\nInvalid prisma.taskEvent.create() invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: ""22P05"", message: ""unsupported Unicode escape sequence"", severity: ""ERROR"", detail: Some(""\\u0000 cannot be converted to text.""), column: None, hint: None }), transient: false })""
```

Probably in the task output is my guess.

<sub>[TRI-3068](https://linear.app/triggerdotdev/issue/TRI-3068/strip-out-more-unicode-null-characters)</sub>",,
2416585973,1227,"feat: Option to configure Alert for ""task attempts"" to trigger only if last attempt fails","### Is your feature request related to a problem? Please describe.

Currently, you get notifications whenever an attempt fails for a task run, for many use cases you probably don't care if some of the attempts fail, you just need the process to complete at some point. Hence it would be great to be able to additionally configure the warning only to be sent if the last attempt fails.

### Describe the solution you'd like to see

More flexible configuration when the notification for the task attempts are sent.

### Describe alternate solutions

Perhaps also make it configurable after which attempt the notification is to be sent.

### Additional information

_No response_",,
2412978789,1223,bug: 25hX Error: @prisma/client did not initialize yet. ,"### Provide environment information

GitHub Actions

### Describe the bug

When running
```
  - name: Deploy Trigger.dev
    working-directory: apps/nextjs
    env:
      TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
    run: |
      npm run deploy:trigger-staging`
```

where

```
  ""scripts"": {
    ""dev"": ""prisma generate && next dev"",
    ""build"": ""prisma generate && next build"",
    ""postbuild"": ""npx next-sitemap"",
    ""start"": ""next start"",
    ""lint"": ""next lint"",
    ""prettier"": ""prettier --write ."",
    ""deploy:trigger-prod"": ""prisma generate && npx trigger.dev@3.0.0-beta.48 deploy"",
    ""deploy:trigger-staging"": ""prisma generate && npx trigger.dev@3.0.0-beta.48 deploy --env staging""
  },
  ```

I always get,
```
> studybuddy-web@1.0.0 deploy:trigger-staging
> prisma generate && npx trigger.dev@3.0.0-beta.4[8](https://github.com/studyspaceglobal/studyspace-monorepo/actions/runs/9970535527/job/27549644708#step:13:9) deploy --env staging

Environment variables loaded from .env
Prisma schema loaded from prisma/schema

✔ Generated Prisma Client (v5.16.2) to ./node_modules/@prisma/client in 6[9](https://github.com/studyspaceglobal/studyspace-monorepo/actions/runs/9970535527/job/27549644708#step:13:10)6ms

Start using Prisma Client in Node.js (See: https://pris.ly/d/client)
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
import { PrismaClient } from '@prisma/client/edge'
const prisma = new PrismaClient()

See other ways of importing Prisma Client: http://pris.ly/d/importing-client

┌─────────────────────────────────────────────────────────────┐
│  Deploying your app to serverless or edge functions?        │
│  Try Prisma Accelerate for connection pooling and caching.  │
│  https://pris.ly/cli/--accelerate                           │
└─────────────────────────────────────────────────────────────┘

npm warn exec The following package was not found and will be installed: trigger.dev@3.0.0-beta.48

Trigger.dev (3.0.0-beta.48)
------------------------------------------------------
┌  Deploying project
│
◇  Preparing to deploy ""StudyBuddy"" (proj_zbkgcyupelzxtkkoxhpz) to staging
25l│
◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project.◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project..◑  Typechecking project..◒  Typechecking project..◐  Typechecking project..◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project...◒  Typechecking project...◐  Typechecking project...◓  Typechecking project...◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project◒  Typechecking project◐  Typechecking project◓  Typechecking project◑  Typechecking project.◒  Typechecking project.◐  Typechecking project.◇  Typechecking passed with 0 errors
25h25l│
◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◑  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◑  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◑  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◑  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs.◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◑  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◑  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs..◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs...◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs...◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs...◑  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs...◒  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs...◐  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs...◓  Building project in /home/runner/work/***-monorepo/***-monorepo/apps/nextjs...◇  Project built successfully
25h25l│
◒  Resolving dependencies◐  Resolving dependencies◓  Resolving dependencies◑  Resolving dependencies◒  Resolving dependencies◐  Resolving dependencies◓  Resolving dependencies◑  Resolving dependencies◒  Resolving dependencies.◐  Resolving dependencies.◓  Resolving dependencies.◑  Resolving dependencies.◒  Resolving dependencies.◐  Resolving dependencies.◓  Resolving dependencies.◑  Resolving dependencies.◒  Resolving dependencies..◐  Resolving dependencies..◓  Resolving dependencies..◑  Resolving dependencies..◒  Resolving dependencies..◐  Resolving dependencies..◓  Resolving dependencies..◑  Resolving dependencies..◒  Resolving dependencies...◐  Resolving dependencies...◓  Resolving dependencies...◑  Resolving dependencies...◒  Resolving dependencies...◐  Resolving dependencies...◓  Resolving dependencies...◑  Resolving dependencies...◒  Resolving dependencies...◐  Resolving dependencies◓  Resolving dependencies◑  Resolving dependencies◒  Resolving dependencies◐  Resolving dependencies◓  Resolving dependencies◑  Resolving dependencies◒  Resolving dependencies◐  Resolving dependencies.◓  Resolving dependencies.◑  Resolving dependencies.◒  Resolving dependencies.◐  Resolving dependencies.◓  Resolving dependencies.◑  Resolving dependencies.◒  Resolving dependencies.◐  Resolving dependencies..◓  Resolving dependencies..◑  Resolving dependencies..◒  Resolving dependencies..◐  Resolving dependencies..◓  Resolving dependencies..◑  Resolving dependencies..◒  Resolving dependencies..◐  Resolving dependencies...◓  Resolving dependencies...◑  Resolving dependencies...◒  Resolving dependencies...◐  Resolving dependencies...◓  Resolving dependencies...◑  Resolving dependencies...◒  Resolving dependencies...◐  Resolving dependencies...◓  Resolving dependencies◑  Resolving dependencies◒  Resolving dependencies◐  Resolving dependencies◓  Resolving dependencies◑  Resolving dependencies◒  Resolving dependencies◐  Resolving dependencies◓  Resolving dependencies.◑  Resolving dependencies.◒  Resolving dependencies.◐  Resolving dependencies.◓  Resolving dependencies.◑  Resolving dependencies.◒  Resolving dependencies.◐  Resolving dependencies.◓  Resolving dependencies..◑  Resolving dependencies..◒  Resolving dependencies..◐  Resolving dependencies..◓  Resolving dependencies..◑  Resolving dependencies..◒  Resolving dependencies..◐  Resolving dependencies..◓  Resolving dependencies...◑  Resolving dependencies...◒  Resolving dependencies...◐  Resolving dependencies...◓  Resolving dependencies...◑  Resolving dependencies...◇  Dependencies resolved
25h25l│
◒  Deploying version 202407[17](https://github.com/studyspaceglobal/studyspace-monorepo/actions/runs/9970535527/job/27549644708#step:13:18).4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version [20](https://github.com/studyspaceglobal/studyspace-monorepo/actions/runs/9970535527/job/27549644708#step:13:21)240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version 20240717.4◒  Deploying version 20[24](https://github.com/studyspaceglobal/studyspace-monorepo/actions/runs/9970535527/job/27549644708#step:13:25)0717.4.◐  Deploying version 20240717.4.◓  Deploying version 20240717.4.◑  Deploying version 20240717.4.◒  Deploying version 20240717.4.◐  Deploying version 20240717.4.◓  Deploying version 20240717.4.◑  Deploying version 20240717.4.◒  Deploying version 20240717.4..◐  Deploying version 20240717.4..◓  Deploying version 20240717.4..◑  Deploying version 20240717.4..◒  Deploying version 20240717.4..◐  Deploying version 20240717.4..◓  Deploying version 20240717.4..◑  Deploying version 20240717.4..◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version 20240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version 20240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4.◓  Deploying version 20240717.4.◑  Deploying version 20240717.4.◒  Deploying version 20240717.4.◐  Deploying version 20240717.4.◓  Deploying version 20240717.4.◑  Deploying version 20240717.4.◒  Deploying version 20240717.4.◐  Deploying version 20240717.4..◓  Deploying version 20240717.4..◑  Deploying version 20240717.4..◒  Deploying version 20240717.4..◐  Deploying version 20240717.4..◓  Deploying version 20240717.4..◑  Deploying version 20240717.4..◒  Deploying version 20240717.4..◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4◑  Deploying version 20240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version 20240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4.◑  Deploying version 20240717.4.◒  Deploying version 20240717.4.◐  Deploying version 20240717.4.◓  Deploying version 20240717.4.◑  Deploying version 20240717.4.◒  Deploying version 20240717.4.◐  Deploying version 20240717.4.◓  Deploying version 20240717.4..◑  Deploying version 20240717.4..◒  Deploying version 20240717.4..◐  Deploying version 20240717.4..◓  Deploying version 20240717.4..◑  Deploying version 20240717.4..◒  Deploying version 20240717.4..◐  Deploying version 20240717.4..◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version 20240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version 20240717.4.◒  Deploying version 20240717.4.◐  Deploying version 20240717.4.◓  Deploying version 20240717.4.◑  Deploying version 20240717.4.◒  Deploying version 20240717.4.◐  Deploying version 20240717.4.◓  Deploying version 20240717.4.◑  Deploying version 20240717.4..◒  Deploying version 20240717.4..◐  Deploying version 20240717.4..◓  Deploying version 20240717.4..◑  Deploying version 20240717.4..◒  Deploying version 20240717.4..◐  Deploying version 20240717.4..◓  Deploying version 20240717.4..◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4...◐  Deploying version 20240717.4...◓  Deploying version 20240717.4...◑  Deploying version 20240717.4...◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  Deploying version 20240717.4◒  Deploying version 20240717.4◐  Deploying version 20240717.4◓  Deploying version 20240717.4◑  20240717.4 image built, detecting deployed tasks◒  20240717.4 image built, detecting deployed tasks.◐  20240717.4 image built, detecting deployed tasks.◓  20240717.4 image built, detecting deployed tasks.◑  20240717.4 image built, detecting deployed tasks.◒  20240717.4 image built, detecting deployed tasks.◐  20240717.4 image built, detecting deployed tasks.◓  20240717.4 image built, detecting deployed tasks.◑  20240717.4 image built, detecting deployed tasks.◒  20240717.4 image built, detecting deployed tasks..◐  20240717.4 image built, detecting deployed tasks..◓  20240717.4 image built, detecting deployed tasks..◑  20240717.4 image built, detecting deployed tasks..◒  20240717.4 image built, detecting deployed tasks..◐  20240717.4 image built, detecting deployed tasks..◓  20240717.4 image built, detecting deployed tasks..◑  20240717.4 image built, detecting deployed tasks..◒  20240717.4 image built, detecting deployed tasks...◐  20240717.4 image built, detecting deployed tasks...◓  20240717.4 image built, detecting deployed tasks...◑  20240717.4 image built, detecting deployed tasks...◒  20240717.4 image built, detecting deployed tasks...◐  20240717.4 image built, detecting deployed tasks...◓  20240717.4 image built, detecting deployed tasks...◑  20240717.4 image built, detecting deployed tasks...◒  20240717.4 image built, detecting deployed tasks...◐  20240717.4 image built, detecting deployed tasks◓  20240717.4 image built, detecting deployed tasks◑  20240717.4 image built, detecting deployed tasks◒  20240717.4 image built, detecting deployed tasks◐  20240717.4 image built, detecting deployed tasks◓  20240717.4 image built, detecting deployed tasks◑  20240717.4 image built, detecting deployed tasks◒  20240717.4 image built, detecting deployed tasks◐  20240717.4 image built, detecting deployed tasks.◓  20240717.4 image built, detecting deployed tasks.◑  20240717.4 image built, detecting deployed tasks.◒  20240717.4 image built, detecting deployed tasks.◐  20240717.4 image built, detecting deployed tasks.◓  20240717.4 image built, detecting deployed tasks.◑  20240717.4 image built, detecting deployed tasks.◒  20240717.4 image built, detecting deployed tasks.◐  20240717.4 image built, detecting deployed tasks..◓  20240717.4 image built, detecting deployed tasks..◑  20240717.4 image built, detecting deployed tasks..◒  20240717.4 image built, detecting deployed tasks..◐  20240717.4 image built, detecting deployed tasks..◓  20240717.4 image built, detecting deployed tasks..◑  20240717.4 image built, detecting deployed tasks..◒  20240717.4 image built, detecting deployed tasks..◐  20240717.4 image built, detecting deployed tasks...◓  20240717.4 image built, detecting deployed tasks...◑  20240717.4 image built, detecting deployed tasks...◒  20240717.4 image built, detecting deployed tasks...◐  20240717.4 image built, detecting deployed tasks...◓  20240717.4 image built, detecting deployed tasks...◑  20240717.4 image built, detecting deployed tasks...◒  20240717.4 image built, detecting deployed tasks...◐  20240717.4 image built, detecting deployed tasks...◓  20240717.4 image built, detecting deployed tasks◑  20240717.4 image built, detecting deployed tasks◒  20240717.4 image built, detecting deployed tasks◐  20240717.4 image built, detecting deployed tasks◓  20240717.4 image built, detecting deployed tasks◑  20240717.4 image built, detecting deployed tasks◒  20240717.4 image built, detecting deployed tasks◐  20240717.4 image built, detecting deployed tasks◓  20240717.4 image built, detecting deployed tasks.◑  20240717.4 image built, detecting deployed tasks.◒  20240717.4 image built, detecting deployed tasks.◐  20240717.4 image built, detecting deployed tasks.◓  20240717.4 image built, detecting deployed tasks.◑  20240717.4 image built, detecting deployed tasks.◒  20240717.4 image built, detecting deployed tasks.◐  20240717.4 image built, detecting deployed tasks.◓  20240717.4 image built, detecting deployed tasks..◑  20240717.4 image built, detecting deployed tasks..◒  20240717.4 image built, detecting deployed tasks..◐  20240717.4 image built, detecting deployed tasks..◓  20240717.4 image built, detecting deployed tasks..◇  Deployment encountered an error. View deployment https://cloud.trigger.dev/projects/v3/proj_zbkgcyupelzxtkkoxhpz/deployments/rdhy2mxw
[25](https://github.com/studyspaceglobal/studyspace-monorepo/actions/runs/9970535527/job/27549644708#step:13:26)hX Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
Error: Process completed with exit code 1.
```

where the last 2 lines are,
```
Error: @prisma/client did not initialize yet. Please run ""prisma generate"" and try to import it again.
Error: Process completed with exit code 1.
```
  
  

### Reproduction repo

N/A

### To reproduce

Run
```
  - name: Deploy Trigger.dev
    working-directory: apps/nextjs
    env:
      TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
    run: |
      npm run deploy:trigger-staging`
```

in a project that uses a Prisma client inside any Trigger.dev tasks or schedules.

### Additional information

_No response_",,
2411377894,1221,bug: Typescript typedef errors in v3 SDK,"### Provide environment information

  System:
    OS: macOS 12.7.5
    CPU: (10) arm64 Apple M1 Pro
    Memory: 75.05 MB / 32.00 GB
    Shell: 5.8.1 - /bin/zsh
  Binaries:
    Node: 20.7.0 - ~/.asdf/installs/nodejs/20.7.0/bin/node
    Yarn: 1.22.19 - ~/.asdf/installs/nodejs/20.7.0/bin/yarn
    npm: 10.1.0 - ~/.asdf/plugins/nodejs/shims/npm
    Watchman: 2024.04.08.00 - /opt/homebrew/bin/watchman

### Describe the bug

Using version `""@trigger.dev/sdk"": ""3.0.0-beta.48""`

When I import anything (like `task`: `import { task } from '@trigger.dev/sdk/v3';`) from the SDK, my Typescript compiler picks up errors in the SDK's Typedefs file ad `node_modules/@trigger.dev/sdk/dist/v3/index.d.ts`.

```
 npx tsc -noEmit

node_modules/@trigger.dev/sdk/dist/v3/index.d.ts:173:40 - error TS2536: Type 'K' cannot be used to index type 'TRunHandle extends RunHandle<infer THandleOutput> ? Omit<{ status: ""CANCELED"" | ""COMPLETED"" | ""FAILED"" | ""WAITING_FOR_DEPLOY"" | ""QUEUED"" | ""EXECUTING"" | ... 6 more ... | ""EXPIRED""; ... 23 more ...; expiredAt?: Date | undefined; }, ""output""> & { ...; } : Omit<...> & { ...; }'.

173 }) extends infer T ? { [K in keyof T]: (TRunHandle extends RunHandle<infer THandleOutput> ? Omit<{
                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
174     status: ""CANCELED"" | ""COMPLETED"" | ""FAILED"" | ""WAITING_FOR_DEPLOY"" | ""QUEUED"" | ""EXECUTING"" | ""REATTEMPTING"" | ""FROZEN"" | ""CRASHED"" | ""INTERRUPTED"" | ""SYSTEM_FAILURE"" | ""DELAYED"" | ""EXPIRED"";
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
...
270     output?: TRunHandle | undefined;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
271 })[K]; } : never>;
    ~~~~~

node_modules/@trigger.dev/sdk/dist/v3/index.d.ts:898:63 - error TS2693: 'CreateEnvironmentVariableParams' only refers to a type, but is being used as a value here.

898 declare const envvars_CreateEnvironmentVariableParams: typeof CreateEnvironmentVariableParams;
                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

node_modules/@trigger.dev/sdk/dist/v3/index.d.ts:899:64 - error TS2693: 'ImportEnvironmentVariablesParams' only refers to a type, but is being used as a value here.

899 declare const envvars_ImportEnvironmentVariablesParams: typeof ImportEnvironmentVariablesParams;
                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Found 3 errors in the same file, starting at: node_modules/@trigger.dev/sdk/dist/v3/index.d.ts:173
```


Here's my Typescript configuration

```
{
  ""ts-node"": {
    ""files"": true
  },
  ""files"": [""src/global.d.ts""],
  ""compilerOptions"": {
    ""target"": ""es6"",
    ""module"": ""commonjs"",
    ""rootDir"": ""./src"",
    ""outDir"": ""./dist"",
    ""esModuleInterop"": true,
    ""moduleResolution"": ""node"",
    ""strict"": true,
    ""noImplicitAny"": false,
    ""resolveJsonModule"": true
  },
  ""include"": [""src/**/*""],
  ""exclude"": [""./node_modules""]
}
```

### Reproduction repo

-

### To reproduce

Set up a Node project with the included Typescript config. Import something from the SDK.

### Additional information

Additionally when importing from the SDK, my linter cannot resolve the module, even though Typescript can. I get around that by disabling a rule. I'm not sure if this is related to the main issue.

```
// eslint-disable-next-line import/no-unresolved
import { logger, task } from '@trigger.dev/sdk/v3';
```

Error: `Unable to resolve path to module '@trigger.dev/sdk/v3'.     eslint(import/no-unresolved)`",,
2409081223,1217,"[TRI-3034] When setting env vars we should ignore `TRIGGER_ACCESS_TOKEN`, `TRIGGER_SECRET_KEY` etc instead of erroring","

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-3034](https://linear.app/triggerdotdev/issue/TRI-3034/when-setting-env-vars-we-should-ignore-trigger-access-token-trigger)</sub>",,
2409003667,1216,"[TRI-3034] When setting env vars we should ignore `TRIGGER_ACCESS_TOKEN`, `TRIGGER_SECRET_KEY` etc instead of erroring","

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-3034](https://linear.app/triggerdotdev/issue/TRI-3034/when-setting-env-vars-we-should-ignore-trigger-access-token-trigger)</sub>",,
2404190421,1212,onFailure isn’t called when a task is canceled,"### Is your feature request related to a problem? Please describe.

I would like to keep track of the status of a task in my database. When the task starts, the DB is updated with a ""STARTED"" status. in the task's `onFailure` I update the database with a ""FAILED"" status. I would also like to track when a job is cancelled from the dashboard ""CANCELED"". I don't see a way to notice that job is canceled. When I cancel a job from the dashboard, neither the `onFailure` or `onSuccess` callbacks are called.

### Describe the solution you'd like to see

I would like to see a new `onCanceled()` callback option when creating a task:

```
task({
  id: 'xyz',
  run: () => ...,
  onCanceled: (payload) => ...
})
```

I would also be satisfied if the `onFailure` callback was run when a job was canceled.

### Describe alternate solutions

I've considered using the Trigger API to check on the job status to see if it was canceled. But that would required setting up a polling or callback mechanism that would be extra work to set up.

### Additional information

_No response_",,
2399325954,1210,feat: Allow injecting ca cert in project,"### Is your feature request related to a problem? Please describe.

I was playing with the self-hosted deployment in an isolated environment with a private registry. Found out that it fails to even build due to private certification authority. 

Build works without problem but can not be run as the entrypoint tries to connect to self hosted trigger.dev api which is secured by self signed/private cert chain.

Allowing to inject private root cert which will allow securely interacting with the internal services would be helpful.

### Describe the solution you'd like to see

A config option to include a ca file which would then be added to `NODE_EXTRA_CA_CERTS=/app/ca.crt` environment variable during docker build and worker initialization.

### Describe alternate solutions

Allow replacing `Containerfile.prod` along with build/runtime variable using config instead of through the project setting. project settings can not even be fetched in this scenario

### Additional information

For others who want to be able to do this in current scenario (tested beta-48), do this

1. install `trigger.dev@beta` as dev dependency instead of running from npx, 

2. add `ca.crt` file in your project and update config `additionalFiles: [""./ca.crt""]` to copy this.

3. in file `node_modules\trigger.dev\dist\Containerfile.prod` update the section for ENV with following
```yaml
ENV TRIGGER_PROJECT_ID=${TRIGGER_PROJECT_ID} \
    # ... ....
    NODE_ENV=production \
    NODE_EXTRA_CA_CERTS=/app/lib/ca.crt # this line
```

4. Update `node_modules\trigger.dev\dist\workers\prod\entry-point.js`, update function `gatherProcessEnv` at the very end of file like this
```js
function gatherProcessEnv() {
  const env = {

    NODE_ENV: process.env.NODE_ENV ?? ""production"",
// ... other config
    NODE_EXTRA_CA_CERTS: process.env.NODE_EXTRA_CA_CERTS, //// THIS LINE
  };
  return Object.fromEntries(Object.entries(env).filter(([key, value]) => value !== void 0));
}
```

step 3 and 4 needs to be done inside `node_modules`, this can be patched with `patch-packages` or `yarn patch`.  caveat is that as of writing this issue, the library is getting updated almost every day.

I can definitely create a pull request over next few days which should fix this if acceptable.",,
2397502335,1206,improve v3 debug experience,"In v2 I used to connect my nextjs app to debugger and let it run, when I want to debug some code I can just set break point in code and re-run the job as much as I want until I solve the issue

in v3 this is not working so well

starting with `npx trigger.dev@beta dev --debugger`

**problem 1**
Seem that debugger start with something like --inspect-brk for every task that run I need to switch to VSCode and press F5 for the task to start run

**problem 2** 
If I have event that start many tasks at the same time, or task that cause the run of other task like in my use case, database change cause webhook, that change other systems that trigger more webhooks, all those are separate tasks, in v3 it is impossible to catch and debug the part I care about as each task start in a new nodejs process 

Will be great if we can improve the DX around debugging tasks and maybe have a debug mode where all tasks run on one nodejs process

Again, this was working fine on v2 as jobs where running on the one nextjs process",,
2388291681,1196,[TRI-2840] Allow `TRIGGER_ACCESS_TOKEN` to be used with the dev command,"## Problem
Using the `TRIGGER_ACCESS_TOKEN` works with the deploy command, which is used in CI (like GitHub Actions).

That token is not currently read from for the `dev` command which means you can't do things like end-to-end tests.

## Solution

We need to read from the access token before we look at the auth config file.

We currently call `isLoggedIn` here: https://github.com/triggerdotdev/trigger.dev/blob/7976d924fb31dcbdcf4698cbbad0a189d799fc2d/packages/cli-v3/src/commands/dev.tsx#L113

But that doesn't use the access token.

Whereas the `login` function does: https://github.com/triggerdotdev/trigger.dev/blob/7976d924fb31dcbdcf4698cbbad0a189d799fc2d/packages/cli-v3/src/commands/login.ts#L78

We might be able to just call the `login` function instead of `isLoggedIn`?

<sub>[TRI-2840](https://linear.app/triggerdotdev/issue/TRI-2840/allow-trigger-access-token-to-be-used-with-the-dev-command)</sub>",,
2380919185,1191,[TRI-2795] Add bun support,"Currently if you use bun it actually just uses npm (we detect a bun lock file and fallback to using npm).

Adding official bun support would mean you could call postinstall scripts using bun and do other bun specific things. As bun is a package manager and a runtime there are various levels of support we could go to. 


<sub>[TRI-2795](https://linear.app/triggerdotdev/issue/TRI-2795/add-bun-support)</sub>",,
2370409861,1180,[TRI-2769] CLI init command in root of pnpm workspace fails (v3),"## Reproduction steps
1. `pnpm dlx trigger.dev@beta init` in the root of a pnpm monorepo that uses pnpm workspaces.

You'll get this error:

```
Running pnpm add @trigger.dev/sdk@3.0.0-beta.40 ERR_PNPM_ADDING_TO_ROOT  Running this command will add the dependency to the workspace root, which might not be what you want - if you really meant it, make it explicit by running this command again with the -w flag (or --workspace-root). If you don't want to see this warning anymore, you may set the ignore-workspace-root-check setting to true.
```

Running with `-w` or `--workspace-root` doesn't work.

## Fix
Allow the `-w` or `--workspace-root` flags.

## Temporary hack

If you experience this before we fix this properly you can temporarily rename the pnpm workspace file, and then run the init command. Not ideal but it will unlock you.



<sub>[TRI-2769](https://linear.app/triggerdotdev/issue/TRI-2769/cli-init-command-in-root-of-pnpm-workspace-fails-v3)</sub>",,
2366798111,1174,[TRI-2755] v3 run log outputs with empty array inside objects aren't shown,"This task:

```ts
export const myTask = task({
  id: 'some-id',
  run: async () => {
    return {
      hooks: [],
    };
});
```

Has the correct output:

```json
{
  ""hooks"": [],
}
```

But in the log data/on the run page is shows just an empty object. This is a bug with the flattenAttributes/unflattenAttributes code we use with our OpenTelemetry pipeline.

<sub>[TRI-2755](https://linear.app/triggerdotdev/issue/TRI-2755/v3-run-log-outputs-with-empty-array-inside-objects-arent-shown)</sub>",,
2347742954,1161,feat: support cloudfront timeouts,"### Is your feature request related to a problem? Please describe.

A nextjs app hosted on cloudfront does work on with trigger.dev because it doesn't catch the 504 response codes.


https://open-next.js.org/

### Describe the solution you'd like to see

```patch
diff --git a/apps/webapp/app/models/endpoint.server.ts b/apps/webapp/app/models/endpoint.server.ts
index e5c1c21..649f86a 100644
--- a/apps/webapp/app/models/endpoint.server.ts
+++ b/apps/webapp/app/models/endpoint.server.ts
@@ -27,6 +27,7 @@ export function detectResponseIsTimeout(rawBody: string, response?: Response) {
 
   return (
     isResponseVercelTimeout(response) ||
+    isResponseCloudfrontTimeout(response) ||
     isResponseDenoDeployTimeout(rawBody, response) ||
     isResponseCloudflareTimeout(rawBody, response)
   );
@@ -50,3 +51,7 @@ function isResponseVercelTimeout(response: Response) {
 function isResponseDenoDeployTimeout(rawBody: string, response: Response) {
   return response.status === 502 && rawBody.includes(""TIME_LIMIT"");
 }
+
+function isResponseCloudfrontTimeout(response: Response) {
+  return response.status === 504 && typeof response.headers.get(""x-amz-cf-id"") === ""string"";
+}
```


### Describe alternate solutions

None

### Additional information

Example Response from cloudfront

```json
{
  ""status"": 504,
  ""runId"": ""[REDACTED]"",
  ""endpoint"": ""https://[REDACTED]/api/trigger"",
  ""headers"": {
    ""connection"": ""keep-alive"",
    ""content-length"": ""1033"",
    ""content-type"": ""text/html"",
    ""date"": ""Wed, 12 Jun 2024 03:30:51 GMT"",
    ""server"": ""CloudFront"",
    ""via"": ""1.1 [REDACTED].cloudfront.net (CloudFront)"",
    ""x-amz-cf-id"": ""[REDCATED]"",
    ""x-amz-cf-pop"": ""[REDACTED]"",
    ""x-cache"": ""Error from cloudfront""
  },
  ""rawBody"": ""<!DOCTYPE HTML PUBLIC \""-//W3C//DTD HTML 4.01 Transitional//EN\"" \""http://www.w3.org/TR/html4/loose.dtd\"">\n<HTML><HEAD><META HTTP-EQUIV=\""Content-Type\"" CONTENT=\""text/html; charset=iso-8859-1\"">\n<TITLE>ERROR: The request could not be satisfied</TITLE>\n</HEAD><BODY>\n<H1>504 ERROR</H1>\n<H2>The request could not be satisfied.</H2>\n<HR noshade size=\""1px\"">\nCloudFront attempted to establish a connection with the origin, but either the attempt failed or the origin closed the connection.\nWe can't connect to the server for this app or website at this time. There might be too much traffic or a configuration error. Try again later, or contact the app or website owner.\n<BR clear=\""all\"">\nIf you provide content to customers through CloudFront, you can find steps to troubleshoot and help prevent this error by reviewing the CloudFront documentation.\n<BR clear=\""all\"">\n<HR noshade size=\""1px\"">\n<PRE>\nGenerated by cloudfront (CloudFront)\nRequest ID: [REDACTED]\n</PRE>\n<ADDRESS>\n</ADDRESS>\n</BODY></HTML>"",
  ""timestamp"": ""2024-06-12T03:30:51.138Z"",
  ""name"": ""webapp"",
  ""message"": ""Endpoint responded with non-200 status code"",
  ""level"": ""debug""
}

```",,
2346756192,1160,"""View logs"" CLI links sometimes don't work when clicked","### Provide environment information

N/A

### Describe the bug

<img width=""595"" alt=""Screenshot 2024-06-11 at 23 41 08"" src=""https://github.com/triggerdotdev/trigger.dev/assets/30871809/69c9ebbc-fff6-4443-8536-faefb45d3b0b"">

After a task run, the terminal suggests going into a link:
https://cloud.trigger.dev/projects/v3/proj_id/runs/run_id​)

this doesn't work, as link must have the org info too:

https://cloud.trigger.dev/orgs/org_name/projects/v3/proj_id/runs/run_id​the 

### Reproduction repo

N/A

### To reproduce

N/A

### Additional information

_No response_",,
2346659576,1159,bug: v3 CLI Error: Span processor did not completed within timeout period,"### Provide environment information

 System:
    OS: macOS 14.5
    CPU: (8) arm64 Apple M2
    Memory: 169.73 MB / 24.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.11.0 - /usr/local/bin/node
    npm: 10.5.2 - ~/myproject/node_modules/.bin/npm

### Describe the bug

The v3 project creator said the project was initialized successfully, and then threw error asking me to open issue on github.

`●     3. Head over to our v3 docs (​https://trigger.dev/docs/v3​) to learn more.
│
●     4. Need help? Join our Discord community (​https://trigger.dev/discord​) or email us at help@trigger.dev
│
└  Project initialized successfully. Happy coding!

✘ [ERROR] An unknown error has occurred. Please open an issue on github with the below:


✘ [ERROR] [

    Error: Span processor did not completed within timeout period of 500 ms
        at Timeout._onTimeout
  (/Users/kamil/.npm/_npx/615bebf0b780b73f/node_modules/@opentelemetry/sdk-trace-base/build/src/BasicTracerProvider.js:109:29)
        at listOnTimeout (node:internal/timers:573:17)
        at process.processTimers (node:internal/timers:514:7)
  ]
`

### Reproduction repo

n/a

### To reproduce

Run the CLI again?

### Additional information

I already had the V2 Project set up in my codebase, it's possible that this somehow interfered with the v3.",,
2346042491,1158,bug: Error when starting trigger.dev with docker-compose connecting to supabase project,"### Provide environment information

```
  System:
    OS: macOS 14.1
    CPU: (8) arm64 Apple M3
    Memory: 2.66 GB / 24.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 18.16.0 - ~/.nvm/versions/node/v18.16.0/bin/node
    Yarn: 1.22.21 - /opt/homebrew/bin/yarn
    npm: 9.5.1 - ~/.nvm/versions/node/v18.16.0/bin/npm
    pnpm: 8.8.0 - ~/.nvm/versions/node/v18.16.0/bin/pnpm
    bun: 1.1.4 - ~/.nvm/versions/node/v18.16.0/bin/bun
```

### Describe the bug

When trying to start the Trigger.dev service using Docker and docker-compose, an error occurs during the deployment of Prisma migrations. The error mentions that there are failed migrations and missing columns in the database.

### Reproduction repo

No reproduction repository is available, but it can be reproduced using the following configuration files and commands.

### To reproduce

1. Run the following command to pull the Docker image:

`docker pull ghcr.io/triggerdotdev/trigger.dev:main`

2. Use the following docker-compose.yml file using valids params for POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, DATABASE_HOST:

```
version: ""3.8""

services:
  triggerdotdev:
    image: ghcr.io/triggerdotdev/trigger.dev:main
    container_name: triggerdotdev
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 3030:3030
```

3. Use the following .env file:

```
LOGIN_ORIGIN=http://localhost:3030
APP_ORIGIN=http://localhost:3030
PORT=3030
REMIX_APP_PORT=3030

# Encryption key that will be used to encrypt magic link tokens
MAGIC_LINK_SECRET=e7bbbffd751b749f4710d529c6964d5d
# Encryption key that will be used to encrypt session cookies
SESSION_SECRET=7acbf2cf1bdb5b43b306bafa03780f9a
# Must be a random 16 byte hex string. You can generate an encryption key by running `openssl rand -hex 16` in your terminal
# WARNING: YOU MUST SET THIS TO A RANDOM VALUE IN PRODUCTION
ENCRYPTION_KEY=8c8e8cec45aeeaf0e01984350f73e1b9

POSTGRES_USER=******
POSTGRES_PASSWORD=******
POSTGRES_DB=******
DATABASE_HOST=******
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}/${POSTGRES_DB}?schema=triggerdotdev

# This sets the URL used for direct connections to the database and should only be needed in limited circumstances
# See: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#fields:~:text=the%20shadow%20database.-,directUrl,-No
DIRECT_URL=${DATABASE_URL}

# Github sign in OAUTH client id and secret (Optional)
# AUTH_GITHUB_CLIENT_ID=
# AUTH_GITHUB_CLIENT_SECRET=

# E-mail settings, ensure the FROM_EMAIL matches what you setup with Resend.com.
# If these are not set, emails will be printed to the console.
# FROM_EMAIL=
# REPLY_TO_EMAIL=
# RESEND_API_KEY=

NODE_ENV=production
RUNTIME_PLATFORM=docker-compose
```


4. Run the command:

`docker-compose up`

### Additional information

```
triggerdotdev  | + [ -n ******]
triggerdotdev  | + scripts/wait-for-it.sh  ****** -- echo database is up
triggerdotdev  | Unknown argument: ******
triggerdotdev  | Usage:
triggerdotdev  |   scripts/wait-for-it.sh host:port|url [-t timeout] [-- command args]
triggerdotdev  |   -q | --quiet                        Do not output any status messages
triggerdotdev  |   -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
triggerdotdev  |   -- COMMAND ARGS                     Execute command with args after the test finishes
triggerdotdev  | + pnpm --filter @trigger.dev/database db:migrate:deploy
triggerdotdev  | 
triggerdotdev  | > @trigger.dev/database@0.0.1 db:migrate:deploy /triggerdotdev/packages/database
triggerdotdev  | > prisma migrate deploy
triggerdotdev  | 
triggerdotdev  | Prisma schema loaded from prisma/schema.prisma
triggerdotdev  | Datasource ""db"": PostgreSQL database ""postgres"", schema ""triggerdotdev"" at ******
triggerdotdev  | 
triggerdotdev  | 508 migrations found in prisma/migrations
triggerdotdev  | 
triggerdotdev  | Error: P3009
triggerdotdev  | 
triggerdotdev  | migrate found failed migrations in the target database, new migrations will not be applied. Read more about how to resolve migration issues in a production database: https://pris.ly/d/migrate-resolve
triggerdotdev  | The `20240130165343_add_composite_index_to_job_run_for_job_id_and_created_at` migration started at 2024-06-11 09:59:01.840235 UTC failed
triggerdotdev  | 
triggerdotdev  | 
triggerdotdev  | /triggerdotdev/packages/database:
triggerdotdev  |  ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  @trigger.dev/database@0.0.1 db:migrate:deploy: `prisma migrate deploy`
triggerdotdev  | Exit status 1
triggerdotdev  | + cp packages/database/prisma/schema.prisma apps/webapp/prisma/
triggerdotdev  | + cp node_modules/@prisma/engines/libquery_engine-linux-arm64-openssl-1.1.x.so.node apps/webapp/prisma/
triggerdotdev  | + pnpm --filter webapp db:seed
triggerdotdev  | 
triggerdotdev  | > webapp@1.0.0 db:seed /triggerdotdev/apps/webapp
triggerdotdev  | > node prisma/seed.js
triggerdotdev  | 
triggerdotdev  | 🔌 setting up prisma client to postgresql://******@******/******?schema=triggerdotdev&connection_limit=10&pool_timeout=60
triggerdotdev  | 🔌 prisma client connected
triggerdotdev  | 🔌 No database replica, using the regular client
triggerdotdev  | prisma:info Starting a postgresql pool with 10 connections.
triggerdotdev  | Upserting auth method airtable.oauth2
triggerdotdev  | Upserting auth method github.oauth2
triggerdotdev  | Upserting auth method linear.oauth2
triggerdotdev  | Upserting auth method slack.oauth2Bot
triggerdotdev  | Upserting auth method slack.oauth2User
triggerdotdev  | Upserting auth method supabase-management.oauth2
triggerdotdev  | Running data migration 2023-09-27-AddStagingEnvironments
triggerdotdev  | prisma:error 
triggerdotdev  | Invalid `prisma.project.findMany()` invocation:
triggerdotdev  | 
triggerdotdev  | 
triggerdotdev  | The column `Project.deletedAt` does not exist in the current database.
triggerdotdev  | PrismaClientKnownRequestError: 
triggerdotdev  | Invalid `prisma.project.findMany()` invocation:
triggerdotdev  | 
triggerdotdev  | 
triggerdotdev  | The column `Project.deletedAt` does not exist in the current database.
triggerdotdev  |     at Cn.handleRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:123:6809)
triggerdotdev  |     at Cn.handleAndLogRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:123:6198)
triggerdotdev  |     at Cn.request (/triggerdotdev/apps/webapp/prisma/seed.js:123:5918)
triggerdotdev  |     at async d (/triggerdotdev/apps/webapp/prisma/seed.js:128:9968)
triggerdotdev  |     at async /triggerdotdev/apps/webapp/prisma/seed.js:632:90313
triggerdotdev  |     at async Proxy._transactionWithCallback (/triggerdotdev/apps/webapp/prisma/seed.js:128:8631)
triggerdotdev  |     at async ny (/triggerdotdev/apps/webapp/prisma/seed.js:632:90028)
triggerdotdev  |     at async iy (/triggerdotdev/apps/webapp/prisma/seed.js:632:89993)
triggerdotdev  |     at async ly (/triggerdotdev/apps/webapp/prisma/seed.js:632:90855) {
triggerdotdev  |   code: 'P2022',
triggerdotdev  |   clientVersion: '5.4.1',
triggerdotdev  |   meta: { column: 'Project.deletedAt' }
triggerdotdev  | }
triggerdotdev  | + cd /triggerdotdev/apps/webapp
triggerdotdev  | + NODE_PATH=/triggerdotdev/node_modules/.pnpm/node_modules exec dumb-init node --max-old-space-size=8192 ./build/server.js
triggerdotdev  | 🔌 setting up prisma client to postgresql://******@******/postgres?schema=triggerdotdev&connection_limit=10&pool_timeout=60
triggerdotdev  | 🔌 prisma client connected
triggerdotdev  | 🔌 No database replica, using the regular client
triggerdotdev  | 🔦 Tracer: Logger exporter enabled (sampling = 0.05)
triggerdotdev  | Could not initialize MarQS because process.env.REDIS_HOST and process.env.REDIS_PORT are required to be set. Trigger.dev v3 will not work without this.
triggerdotdev  | /triggerdotdev/apps/webapp/build/index.js:14414
triggerdotdev  |     throw new Error(
triggerdotdev  |     ^
triggerdotdev  | 
triggerdotdev  | Error: Could not initialize auto-increment counter because process.env.REDIS_HOST and process.env.REDIS_PORT are required to be set. 
triggerdotdev  |     at getAutoIncrementCounter (/triggerdotdev/apps/webapp/build/index.js:14414:11)
triggerdotdev  |     at singleton (/triggerdotdev/apps/webapp/build/index.js:3073:84)
triggerdotdev  |     at Object.<anonymous> (/triggerdotdev/apps/webapp/build/index.js:14411:27)
triggerdotdev  |     at Module._compile (node:internal/modules/cjs/loader:1376:14)
triggerdotdev  |     at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)
triggerdotdev  |     at Module.load (node:internal/modules/cjs/loader:1207:32)
triggerdotdev  |     at Module._load (node:internal/modules/cjs/loader:1023:12)
triggerdotdev  |     at Module.require (node:internal/modules/cjs/loader:1235:19)
triggerdotdev  |     at require (node:internal/modules/helpers:176:18)
triggerdotdev  |     at Object.<anonymous> (/triggerdotdev/apps/webapp/build/server.js:37:15)
triggerdotdev  | 
triggerdotdev  | Node.js v20.11.1
triggerdotdev exited with code 1
```",,
2342155710,1156,[TRI-2668] logger.trace should have the output as attributes,"If you return data from `logger.trace` it should appear in the OTEL attributes from the span.

```ts
const bar = await logger.trace('key', async() => { return foo });
```

The same as we do for attempts.

<sub>[TRI-2668](https://linear.app/triggerdotdev/issue/TRI-2668/loggertrace-should-have-the-output-as-attributes)</sub>",,
2342144327,1155,[TRI-2667] V3 schedules should show in UTC time in the dashboard,"In some places they're in local time and it's not clear

<sub>[TRI-2667](https://linear.app/triggerdotdev/issue/TRI-2667/v3-schedules-should-show-in-utc-time-in-the-dashboard)</sub>",,
2336743518,1148,[TRI-2660] `execa is not a function` when running the `trigger.dev dev` command,"If you see `execa is not a function` then you need to upgrade Node.js.

## Fix
Upgrade Node.js to v18.5.0+ or v20.5.0+

<sub>[TRI-2660](https://linear.app/triggerdotdev/issue/TRI-2660/execa-is-not-a-function-when-running-the-triggerdev-dev-command)</sub>",,
2329858839,1144,[TRI-2630] Logging in with the same email but different case creates a new account,"If you login with [test@gmail.com](mailto:test@gmail.com) and [test@Gmail.com](mailto:test@Gmail.com) you will create two accounts.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-2630](https://linear.app/triggerdotdev/issue/TRI-2630/logging-in-with-the-same-email-but-different-case-creates-a-new)</sub>",,
2327844849,1143,"Embed `@anatine/esbuild-decorators` into `trigger.dev` package, causing unnecessary peer dependency warnings",This package seems pretty dead (see [this issue](https://github.com/anatine/esbuildnx/issues/25)). We should just extract out the code and stick it directly in the `trigger.dev` CLI package (with proper attribution).,,
2325874346,1140,Issue on docs,"Path: /v3/open-source-self-hosting


When we'll get the update doc on self-hosting.",,
2323604004,1137,[TRI-2618] Overriding the queue when calling trigger/triggerAndWait isn't working,"## Reproduction

```ts
const run3 = await simpleChildTask.trigger(
  { message: ""Hello, World again!"" },
  {
    queue: {
      name: ""my-other-queue"",
      concurrencyLimit: 3,
    },
  }
);
```

The queue here isn't used, it just uses the queue on the task. This is because it's not being passed through, it is with batchTrigger or batchTriggerAndWait.

## Solution
We need to pass the option through. We also need to merge the properties because it's possible to specify a concurrencyLimit but not a name which is bad.

<sub>[TRI-2618](https://linear.app/triggerdotdev/issue/TRI-2618/overriding-the-queue-when-calling-triggertriggerandwait-isnt-working)</sub>",,
2321503298,1136,Issue on docs,"Path: /v3/management-replay-run

None of the api routes have documentation",,
2309820652,1118,bug: Missing Adaptor for Shopify Integration,"### Provide environment information

  System:
    OS: Linux 5.15 Ubuntu 22.04.4 LTS 22.04.4 LTS (Jammy Jellyfish)
    CPU: (16) x64 AMD Ryzen 7 3800X 8-Core Processor
    Memory: 4.98 GB / 7.73 GB
    Container: Yes
    Shell: 5.1.16 - /bin/bash
  Binaries:
    Node: 20.9.0 - /run/user/1000/fnm_multishells/360_1716363433225/bin/node
    Yarn: 1.22.21 - /run/user/1000/fnm_multishells/360_1716363433225/bin/yarn
    npm: 10.1.0 - /run/user/1000/fnm_multishells/360_1716363433225/bin/npm
    pnpm: 9.1.2 - ~/.local/share/pnpm/pnpm

### Describe the bug

There is an issue with the current shopify integration version `beta.33` where there is no adaptor implementation. This issue happens both on the cloud enviroment and self hosted (fly.io - docker image) version.

![image](https://github.com/triggerdotdev/trigger.dev/assets/55840806/f982ae56-eeb8-491d-b5aa-7cce577d6617)

Patching the adaptor with pnpm fixes this issue

<details>
<summary>Patch File</summary>

```js
diff --git a/dist/index.mjs b/dist/index.mjs
index 8ac687e936ae2bf87663942406bf927a1e9075b4..0d8e7e9bce9238d49c61f07e974d36ebb45baf5f 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1,3 +1,4 @@
+import '@shopify/shopify-api/adapters/node';
 import { WebhookTrigger, WebhookSource, verifyRequestSignature, retry, slugifyId } from '@trigger.dev/sdk';
 import { ShopifyError, HttpRetriableError, HttpThrottlingError, shopifyApi, LATEST_API_VERSION, LogSeverity } from '@shopify/shopify-api';
 import { restResources } from '@shopify/shopify-api/rest/admin/2023-10';
```

</details>

### Reproduction repo

https://cloud.trigger.dev/orgs/webified-994c/projects/sz-erp-QAr9/jobs/webhook.register.shopify-aea7b74/runs/clwgmgl4edhqhn6305yh861tc/trigger

### To reproduce

Example run on the cloud instance:
https://cloud.trigger.dev/orgs/webified-994c/projects/sz-erp-QAr9/jobs/webhook.register.shopify-aea7b74/runs/clwgmgl4edhqhn6305yh861tc/trigger


### Additional information

More info about shopify js runtime adaptors can be found [here](https://github.com/Shopify/shopify-app-js/tree/main/packages/apps/shopify-api#readme).",,
2306501196,1114,bug: Supabase integration does not work with custom domains,"### Provide environment information

Problem: If a user has a [custom domain](https://supabase.com/docs/guides/platform/custom-domains) and adds that to their environment variables Trigger.dev is not able to use the Supabase Management API.


The issue seems to be trigger is using the URL from the config (expecting {project-id}.supabase.co format). 

But if it's a custom domain trigger extracts the subdomain and uses that as the project id.


**Reproduction**

Add a custom domain in a supabase project

Add the custom domain to the .env

Note how triggers are not created and received a 403 error.

**Workaround**

The user must use the {project-id}.supabase.co format in their environment.

I do not know if there are other issues with doing this yet but suspect so.

**Suggested fix**

If the supabase url is not in the {project-id}.supabase.co format, do an nslookup to see where it redirects and get the project-id.

### Describe the bug

Problem: If a user has a [custom domain](https://supabase.com/docs/guides/platform/custom-domains) and adds that to their environment variables Trigger.dev is not able to use the Supabase Management API.


The issue seems to be trigger is using the URL from the config (expecting {project-id}.supabase.co format). 

But if it's a custom domain trigger extracts the subdomain and uses that as the project id.


### Reproduction repo

n/a described below

### To reproduce

**Reproduction**

Add a custom domain in a supabase project

Add the custom domain to the .env

Note how triggers are not created and received a 403 error.

**Workaround**

The user must use the {project-id}.supabase.co format in their environment.

I do not know if there are other issues with doing this yet but suspect so.


### Additional information

**Workaround**

The user must use the {project-id}.supabase.co format in their environment.

I do not know if there are other issues with doing this yet but suspect so.

**Suggested fix**

If the supabase url is not in the {project-id}.supabase.co format, do an nslookup to see where it redirects and get the project-id.",,
2304334446,1112,feat: V3 - Add a `getEnvVars` function,"### Is your feature request related to a problem? Please describe.

No

### Describe the solution you'd like to see

A function that a user can define called `getEnvVars` in the config. This function would be run on `deploy` (with `process.env.NODE_ENV === 'production'`  and `dev`. Whatever the function returns is used as env vars for that deployment

Example function:

```js
async function getEnvVars() {
  if (process.env.NODE_ENV === 'development') {
    return process.env // i use direnv to load env vars, this would expose those to trigger
  }
  
  const vars = await infisicalSDK.getEnvVars() // fake function, can be any third party service
  return vars
}
```

### Describe alternate solutions

N/A

### Additional information

https://discord.com/channels/1066956501299777596/1222172315152945283/1234572031803265166",,
2274917470,1081,[TRI-2447] v3 CLI init if you put `/trigger` for the path it goes in the root of your drive,"## Problem
If you put `/trigger` for the folder path it goes in the root of your drive. It should be relative to the current directory where the command is run from.

<sub>[TRI-2447](https://linear.app/triggerdotdev/issue/TRI-2447/v3-cli-init-if-you-put-trigger-for-the-path-it-goes-in-the-root-of)</sub>",,
2265532531,1066,"[TRI-2392] bug: When selecting an environment from the dropdown, it's not listed correctly in the table blank state","### Provide environment information

Seen on Test cloud

### Describe the bug

When selecting an environment from the dropdown, it's not listed correctly in the table blank state

### Reproduction repo

Seen on Test cloud

### To reproduce

On the Runs page, select an environment from the filters that has no runs.

![CleanShot 2024-04-26 at 11 55 12](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/768fa0a8-5e2b-428e-bff5-3aefcff84847/92e56b36-db6c-4aba-b0d7-f6eb0b82f936?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC83NjhmYTBhOC01ZTJiLTQyOGUtYmZmNS0zYWVmY2ZmODQ4NDcvOTJlNTZiMzYtZGI2Yy00YWJhLWIwZDctZjZlYjBiODJmOTM2IiwiaWF0IjoxNzE0MTI4OTUyLCJleHAiOjE3MTQyMTUzNTJ9.ilVVUypjBk0qxQwi_g8oqdKdOTEi101N-9fPZjEODiU)

### Additional information

*No response*

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-2392](https://linear.app/triggerdotdev/issue/TRI-2392/bug-when-selecting-an-environment-from-the-dropdown-its-not-listed)</sub>",,
2263892967,1062,[TRI-2388] Force verification when changing email address,"You can update your email address in your profile (when logged in). We don't verify the new email address.

## Suggested fix
1. Users can request an email address change, but it is in a pending state. It keeps the old email until verified.
2. Once verified it switches to the new email.

This will require a new table in Postgres for when an email address is in progress. Or we could move to have multiple authentication methods for an account.

<sub>[TRI-2388](https://linear.app/triggerdotdev/issue/TRI-2388/force-verification-when-changing-email-address)</sub>",,
2259210667,1053,[TRI-2377] bug: `useEventDetails` React hook throws an error when the event is not found,"### Provide environment information

Latest packages (2.3.18)

### Describe the bug

When passed an event ID that is not found, the fetch for the event details returns a 404, which zodfetch swallows and returns undefined, leading Tanstack Query to throw an error and repeatedly try and refetch the 404 URL.

![CleanShot 2024-04-23 at 16 43 54@2x](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/32dce2a5-8479-45b5-abd7-4182bdceb71f/e09f48c3-9825-4098-81bf-9d41e96b8dc0?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC8zMmRjZTJhNS04NDc5LTQ1YjUtYWJkNy00MTgyYmRjZWI3MWYvZTA5ZjQ4YzMtOTgyNS00MDk4LTgxYmYtOWQ0MWU5NmI4ZGMwIiwiaWF0IjoxNzEzODg3MTA2LCJleHAiOjE3MTM5NzM1MDZ9.EvbvnTGMS6Go9s2ZdQanl-FUNW6jknrctgMhUcOYk7c)

### Reproduction repo

n/a

### To reproduce

Pass an eventID that does not exist to useEventDetails

### Additional information

*No response*

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-2377](https://linear.app/triggerdotdev/issue/TRI-2377/bug-useeventdetails-react-hook-throws-an-error-when-the-event-is-not)</sub>",,
2253601350,1047,[TRI-2329] v2 Job/Runs page scrolling is broken,"Reproduction steps

1. In a v2 project
2. Click through to a Job that has a lot of runs
3. Make your window smaller and try to scroll the page, it doesn't scroll

![CleanShot 2024-04-19 at 19 10 09@2x](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/d6eb58d0-db54-4d24-989b-b009dc6c9289/37d708fa-8900-4ca1-9571-e54673c3596d?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9kNmViNThkMC1kYjU0LTRkMjQtOTg5Yi1iMDA5ZGM2YzkyODkvMzdkNzA4ZmEtODkwMC00Y2ExLTk1NzEtZTU0NjczYzM1OTZkIiwiaWF0IjoxNzEzNTUwMzIyLCJleHAiOjE3MTM2MzY3MjJ9.qo9KP6md8mlewvdSiYDtt_0g4w1Ye9lng59FUkzblFY)

![CleanShot 2024-04-22 at 09.20.02@2x.png](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/b432bb7a-7d72-409c-9524-99cf20ce5cd3/2969622f-deb8-4417-a1cc-b00dd631ecc7?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9iNDMyYmI3YS03ZDcyLTQwOWMtOTUyNC05OWNmMjBjZTVjZDMvMjk2OTYyMmYtZGViOC00NDE3LWExY2MtYjAwZGQ2MzFlY2M3IiwiaWF0IjoxNzEzNzc0MDcyLCJleHAiOjE3MTM4NjA0NzJ9.pWeguHsoHfmHGOOq_apmY4wS_yrM1juV0nk6i4uJau0)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-2329](https://linear.app/triggerdotdev/issue/TRI-2329/v2-jobruns-page-scrolling-is-broken)</sub>",,
2250300514,1041,[TRI-2314] Changing a Job the version and disabling at the same time doesn't disable the Job (v2),"## Steps to reproduce
1. Take an existing Job that is visible and enabled in the dashboard
2. Change the version and set `enabled: false` in your code
3. Run the CLI dev command `npx @trigger.dev/cli@latest dev` and/or push to prod and follow the deployments guide so indexing happens
4. It won't get disabled in the dashboard

## Workaround
1. Increase the version number and set `enabled: true`
2. Index the Job by running the dev CLI and/or deploying
3. Then set `enabled: false`
4. Index the Job by running the dev CLI and/or deploying.

## Fix
It should get disabled. I think this is happening because when a Job is disabled the versions are ignored.



<sub>[TRI-2314](https://linear.app/triggerdotdev/issue/TRI-2314/changing-a-job-the-version-and-disabling-at-the-same-time-doesnt)</sub>",,
2247600204,1037,bug: NestJS workers are not cleaned-up,"### Provide environment information

  System:
    OS: macOS 14.4.1
    CPU: (10) arm64 Apple M1 Pro
    Memory: 192.55 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 18.14.1 - ~/.nvm/versions/node/v18.14.1/bin/node
    Yarn: 1.22.22 - ~/.nvm/versions/node/v18.14.1/bin/yarn
    npm: 9.3.1 - ~/.nvm/versions/node/v18.14.1/bin/npm
    pnpm: 8.6.3 - ~/.nvm/versions/node/v18.14.1/bin/pnpm

### Describe the bug

The processes are not terminating leading the system to out-of-memory

### Reproduction repo

https://github.com/erikash/trigger-nestjs

### To reproduce

Trigger the `synchronizeAllEmployees` job.
Watch the memory and `trigger` processes count only go up and your system running out of memory

### Additional information

![trigger](https://github.com/triggerdotdev/trigger.dev/assets/140349/253825b7-932f-4f6b-bd7b-c71ecb6f92ed)
",,
2246430433,1035,bug: Broken installation following quick start steps,"### Provide environment information

```
  System:
    OS: Linux 5.15 Ubuntu 22.04.2 LTS 22.04.2 LTS (Jammy Jellyfish)
    CPU: (24) x64 12th Gen Intel(R) Core(TM) i9-12900HX
    Memory: 6.74 GB / 15.47 GB
    Container: Yes
    Shell: 5.1.16 - /bin/bash
  Binaries:
    Node: 18.16.0 - ~/.nvm/versions/node/v18.16.0/bin/node
    npm: 9.5.1 - ~/.nvm/versions/node/v18.16.0/bin/npm
```

### Describe the bug

After following the [v3 quick start guide](https://trigger.dev/docs/v3/quick-start) in an existing next.js app and setting up a call to trigger a job, I get two different kinds of errors when I run the next app:

1. **Broken OpenTelemetry**
```
 ⚠ ./node_modules/@opentelemetry/instrumentation/build/src/platform/node/instrumentation.js
Critical dependency: the request of a dependency is an expression

Import trace for requested module:
./node_modules/@opentelemetry/instrumentation/build/src/platform/node/instrumentation.js
./node_modules/@opentelemetry/instrumentation/build/src/platform/node/index.js
./node_modules/@opentelemetry/instrumentation/build/src/platform/index.js
./node_modules/@opentelemetry/instrumentation/build/src/index.js
./node_modules/@trigger.dev/core/dist/v3/index.mjs
./node_modules/@trigger.dev/sdk/dist/v3/index.mjs
./trigger/some-job.ts
./app/api/…/route.ts

./node_modules/@opentelemetry/instrumentation/build/src/platform/node/instrumentation.js
```

These can errors can be silenced with the workaround [posted here](https://github.com/open-telemetry/opentelemetry-js/issues/4173#issuecomment-1822938936), but it's unclear to me whether there's actually a problem.

2. **Broken invocations**
  Trying to invoke a Trigger job results in an error:
```
 ⚠ ./node_modules/engine.io-client/node_modules/ws/lib/buffer-util.js
Module not found: Can't resolve 'bufferutil' in './node_modules/engine.io-client/node_modules/ws/lib'

Import trace for requested module:
./node_modules/engine.io-client/node_modules/ws/lib/buffer-util.js
./node_modules/engine.io-client/node_modules/ws/lib/sender.js
./node_modules/engine.io-client/node_modules/ws/wrapper.mjs
./node_modules/engine.io-client/build/esm-debug/transports/websocket-constructor.js
./node_modules/engine.io-client/build/esm-debug/index.js
./node_modules/socket.io-client/build/esm-debug/url.js
./node_modules/socket.io-client/build/esm-debug/index.js
./node_modules/@trigger.dev/core/dist/v3/index.mjs
./node_modules/@trigger.dev/sdk/dist/v3/index.mjs
./trigger/some-job.ts
./app/api/…/route.ts

./node_modules/engine.io-client/node_modules/ws/lib/validation.js
Module not found: Can't resolve 'utf-8-validate' in './node_modules/engine.io-client/node_modules/ws/lib'

Import trace for requested module:
./node_modules/engine.io-client/node_modules/ws/lib/validation.js
./node_modules/engine.io-client/node_modules/ws/lib/sender.js
./node_modules/engine.io-client/node_modules/ws/wrapper.mjs
./node_modules/engine.io-client/build/esm-debug/transports/websocket-constructor.js
./node_modules/engine.io-client/build/esm-debug/index.js
./node_modules/socket.io-client/build/esm-debug/url.js
./node_modules/socket.io-client/build/esm-debug/index.js
./node_modules/@trigger.dev/core/dist/v3/index.mjs
./node_modules/@trigger.dev/sdk/dist/v3/index.mjs
./trigger/some-job.ts
./app/api/…/route.ts
```

Running `npm install bufferutil utf-8-validate` seems to solve the problem.

### Reproduction repo

-

### To reproduce

In an existing next.js app, follow the steps in the [quick start guide](https://trigger.dev/docs/v3/quick-start).  Specifically, `npx trigger.dev@beta init`.

Occurred with `@trigger.dev/sdk` `3.0.0-beta.12`.

### Additional information

_No response_",,
2242179001,1032,bug(v3): bun trigger.dev init uses `npm` for install,"### Provide environment information

not needed

### Describe the bug

```
◇  Failed to install @trigger.dev/sdk@beta. Rerun command with --log-level debug for more details.
X Error: Command failed with exit code 1: npm install @trigger.dev/sdk@beta
```

`npm install` failed because of some npm dependancy issue, which is not related to this issue.



### Reproduction repo

not needed

### To reproduce

run:
```
bunx trigger.dev@beta init -p proj_TOKEN
```

### Additional information

_No response_
```[tasklist]
### Tasks
```
",,
2242089730,1031,bug: Request with GET/HEAD method cannot have body.,"### Provide environment information

```shell
System:
    OS: macOS 14.4.1
    CPU: (10) arm64 Apple M2 Pro
    Memory: 571.42 MB / 32.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.12.1 - ~/Library/pnpm/node
    Yarn: 1.22.22 - /opt/homebrew/bin/yarn
    npm: 10.5.0 - ~/Library/pnpm/npm
    pnpm: 8.15.4 - ~/Library/pnpm/pnpm
    bun: 1.1.2 - /opt/homebrew/bin/bun
```

### Describe the bug

I try to access the trigger url from my server: http://localhost:3000/api/trigger
I know it does not support GET request for the api, but Is there any way that make the error does not sound like `Internal error`?

### Reproduction repo

N/A

### To reproduce

Create a new project and deploy with pages folder (nextjs 12). I am using trigger v2

`pages/api/trigger.tsx`

```tsx
import { createPagesRoute } from ""@trigger.dev/nextjs"";
import { trigger } from ""@utils/trigger"";

import ""@jobs/index"";

// this route is used to send and receive data with Trigger.dev
const { handler, config } = createPagesRoute(trigger);

export { config };
export default handler;
```

### Additional information

_No response_",,
2240658594,1029,feat: allow alternatives to zod,"### Is your feature request related to a problem? Please describe.

There are a lot of great schema validators out there and each have there pros and cons. However, forcing the trigger.dev user into using only one specific package is restrictive and doesn't necessarily fit into every project's configuration. For instance, if I prefer the yup library and already have a bunch of my schemas defined with yup, then I do not want to duplicate those in zod as well. 

There is also an issue with resolving peer dependencies on zod that can cause TS infinite loops due to schema parsing when zod is not the same version. To solve this, a simple ""resolutions"" block in package.json can be used. 



### Describe the solution you'd like to see

I'd like to see a solution similar to [@hookform/resolvers 
](https://github.com/react-hook-form/resolvers) so that more than one validator library could be used. 

### Describe alternate solutions

N/A

### Additional information

_No response_",,
2240309854,1026,[TRI-1948] Self-hosting: non-public schemas will fail on the initial db migrations,"A migration was accidentally added that had a hard-coded reference to ""public"". We can't just remove that because it will cause a mismatch between the applied migrations table hash and the migration files. 

### Potential fix

* Update the migration to fix it.
* Add a script that runs before `db migrate deploy` in shell startup script.
  * Update hash for the bad migration.
  * Make that SQL available to run somewhere else, maybe in a Readme

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1948](https://linear.app/triggerdotdev/issue/TRI-1948/self-hosting-non-public-schemas-will-fail-on-the-initial-db-migrations)</sub>",,
2235643706,1021,"[TRI-2216] Windows CLI init, dev, deploy commands don't work yet","There are Windows specific issues when using `init`, `dev` and `deploy`. They are generally related to paths, but some of them are trickier because of the bundling code using esbuild.

- [X] `init`
- [ ] `dev`
- [ ] `deploy`

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-2216](https://linear.app/triggerdotdev/issue/TRI-2216/windows-cli-init-dev-deploy-commands-dont-work-yet)</sub>",,
2235111959,1018,[TRI-2210] Static IP addresses for whitelisting,"Some services provide security by locking to a specific list of whitelisted IP addresses. Currently we don't provide static IP address support for your workers in v3.

## Current workaround
Proxy traffic through your existing infrastructure. This isn't ideal but should work.

<sub>[TRI-2210](https://linear.app/triggerdotdev/issue/TRI-2210/static-ip-addresses-for-whitelisting)</sub>",,
2235097001,1017,[TRI-2209] CLI init: If there's no `include` in the `tsconfig.ts` file then don't add `trigger.config.ts` to it (v3),"If you don't have `include` in your `tsconfig.json` TypeScript includes all TypeScript files inside the project directory.

Currently our CLI adds `trigger.config.ts` to `include` always.

```json
{
  ""extends"": ""@tsconfig/node18/tsconfig.json"",
  ""compilerOptions"": {
    ""module"": ""esnext"",
    ""moduleResolution"": ""node"",
    ""resolveJsonModule"": true,
    ""jsx"": ""preserve"",
    ""noUncheckedIndexedAccess"": true
  },
  ""include"": [""trigger.config.ts""] // <= this is the newly added line
}
```

This breaks TypeScript for every other files because now they don't match anymore.

## Fix
If there's no existing include then don't add `trigger.config.ts`.


<sub>[TRI-2209](https://linear.app/triggerdotdev/issue/TRI-2209/cli-init-if-theres-no-include-in-the-tsconfigts-file-then-dont-add)</sub>",,
2235077555,1016,[TRI-2208] Bulk import environment variables (v3),"The ability to copy+paste a load of environment variables at once.

Important considerations
- We have multiple environments, so you'll want to select an environment (or possibly multiple? Possibly a bit weird given they're normally different across environments).
- What should we do if there's an existing env var in that environment with the same key? Just override? Or possibly it should have a red warning next to it so you can choose to remove it before you confirm?

<sub>[TRI-2208](https://linear.app/triggerdotdev/issue/TRI-2208/bulk-import-environment-variables-v3)</sub>",,
2235066778,1015,"[TRI-2207] If you hit the API rate limit, the estimate of when it will retry is incorrect","Possible the values are in nanoseconds or something. It's using the Upstash RateLimit package (but attached to regular Redis). Code here: [https://github.com/triggerdotdev/trigger.dev/blob/a5aed0d1395814234ff25347c43b0f71f4a15ab2/apps/webapp/app/services/apiRateLimit.server.ts#L166](https://github.com/triggerdotdev/trigger.dev/blob/a5aed0d1395814234ff25347c43b0f71f4a15ab2/apps/webapp/app/services/apiRateLimit.server.ts#L166)

![CleanShot 2024-04-10 at 09 42 32](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/d8259a4c-d9c9-4b9d-a5ba-8525ebc714d1/2f8b8c5e-a7d2-47e2-b21a-3a586602a3e5?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9kODI1OWE0Yy1kOWM5LTRiOWQtYTViYS04NTI1ZWJjNzE0ZDEvMmY4YjhjNWUtYTdkMi00N2UyLWIyMWEtM2E1ODY2MDJhM2U1IiwiaWF0IjoxNzEyNzM4Njg0LCJleHAiOjE3MTI4MjUwODR9.FQ1ZLrJ97cMoeCV_EPbcvrc6pFwIQ0CQkKXMHES6Z5U)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-2207](https://linear.app/triggerdotdev/issue/TRI-2207/if-you-hit-the-api-rate-limit-the-estimate-of-when-it-will-retry-is)</sub>",,
2233557166,1014,[TRI-2206] Dev option so logs come through to the local console  (v3),"When running the v3 CLI logs only go to the platform, they're not visible in your local terminal.

We should add a setting to `trigger.config`, e.g. `logToConsole: boolean`. 

The logs would need to be prefixed with the run_id (multiple runs can be happening at once)

<sub>[TRI-2206](https://linear.app/triggerdotdev/issue/TRI-2206/dev-option-so-logs-come-through-to-the-local-console-v3)</sub>",,
2220507116,997,bug: Errant Link on Next.js docs,"### Provide environment information

x

### Describe the bug

The link on Examples on the Next.js page hits a 404 because the URL is https://trigger.dev/trigger.dev/apis

### Reproduction repo

https://github.com/mattdecrevel/trigger.dev

### To reproduce

Visit https://trigger.dev/docs/documentation/quickstarts/nextjs and scroll to Examples

### Additional information

_No response_",,
2214238601,986,[TRI-2156] Changing a job from interval to eventTrigger keeps getting run by the interval trigger,"Changing from interval to another type of trigger should stop the interval.

<sub>[TRI-2156](https://linear.app/triggerdotdev/issue/TRI-2156/changing-a-job-from-interval-to-eventtrigger-keeps-getting-run-by-the)</sub>",,
2204326319,966,bug: Environment & Status pickers don't work for a single job view,"### Provide environment information

macOS 13.6.1 (22G313)
Arc Version 1.35.0 (47750)
Chromium Engine Version 123.0.6312.59

### Describe the bug

It's not possible to filter job runs based on the environment or status. When clicking on the filtering element, website throws an error to the console.

<img width=""543"" alt=""Screenshot 2024-03-24 at 18 07 01"" src=""https://github.com/triggerdotdev/trigger.dev/assets/30871809/60fb9719-0a83-4867-99be-e20d2745bca8"">


### Reproduction repo

N/A

### To reproduce

Open cloud.trigger.dev, go to Jobs list and open a single job. Try to filter Environment or Status.

### Additional information

_No response_",,
2177414538,935,[TRI-2048] Better handle `fetch` throwing errors in our ApiClient,"As you can see in the code below, we aren't handling any thrown errors by fetch:

https://github.com/triggerdotdev/trigger.dev/blob/5d78bba5e3fda2668bbd1d3d67f8ba4c4479c559/packages/trigger-sdk/src/apiClient.ts#L888

This can lead to issues when the fetch times out and throws an error. We should fix this and also investigate which other errors can be thrown and handle those with retries (if it makes sense).

<sub>[TRI-2048](https://linear.app/triggerdotdev/issue/TRI-2048/better-handle-fetch-throwing-errors-in-our-apiclient)</sub>",,
2175571258,930,bug: `TriggerProvider` throws error in pages directory,"### Provide environment information

```sh
System:
    OS: macOS 14.2.1
    CPU: (12) arm64 Apple M2 Max
    Memory: 7.36 GB / 64.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.8.0 - ~/.pkgx/nodejs.org/v20.8.0/bin/node
    npm: 10.1.0 - ~/.pkgx/npmjs.com/v10.1.0/bin/npm
  Managers:
    pip3: 23.2.1 - ~/.pkgx/pip.pypa.io/v23.2.1/bin/pip3
    RubyGems: 3.0.3.1 - /usr/bin/gem
  Utilities:
    Make: 3.81 - /usr/bin/make
    GCC: 15.0.0 - /usr/bin/gcc
    Git: 2.42.0 - /Users/mfts/.pkgx/git-scm.org/v2.42.0/bin/git
    Clang: 15.0.0 - /usr/bin/clang
    Curl: 8.3.0 - /Users/mfts/.pkgx/curl.se/v8.3.0/bin/curl
  Servers:
    Apache: 2.4.56 - /usr/sbin/apachectl
  Virtualization:
    Docker: 24.0.6 - /usr/local/bin/docker
  IDEs:
    VSCode: 1.87.0 - /usr/local/bin/code
    Vim: 9.0 - /usr/bin/vim
    Xcode: /undefined - /usr/bin/xcodebuild
  Languages:
    Bash: 3.2.57 - /bin/bash
    Perl: 5.38.0 - /Users/mfts/.pkgx/perl.org/v5.38.0/bin/perl
    Python: 3.11.6 - /Users/mfts/.pkgx/python.org/v3.11.6/bin/python
    Python3: 3.11.6 - /Users/mfts/.pkgx/python.org/v3.11.6/bin/python3
    Ruby: 2.6.10 - /usr/bin/ruby
  Databases:
    PostgreSQL: 15.6 - /Applications/Postgres.app/Contents/Versions/latest/bin/postgres
    SQLite: 3.39.2 - /Users/mfts/.pkgx/sqlite.org/v3.43.1/bin/sqlite3
  Browsers:
    Chrome: 122.0.6261.112
    Safari: 17.2.1
```

### Describe the bug

Getting an error when adding `TriggerProvider` to my `pages/_app.tsx` page 

```sh
 ⨯ /Users/mfts/dev/mfts/papermark-main/node_modules/@trigger.dev/react/dist/TriggerProvider.js:2
import React from ""react"";
^^^^^^

SyntaxError: Cannot use import statement outside a module
    at internalCompileFunction (node:internal/vm:73:18)
    at wrapSafe (node:internal/modules/cjs/loader:1153:20)
    at Module._compile (node:internal/modules/cjs/loader:1205:27)
    at Module._extensions..js (node:internal/modules/cjs/loader:1295:10)
    at Module.load (node:internal/modules/cjs/loader:1091:32)
    at Module._load (node:internal/modules/cjs/loader:938:12)
    at Module.require (node:internal/modules/cjs/loader:1115:19)
    at mod.require (/Users/mfts/dev/mfts/papermark-main/node_modules/next/dist/server/require-hook.js:65:28)
    at require (node:internal/modules/helpers:130:18)
    at Object.<anonymous> (/Users/mfts/dev/mfts/papermark-main/node_modules/@trigger.dev/react/dist/index.cjs:18:25)
    at Module._compile (node:internal/modules/cjs/loader:1241:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1295:10)
    at Module.load (node:internal/modules/cjs/loader:1091:32)
    at Module._load (node:internal/modules/cjs/loader:938:12)
    at Module.require (node:internal/modules/cjs/loader:1115:19) {
  page: '/documents'
}
```

### Reproduction repo

github.com/mfts/papermark

### To reproduce

```tsx
// pages/_app.tsx

import { TriggerProvider } from ""@trigger.dev/react""
...

export default function App({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps<{ session: Session }>) {
  return (
      <SessionProvider session={session}>
              <main className={inter.className}>
                    <TeamProvider>
                      <TriggerProvider publicApiKey={""...""}>
                        <Component {...pageProps} />
                      </TriggerProvider>
                    </TeamProvider>
              </main>
      </SessionProvider>
  ...
  );
}      


### Additional information

_No response_",,
2164628661,921,feat: Self-Hosted Guide with just Docker?,"### Is your feature request related to a problem? Please describe.

Why not provide a simple Docker guide rather than platform-specific guides?

### Describe the solution you'd like to see

A simple Docker step-by-step guide.

### Describe alternate solutions

I guess I can perform trial & error with other guides (fly, supabase) to see what environment variables are required but would prefer a step-by-step answer.

Do I need [all of these environment variables](https://github.com/triggerdotdev/docker/blob/main/.env.example)? or [only 5 of these mentioned in Kubernetes docs](https://trigger.dev/docs/documentation/guides/self-hosting/kubernetes#configure-environment-variables)? Like if I compare, I do see an extra `RUNTIME_PLATFORM`?

Also, are the self-hosted docs for v2 or v3? I'm trying trigger for 1st time only so don't know.

### Additional information

I understand it goes against business incentives but if you're gonna promote it, you should provide a step-by-step guide in the docs. Otherwise, it just seems like a marketing gimic. Even though it does look easier to figure it out but would be cool if it follows [Supabase footsteps](https://supabase.com/docs/guides/self-hosting/docker). In the end, the best product wins :)",,
2153929057,912,[TRI-1996] A failed run isn't resuming properly from the UI,"When you ""Rerun"" job from the UI you get given two options IF the run has failed.

![CleanShot 2024-02-26 at 11 17 26@2x](https://github.com/triggerdotdev/trigger.dev/assets/10635986/ea372618-2072-42ec-8c2e-4ee47ed6ba69)

""Run again"" works as designed, it creates a new run with the same payload.

But ""Retry Job run"" should continue the run and retry failed tasks. 

## To reproduce
1. Run this job, it will fail where the error is thrown.

```ts
client.defineJob({
  id: ""test"",
  name: ""test error handling"",
  version: ""0.0.1"",
  trigger: eventTrigger({
    name: ""test.event"",
  }),
  run: async (payload, io, ctx) => {
    const result = await io.runTask(""todo"", async (client) => {
      throw new Error(""I'm broken"");
      await io.logger.info(""I fixed it"");
    });

    await io.logger.info(""Afterwards"");
  },
});
```

2. Modify the code by commenting out the thrown error.
3. Press the ""Retry Job run"" button in the UI.
4. Notice that the run fails again with the error cached.

## What might be happening?
- Check that errors are not being cached in `runTask`. Only successful results should be.
- Check that the `ContinueRunService` is working correctly.

<sub>[TRI-1996](https://linear.app/triggerdotdev/issue/TRI-1996/a-failed-run-isnt-resuming-properly-from-the-ui)</sub>",,
2151718729,909,feat: support async `io.runTask` error callback,"### Is your feature request related to a problem? Please describe.

When `io.runTask` runs, it has an `onError` callback option. This is great!
But I have some `async` logic that I would like to run in this error callback. This is currently not supported since the error callback cannot return a promise.

### Describe the solution you'd like to see

Update `RunTaskErrorCallback` type to allow returning a promise, and update `io.runTask` to `await onError(error, task, this)`

### Describe alternate solutions

Do nothing and tell developers to `try`/`catch` inside the `io.runTask` (where it is `async`):

```
io.runTask(
  ""name"",
  async (task) => {
    try {
      // ...
    } catch (error) {
      await sendErrorNotification(payload)
    }
  },
)
```

### Additional information

_No response_",,
2128987044,897,bug: Replicate example keeps waiting,"### Provide environment information

```bash
  System:
    OS: macOS 14.1.2
    CPU: (8) arm64 Apple M1 Pro
    Memory: 57.72 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.10.0 - /usr/local/bin/node
    npm: 10.2.3 - /usr/local/bin/npm
```

### Describe the bug

Hi,

I'm currently running the example provided at Replicate integration [docs](https://trigger.dev/docs/integrations/apis/replicate#usage) and the image generation task keeps waiting for the result even though I can see the generated result in Replicate dashboard.

<img width=""1285"" alt=""image"" src=""https://github.com/triggerdotdev/trigger.dev/assets/1565547/676b8183-af39-4a23-9f95-b0b1f50a6a99"">


### Reproduction repo

https://trigger.dev/docs/integrations/apis/replicate#usage

### To reproduce

I have written a simple job as follows:

```ts
import { eventTrigger } from ""@trigger.dev/sdk"";
import { Replicate } from ""@trigger.dev/replicate"";
import { client } from ""@/trigger"";
import z from ""zod"";

const replicate = new Replicate({
  id: ""replicate"",
  apiKey: process.env.REPLICATE_API_KEY!,
});

client.defineJob({
  id: ""replicate-create-prediction"",
  name: ""Replicate - Create Prediction"",
  version: ""0.1.0"",
  integrations: { replicate },
  trigger: eventTrigger({
    name: ""replicate.predict"",
    schema: z.object({
      prompt: z
      .string()
      .default(""rick astley riding a harley through post-apocalyptic miami""),
      version: z
      .string()
      .default(""af1a68a271597604546c09c64aabcd7782c114a63539a4a8d14d1eeda5630c33""),
    }),
  }),
  run: async (payload, io, ctx) => {
    return io.replicate.predictions.createAndAwait(""await-prediction"", {
      version: payload.version,
      input: { prompt: payload.prompt },
    });
  },
});
```

### Additional information

_No response_",,
2128292503,896,[TRI-1929] Duplicated examples in the Test page when supplied from `invokeTrigger`,"You can add `examples` inside the `invokeTrigger` and `eventTrigger` definitions. Sometimes this is resulting in duplicate examples, even though they have ids specified.

<sub>[TRI-1929](https://linear.app/triggerdotdev/issue/TRI-1929/duplicated-examples-in-the-test-page-when-supplied-from-invoketrigger)</sub>",,
2128285046,895,[TRI-1928] The new CLI tunnel (Yalt) loses connection after 5 mins of inactivity,"> for me I'm loosing the local connection quite frequently. If I leave the computer for 5 mins doing nothing I need to restart `npx @trigger.dev/cli@latest dev`. This can be just 5 minutes. With Ngrok I could leave the connection up for days and it kept syncing. Usually it stalls when it tries to sync code changes again to Trigger.dev and i get the ""spinning wheel"" before the green tick in the terminal

<sub>[TRI-1928](https://linear.app/triggerdotdev/issue/TRI-1928/the-new-cli-tunnel-yalt-loses-connection-after-5-mins-of-inactivity)</sub>",,
2126918197,893,[TRI-1927] Ability to revoke an invite to an org,"Before a user has accepted an invite it should be possible to ""revoke it"".

<sub>[TRI-1927](https://linear.app/triggerdotdev/issue/TRI-1927/ability-to-revoke-an-invite-to-an-org)</sub>",,
2125554587,889,feat: runTaskSuperjson,"### Is your feature request related to a problem? Please describe.

When running custom task with `io.runTask` the return value of the callback is piped through `JSON.parse(JSON.stringify(value))`. I understand that this is necessary to serialize the value for caching. In Typescript this is also reflected by doing `JSON<T>` with the return-type.

For me, this was cumbersome as I wanted to pass object with for example Dates and DX would fall apart.

### Describe the solution you'd like to see

I created the following function to serialize the value with [superjson](https://www.npmjs.com/package/superjson). Superjson is similar to JSON.stringify and JSON.parse but allow for dates etc to survive.
For me and my team this function solves the Issue, but maybe there is way for this to end up directly in the `@trigger.dev/sdk`:

```ts
import { IO, RunTaskOptions } from '@trigger.dev/sdk'
import superjson from 'superjson'

type ServerTask = Parameters<Parameters<IO['runTask']>[1]>[0]

export const runTaskSuperjson = async <T>(
  io: IO,
  cacheKey: string,
  callback: (task: ServerTask, io: IO) => Promise<T>,
  options?: RunTaskOptions,
) => {
  const encodedResponse = await io.runTask(
    cacheKey,
    async (task, io) => {
      const response = await callback(task, io)
      const encoded = superjson.stringify(response)
      return encoded
    },
    options,
  )
  const response = superjson.parse<T>(encodedResponse)
  return response
}
```

### Describe alternate solutions

Alternatively this little helper function could be hinted at in the docs.

### Additional information

_No response_",,
2125415942,888,[TRI-1926] Auto-yielding a canceled run causes it to resume again,"To reproduce
- Have a run with several tasks in a row that are just a bit shorter than the serverless timeout.
- This will cause the run to ""auto-yield"" to avoid cutting a task that's halfway complete.
- Cancel the run during a task

The run looks canceled but when the auto-yielding happens it doesn't check that the run is canceled so it causes the run to go back to executing again…

<sub>[TRI-1926](https://linear.app/triggerdotdev/issue/TRI-1926/auto-yielding-a-canceled-run-causes-it-to-resume-again)</sub>",,
2123762520,887,[TRI-1925] Integration icons are repeated many times in the Jobs table,"The same integration (with the same key) is repeated multiple times in the Integrations column.

![CleanShot 2024-02-07 at 19 52 35@2x](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/9d46ccd6-59ac-4b64-addf-f73e5abde98b/15c608c2-6ea6-4797-bd6b-10a9788cea7a?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC85ZDQ2Y2NkNi01OWFjLTRiNjQtYWRkZi1mNzNlNWFiZGU5OGIvMTVjNjA4YzItNmVhNi00Nzk3LWJkNmItMTBhOTc4OGNlYTdhIiwiaWF0IjoxNzA3MzM1NTkzLCJleHAiOjE3MDc0MjE5OTN9.EAdXyN48nCtf3m1VdC9v2RvsCacdN8yWufObF_XmUCk)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1925](https://linear.app/triggerdotdev/issue/TRI-1925/integration-icons-are-repeated-many-times-in-the-jobs-table)</sub>",,
2123157692,886,"Self-hosting migration fails if not using the default ""public"" schema",https://github.com/triggerdotdev/trigger.dev/blob/336029b8428a826bfc92932a61653979a0e1fb79/apps/webapp/app/presenters/JobListPresenter.server.ts#L125,,
2120905239,884,[TRI-1923] React hooks should return basic metadata about the Job,"If you want to build a UI that shows runs across multiple jobs it's difficult because the hooks return no info about the job.

I suggest we return the job ""id"" from them (which is actually the `slug` in the database).

```ts
{
  job {
   //note that this is what we call the ""slug"" in the database
    id: ""......"",
  },
  //rest of the payload
}
```

This would creating `v3` versions of the following API endpoints that return the job.id
1. https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/api.v2.runs.%24runId.ts
2. https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/api.v2.runs.%24runId.statuses.ts
3. https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/api.v2.events.%24eventId.ts

Core schema updates (add job.id)
- GetRunStatusesSchema: https://github.com/triggerdotdev/trigger.dev/blob/29edcd3df96e333b123c0124c764588db71fb382/packages/core/src/schemas/api.ts#L1061
- GetRunSchema: https://github.com/triggerdotdev/trigger.dev/blob/29edcd3df96e333b123c0124c764588db71fb382/packages/core/src/schemas/runs.ts#L107
- GetEventSchema: https://github.com/triggerdotdev/trigger.dev/blob/29edcd3df96e333b123c0124c764588db71fb382/packages/core/src/schemas/events.ts#L4

The SDK API client URLs need updating to be `v3` instead of `v2`
- `getEvent`
- `getRun`
- `getRunStatuses`
https://github.com/triggerdotdev/trigger.dev/blob/main/packages/trigger-sdk/src/apiClient.ts#L446

The React package URLs need updating to be `v3` instead of `v2`:
- https://github.com/triggerdotdev/trigger.dev/blob/main/packages/react/src/events.ts
- https://github.com/triggerdotdev/trigger.dev/blob/main/packages/react/src/runs.ts
- https://github.com/triggerdotdev/trigger.dev/blob/main/packages/react/src/statuses.ts


<sub>[TRI-1923](https://linear.app/triggerdotdev/issue/TRI-1923/react-hooks-should-return-basic-metadata-about-the-job)</sub>",,
2120735366,883,[TRI-1922] Add all the EventFilter patterns to the docs,"We have a docs page for EventFilters: https://trigger.dev/docs/documentation/guides/event-filter#boolean-filters

But it doesn't include all the filters we support. The full options can be found in the source code: https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/src/schemas/eventFilter.ts

It would be good to add a table that has the ""operator"" and a description of what it does.

<sub>[TRI-1922](https://linear.app/triggerdotdev/issue/TRI-1922/add-all-the-eventfilter-patterns-to-the-docs)</sub>",,
2117326276,882,Issue on docs: no manual setup instructions,"Path: /documentation/quickstarts/introduction

I tried to run @trigger.dev/cli@latest init in my project and it said that it couldn't do automatic setup. Then, it showed me a link to manual setup instructions, but there are no manual setup instructions on the linked page.",,
2113333320,881,bug: CLI Init Commands don't Work OOTB in PowerShell,"### Provide environment information

System:
- OS: Windows 11 10.0.22621
- CPU: (16) x64 AMD Ryzen 7 7800X3D 8-Core Processor
- Memory: 27.07 GB / 63.15 GB

Binaries:
- Node: 18.19.0 - C:\Program Files\nodejs\node.EXE
- npm: 10.2.3 - C:\Program Files\nodejs\npm.CMD
- pnpm: 8.15.1 - ~\AppData\Roaming\npm\pnpm.CMD

### Describe the bug

In PowerShell, a token beginning with the '@' character is used for [splatting](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_splatting?view=powershell-7.4), and is invalid for use when calling a standard executable.

For a (trivially) better DX, the package name in that command should be enclosed in quotes so that the command doesn't need to be edited before execution in PowerShell.

![image](https://github.com/triggerdotdev/trigger.dev/assets/75811601/e4afcdb4-4581-4cf8-9d8e-d468564638e7)

![image](https://github.com/triggerdotdev/trigger.dev/assets/75811601/ca8ed424-e3f7-4888-9656-6cd014840b7c)



### Reproduction repo

n/a

### To reproduce

1. Go to Framework Setup and select a framework
2. Copy and paste the ""Run the CLI 'init' command..."" step into a PowerShell window

### Additional information

_No response_",,
2102319758,871,[TRI-1907] Add documentation for `standardBackoff` and `exponentialBackoff`,"When using `io.runTask` you can specify retry settings (for when an error is thrown). The default is that no retrying happens.

We provide a lot of settings and figuring out good ones can be tricky. So we export two useful ones here: https://github.com/triggerdotdev/trigger.dev/blob/0b657b33f9a634376a4c4be031b111f9c3c4d914/packages/core/src/retry.ts#L11

We should add documentation to the SDK reference about this. And probably also link to it from here: https://trigger.dev/docs/sdk/io/runtask

<sub>[TRI-1907](https://linear.app/triggerdotdev/issue/TRI-1907/add-documentation-for-standardbackoff-and-exponentialbackoff)</sub>",,
2101334586,870,bug: missing infos for the `useRunDetails` hook,"### Provide environment information


  System:
    OS: macOS 14.2.1
    CPU: (10) arm64 Apple M2 Pro
    Memory: 227.30 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.10.0 - ~/.nvm/versions/node/v20.10.0/bin/node
    Yarn: 1.22.21 - ~/.nvm/versions/node/v20.10.0/bin/yarn
    npm: 10.2.3 - ~/.nvm/versions/node/v20.10.0/bin/npm
    bun: 1.0.25 - ~/.bun/bin/bun

### Describe the bug

- `data.subtasks` are in the typescript but the hook doesn't spit them out
- `status` are not showing WAITING... haven't tested the others


### Reproduction repo

https://discord.com/channels/1066956501299777596/1066956844553207828/1200203785457377390

### To reproduce

basically
```tsx
  const {data, error} = useRunDetails(runId)
  return  <pre>{JSON.stringify(data, null, 2)}</pre>
```

and this job
https://trigger.dev/docs/documentation/concepts/tasks#extracting-common-tasks





### Additional information

_No response_",,
2094123266,867,"[TRI-1895] ""Retry job run"" fails if the job has an invalid payload","![image](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/a8a4d812-279b-4b73-9b35-f7efaf297f0d/7b15fc7c-58fd-4917-8de9-f9e8785f2410?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9hOGE0ZDgxMi0yNzliLTRiNzMtOWIzNS1mN2VmYWYyOTdmMGQvN2IxNWZjN2MtNThmZC00OTE3LThkZTktZjllODc4NWYyNDEwIiwiaWF0IjoxNzA1OTM1OTE0LCJleHAiOjE3MDYwMjIzMTR9.5L_V7pVMlnG5qf7sh1dE5E9ecPHfQxqH-DAWzFxCpiI)

If you have an invalid payload, the button is visible but it fails with an error in the browser.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1895](https://linear.app/triggerdotdev/issue/TRI-1895/retry-job-run-fails-if-the-job-has-an-invalid-payload)</sub>",,
2092142930,863,[TRI-1883] Local-only development with the CLI,"To do any runs/indexing etc you need to connect to the Trigger.dev platform (either cloud of self-hosted).

A fully local mode in the CLI would be nice for situations with no/poor internet access.

This would require a small server running inside the CLI to receive local events and start runs.

<sub>[TRI-1883](https://linear.app/triggerdotdev/issue/TRI-1883/local-only-development-with-the-cli)</sub>",,
2092046847,862,[TRI-1882] Python support,"It would be great to offer support for Python.

Python has better support for many Machine Learning uses cases:
- Many ML libraries are only Python, or more complete in Python
- Some services have ML models that only work from Python (e.g. OpenAI's whisper model)
- Data Science and Engineering tools like pandas

It would be even better if you could mix languages. Have files alongside each other that are different languages but can declare tasks.

<sub>[TRI-1882](https://linear.app/triggerdotdev/issue/TRI-1882/python-support)</sub>",,
2089105071,858,bug: Integration Information Row Renders Incorrectly without Associated Jobs,"### Provide environment information

This environment is running using the docker-compose file from `https://github.com/triggerdotdev/docker`

```
  System:
    OS: Linux 5.15 Debian GNU/Linux 11 (bullseye) 11 (bullseye)
    CPU: (16) x64 AMD Ryzen 7 7800X3D 8-Core Processor
    Memory: 29.29 GB / 30.93 GB
    Container: Yes
    Shell: 5.1.4 - /bin/bash
  Binaries:
    Node: 18.18.2 - /usr/local/bin/node
    npm: 9.8.1 - /usr/local/bin/npm
    pnpm: 7.18.1 - /usr/local/bin/pnpm
```

### Describe the bug

Instead of listing `Jobs: 0` in the information row, the application lists `Jobs0 0`, and the second 0 isn't inside a `<Paragraph variant=""small"">` element as it should be.

![](https://i.imgur.com/Lrf3LB3.png)

### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

1. Deploy the compose file from `https://github.com/triggerdotdev/docker`
2. Authenticate and navigate to the integrations page
3. Add a trigger.dev integration
4. Navigate to the detail page for the newly added integration
5. Note the incorrect entry in the information row

### Additional information

This appears to be due the value 0 getting treated as a falsy value on lines 132 and 135 in the `PageInfoPropertyContent` component, and rendering directly as text in place of the colon and the `Paragraph` element which is supposed to wrap the value portion of that property entry.

https://github.com/triggerdotdev/trigger.dev/blob/2c328ba93df5167aa74712866979561307017008/apps/webapp/app/components/primitives/PageHeader.tsx#L126-L136",,
2086991112,856,bug: Unable to Add OAuth Integrations when Self-Hosting,"### Provide environment information

This environment is running using the docker-compose file from `https://github.com/triggerdotdev/docker`

```
  System:
    OS: Linux 5.15 Debian GNU/Linux 11 (bullseye) 11 (bullseye)
    CPU: (16) x64 AMD Ryzen 7 7800X3D 8-Core Processor
    Memory: 29.29 GB / 30.93 GB
    Container: Yes
    Shell: 5.1.4 - /bin/bash
  Binaries:
    Node: 18.18.2 - /usr/local/bin/node
    npm: 9.8.1 - /usr/local/bin/npm
    pnpm: 7.18.1 - /usr/local/bin/pnpm
```

### Describe the bug

When self-hosting Trigger.dev, an error is encountered when attempting to set up integrations using OAuth2 tokens.

![image](https://github.com/triggerdotdev/trigger.dev/assets/75811601/211c5a8b-d428-40bf-a8b4-d69b9236bda6)
![image](https://github.com/triggerdotdev/trigger.dev/assets/75811601/79023451-0757-4f3e-ab47-b2846540ca7f)
![image](https://github.com/triggerdotdev/trigger.dev/assets/75811601/6e129be1-3efc-48ec-9d55-9d274e9401cd)



### Reproduction repo

https://github.com/triggerdotdev/docker

### To reproduce

1. Deploy the compose file from `https://github.com/triggerdotdev/docker`
2. Authenticate and navigate to the integrations page
3. Select a Trigger.dev integration which supports OAuth2 (such as Slack)
4. Select OAuth2 (Bot), Developers and then fill in any value for ID, Name and Client ID/Secret
5. Click the ""Connect to __"" button
6. Note that an error is presented instead of being navigated to the service for authentication.

### Additional information

This issue appears to be related to how the `hasCustomClient` field is not sent with the form submission to the server. If that field isn't present, the route handler doesn't pass the provided client ID & secret to the auth repository for the rest of the process.

![image](https://github.com/triggerdotdev/trigger.dev/assets/75811601/a7b192f6-2817-471f-805e-351aa92b10ac)

https://github.com/triggerdotdev/trigger.dev/blob/2c328ba93df5167aa74712866979561307017008/apps/webapp/app/routes/resources.connection.%24organizationId.oauth2.ts#L70-L74
https://github.com/triggerdotdev/trigger.dev/blob/2c328ba93df5167aa74712866979561307017008/apps/webapp/app/routes/resources.connection.%24organizationId.oauth2.ts#L177-L184

---

If I simply remove the disabled flag on the ""Use my OAuth App"" checkbox using Chrome Devtools, the ""hasCustomClient"" field appears on the submission, and I am correctly redirected to Slack for the rest of the authentication process.

![image](https://github.com/triggerdotdev/trigger.dev/assets/75811601/ff74b88f-0095-4396-8574-1de98c72d4f9)

https://github.com/triggerdotdev/trigger.dev/blob/2c328ba93df5167aa74712866979561307017008/apps/webapp/app/components/integrations/ConnectToOAuthForm.tsx#L126-L134



",,
2086404643,855,[TRI-1880] Add a Job runs per day graph to the usage page,"We have a graph of runs per month, which is useful to see the long-term trend. But it would be useful to have the equivalent of the concurrency graph but with run numbers for the past 30 days.

<sub>[TRI-1880](https://linear.app/triggerdotdev/issue/TRI-1880/add-a-job-runs-per-day-graph-to-the-usage-page)</sub>",,
2085900685,852,"[TRI-1879] From an event page, if it's scheduled but not delivered you should be able to cancel it.","Events can be scheduled for the future using `deliverAt` or `deliverAfter` (see options in the docs: [https://trigger.dev/docs/sdk/io/sendevent](https://trigger.dev/docs/sdk/io/sendevent)).

You can programatically cancel these using `cancelEvent()`: [https://trigger.dev/docs/sdk/triggerclient/instancemethods/cancel-event](https://trigger.dev/docs/sdk/triggerclient/instancemethods/cancel-event)

We should add a Cancel button to the top-right of an Event page, if that event has not been delivered yet.

This event hasn't been delivered yet.

![CleanShot 2024-01-17 at 10 35 44@2x](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/03488b3a-aa7e-4075-a09e-c413405ab678/47729bff-d748-419b-8f85-f4d4ff7e7d1d?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC8wMzQ4OGIzYS1hYTdlLTQwNzUtYTA5ZS1jNDEzNDA1YWI2NzgvNDc3MjliZmYtZDc0OC00MTliLThmODUtZjRkNGZmN2U3ZDFkIiwiaWF0IjoxNzA1NDg3OTM2LCJleHAiOjE3MDU1NzQzMzZ9.9l2ZvixcZploweauXUNLDb7iGxCDd4bhrybGGkIb6ak)

Position of cancel button

![CleanShot 2024-01-17 at 10 35 52@2x](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/13a82557-0254-4f87-a421-5bfe241b989d/58459010-542e-4319-97bb-8e8c3568eeeb?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC8xM2E4MjU1Ny0wMjU0LTRmODctYTQyMS01YmZlMjQxYjk4OWQvNTg0NTkwMTAtNTQyZS00MzE5LTk3YmItOGU4YzM1NjhlZWViIiwiaWF0IjoxNzA1NDg3OTM2LCJleHAiOjE3MDU1NzQzMzZ9.NJoztPO631Yr1sdX2BTfw4dxNKxoJSak4XhvnGT1UT8)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1879](https://linear.app/triggerdotdev/issue/TRI-1879/from-an-event-page-if-its-scheduled-but-not-delivered-you-should-be)</sub>",,
2084523855,849,[TRI-1878] Add support for the new Resend audience API endpoints to the `@trigger.dev/resend` integration,"https://resend.com/blog/manage-subscribers-using-resend-audiences

<sub>[TRI-1878](https://linear.app/triggerdotdev/issue/TRI-1878/add-support-for-the-new-resend-audience-api-endpoints-to-the)</sub>",,
2081824714,843,[TRI-1877] Add good support for E2E testing of Jobs,"This would be similar to our existing @trigger.dev/testing package, but with a new function where you wouldn't pass mocks – it would actually run the task code but mock out waits and wouldn't communicate with the platform.

<sub>[TRI-1877](https://linear.app/triggerdotdev/issue/TRI-1877/add-good-support-for-e2e-testing-of-jobs)</sub>",,
2080460301,840,[TRI-1865] eventTrigger source isn't getting set,"Use a custom source with eventTrigger. It doesn't get set on the EventDispatcher, so events sent with the same source don't trigger runs.

<sub>[TRI-1865](https://linear.app/triggerdotdev/issue/TRI-1865/eventtrigger-source-isnt-getting-set)</sub>",,
2079836014,838,[TRI-1864] Calling io.logger. causes an auto-yield to happen. Logs shouldn't do that,"## Why is this happening
`runTask` allows you to divide your work into small chunks. That means you can avoid hitting serverless timeouts when you deploy.

It's important that we try and avoid you actually hitting one of these timeouts. If you do actually hit one then your running code will suddenly halt, which can leave some things in the middle of execution, like web requests you don't get the response from for example.

So, after a ""Task"" has completed we try and figure out if we have enough time to squeeze another one in, or if we should stop and re-execute the `run` function. When you're deployed we calculate your serverless timeout by running some tests on your server (we call it ""probing""). But locally we have it set to 1 minute, which simulates a pretty generous timeout.

`io.logger` actually performs runTask under the hood. So it will cause an auto-yield if we think we're running out of time. Usually this wouldn't be a problem because you'd be dividing your work into small Tasks.

## Solution

The `io.logger` functions shouldn't cause yielding to happen.

<sub>[TRI-1864](https://linear.app/triggerdotdev/issue/TRI-1864/calling-iologger-causes-an-auto-yield-to-happen-logs-shouldnt-do-that)</sub>",,
2077108434,835,"Ready for deletion, incorrectly created","Ready for deletion. Incorrectly created.
",,
2076965769,834,[TRI-1861] Runs can permanently get stuck in queued status if the Redis server is unreachable in some circumstances ,"We use Redis to handle rate limiting run executions (by org, job, or concurrency group), and there is a specific scenario where runs can get stuck for an org, job, or concurrency group if the Redis server is unreachable between calling the [beforeTask](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/services/runExecutionRateLimiter.server.ts/#L94) and [afterTask](https://github.com/triggerdotdev/trigger.dev/blob/5bf125be0d9e39d4bb9aa8f49f517b8c2bb1d13c/apps/webapp/app/services/runExecutionRateLimiter.server.ts#L130) Lua scripts. 

If the `beforeTask` script adds the flag to the forbidden flags Redis set (`tr:exec:forbiddenFlags`) which prevents graphile jobs from running that include any members of the set, but then the Redis server becomes unreachable before the `afterTask` script is invoked, then the flag will never be removed from the `tr:exec:forbiddenFlags` Redis set and runs associated with the org/job/concurrency group will never get executed.

We've had this happen once when we changed the instance size on our Redis cluster in the Trigger.dev Cloud and our Redis server had a brief (< 30s) period of downtime. 

## The fix

This could be fixed in a couple ways:

- Retry the afterTask script if invoking it throws an error, with a backoff up to 1 minute
- Use a sorted set for the `tr:exec:forbiddenFlags` key and give each forbidden flag a ""score"" that is the timestamp, and then only include the forbidden flags that are fresh enough when determining which graphile jobs should be be ignored (something like 5 minutes). Then we'd have a ""vacuum"" job that would remove any forbidden flags older than 60 minutes to keep the set size small.

<sub>[TRI-1861](https://linear.app/triggerdotdev/issue/TRI-1861/runs-can-permanently-get-stuck-in-queued-status-if-the-redis-server-is)</sub>",,
2076123027,833,[TRI-1857] Improve email whitelisting for self-hosters,"## How to do it
You can restrict access to self-hosted instances of Trigger.dev by using the `WHITELISTED_EMAILS` environment variable.

Like this:

```env
WHITELISTED_EMAILS=""authorized@yahoo\.com|authorized@gmail\.com""
```
It's a regex pattern so you can allow specific addresses or patterns of addresses, like your company's email accounts.

## Problem
The barrier only exists when a user tries to login using a magic link that they've been emailed. Security wise this should be fine, but it's not a great user experience.

- If you want to allow GitHub login then you can't restrict access.
- Magic link emails just shouldn't be sent in the first place to emails that don't pass the test.

## Solution
Keep the existing check but also:
- Check the whitelist before sending magic link emails.
- Check the whitelist after a user has gone through the GitHub OAuth flow and reject them if their is a whitelist and they don't match.


<sub>[TRI-1857](https://linear.app/triggerdotdev/issue/TRI-1857/improve-email-whitelisting-for-self-hosters)</sub>",,
2073172226,830,"[TRI-1856] The payload types for all the invoke methods aren't inferring, they're any","All of the invoke functions, that are used to trigger `invokeTrigger()` are `any`. This is a regression, they were correct at one point.

<sub>[TRI-1856](https://linear.app/triggerdotdev/issue/TRI-1856/the-payload-types-for-all-the-invoke-methods-arent-inferring-theyre)</sub>",,
2069077837,828,feat: Websocket support for status APIs,"### Is your feature request related to a problem? Please describe.

I am surprised that old-school HTTP pooling is used in [react](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/react/src/fetch.ts) package instead of something like websockets. 

### Describe the solution you'd like to see

Websockets could provide faster updates (but ofc there is some architecture overhead).  Is this something that is on your roadmap?

### Describe alternate solutions

-

### Additional information

_No response_",,
2058639807,818,[TRI-1798] Events list – show all events that have been received,"An Events page, similar to the Runs page, that would show a paginated table with all events.

Info included for each event
- Event name
- Received time
- Delivery time (can be in the future)
- If it's been delivered yet
- Number of associated runs

You should be able to click through to view the event payload and then click through to any associated runs.

<sub>[TRI-1798](https://linear.app/triggerdotdev/issue/TRI-1798/events-list-show-all-events-that-have-been-received)</sub>",,
2058633459,817,[TRI-1797] Produce an ARM-compatible Docker image,"Currently our Docker image doesn't work on ARM, only x86.

<sub>[TRI-1797](https://linear.app/triggerdotdev/issue/TRI-1797/produce-an-arm-compatible-docker-image)</sub>",,
2057374274,816,feat: locking jobs on a per tenant basis,"### Is your feature request related to a problem? Please describe.

Some APIs (Shopify) have call limits in place, in Shopify's case they use leaky bucket.

When you have complex queries you can rapidly a lot of the credits, and you must wait for them to refill, this is fine, however, if you have more than one job for a tenant trying to call Shopify's endpoints, both have a chance to end up stuck because they are both exhausting the credits.

These could be completely different jobs, and so they don't belong in the same queue.

### Describe the solution you'd like to see

I would like trigger.dev to be able to support running one job per tenant.

When sending an event, you could optionally send a tenantId, which would ensure that this event would only be triggered if the tenantId is not already in use. If the Id was already in use, it should simply join a queue and trigger the oldest events first.

If an event does not provide a tenantId, then it should continue to work as normal.

### Describe alternate solutions

I looked into the store, but it looks like the job would be started over and over, where ideally the triggers should never arrive until the job can start.

In my current solution(a custom implementation) we use redis locks.

### Additional information

I posted a discussion about this 3 weeks ago:
https://github.com/triggerdotdev/trigger.dev/discussions/787",,
2053857368,811,[TRI-1796] Push to DockerHub,"In our CI we should push to DockerHub because not all deploy platforms (Digital Ocean) support GitHub Container Repository

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1796](https://linear.app/triggerdotdev/issue/TRI-1796/push-to-dockerhub)</sub>",,
2053755814,810,[TRI-1795] Add $not to eventFilters,"EventFilters support lots of different nice matching, but they don't support `not`.

Add it to the schema:
https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/src/schemas/eventFilter.ts

Add the implementation:
https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/src/eventFilterMatches.ts

Add tests:
https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/test/eventFilterMatches.test.ts

<sub>[TRI-1795](https://linear.app/triggerdotdev/issue/TRI-1795/add-dollarnot-to-eventfilters)</sub>",,
2053742573,809,[TRI-1794] Digital Ocean self-hosting docs,"A customer kindly provided this information when they got Trigger.dev working on Digital Ocean:

> Everything is the exact same as fly except for needing to have your own dockerhub image (perhaps fixed in the future) and needing to set NODE_TLS_REJECT_UNAUTHORIZED='0'. Without that env var, you get the following error from graphile: 

```
[2023-12-22 10:08:56] Error: self-signed certificate in certificate chain
[2023-12-22 10:08:56]     at TLSSocket.onConnectSecure (node:_tls_wrap:1600:34)
[2023-12-22 10:08:56]     at TLSSocket.emit (node:events:517:28)
[2023-12-22 10:08:56]     at TLSSocket._finishInit (node:_tls_wrap:1017:8)
[2023-12-22 10:08:56]     at ssl.onhandshakedone (node:_tls_wrap:803:12) {
[2023-12-22 10:08:56]   code: 'SELF_SIGNED_CERT_IN_CHAIN'
[2023-12-22 10:08:56] }
```

<sub>[TRI-1794](https://linear.app/triggerdotdev/issue/TRI-1794/digital-ocean-self-hosting-docs)</sub>",,
2053058174,808,feat: Read more files in ENV_FILES_FALLBACK,"### Is your feature request related to a problem? Please describe.

I'm currently trying to setup the self hosted version of trigger.dev with a Next.js docker standalone site. Environment variables in Next.js + Docker are notoriously difficult, so I have a setup utilizing env.development and env.production files.

Going through the initial setup of trigger.dev I've gotten to the point of running `npx @trigger.dev/cli@latest dev` to set everything up, but I kept getting the error `You must add TRIGGER_API_KEY to your .env file or set as runtime environment variable.`

Looking through the source of trigger.dev, I found in [readEnvVariables.ts](https://github.com/triggerdotdev/trigger.dev/blob/03703af682ab452a57a0c0e21e7b829eda564d4e/packages/cli/src/utils/readEnvVariables.ts#L5) it's not reading from the env.development and env.production files.

### Describe the solution you'd like to see

update [readEnvVariables.ts](https://github.com/triggerdotdev/trigger.dev/blob/03703af682ab452a57a0c0e21e7b829eda564d4e/packages/cli/src/utils/readEnvVariables.ts#L5) from

```typescript
const ENV_FILES_FALLBACK = ["".env"", "".env.local"", "".env.development.local""];
```

to be

```typescript
const ENV_FILES_FALLBACK = ["".env"", "".env.local"", "".env.development.local"", "".env.development"", "".env.production""];
```

### Describe alternate solutions

Change how I setup and use environment variables.

### Additional information

_No response_",,
2052600864,806,"[TRI-1793] Airtable `filterByFormula` is broken in the latest official Airtable SDK, that we use","The underlying issue here: https://github.com/Airtable/airtable.js/issues/386

They have a PR but it's not been merged yet: https://github.com/Airtable/airtable.js/pull/388

<sub>[TRI-1793](https://linear.app/triggerdotdev/issue/TRI-1793/airtable-filterbyformula-is-broken-in-the-latest-official-airtable-sdk)</sub>",,
2052265487,805,[TRI-1792] CLI@2.3.6 dev command: TypeError: first parameter has member 'readable' that is not a ReadableStream.,"Node v18.17.0
CLI: 2.3.6

Yalt tunnel error:

![CleanShot 2023-12-21 at 11 42 00](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/e7d9f4fb-4da5-489b-97b8-1427ddbd7593/51903a48-7391-4ed9-a1b3-75399259be2c?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9lN2Q5ZjRmYi00ZGE1LTQ4OWItOTdiOC0xNDI3ZGRiZDc1OTMvNTE5MDNhNDgtNzM5MS00ZWQ5LWExYjMtNzUzOTkyNTliZTJjIiwiaWF0IjoxNzAzMTU5MDE4LCJleHAiOjE3MDMyNDU0MTh9.5LgbqglbegxzPHJRrfeqE7isQURPDQsXmWK_oQHoMlU)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1792](https://linear.app/triggerdotdev/issue/TRI-1792/cli236-dev-command-typeerror-first-parameter-has-member-readable-that)</sub>",,
2050201909,804,[TRI-1791] client.getRuns() doesn't return runs if you pass cursor: undefined.,"The issue is with this code:
https://github.com/triggerdotdev/trigger.dev/blob/5359af12426fad3576af2aa4a3abb5f4b0c25fa1/packages/core/src/searchParams.ts#L11

It doesn't check in the loop for undefined, and `string(undefined)` evaluates to `""undefined""` which obviously isn't a valid cursor.

It should do an undefined check in the loop and `continue`.

<sub>[TRI-1791](https://linear.app/triggerdotdev/issue/TRI-1791/clientgetruns-doesnt-return-runs-if-you-pass-cursor-undefined)</sub>",,
2050137292,803,[TRI-1790] Running the latest CLI dev command (@2.3.6) against an older platform fails,"It seems we've broken backwards compatibility with the latest CLI release. When running it against self-hosted projects on an older version this happens:

```bash
⬆️ [trigger:dev] Service ready
   ▲ Next.js 14.0.4
   - Local:        http://localhost:3100

✔️ [trigger.dev] Detected TriggerClient id: xxxxx-xxxxxx-xxxxxx
✔️ [trigger.dev] Found API Key in process runtime
- [trigger.dev] Looking for your trigger endpoint: http://localhost:3100/api/trigger
 ✓ Ready in 2.5s
 ○ Compiling /api/trigger ...
 ✓ Compiled /api/trigger in 3.1s (514 modules)
✔ [trigger.dev] Found your trigger endpoint: http://localhost:3100/api/trigger
- 🚇 Creating tunnel
✖ Ngrok failed to create a tunnel for port 3100.
connect ECONNREFUSED 127.0.0.1:4040
❌ [trigger:dev] Service exited unexpectedly
```

<sub>[TRI-1790](https://linear.app/triggerdotdev/issue/TRI-1790/running-the-latest-cli-dev-command-236-against-an-older-platform-fails)</sub>",,
2049572517,802,"[TRI-1789] When invoking a Job from outside of a run, the options don't do anything","1. Invoke a job from outside of a run, with two parameters: the payload and the options.
2. In the run that gets triggered, the options don't come through. `context`, `idempotencyKey` etc don't work.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1789](https://linear.app/triggerdotdev/issue/TRI-1789/when-invoking-context-isnt-being-passed-through-to-the-run)</sub>",,
2048287426,801,[TRI-1786] CLI dev command should have a flag for https,"For some webhooks like Instagram's, they require HTTPS. This can be achieved using an experimental Next.js feature in package.json:

```
    ""dev"": ""next dev --experimental-https""
```

Our CLI dev command allows changing the hostname and port, and specifying a totally custom tunnel URL. But we don't allow enabled HTTPS.

Add `-s --https` flag.

<sub>[TRI-1786](https://linear.app/triggerdotdev/issue/TRI-1786/cli-dev-command-should-have-a-flag-for-https)</sub>",,
2046500209,799,[TRI-1772] Allow defining Zod schemas for HTTP Endpoints,"It would be nice to be able to attach a Zod schema on a HTTP endpoint which would then correctly type the results of `request.json`:

```ts
const endpoint = client.defineHttpEndpoint({
  id: ""tRPC"",
  source: ""unkey.dev"",
  verify: async (req) => {
     // verify here
  },
  schema: z.object({ }) // schema here
})
```



<sub>[TRI-1772](https://linear.app/triggerdotdev/issue/TRI-1772/allow-defining-zod-schemas-for-http-endpoints)</sub>",,
2038426110,792,bug: tests not running in isolation,"### Provide environment information

System:
    OS: Linux 6.4 Debian GNU/Linux 11 (bullseye) 11 (bullseye)
    CPU: (10) arm64 unknown
    Memory: 4.29 GB / 7.76 GB
    Container: Yes
    Shell: 5.1.4 - /bin/bash
  Binaries:
    Node: 20.9.0 - /usr/local/share/nvm/versions/node/v20.9.0/bin/node
    Yarn: 1.22.19 - /usr/bin/yarn
    npm: 10.1.0 - /usr/local/share/nvm/versions/node/v20.9.0/bin/npm
    pnpm: 8.10.5 - /usr/local/share/nvm/versions/node/v20.9.0/bin/pnpm

### Describe the bug

When using the testing package, mocked tasks are not reset and carry their value from the first declaration. 

### Reproduction repo

*

### To reproduce

Below are two example tests where the task sum should return a number.

```ts
import { createJobTester, toHaveSucceeded } from ""@trigger.dev/testing"";
import { afterEach, beforeEach, describe, expect, it, vi } from ""vitest"";

expect.extend({ toHaveSucceeded });
const testJob = createJobTester(vi);

describe(""test 1"", () => {
  it(""input date is rounded to the hour"", async () => {
    ....

    const testRun = await testJob(history, {
      payload: {
        debug: true,
      },
      tasks: {
        sum: 4
      }
    });
  
    // job run was successful
    expect(testRun).toHaveSucceeded();
    // check output
    expect(testRun.output.message).toEqual('4');
  });

it(""test 2"", async () => {
    ....

    const testRun = await testJob(history, {
      payload: {
        debug: true
      },
      tasks: {
        sum: 5
      }
    });
    // job run was successful
    expect(testRun).toHaveSucceeded();
    // check output
    expect(testRun.output.message).toEqual('5');
  });
});
```

When you run the test, the output of the test 2 is 4, upon further debugging you find that the output of the sum task is 4 not 5 for test 2. 

### Additional information

_No response_",,
2035926619,790,[TRI-1743] Look into using bore instead of ngrok for local tunnelling,"https://github.com/ekzhang/bore

<sub>[TRI-1743](https://linear.app/triggerdotdev/issue/TRI-1743/look-into-using-bore-instead-of-ngrok-for-local-tunnelling)</sub>",,
2032635991,786,[TRI-1739] Vercel 308 redirect causes endpoint to not be reachable,"When prod/staging endpoints are configured with a root domain (e.g. `https://example.com/api/trigger`), and a redirect is configured in vercel to redirect `example.com` -> `www.example.com`, we fail to follow the redirect and are unable to connect to the endpoint. We should handle this situation and make sure redirects are followed (and better yet, update the endpoint to the correct URL, since the redirect is permanent (308)

<sub>[TRI-1739](https://linear.app/triggerdotdev/issue/TRI-1739/vercel-308-redirect-causes-endpoint-to-not-be-reachable)</sub>",,
2022013628,769,Shopify webhook  - Failed sha256 verification,"I opened this originally in discussions, but unsure if this is better suited as an issue so re-opening it here. Feel free to close one and continue conversation in the other. Discussion https://github.com/triggerdotdev/trigger.dev/discussions/768

---

Hey there,

I've been trying to get up an going with the Shopify integration, however every time I trigger an event through Shopify it leads to a ""Failed sha256 verification"" error.

![image](https://github.com/triggerdotdev/trigger.dev/assets/27323317/d5924c04-9cd4-4822-a9a4-961f20e54fa2)

The webhook succeeds obviously when using the test event in Trigger, and it returns the payload (using the example below). I have set up webhook in Shopify, and I am also using the correct secrets/env vars.

I am self-hosting Trigger, and have input the DEV URL to Shopify as the app is not hosted yet.

Seeing as Shopify doesn't have a way to insert the secret that Trigger gives you, and they instead give us one, I assume Trigger registers this automatically when registering the trigger? Still, with the correct URL set in Shopify it fails to verify.

Here's an example piece of code that doesn't work:

```ts
import ""@shopify/shopify-api/adapters/node""
import { Shopify } from ""@trigger.dev/shopify""
import { client } from ""../""

const shopify = new Shopify({
  id: ""shopify"",
  apiKey: process.env.SHOPIFY_API_KEY!,
  apiSecretKey: process.env.SHOPIFY_API_SECRET_KEY!,
  adminAccessToken: process.env.SHOPIFY_ADMIN_ACCESS_TOKEN!,
  hostName: process.env.SHOPIFY_SHOP_DOMAIN!
})

client.defineJob({
  id: ""shopify/on-order-created"",
  name: ""Shopify: On Order Created"",
  version: ""0.1.0"",
  trigger: shopify.on(""orders/create""),
  run: async (payload, io, ctx) => {
    return { payload }
  }
})
```",,
2020638316,766,"[TRI-1700] Run failed with message: ""Endpoint"" responded with 503 status code""","This error happens when we don't get a Response from your server. ""Common causes are a server that is down for maintenance or that is overloaded."".

99% of the time this happens when running in Dev with your local machine. Usually because a lot of Tasks or Runs are happening at once and it overloads your machine, or your code has just been recompiled.

This is an issue on Dev because we don't retry Runs on development when this kind of error is thrown.

## Improvements

1. Retry runs once if this happens, but this could further impede your local machine.
2. Have a better error message.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1700](https://linear.app/triggerdotdev/issue/TRI-1700/run-failed-with-message-endpoint-responded-with-503-status-code)</sub>",,
2015056501,759,bug: Headers filter does not work on HTTP endpoint,"### Provide environment information

NA

### Describe the bug

Headers filter does not work on HTTP endpoint `respondWith` function.

This is because, `Headers` object does not allow indexed access which is used in [eventFilterMatches](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/src/eventFilterMatches.ts#L17) to get the key value.

### Reproduction repo

NA

### To reproduce

1. Create an HTTP trigger with a `headers` filter.
2. Notice that it is not honoured.

### Additional information

### Solution
Convert the `Headers` object to a `Record` type.",,
2009864078,756,[TRI-1655] Ability to cancel all runs for a Job (from SDK),"Something like: `client.cancelRunsForJob('<you_job_id>')`

It would behave like `cancelRunsForEvent` in what would happen to the runs.

<sub>[TRI-1655](https://linear.app/triggerdotdev/issue/TRI-1655/ability-to-cancel-all-runs-for-a-job-from-sdk)</sub>",,
2007885628,747,[TRI-1642] Add Stripe invoice triggers,"## How to add a new trigger

1. Add an event specification for each: https://github.com/triggerdotdev/trigger.dev/blob/main/integrations/stripe/src/events.ts
2. Add a function for each, referencing the event: https://github.com/triggerdotdev/trigger.dev/blob/131d0dbea420b3174f6a6ea11de1fbb844853d91/integrations/stripe/src/index.ts#L848
3. Test the trigger works by adding it to the job-catalog, running it and triggering a webhook using Stripe's CLI: https://github.com/triggerdotdev/trigger.dev/blob/131d0dbea420b3174f6a6ea11de1fbb844853d91/references/job-catalog/src/stripe.ts#L165

## List of events to add:
**invoice.created**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://stripe.com/docs/subscriptions/webhooks).

**invoice.deleted**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever a draft invoice is deleted.

**invoice.finalization_failed**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://stripe.com/docs/api/invoices/object#invoice_object-last_finalization_error) for details.

**invoice.finalized**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever a draft invoice is finalized and updated to be an open invoice.

**invoice.marked_uncollectible**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice is marked uncollectible.

**invoice.paid**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.

**invoice.payment_action_required**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice payment attempt requires further user action to complete.

**invoice.payment_failed**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.

**invoice.payment_succeeded**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice payment attempt succeeds.

**invoice.sent**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice email is sent out.

**invoice.upcoming**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received Invoice object will not have an invoice ID.

**invoice.updated**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice changes (e.g., the invoice amount).

**invoice.voided**
data.object is an[ invoice](https://stripe.com/docs/api/events/types#invoice_object)
Occurs whenever an invoice is voided.

**invoiceitem.created**
data.object is an[ invoiceitem](https://stripe.com/docs/api/events/types#invoiceitem_object)
Occurs whenever an invoice item is created.

**invoiceitem.deleted**
data.object is an[ invoiceitem](https://stripe.com/docs/api/events/types#invoiceitem_object)
Occurs whenever an invoice item is deleted.

<sub>[TRI-1642](https://linear.app/triggerdotdev/issue/TRI-1642/add-stripe-invoice-triggers)</sub>",,
2000505393,741,bug: Can not remove account - delete org - remove invitation - change proj or org name,"### Provide environment information

NA - cloud ver

### Describe the bug

User can not remove own account - delete own org - remove invitation/s - change own project or org name.

### Reproduction repo

NA

### To reproduce

As logged in user visit your account Settings - see can not delete account. Go to org and proj - see can not change names or remove. Check your sent invitations - see can not remove invitation, but possible is Resend.

### Additional information

It would be great to fix this - add mentioned features, Kind regards",,
2000436226,740,bug: TypeScript type reduced to 'never' (GitHub integration),"### Provide environment information

System:
    OS: Linux 5.15 Ubuntu 20.04.4 LTS (Focal Fossa)
    CPU: (20) x64 12th Gen Intel(R) Core(TM) i7-12700K
    Memory: 6.85 GB / 9.71 GB
    Container: Yes
    Shell: 5.8 - /usr/bin/zsh
  Binaries:
    Node: 18.17.1 - ~/.nvm/versions/node/v18.17.1/bin/node
    Yarn: 1.22.19 - ~/.yarn/bin/yarn
    npm: 9.6.7 - ~/.nvm/versions/node/v18.17.1/bin/npm
    pnpm: 8.10.4 - ~/.local/share/pnpm/pnpm
    bun: 1.0.0 - ~/.bun/bin/bun

### Describe the bug

Trying to use the GitHub integration and saw this error appear.  This happens when trying to access anything on the issue property.

![image](https://github.com/triggerdotdev/trigger.dev/assets/27323317/66c873af-f7dc-4751-9b67-613abbf0b5df)

```
Property 'number' does not exist on type 'never'.
  The intersection 'Issue & { state: ""open""; closed_at: null; }' was reduced to 'never' because property 'closed_at' has conflicting types in some constituents.
  ```

### Reproduction repo

N/A

### To reproduce

Create a new job with a GitHub integration, and attempt to use a method that relies on Issue type.

### Additional information

_No response_",,
1987743993,731,[TRI-1575] Creating an integration with OAuth then switching to API Key makes it stuck,"## To reproduce
1. Create a SendGrid integration with just an id (no API key) and reference it in a Job.
2. Save and check it's appeared in the dashboard
3. You'll notice that on the integrations page it says it requires action. Don't do anything there.
4. Then go back to your code and add `apiKey: process.env.SENDGRID_API_KEY` to the definition.
5. Save so it syncs

When you go back to the dashboard and refresh, the integration is in the errored state still and is stuck. When you click it you go to a blank panel.

## Solution
We need to set the `setupStatus` to `""COMPLETE""` when upserting LOCAL or AUTH_RESOLVER integration types.



<sub>[TRI-1575](https://linear.app/triggerdotdev/issue/TRI-1575/creating-an-integration-with-oauth-then-switching-to-api-key-makes-it)</sub>",,
1985308484,727,bug: Typescript Error for Invoke Trigger with Zod schema ,"### Provide environment information

  System:
    OS: macOS 11.7.5
    CPU: (8) x64 Intel(R) Xeon(R) CPU E5-1620 v2 @ 3.70GHz
    Memory: 153.83 MB / 32.00 GB
    Shell: 3.2.57 - /bin/bash
  Binaries:
    Node: 18.17.1 - /usr/local/bin/node
    Yarn: 1.22.4 - /usr/local/bin/yarn
    npm: 9.6.7 - /usr/local/bin/npm
    Watchman: 2023.02.27.00 - /usr/local/bin/watchman

### Describe the bug

TypeScript: Type instantiation is excessively deep and possibly infinite
![Screenshot 2023-11-09 at 11 19 23](https://github.com/triggerdotdev/trigger.dev/assets/1077455/c092c462-5d8d-42dc-9630-912f0a8345a2)


### Reproduction repo

N/A

### To reproduce

Create a new job with invokeTrigger and provide Zod schema to it

### Additional information

_No response_",,
1977674975,723,Bug: `cannot read properties of undefined (reading: defaultQuery)` in OpenAI integration,"### Provide environment information

  ```bash
  System:
    OS: Windows 11 10.0.22621
    CPU: (20) x64 12th Gen Intel(R) Core(TM) i7-12700H
    Memory: 4.67 GB / 15.73 GB
  Binaries:
    Node: 18.14.2 - C:\Program Files\nodejs\node.EXE
    Yarn: 1.22.19 - ~\AppData\Roaming\npm\yarn.CMD
    npm: 9.6.3 - C:\Program Files\nodejs\npm.CMD
    pnpm: 8.9.2 - ~\AppData\Local\pnpm\pnpm.CMD
```

### Describe the bug

When trying to register a job using OpenAI specific it throws an error with `cannot read properties of undefined (reading: defaultQuery)`

![openai_error_trigger](https://github.com/triggerdotdev/trigger.dev/assets/76906722/6d2d938a-fbd3-47e4-b85b-e3beecafe259)

This is the exact job file that uses OpenAI integration: https://github.com/shricodev/blog-resume-builder/blob/e53603127225a7ceed156a3b8235bd2d9caed817/jobs/openAIClient.ts





### Reproduction repo

https://github.com/shricodev/blog-resume-builder/tree/e53603127225a7ceed156a3b8235bd2d9caed817

### To reproduce

- Clone the repo in this committed state: https://github.com/shricodev/blog-resume-builder/tree/e53603127225a7ceed156a3b8235bd2d9caed817
- Setup `.env.local` with the API keys
- Run the dev server along with `npx @trigger.dev/cli@latest dev`
- In the Jobs section in the Trigger dashboard, run the job `jobs\openAIClient.ts` and that should trigger the error.

### Additional information

I tried checking if the error is on any other integrations and not just the OpenAI integrations but the Slack integration seems to work fine.

![Screenshot 2023-11-05 132151](https://github.com/triggerdotdev/trigger.dev/assets/76906722/331032ee-55e3-4f96-9c10-a7e56deba88f)
",,
1977654554,722,[TRI-1495] Background fetch should participate in the graceful shutdown system,"null

<sub>[TRI-1495](https://linear.app/triggerdotdev/issue/TRI-1495/background-fetch-should-participate-in-the-graceful-shutdown-system)</sub>",,
1970235735,713,[TRI-1462] Calling sendEvent multiple times with the same payload doesn't create a new event,"## To reproduce
1. Call `client.sendEvent` with the same payload multiple times. Don't specify an id.
2. It will return the same event each time.

Video showing the issue here: https://www.loom.com/share/b41b539244a74321a6cd10093b8345b8?sid=8b0fb796-7a8a-4abf-a552-dd575093996a

<sub>[TRI-1462](https://linear.app/triggerdotdev/issue/TRI-1462/calling-sendevent-multiple-times-with-the-same-payload-doesnt-create-a)</sub>",,
1969671216,710,bug: Job Run Test Page Shows All Teammates' Dev Environment,"### Provide environment information

N/A

### Describe the bug

In the job-run test page, the environment option displays all the teammates' development environments. This means, one person can trigger a run in their teammate's development environment.

### Reproduction repo

N/A

### To reproduce

1. Create an organisation with 2 or more teammates.
2. Create a job that's shared by the teammates.
3. Go to the job test-run page. Notice the environment dropdown shows multiple `dev` environments.

### Additional information

**Test Run Page Environment Dropdown**
<br>
![Screenshot 2023-10-31 at 10 53 39 AM](https://github.com/triggerdotdev/trigger.dev/assets/132386067/8398754e-e200-4543-a271-2aeb817e1cae)
",,
1967035208,704,feat: Sitemap.xml,"###  feature request 

A sitemap is a file that lists all the pages of a website, helping search engines understand its structure and content.

### Describe the solution you'd like to see

It enhances search engine optimization (SEO) efforts by improving website visibility and indexing. I believe adding sitemap would be a perfect addition to this project.


### Additional information

_No response_",,
1966983857,703,feat: DarkMode button,"### Is your feature request related to a problem? Please describe.

There should be dark mode button in website which toggle light and dark

### Describe the solution you'd like to see

Change theme of website

### Describe alternate solutions

Assign this issue to me

### Additional information

_No response_",,
1966973425,701,feat: Grammar in Readme,"### Is your feature request related to a problem? Please describe.

I found some grammar mistakes in readme 

### Describe the solution you'd like to see

I can correct that small mistake in readme

### Describe alternate solutions

Assign this issue to me

### Additional information

_No response_",,
1965939289,695,feat: Add labels to the readme,"### Is your feature request related to a problem? Please describe.

I think the label in the readme makes it more attractive 

### Describe the solution you'd like to see

Assign this issue to me so that i can add label to the readme

### Describe alternate solutions

Nope

### Additional information

_No response_",,
1964908530,693,bug: PrismaClientInitializationError: Error querying the database: FATAL: Max client connections reached,"### Provide environment information

 System:
    OS: Windows 10 10.0.22621
    CPU: (20) x64 12th Gen Intel(R) Core(TM) i7-12700H
    Memory: 1.37 GB / 15.71 GB
  Binaries:
    Node: 18.18.2 - ~\scoop\apps\nvm\current\nodejs\nodejs\node.EXE
    Yarn: 1.22.19 - ~\scoop\apps\nvm\current\nodejs\nodejs\yarn.CMD
    npm: 9.8.1 - ~\scoop\apps\nvm\current\nodejs\nodejs\npm.CMD
    pnpm: 8.9.2 - ~\AppData\Local\pnpm\pnpm.CMD

### Describe the bug

In a self-deployed setup, when a job file is modified and saved frequently, your file watcher makes new connection to a postgres every time it is reloaded.
Until the limit hits: `Error querying the database: FATAL: Max client connections reached`.

### Reproduction repo

WIP

### To reproduce

1. Deploy self-hosted trigger.dev, docker image hash dafc2775627f8f627b1bc95b1671b506480132736c46da86efb5aef9ec5320a0 (tag: latest as of 27.10.2023) with supabase (following https://trigger.dev/docs/documentation/guides/self-hosting/supabase)
2. Use this .env for trigger.dev docker container:
```dotenv
LOGIN_ORIGIN=http://localhost:3030
APP_ORIGIN=http://localhost:3030
PORT=3030
REMIX_APP_PORT=3030
MAGIC_LINK_SECRET=<ARBITRARY KEY1>
SESSION_SECRET=<ARBITRARY KEY2>
ENCRYPTION_KEY=<ARBITRARY KEY3>
DATABASE_URL=postgres://postgres.<ID>:<PASSWORD>@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?schema=triggerdotdev&pgbouncer=true
DIRECT_URL=postgresql://postgres:<PASSWORD>@db.<ID>.supabase.co:5432/postgres?schema=triggerdotdev
NODE_ENV=development
RUNTIME_PLATFORM=docker-compose
```
3. Run `next dev` in terminal `A`.
4. Run `pnpx @trigger.dev/cli@latest dev` in terminal `B`. 
5. Open `docker-compose logs -f triggerdotdev` in a separate terminal `C` to observe logs.
6. Open any job under `/src/jobs` (`/src/jobs/example.ts`) in your favorite code editor.
7. Violently press CTRL+S many times while having the job file open. File watcher at terminal `B` should restart every time you click CTRL+S.
8. After <30 sec observe that `triggerdotdev` container fails with this message:
```log
github-profile-triggerdotdev-1  | Invalid `prisma.runtimeEnvironment.findUnique()` invocation in
github-profile-triggerdotdev-1  | /triggerdotdev/apps/webapp/build/index.js:7720:42
github-profile-triggerdotdev-1  |
github-profile-triggerdotdev-1  |   7717
github-profile-triggerdotdev-1  |   7718 // app/models/runtimeEnvironment.server.ts
github-profile-triggerdotdev-1  |   7719 async function findEnvironmentByApiKey(apiKey) {
github-profile-triggerdotdev-1  | → 7720   return await prisma.runtimeEnvironment.findUnique(
github-profile-triggerdotdev-1  | Error querying the database: FATAL: Max client connections reached
github-profile-triggerdotdev-1  | PrismaClientInitializationError:
github-profile-triggerdotdev-1  | Invalid `prisma.runtimeEnvironment.findUnique()` invocation in
github-profile-triggerdotdev-1  | /triggerdotdev/apps/webapp/build/index.js:7720:42
github-profile-triggerdotdev-1  |
github-profile-triggerdotdev-1  |   7717
github-profile-triggerdotdev-1  |   7718 // app/models/runtimeEnvironment.server.ts
github-profile-triggerdotdev-1  |   7719 async function findEnvironmentByApiKey(apiKey) {
github-profile-triggerdotdev-1  | → 7720   return await prisma.runtimeEnvironment.findUnique(
github-profile-triggerdotdev-1  | Error querying the database: FATAL: Max client connections reached
github-profile-triggerdotdev-1  |     at Cn.handleRequestError (/triggerdotdev/node_modules/.pnpm/@prisma+client@5.4.1/node_modules/@prisma/client/runtime/library.js:123:7090)
github-profile-triggerdotdev-1  |     at Cn.handleAndLogRequestError (/triggerdotdev/node_modules/.pnpm/@prisma+client@5.4.1/node_modules/@prisma/client/runtime/library.js:123:6206)
github-profile-triggerdotdev-1  |     at Cn.request (/triggerdotdev/node_modules/.pnpm/@prisma+client@5.4.1/node_modules/@prisma/client/runtime/library.js:123:5926)
github-profile-triggerdotdev-1  |     at l (/triggerdotdev/node_modules/.pnpm/@prisma+client@5.4.1/node_modules/@prisma/client/runtime/library.js:128:9968)
github-profile-triggerdotdev-1  |     at findEnvironmentByApiKey (/triggerdotdev/apps/webapp/build/index.js:7720:10)
github-profile-triggerdotdev-1  |     at authenticateApiRequest (/triggerdotdev/apps/webapp/build/index.js:7748:25)
github-profile-triggerdotdev-1  |     at loader32 (/triggerdotdev/apps/webapp/build/index.js:35960:30)        
github-profile-triggerdotdev-1  |     at Object.callRouteLoaderRR (/triggerdotdev/node_modules/.pnpm/@remix-run+server-runtime@1.19.2/node_modules/@remix-run/server-runtime/dist/data.js:52:16)
github-profile-triggerdotdev-1  |     at callLoaderOrAction (/triggerdotdev/node_modules/.pnpm/@remix-run+router@1.7.2/node_modules/@remix-run/router/router.ts:3671:16)
github-profile-triggerdotdev-1  |     at async Promise.all (index 0) {
github-profile-triggerdotdev-1  |   clientVersion: '5.4.1',
github-profile-triggerdotdev-1  |   errorCode: undefined
github-profile-triggerdotdev-1  | }
github-profile-triggerdotdev-1  |
github-profile-triggerdotdev-1  | /triggerdotdev/node_modules/.pnpm/@prisma+client@5.4.1/node_modules/@prisma/client/runtime/library.js:114
github-profile-triggerdotdev-1  | You may have to run ${Ge(""prisma generate"")} for your changes to take effect.`,this.config.clientVersion);return r}parseEngineResponse(r){if(!r)throw new K(""Response from the Engine was empty"",{clientVersion:this.config.clientVersion});try{return JSON.parse(r)}catch{throw new K(""Unable to JSON.parse response from engine"",{clientVersion:this.config.clientVersion})}}async loadEngine(){if(!this.engine){this.QueryEngineConstructor||(this.library=await this.libraryLoader.loadLibrary(),this.QueryEngineConstructor=this.library.QueryEngine);try{let r=new WeakRef(this),{adapter:n}=this.config;n&&Ce(""Using driver adapter: %O"",n),this.engine=new this.QueryEngineConstructor({datamodel:this.datamodel,env:process.env,logQueries:this.config.logQueries??!1,ignoreEnvVarErrors:!0,datasourceOverrides:this.datasourceOverrides??{},logLevel:this.logLevel,configDir:this.config.cwd,engineProtocol:""json""},i=>{r.deref()?.logger(i)},n),ja++}catch(r){let n=r,i=this.parseInitError(n.message);throw typeof i==""string""?n:new F(i.message,this.config.clientVersion,i.error_code)}}}logger(r){let n=this.parseEngineResponse(r);if(n){if(""span""in n){this.config.tracingHelper.createEngineSpan(n);return}n.level=n?.level.toLowerCase()??""unknown"",md(n)?this.logEmitter.emit(""query"",{timestamp:new Date,query:n.query,params:n.params,duration:Number(n.duration_ms),target:n.module_path}):fd(n)?this.loggerRustPanic=new ue(this.getErrorMessageWithLink(`${n.message}: ${n.reason} in ${n.file}:${n.line}:${n.column}`),this.config.clientVersion):this.logEmitter.emit(n.level,{timestamp:new Date,message:n.message,target:n.module_path})}}getErrorMessageWithLink(r){return ka({platform:this.platform,title:r,version:this.config.clientVersion,engineVersion:this.versionInfo?.commit,database:this.config.activeProvider,query:this.lastQuery})}parseInitError(r){try{return JSON.parse(r)}catch{}return r}parseRequestError(r){try{return JSON.parse(r)}catch{}return r}on(r,n){if(r===""beforeExit"")throw new Error('""beforeExit"" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');this.logEmitter.on(r,n)}async start(){if(await this.libraryInstantiationPromise,await this.libraryStoppingPromise,this.libraryStartingPromise)return Ce(`library already starting, this.libraryStarted: ${this.libraryStarted}`),this.libraryStartingPromise;if(this.libraryStarted)return;let r=async()=>{Ce(""library starting"");try{let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.connect(JSON.stringify(n)),this.libraryStarted=!0,Ce(""library started"")}catch(n){let i=this.parseInitError(n.message);throw typeof i==""string""?n:new F(i.message,this.config.clientVersion,i.error_code)}finally{this.libraryStartingPromise=void 0}};return this.libraryStartingPromise=this.config.tracingHelper.runInChildSpan(""connect"",r),this.libraryStartingPromise}async stop(){if(await this.libraryStartingPromise,await this.executingQueryPromise,this.libraryStoppingPromise)return Ce(""library is already stopping""),this.libraryStoppingPromise;if(!this.libraryStarted)return;let r=async()=>{await new Promise(i=>setTimeout(i,5)),Ce(""library stopping"");let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.disconnect(JSON.stringify(n)),this.libraryStarted=!1,this.libraryStoppingPromise=void 0,Ce(""library stopped"")};return this.libraryStoppingPromise=this.config.tracingHelper.runInChildSpan(""disconnect"",r),this.libraryStoppingPromise}version(){return this.versionInfo=this.library?.version(),this.versionInfo?.version??""unknown""}debugPanic(r){return this.library?.debugPanic(r)}async request(r,{traceparent:n,interactiveTransaction:i}){Ce(`sending request, this.libraryStarted: ${this.libraryStarted}`);let o=JSON.stringify({traceparent:n}),s=JSON.stringify(r);try{await this.start(),this.executingQueryPromise=this.engine?.query(s,o,i?.id),this.lastQuery=s;let a=this.parseEngineResponse(await this.executingQueryPromise);if(a.errors)throw a.errors.length===1?this.buildQueryError(a.errors[0]):new K(JSON.stringify(a.errors),{clientVersion:this.config.clientVersion});if(this.loggerRustPanic)throw this.loggerRustPanic;return{data:a,elapsed:0}}catch(a){if(a instanceof F)throw a;if(a.code===""GenericFailure""&&a.message?.startsWith(""PANIC:""))throw new ue(this.getErrorMessageWithLink(a.message),this.config.clientVersion);let l=this.parseRequestError(a.message);throw typeof l==""string""?a:new K(`${l.message}
github-profile-triggerdotdev-1  |                                                                             
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                                                                                                              
                       ^
github-profile-triggerdotdev-1  | PrismaClientInitializationError: Error querying the database: FATAL: Max client connections reached
github-profile-triggerdotdev-1  |     at r (/triggerdotdev/node_modules/.pnpm/@prisma+client@5.4.1/node_modules/@prisma/client/runtime/library.js:114:2740)
```



### Additional information

As a result, container tiggerdotdev stops. ",,
1964164530,691,[TRI-1449] Display warning message when duplicate job IDs are detected,"It's quite easy to accidentally reuse a job ID:

```ts
// foo.ts
client.defineJob({
  id: ""do-something"",
});

// bar.ts
client.defineJob({
  id: ""do-something"",
})
```

We should detect when this happens and display a warning in the users local server console.

<sub>[TRI-1449](https://linear.app/triggerdotdev/issue/TRI-1449/display-warning-message-when-duplicate-job-ids-are-detected)</sub>",,
1961650082,685,[TRI-1444] Only allow logins from whitelisted_emails (for self-hosting),"Currently there isn't a convenient way to lock down logins to a self-hosted Trigger.dev service.

We should add a new ENV var which allows a regex pattern to be used to only allow certain emails.

```
WHITELISTED_EMAILS=""matt@gmail\.com|jane@yahoo\.com""
```

Only emails that match this would be able to sign-up or login.

It must be added to `env.server.ts` file, and it needs to be optional. Probably the easiest way to implement this would be to modify the `findOrCreateUser()` function in `user.server.ts` to first check the whitelist if it exists and just throw an error.

<sub>[TRI-1444](https://linear.app/triggerdotdev/issue/TRI-1444/only-allow-logins-from-whitelisted-emails-for-self-hosting)</sub>",,
1958898212,683,feat: Change the navbar items background color on hover to the theme green color,"### Is your feature request related to a problem? Please describe.

It's not related to a problem actually rather an enhancement.

### Describe the solution you'd like to see

I want to change the navbar item's background color on hover to the theme green color

### Describe alternate solutions

![image](https://github.com/triggerdotdev/trigger.dev/assets/93720428/07fd110c-b20a-4ec1-bfe8-fe43377338c3)


### Additional information

_No response_",,
1955389749,674,[TRI-1438] Add request trace logging to the console,"https://github.com/justindsmith/opentelemetry-instrumentations-js

<sub>[TRI-1438](https://linear.app/triggerdotdev/issue/TRI-1438/add-request-trace-logging-to-the-console)</sub>",,
1954690987,670,[TRI-1434] bug: Running `npx @trigger.dev/cli@latest init` spews npm WARN logs,"### Provide environment information

```
System:
    OS: macOS 13.6
    CPU: (12) arm64 Apple M2 Max
    Memory: 11.77 GB / 64.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.8.0 - ~/.pkgx/nodejs.org/v20.8.0/bin/node
    npm: 10.1.0 - ~/.pkgx/npmjs.com/v10.1.0/bin/npm
  Managers:
    pip3: 23.2.1 - ~/.pkgx/pip.pypa.io/v23.2.1/bin/pip3
    RubyGems: 3.0.3.1 - /usr/bin/gem
  Utilities:
    Make: 3.81 - /usr/bin/make
    GCC: 15.0.0 - /usr/bin/gcc
    Git: 2.42.0 - /Users/mfts/.pkgx/git-scm.org/v2.42.0/bin/git
    Clang: 15.0.0 - /usr/bin/clang
    Curl: 8.3.0 - /Users/mfts/.pkgx/curl.se/v8.3.0/bin/curl
  Servers:
    Apache: 2.4.56 - /usr/sbin/apachectl
  Virtualization:
    Docker: 24.0.6 - /usr/local/bin/docker
  IDEs:
    VSCode: 1.83.1 - /usr/local/bin/code
    Vim: 9.0 - /usr/bin/vim
    Xcode: /undefined - /usr/bin/xcodebuild
  Languages:
    Bash: 3.2.57 - /bin/bash
    Perl: 5.38.0 - /Users/mfts/.pkgx/perl.org/v5.38.0/bin/perl
    Python: 3.11.6 - /Users/mfts/.pkgx/pipenv.pypa.io/v2023.9.1/bin/python
    Python3: 3.11.6 - /Users/mfts/.pkgx/python.org/v3.11.6/bin/python3
    Ruby: 2.6.10 - /usr/bin/ruby
  Databases:
    PostgreSQL: 15.3 - /Applications/Postgres.app/Contents/Versions/latest/bin/postgres
    SQLite: 3.39.2 - /Users/mfts/.pkgx/sqlite.org/v3.43.1/bin/sqlite3
  Browsers:
    Chrome: 118.0.5993.88
    Safari: 16.6
```

node 20.8.0 / npm 10.1.0

### Describe the bug

```sh
$ npx @trigger.dev/cli@latest init -k tr_dev_XXXXXXXXXXXX -t https://cloud.trigger.dev
npm WARN config key `key` and `cert` are no longer used for most registry operations.
npm WARN config Use registry scoped `keyfile` and `certfile` instead.
npm WARN config     Example:
npm WARN config     //other-registry.tld/:keyfile=/path/to/key.pem
npm WARN config     //other-registry.tld/:certfile=/path/to/cert.crt
```

### Reproduction repo

N/A

### To reproduce

Not sure yet

### Additional information

_No response_

<sub>[TRI-1434](https://linear.app/triggerdotdev/issue/TRI-1434/bug-running-npx-triggerdevclilatest-init-spews-npm-warn-logs)</sub>",,
1953967359,665,[TRI-1431] Improve the Airtable integration documentation,"## Overview:

Update the [Airtable integration documentation](https://trigger.dev/docs/integrations/apis/airtable) so it is much easier to use as a reference.

We have just overhauled our [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) and would like all of the rest of our integrations to follow the same structure.

*Please use the references and resources at the bottom of this post to complete this issue.*

## Pages to add:

### Airtable overview & authentication:

This page is currently [this](https://trigger.dev/docs/integrations/apis/airtable).

* **Page Title:** Airtable overview & authentication
* **Sidebar title:** Overview & authentication
* **Page content**: authentication with Airtable, in the same format as [this](https://trigger.dev/docs/integrations/apis/github). If there is no overview, write one. You can use their company website for inspiration.

### Airtable Tasks:

* **Page title:** Airtable tasks
* **Sidebar title:** Tasks
* **Page content:** all the tasks available from our Airtable integration, in the same format as this: [https://trigger.dev/docs/integrations/apis/github-tasks](https://trigger.dev/docs/integrations/apis/github-tasks). Please include code comments in all of the code examples. Also include one example at the bottom with clear comments. See references below for sample code.

### References & resources:

* [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) to reference
* Our current [Airtable documentation](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/apis/airtable.mdx) in the GitHub repo.
* Example job code to use - [job catalog](https://github.com/triggerdotdev/trigger.dev/blob/main/references/job-catalog/src/airtable.ts) and [jobs showcase](https://trigger.dev/showcase?tags=&integrations=airtable).
* We use Mintlify for our docs, [documentation here](https://mintlify.com/docs/quickstart)

> \[!IMPORTANT\]
> Please include a video or screenshots of the pages when you submit a PR for us to check

<sub>[TRI-1431](https://linear.app/triggerdotdev/issue/TRI-1431/improve-the-airtable-integration-documentation)</sub>",,
1953960759,664,[TRI-1430] Improve the OpenAI integration documentation,"## Overview:

Update the [OpenAI integration documentation](https://trigger.dev/docs/integrations/apis/openai) so it is much easier to use as a reference.

We have just overhauled our [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) and would like all of the rest of our integrations to follow the same structure.

*Please use the references and resources at the bottom of this post to complete this issue.*

## Pages to add:

### OpenAI overview & authentication:

This page is currently [this](https://trigger.dev/docs/integrations/apis/openai).

* **Page Title:** OpenAI overview & authentication
* **Sidebar title:** Overview & authentication
* **Page content**: authentication with OpenAI, in the same format as [this](https://trigger.dev/docs/integrations/apis/github). If there is no overview, write one. You can use their company website for inspiration.

### OpenAI Tasks:

* **Page title:** OpenAI tasks
* **Sidebar title:** Tasks
* **Page content:** all the tasks available from our OpenAI integration, in the same format as this: [https://trigger.dev/docs/integrations/apis/github-tasks](https://trigger.dev/docs/integrations/apis/github-tasks). Please include code comments in all of the code examples. Also include one example at the bottom with clear comments. See references below for sample code.

### References & resources:

* [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) to reference
* Our current [OpenAI documentation](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/apis/openai.mdx) in the GitHub repo.
* Example job code to use - [job catalog](https://github.com/triggerdotdev/trigger.dev/blob/main/references/job-catalog/src/openai.ts) and [jobs showcase](https://trigger.dev/showcase?tags=&integrations=openai).
* We use Mintlify for our docs, [documentation here](https://mintlify.com/docs/quickstart)

> \[!IMPORTANT\]
> Please include a video or screenshots of the pages when you submit a PR for us to check

<sub>[TRI-1430](https://linear.app/triggerdotdev/issue/TRI-1430/improve-the-openai-integration-documentation)</sub>",,
1953950439,663,[TRI-1429] Improve the Slack integration documentation,"## Overview:

Update the [Slack integration documentation](https://trigger.dev/docs/integrations/apis/slack) so it is much easier to use as a reference.

We have just overhauled our [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) and would like all of the rest of our integrations to follow the same structure.

*Please use the references and resources at the bottom of this post to complete this issue.*

## Pages to add:

### Slack overview & authentication:

This page is currently [this](https://trigger.dev/docs/integrations/apis/slack).

* **Page Title:** Slack overview & authentication
* **Sidebar title:** Overview & authentication
* **Page content**: authentication with Slack, in the same format as [this](https://trigger.dev/docs/integrations/apis/github). If there is no overview, write one. You can use their company website for inspiration.

### Slack Tasks:

* **Page title:** Slack tasks
* **Sidebar title:** Tasks
* **Page content:** all the tasks available from our Slack integration, in the same format as this: [https://trigger.dev/docs/integrations/apis/github-tasks](https://trigger.dev/docs/integrations/apis/github-tasks). Please include code comments in all of the code examples. Also include one example at the bottom with clear comments. See references below for sample code.

### References & resources:

* Our current [Slack documentation](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/apis/slack.mdx) in the GitHub repo.
* Example job code to use - [job catalog](https://github.com/triggerdotdev/trigger.dev/blob/main/references/job-catalog/src/slack.ts) and [jobs showcase](https://trigger.dev/showcase?tags=&integrations=slack).
* We use Mintlify for our docs, [documentation here](https://mintlify.com/docs/quickstart)

> \[!IMPORTANT\]
> Please include a video or screenshots of the pages when you submit a PR for us to check

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1429](https://linear.app/triggerdotdev/issue/TRI-1429/improve-the-slack-integration-documentation)</sub>",,
1953947498,662,[TRI-1428] Improve the SendGrid integration documentation,"## Overview:

Update the [SendGrid integration documentation](https://trigger.dev/docs/integrations/apis/sendgrid) so it is much easier to use as a reference.

We have just overhauled our [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) and would like all of the rest of our integrations to follow the same structure.

*Please use the references and resources at the bottom of this post to complete this issue.*

## Pages to add:

### SendGrid overview & authentication:

This page is currently [this](https://trigger.dev/docs/integrations/apis/sendgrid).

* **Page Title:** SendGrid overview & authentication
* **Sidebar title:** Overview & authentication
* **Page content**: authentication with SendGrid, in the same format as [this](https://trigger.dev/docs/integrations/apis/github). If there is no overview, write one. You can use their company website for inspiration.

### SendGrid Tasks:

* **Page title:** SendGrid tasks
* **Sidebar title:** Tasks
* **Page content:** all the tasks available from our SendGrid integration, in the same format as this: [https://trigger.dev/docs/integrations/apis/github-tasks](https://trigger.dev/docs/integrations/apis/github-tasks). Please include code comments in all of the code examples. Also include one example at the bottom with clear comments. See references below for sample code.

### References & resources:

* Our current [SendGrid documentation](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/apis/sendgrid.mdx) in the GitHub repo.
* Example job code to use - [job catalog](https://github.com/triggerdotdev/trigger.dev/blob/main/references/job-catalog/src/sendgrid.ts) and [jobs showcase](https://trigger.dev/showcase?tags=&integrations=sendgrid).
* We use Mintlify for our docs, [documentation here](https://mintlify.com/docs/quickstart)

> \[!IMPORTANT\]
> Please include a video or screenshots of the pages when you submit a PR for us to check

<sub>[TRI-1426](https://linear.app/triggerdotdev/issue/TRI-1426/improve-the-sendgrid-documentation)</sub>

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1428](https://linear.app/triggerdotdev/issue/TRI-1428/improve-the-sendgrid-integration-documentation)</sub>",,
1953941615,661,[TRI-1426] Improve the Resend integration documentation,"## Overview:

Update the [Resend integration documentation](https://trigger.dev/docs/integrations/apis/resend) so it is much easier to use as a reference.

We have just overhauled our [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) and would like all of the rest of our integrations to follow the same structure.

*Please use the references and resources at the bottom of this post to complete this issue.*

## Pages to add:

### Resend overview & authentication:

This page is currently [this](https://trigger.dev/docs/integrations/apis/resend).

* **Page Title:** Resend overview & authentication
* **Sidebar title:** Overview & authentication
* **Page content**: authentication with Resend, in the same format as [this](https://trigger.dev/docs/integrations/apis/github). If there is no overview, write one. You can use their company website for inspiration.

### Resend Tasks:

* **Page title:** Resend tasks
* **Sidebar title:** Tasks
* **Page content:** all the tasks available from our Resend integration, in the same format as this: [https://trigger.dev/docs/integrations/apis/github-tasks](https://trigger.dev/docs/integrations/apis/github-tasks). Please include code comments in all of the code examples. Also include one example at the bottom with clear comments. See references below for sample code.

### References & resources:

* Our current [Resend documentation](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/apis/resend.mdx) in the GitHub repo.
* Example job code to use - [job catalog](https://github.com/triggerdotdev/trigger.dev/blob/main/references/job-catalog/src/resend.ts) and [jobs showcase](https://trigger.dev/showcase?tags=&integrations=resend).
* We use Mintlify for our docs, [documentation here](https://mintlify.com/docs/quickstart)

> \[!IMPORTANT\]
> Please include a video or screenshots of the pages when you submit a PR for us to check

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1426](https://linear.app/triggerdotdev/issue/TRI-1426/improve-the-resend-integration-documentation)</sub>",,
1952672881,657,[TRI-1425] Improve the Plain integration documentation,"## Overview:

Update the [Plain integration documentation](https://trigger.dev/docs/integrations/apis/plain) so it is much easier to use as a reference.

We have just overhauled our [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) and would like all of the rest of our integrations to follow the same structure.

*Please use the references and resources at the bottom of this post to complete this issue.*

## Pages to add:

### Plain overview & authentication:

This page is currently [this](https://trigger.dev/docs/integrations/apis/plain).

* **Page Title:** Plain overview & authentication
* **Sidebar title:** Overview & authentication
* **Page content**: authentication with Plain, in the same format as this: [https://trigger.dev/docs/integrations/apis/github](https://trigger.dev/docs/integrations/apis/github)

### Plain Tasks:

* **Page title:** Plain tasks
* **Sidebar title:** Tasks
* **Page content:** all the tasks available from our Plain integration, in the same format as this: [https://trigger.dev/docs/integrations/apis/github-tasks](https://trigger.dev/docs/integrations/apis/github-tasks). Also include one example at the bottom with clear comments. See references below for sample code.

### References & resources:

* Our current [Plain documentation](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/apis/plain.mdx) in the GitHub repo.
* Example job code to use - [job catalog](https://github.com/triggerdotdev/trigger.dev/blob/main/references/job-catalog/src/plain.ts) and [jobs showcase](https://trigger.dev/showcase/jobs/plainUpdateCustomer).
* We use Mintlify for our docs, [documentation here](https://mintlify.com/docs/quickstart)

> \[!IMPORTANT\]
> Please include screenshots of the pages when you submit a PR for us to check

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1425](https://linear.app/triggerdotdev/issue/TRI-1425/improve-the-plain-integration-documentation)</sub>",,
1952545590,656,feat: re-enable Maige app [test],"### Is your feature request related to a problem? Please describe.

disabled after a bug

### Describe the solution you'd like to see

re-enable in GH settings

### Describe alternate solutions

n/a

### Additional information

test issue; will delete immediately",,
1952287273,655,[TRI-1424] Add a CLI init warning that we don't support long-running servers,"When you run `npx @trigger.dev/cli@latest init` it sets your project up for you (if we support your framework).

At the end it spits out some advice.

We should show a warning here that we don't currently support long-running servers. With a link to this issue: https://github.com/triggerdotdev/trigger.dev/issues/244

It would be added after ""✔ Successfully initialized Trigger.dev!"" and before the ""Next steps:"", in the `printNextSteps` function.

<sub>[TRI-1424](https://linear.app/triggerdotdev/issue/TRI-1424/add-a-cli-init-warning-that-we-dont-support-long-running-servers)</sub>",,
1951312596,652,feat: Mention /api-reference repository in the READMD.md,"### Is your feature request related to a problem? Please describe.

Page: https://trigger.dev/hacktoberfest
![image](https://github.com/triggerdotdev/trigger.dev/assets/43641536/0c297c31-ffb2-444b-8753-6cf2160cead8)

Already mention here but not in the READMD.md

### Describe the solution you'd like to see

Adding /api-reference  to the READMD.md for more people finding this opportunity to contribute 

### Describe alternate solutions

No.

### Additional information

_No response_",,
1949588122,645,bug: `AirtableFieldSet` does not expose type matching Airtable Formula fields with error,"### Provide environment information

❯ npx envinfo --system --binaries

  System:
    OS: macOS 13.5
    CPU: (8) x64 Intel(R) Core(TM) i7-1068NG7 CPU @ 2.30GHz
    Memory: 34.34 MB / 32.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 20.8.0 - ~/.volta/tools/image/node/20.8.0/bin/node
    npm: 10.1.0 - ~/.volta/tools/image/node/20.8.0/bin/npm
    pnpm: 8.7.6 - ~/.volta/bin/pnpm
    Watchman: 2023.09.04.00 - /usr/local/bin/watchman

### Describe the bug

`AirtableFieldSet` does not expose correct type for Airtable Formula fields with errors.

When creating a type/interface to represent an Airtable record with formulas - if the formula inside Airtable has errors, this cannot be typed through `@trigger.dev/airtable`.

E.g.: 

```ts
type FormulaFieldType = string;
type FormulaFieldErrorType  = { error: string; };

export interface MyTable extends AirtableFieldSet {
    ID: number;
    MyFormulaField: FormulaFieldType | FormulaFieldErrorType
}
```

Gives:
```
TS2411: Property  MyFormulaField  of type  string | FormulaFieldErrorType  is not assignable to  string  index type
string | number | boolean | Collaborator | Collaborator[] | string[] | Attachment[] | undefined
```

The actual response data looks like this from within Trigger.dev:
```json
[
  {
    ""id"": ""recXXX"",
    ""fields"": {
      ""ID"": 1,
      ""ValidFormulaField"": ""Some value"",
      ""InvalidFormulaField"": {
        ""error"": ""#ERROR!""
      },
      ...
    }
  }
]
```

### Reproduction repo

n/a

### To reproduce

* Create a table in Airtable, containing a formula field with an error
* Create a TypeScript interface that represents the formula field as type `string`
* Fetch the data through `@trigger.dev/airtable`
* The result should contain an error object
* Try update the TypeScript interface with a type that can handle both a valid value and the error object


### Additional information

Suggested fix: Add `| {key: string}` to `AirtableFieldSet` field type.",,
1949368801,644,feat: add icons to the guides/platforms section in docs,"### Is your feature request related to a problem? Please describe.

We can add icons to the platforms section in docs to make it visually appealing.

![image](https://github.com/triggerdotdev/trigger.dev/assets/83168881/988887f2-61a4-44df-ad89-06114feac707)


### Describe the solution you'd like to see

Add icons from fontawesome library

### Describe alternate solutions

the above solution might work

### Additional information

I would like to work on this issue. Please take a look and let me know. Thanks",,
1949352053,643,feat: Allow logger.X() accept Error as parameter,"### Is your feature request related to a problem? Please describe.

Currently `io.logger.error()` takes two parameters - one `string` message and one `Record` for properties. At times you'd like to catch `Errors` and continue the job run - but also log the actual error with stack trace which currently isn't possible

### Describe the solution you'd like to see

Add another parameter or update the signature for `properties` to allow `Error`s as well that can neatly print in the job log with stack trace - as is currently done for unhandled errors.

### Describe alternate solutions

Convert Error to JSON object and log it as error - e.g. https://stackoverflow.com/questions/18391212/is-it-not-possible-to-stringify-an-error-using-json-stringify#answer-26199752

### Additional information

_No response_",,
1949301357,641,bug: pagination error in job-run page,"### Provide environment information

System:
    OS: macOS 13.4.1
    CPU: (10) arm64 Apple M1 Pro
    Memory: 66.91 MB / 16.00 GB
    Shell: 5.9 - /bin/zsh
Binaries:
    Node: 18.15.0 - ~/.nvm/versions/node/v18.15.0/bin/node
    npm: 9.6.4 - ~/.nvm/versions/node/v18.15.0/bin/npm
    pnpm: 7.18.1 - ~/.nvm/versions/node/v18.15.0/bin/pnpm

### Describe the bug

Pagination in the Job Runs page doesn't work as expected.

When we navigate between the pages using `next` and `prev`, and finally end up on the initial page, it still shows the `prev` button. This shouldn't be shown since it is the first page of the run list.
Also, when this `prev` button is clicked, it shows a page with just the first run item and no more `prev`/`next` buttons to navigate.

https://github.com/triggerdotdev/trigger.dev/assets/132386067/5711f1c2-6fda-4d92-8521-27cb27f5bc10


### Reproduction repo

none

### To reproduce

1. Create a job with more than 20 job runs.
2. Go to the job run page and navigate between the pages.

### Additional information

_No response_",,
1949264068,640,feat: inconsistent use of image tags in docs,"### Is your feature request related to a problem? Please describe.

Some pictures use markdown tags, and some use iframe tags. Because of this, the images look different—some have rounded corners, and some don't.

### Describe the solution you'd like to see

All images should consistently use the iframe tag to maintain a uniform appearance.

### Describe alternate solutions

If using both markdown and iframe tags is essential, styling should be applied consistently to maintain a uniform appearance.

### Additional information

Using markdown tag
![image](https://github.com/triggerdotdev/trigger.dev/assets/83168881/d81c4d65-6148-4b94-ae33-8f32b4c5f1b1)
Using iframe tag
![image](https://github.com/triggerdotdev/trigger.dev/assets/83168881/0261359a-d1fd-4c5c-b151-6b9080a191d7)",,
1949239071,639,[TRI-1415] Ability to regenerate an API key,"If you accidentally leak an API key, or for some other reason you want to change it, you can't. 

Currently, you have to create a new Project, and switch your Jobs to using that. This isn't actually difficult to do but it's not ideal and has the major drawback of your Run history being in two places.

## Solution
- Add the ability to regenerate each of the API keys in the UI
- We need to show an appropriate warning, as this will temporarily break any live Jobs until the new API key has been set in the relevant env vars.

Possibly we should ask the user to type the name of the project into a text field and then press a button to confirm.

<sub>[TRI-1415](https://linear.app/triggerdotdev/issue/TRI-1415/ability-to-regenerate-an-api-key)</sub>",,
1949230485,638,[TRI-1414] Ability to delete a Project,"You can't delete a Project from the UI at the moment.

## Considerations
By deleting a project that has Jobs that are deployed to Staging or Prod, it will break user's apps.
- Indexing their Jobs will fail because the API keys won't exist anymore
- They won't be sent any events to Trigger Jobs
- All API and SDK calls will fail for that deleted Project

We need to make sure that users are fully aware of what will happen if they choose to delete it. That should include showing them what will be impacted, e.g. a list of Jobs with the environments that they're active in, and the number of runs they've had in the past week.

We could also have soft-deleting (i.e. archiving) as the first step. This would have the same impact as deleting except the data would still exist (with an archived flag). These would live in the UI and could be fully deleted from there, and automatically deleted after being in the archive for a certain period.

<sub>[TRI-1414](https://linear.app/triggerdotdev/issue/TRI-1414/ability-to-delete-a-project)</sub>",,
1946488970,632,feat: changing getting help icons,"### Is your feature request related to a problem? Please describe.

As twitter is now X ,the icon should be fixed and also other cards can aslo have a better icon
![image](https://github.com/triggerdotdev/trigger.dev/assets/82649533/f11298bd-5411-4bce-9173-8e561165510f)


### Describe the solution you'd like to see

changing icons for these cards and enhancing them with better icons for a more better look

### Describe alternate solutions

if not all twitter should be changed to X

### Additional information

## I WOULD LIKE TO WORK ON THIS ISSUE",,
1946475578,631,feat: adding icons to the frameworks section in docs,"### Is your feature request related to a problem? Please describe.

###  Adding icons to the frameworks section in docs to make the look more enhanced 
![image](https://github.com/triggerdotdev/trigger.dev/assets/82649533/8c02e101-5c8c-4584-9697-55e26274bf2e)


### Describe the solution you'd like to see

searching for logo icons on font aswome and calling the class in the icon section of the file 

### Describe alternate solutions

if logo not found in font aswome we can find similar icons to the logo 

### Additional information

## i would like to work on this issue",,
1945406667,630,[TRI-1411] feat: Add support for Preview environments,"We currently support three environment types

1. Dev (your local machine, we create one of these for each team member of a Project)
2. Staging
3. Production

You can't create more than just these environments, and staging and production can only expose a single endpoint URL.

## Problem

Vercel, and other hosts, generate unique sites for things like Pull Requests. We don't currently support these.

## Solution

Add support for Preview environments to be created. This should probably be via the API/SDK. But also having an integration with Vercel that automatically does this would be good.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1411](https://linear.app/triggerdotdev/issue/TRI-1411/feat-add-support-for-preview-environments)</sub>",,
1943732774,622,feat: Hooks Authentication/Authorization,"### Is your feature request related to a problem? Please describe.

At the moment, the architecture of [Hooks](https://trigger.dev/docs/documentation/guides/react-hooks) is setup such that Trigger will report the status of any event or run to anyone who provides the ID in the request. In a multi-tenant application, where tenants will share the same public API key, this means that any tenant would be authorized to see the status of events or runs invoked on behalf of a different tenant. This is a [security weakness](https://securityboulevard.com/2023/05/cross-tenant-data-leaks-ctdl-why-api-hackers-should-be-on-the-lookout/).

### Describe the solution you'd like to see

`useEventDetails` etc. should require more than just an ID as a parameter, but also some token (likely a JWT) that uniquely identifies the user.

When creating a Job, an optional function can be added returning `boolean` whether a given secret is authorized or not:

```javascript
client.defineJob({
  statusAuthentication: (token) => Math.random() >= 0.5,
  // ...
})
```

If such a function is defined, then anonymous event status checks are forbidden.

### Describe alternate solutions

N/A

### Additional information

_No response_",,
1943335448,621,feat: allow ngrok --domain,"### Is your feature request related to a problem? Please describe.

In development for webhooks in various services, I have to go to each of them & update the URL with the new tunnel URL from `pnpm dlx @trigger.dev/cli@latest dev`.

ngrok allows for a single, free, dedicated hostname associated with your account.

I'd like Trigger to take advantage of this somehow.



### Describe the solution you'd like to see

Support ngrok's `--domain` flag:

```shell
ngrok http --domain=i-love-me-some-trigger.ngrok-free.app 3000
```

could be passed via:

```
pnpm dlx @trigger.dev/cli@latest dev --ngrok-domain=i-love-me-some-trigger.ngrok-free.app
```



### Describe alternate solutions

1. Have a flag like `dev --public-url=i-love-me-some-trigger.ngrok-free.app` that's not ngrok-specific. Internally, it'd be used by ngrok, but if it eventually became localtunnel.me or an alternative, the flag won't need deprecation.

1. If ngrok is already running, use the current URL instead of making a new tunnel:

	```js
	const fetch = require('node-fetch')
	const tunnelUrl = fetch('http://localhost:4040/api/tunnels')
	  .then(res => res.json())
	  .then(json => json.tunnels.find(tunnel => tunnel.proto === 'https'))
	  .then(secureTunnel => secureTunnel.public_url)
	  .catch(err => {
		// Tunnel like normal
	    return createTunnel(...);
	  })
	```
	
	(ngrok has a limit to 1 connection on the free tier)

	This would work seamlessly if someone has a custom `ngrok service`


3. It would be a tighter coupling with ngrok (risky!) and start a `trigger` tunnel (`ngrok start trigger` if there's an ngrok config for it – https://ngrok.com/docs/secure-tunnels/ngrok-agent/reference/config/.

4. Have a JS hook in `trigger.ts` for developers to programmatically update their other service APIs (through _those_ APIs) with the new URL.  This seems like a stupidly high level of friction TBH:

```js
new TriggerClient({
  onCreateTunnel({ url }) {
	// Update all backends with the new dev tunnel URL, assuming they have an API 🙏
  }
})
```

### Additional information

_No response_",,
1941923998,616,[TRI-1401] feat: Add support for tabler-icons when using the `icon` for Tasks,"## Problem

When you use `io.runTask` you can provide an `icon` in the options. (Docs: https://trigger.dev/docs/sdk/io/runtask).

This property is a string and we currently have support for:
- Some company names (used by our integrations), such as ""github"". This uses the `@trigger.dev/companyicons` package: https://github.com/triggerdotdev/companyicons
- Some internal icons (https://github.com/triggerdotdev/trigger.dev/blob/ebe78017efdf7bd53c0e4414a8302b7f0ff2648d/apps/webapp/app/components/primitives/NamedIcon.tsx#L73)

We want to add lots more icons, that are open source friendly. 

https://tabler-icons.io/ is the perfect fit for this.

## Solution

Add support for passing in a `tabler-icons` named to the `NamedIcon` component. Somewhere like here: https://github.com/triggerdotdev/trigger.dev/blob/ebe78017efdf7bd53c0e4414a8302b7f0ff2648d/apps/webapp/app/components/primitives/NamedIcon.tsx#L218

This means it would first try and render an internal icon, or a company icon. If they fail then it would render a tabler-icon.

There are so many icons in this set, we need to be careful how we accomplish this. I think the best way would be to use their sprite sheet, as it can be cached and tends to be efficient for rendering: https://github.com/tabler/tabler-icons#svg-sprite

## To test
1. Add an icon name from tabler-icons to this runTask in the catalog: https://github.com/triggerdotdev/trigger.dev/blob/ebe78017efdf7bd53c0e4414a8302b7f0ff2648d/references/job-catalog/src/events.ts#L26
2. Test that it comes through correctly
3. Test that ""github"" still works (that uses companyicons)

## Tasks
- [ ] Add support for tabler-icons
- [ ] Update the docs with a mention and link to tabler-icons instead of font-awesome




<sub>[TRI-1401](https://linear.app/triggerdotdev/issue/TRI-1401/feat-add-support-for-tabler-icons-when-using-the-icon-for-tasks)</sub>",,
1941868788,615,[TRI-1400] Create a Gadget adapter,"@edlaver has written up a detailed guide on how to use Trigger.dev with [Gadget.dev](https://gadget.dev/) that we should use to create an official adapter package at `@trigger.dev/gadget`.

https://gist.github.com/edlaver/e9e0f9bf48e2b5674659c2eb091b6f7b

**_Please make sure to use Typescript for all code_**

### Task 1 - Gadget.dev Adaptor
- [ ] Create a new folder in `packages` called `gadget`
- [ ] Create the adaptor for Gadget following the gist above
- [ ] Create a basic Gadget.dev project that uses the adaptor in `references/gadget` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/gadget` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference gadget.dev where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Create the `manual-setup-gadget.mdx` file in `/docs/_snippets/`. Use this file to write your documentation. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

<sub>[TRI-1400](https://linear.app/triggerdotdev/issue/TRI-1400/create-a-gadget-adapter)</sub>",,
1941699718,614,[TRI-1399] feat: Add ability to display images in the Run dashboard using image properties,"### Is your feature request related to a problem? Please describe.

We currently support task properties with text and an optional URL (that renders the property as a link). It would be really cool to be able to support previewing image urls in Task Properties, especially for OpenAI image tasks (and for Dalle 3 once API support is released).

### Describe the solution you'd like to see

Add another field to [DisplayPropertySchema](https://github.com/triggerdotdev/trigger.dev/blob/29ca09e42df3a8e5a34e00054ccc808826ca645d/packages/core/src/schemas/properties.ts#L4) called `image` that is either a string url or an array of strings:

```
export const DisplayPropertySchema = z.object({
  /** The label for the property */
  label: z.string(),
  /** The value of the property */
  text: z.string(),
  /** The URL to link to when the property is clicked */
  url: z.string().optional(),
  image: z.string().or(z.string().array()).optional()
});
```

Then we would use that to display the images in the task in a photo carousel

![CleanShot 2023-10-13 at 11 36 54](https://github.com/triggerdotdev/trigger.dev/assets/534/507b668c-488e-4581-b2cc-35548ed53fcd)


### Describe alternate solutions

N/A

### Additional information

_No response_

<sub>[TRI-1399](https://linear.app/triggerdotdev/issue/TRI-1399/feat-add-ability-to-display-images-in-the-run-dashboard-using-image)</sub>",,
1941675124,613,[TRI-1398] feat: CLI init should add maxDuration to the api/trigger route for Next.js,"On Vercel, even if you're on a paid plan, the max duration of an API route is not what you're paying unless you configure it.

The api/trigger file:

```ts
import { createAppRoute } from ""@trigger.dev/nextjs"";
import { client } from ""@/trigger"";

import ""@/jobs"";

//this route is used to send and receive data with Trigger.dev
export const { POST, dynamic } = createAppRoute(client);

//uncomment this to set a higher max duration (it must be inside your plan limits). Full docs: https://vercel.com/docs/functions/serverless-functions/runtimes#max-duration
//export const maxDuration = 60;
```

There are two different ways to specify the max duration, it depends on which version of Next.js you're on. Info here: https://vercel.com/docs/functions/serverless-functions/runtimes#max-duration

## Tasks
- [ ] For the appropriate Next.js versions add commented out lines to the api/trigger file (as in the above) using CLI init
- [ ] Log out a message to the console using `boxen` with a link to the docs. We do this elsewhere in the CLI. This will cover people who need to uncomment the lines or add it to their vercel.json file

<sub>[TRI-1398](https://linear.app/triggerdotdev/issue/TRI-1398/feat-cli-init-should-add-maxduration-to-the-apitrigger-route-for)</sub>",,
1939622168,611,[TRI-1397] bug: intervalTriggers of >10 mins don't ever start in Staging/Prod,"### Provide environment information

Only Prod and Staging

### Describe the bug

- The `RecurringEndpointIndexService` automatically indexes all STAGING and PROD environments every 10 mins. 
- If an `intervalTrigger` hasn't fired yet, it seems to be rescheduling the first time it fires.
- This means if the `intervalTrigger` interval is long enough, it will never fire the first event and then start working.

Note that this doesn't seem to be impacting schedules that have already fired in that environment.

### Reproduction repo

-

### To reproduce

1. Create an `intervalTrigger` with a value greater than 600 seconds. 
2. Use the PROD or STAGING environments (you could use ngrok/Cloudflare) and just point it locally using the environments page.
3. Wait, it'll never fire because the first time will keep getting pushed back by the `RecurringEndpointIndexService` every 10 mins.

### Additional information

_No response_

<sub>[TRI-1397](https://linear.app/triggerdotdev/issue/TRI-1397/bug-intervaltriggers-of-10-mins-dont-ever-start-in-stagingprod)</sub>",,
1938322906,609,feat: Cannot use `Table` as type from ``@trigger.dev/airtable``,"### Is your feature request related to a problem? Please describe.

Currently `@trigger.dev/airtable` does not export `declare class Table<TFields extends AirtableFieldSet> { ` causing issues when splitting code in to multiple functions for reusability. E.g.:

```ts
const table = io.airtableClient.base(AIRTABLE_BASE_ID).table<AirtableOrder>(AIRTABLE_TABLE_ID);
await runCreateAirtableOrder(table, shopifyOrderResponse.order);
```

Where the function that wants to use `Table` as type is defined such as
```ts
export async function runCreateAirtableOrder(table: Table<AirtableOrder>, shopifyOrder: ShopifyOrder) {
```

### Describe the solution you'd like to see

Export `Table` from `@trigger.dev/airtable`

### Describe alternate solutions

Perhaps documentation / guidelines on how to separate long jobs in to smaller functions.

### Additional information

_No response_",,
1937483472,604,[TRI-1395] Calling `sendEvent` with a duplicate ID and a `deliverAt` or `deliverAfter` option should update the existing event,"Currently calling `sendEvent` with a duplicate event ID doesn't update the event at all, but if the event hasn't been delivered yet (it has a delivery date in the future) we should update the events:

- payload
- context
- deliverAt



<sub>[TRI-1395](https://linear.app/triggerdotdev/issue/TRI-1395/calling-sendevent-with-a-duplicate-id-and-a-deliverat-or-deliverafter)</sub>",,
1937338345,603,[TRI-1394] Improve the Linear integration documentation,"## Overview:

Update the [Linear integration documentation](https://trigger.dev/docs/integrations/apis/linear) so it is much easier to use as a reference.

We have just overhauled our [GitHub documentation](https://trigger.dev/docs/integrations/apis/github) and would like all of the rest of our integrations to follow the same structure. 

_Please use the references and resources at the bottom of this post to complete this issue._

## Pages to add:

### Linear overview & authentication:

This page is currently [this](https://trigger.dev/docs/integrations/apis/linear).

- **Page Title:** Linear overview & authentication 
- **Sidebar title:** Overview & authentication 
- **Page content**: authentication with Linear, in the same format as this: https://trigger.dev/docs/integrations/apis/github

### Linear Triggers & events:

- **Page title:** Linear triggers & events 
- **Sidebar title:** Triggers & events 
- **Page content:** all the triggers and events available from our Linear integration, in the same format as this: https://trigger.dev/docs/integrations/apis/github-triggers

### Linear Tasks:

- **Page title:** Linear tasks 
- **Sidebar title:** Tasks 
- **Page content:** all the tasks available from our Linear integration, in the same format as this: https://trigger.dev/docs/integrations/apis/github-tasks. Also include one example at the bottom with clear comments. See references below for sample code.

### References & resources:

- Our current [Linear documentation](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/apis/linear.mdx) in the GitHub repo.
- Example job code to use - [job catalog](https://github.com/triggerdotdev/trigger.dev/blob/main/references/job-catalog/src/linear.ts) and [jobs showcase](https://trigger.dev/showcase?tags=&integrations=linear).
- We use Mintlify for our docs, [documentation here](https://mintlify.com/docs/quickstart)

<sub>[TRI-1394](https://linear.app/triggerdotdev/issue/TRI-1394/improve-the-linear-integration-documentation)</sub>",,
1935565857,599,[TRI-1392] yarn dlx @trigger.dev/cli@latest init fails,"It seems to have an issue with the mock-fs package. This package needs to be in dependencies because of how we've setup some of the tests.

## To reproduce

Run `yarn dlx @trigger.dev/cli@latest init` in a blank Next.js project.

NOTE: this is only an issue with Yarn.

You'll see this output:

```
yarn dlx @trigger.dev/cli@latest init
➤ YN0000: ┌ Resolution step
➤ YN0032: │ fsevents@npm:2.3.3: Implicit dependencies on node-gyp are discouraged
➤ YN0000: └ Completed in 5s 870ms
➤ YN0000: ┌ Fetch step
➤ YN0000: └ Completed
➤ YN0000: ┌ Link step
➤ YN0000: │ ESM support for PnP uses the experimental loader API and is therefore experimental
➤ YN0007: │ ngrok@npm:5.0.0-beta.2 must be built because it never has been before or the last one failed
➤ YN0000: └ Completed in 0s 919ms
➤ YN0000: Done with warnings in 6s 937ms

/Users/matt/.yarn/berry/cache/mock-fs-npm-5.2.0-5103a7b507-8.zip/node_modules/mock-fs/lib/readfilecontext.js:43
  const origRead = prototype.read;
                             ^

TypeError: Cannot read properties of undefined (reading 'read')
    at exports.patchReadFileContext (/Users/matt/.yarn/berry/cache/mock-fs-npm-5.2.0-5103a7b507-8.zip/node_modules/mock-fs/lib/readfilecontext.js:43:30)
    at Object.<anonymous> (/Users/matt/.yarn/berry/cache/mock-fs-npm-5.2.0-5103a7b507-8.zip/node_modules/mock-fs/lib/index.js:57:1)
    at Module._compile (node:internal/modules/cjs/loader:1165:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1219:10)
    at Object.require$$0.Module._extensions..js (/private/var/folders/6d/6cqqr2456_z22rz84zx9t8500000gn/T/xfs-2fbd7429/dlx-62739/.pnp.cjs:13867:33)
    at Module.load (node:internal/modules/cjs/loader:1043:32)
    at Function.require$$0.Module._load (/private/var/folders/6d/6cqqr2456_z22rz84zx9t8500000gn/T/xfs-2fbd7429/dlx-62739/.pnp.cjs:13686:22)
    at ModuleWrap.<anonymous> (node:internal/modules/esm/translators:169:29)
    at ModuleJob.run (node:internal/modules/esm/module_job:193:25)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
```

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1392](https://linear.app/triggerdotdev/issue/TRI-1392/yarn-dlx-triggerdevclilatest-init-fails)</sub>",,
1934245281,596,feat: Adding Scroll to Top Button,"### Is your feature request related to a problem? Please describe.

Yes, It is difficult for user to come back to top after scrolling down too much.

### Describe the solution you'd like to see

Adding Scroll to Top Button

### Describe alternate solutions

NA

### Additional information

_No response_",,
1933546227,595,feat: Add Contributor Section in Readme.md file,"### Is your feature request related to a problem? Please describe.

 Chore: I want to add a contributors section in the Readme.md file 

### Describe the solution you'd like to see

## 🤝 Thank You, Contributors 🥳!
<a href=""https://github.com/triggerdotdev/trigger.dev/contributors"">
  <img src=""https://contributors-img.web.app/image?repo=triggerdotdev/trigger.dev"" />
</a>

### Describe alternate solutions

Chore : To add contributors section 

### Additional information

_No response_",,
1933529813,593,bug: Adding Contributers Section to the Readme.md File  ,"### Provide environment information

None!

### Describe the bug

Adding a contributors section to the README.md file provides recognition, fosters community, and enhances project transparency and accountability.

### Reproduction repo

https://contrib.rocks/

### To reproduce

![2](https://github.com/triggerdotdev/trigger.dev/assets/146939900/f474df4b-5253-46dd-bdc7-03ea8e7be1ad)


### Additional information

Kindly assign me this issue me, I would love to work on it! Thank you!",,
1933322629,590,[TRI-1390] feat: Add ability to use custom tunnel in `dev` command,"### Is your feature request related to a problem? Please describe.

If I already have an ngrok free tunnel running pointing to my local dev server that I want to use with Trigger.dev, the CLI `dev` command fails with the following message:

```sh
✖ Ngrok failed to create a tunnel for port 3000 because ngrok is already running
```

### Describe the solution you'd like to see

I'd like to be able to provide a flag to the `dev` CLI command to pass in my already running tunnel URL:

```sh
npx @trigger.dev/cli dev --tunnel https://abcdefg.ngrok.io
```

### Describe alternate solutions

The only alternative currently is to subscribe to an ngrok paid plan

### Additional information

_No response_

<sub>[TRI-1390](https://linear.app/triggerdotdev/issue/TRI-1390/feat-add-ability-to-use-custom-tunnel-in-dev-command)</sub>",,
1932958478,587,feat: ADD LICENSE SECTION TO README.MD,"### Is your feature request related to a problem? Please describe.

No,

### Describe the solution you'd like to see

Adding a License section to README.md file

### Describe alternate solutions

ADDING A HYPERLINK TEXT IN README TO REDIRECT TO LICENSE FILE

### Additional information

I would like to work on this issue , kindly assign me this",,
1931883804,585,[TRI-1379] Some requests to sources/http/$id are failing,"Sometimes a request to `/api/v1/sources/http/$id` is failing to produce a response, and also failing to be stored and then go on to trigger a Run.

Example log:
`POST /api/v1/sources/http/clnerqc1203e7mw37qa9vlveo - - - - ms`

A good response looks like this:
`POST /api/v1/sources/http/clnerqc1203e7mw37qa9vlveo 200 - - 14.209 ms`

We first need to add some better logging and catching to determine what's happening here.

<sub>[TRI-1379](https://linear.app/triggerdotdev/issue/TRI-1379/some-requests-to-sourceshttpdollarid-are-failing)</sub>",,
1931500401,583,[TRI-1378] bug: Tasks with properties that are missing label/text fail to run,"For example, if you call `io.resend.sendEmail` with an undefined or null `from` parameter the task won't run because the requestBody will be invalid as there will be a property on the task with `text` set to undefined or null, and thus parsing the request body with `RunTaskOptionsSchema` will fail. We should be more lenient with the properties and stripe any out that have null or undefined values. BUT we should make sure the types for properties in `runTask` still show them as required and not optional.

To reproduce:

```ts
client.defineJob({
  id: ""send-resend-email"",
  name: ""Send Resend Email"",
  version: ""0.1.0"",
  trigger: eventTrigger({
    name: ""send.email"",
  }),
  integrations: {
    resend,
  },
  run: async (payload, io, ctx) => {
    const response = await io.resend.sendEmail(""📧"", {
      to: payload.to,
      subject: payload.subject,
      text: payload.text,
      from: payload.from,
    });

    await io.logger.info(""Sent email"", { response });
  },
});
```

Then you can test that job with a blank `from` in the payload.

<sub>[TRI-1378](https://linear.app/triggerdotdev/issue/TRI-1378/bug-tasks-with-properties-that-are-missing-labeltext-fail-to-run)</sub>",,
1931426490,582,[TRI-1377] Throwing a string from inside runTask doesn't bubble up properly to the run,"If you do this inside of run, the run fails (which is correct) but you get ""Unknown error"" on the run.

```ts
await io.runTask(
    ""a-task"",
    async () => {
       throw ""Shopify Order not found"";
    },
);
```

It works properly if you do `throw new Error(""Shopify Order not found"");`

<sub>[TRI-1377](https://linear.app/triggerdotdev/issue/TRI-1377/throwing-a-string-from-inside-runtask-doesnt-bubble-up-properly-to-the)</sub>",,
1930572868,580,[TRI-1375] [TRI-1376] Svelte hooks (like the @trigger.dev/react package),"We have a SvelteKit package (@trigger.dev/sveltekit) which allows you to use Trigger.dev easily with SvelteKit.

We want to add a Svelte package (@trigger.dev/svelte) that adds hooks that can be used from your UI. The functionality will be exactly the same as the React package.

## Existing branch that should be used as a starting point

There is a branch where 90% of the work has already been done by @Chigala: https://github.com/triggerdotdev/trigger.dev/tree/feat/svelte-package

## What needs to be done still

#### The current package won't publish to npm
When publish is called, it runs the `package` script:
```json
""package"": ""svelte-kit sync && svelte-package && publint"",
```
This fails with an error, which means the package can't be published to npm.

Someone who has experience creating Svelte packages would be ideal, as I'm not sure the best to approach this. How does this relate to tsup which we also have in here? I'm guessing we don't need both but not sure how to achieve this.

- [ ] Get the packaging working, so it can be published to npm

#### Adding guide docs for the hooks

- [ ]  Add a new group to the docs called ""UI hooks"" that lives in the same place as ""React hooks"" does now.
- [ ]  Add an Introduction page inside UI hooks, that gives an overview of what the UI hooks are (taking contact from the React hooks intro) and then links using two <Card> components to the child groups: React hooks and Svelte hooks
- [ ]  Add a Svelte hooks guide that is based on the existing React hooks guide pages

Reference in the docs: 
- Live URL: https://trigger.dev/docs/documentation/guides/react-hooks
- mint.json where the structure of the docs is defined: https://github.com/triggerdotdev/trigger.dev/blob/feat/svelte-package/docs/mint.json
- Readme for the docs, with how to run it: https://github.com/triggerdotdev/trigger.dev/blob/feat/svelte-package/docs/README.md
- React hook overview page: https://github.com/triggerdotdev/trigger.dev/blob/feat/svelte-package/docs/documentation/guides/react-hooks.mdx

#### Adding SDK reference for the Svelte package

- [ ] Create a reference for the Svelte package that is equivalent to the React package

References:
- Live URL to React reference: https://trigger.dev/docs/sdk/react/introduction
- File: https://github.com/triggerdotdev/trigger.dev/blob/feat/svelte-package/docs/sdk/react/introduction.mdx


<sub>[TRI-1376](https://linear.app/triggerdotdev/issue/TRI-1376/svelte-hooks-like-the-triggerdevreact-package)</sub>",,
1928566304,569,"[TRI-1372] Add a framework adaptor for SolidStart, with manual setup docs","**_Please make sure to use Typescript for all code_**

### Task 1 - SolidStart Adaptor
- [ ] Create a new folder in `packages` called `solidstart`
- [ ] Create the adaptor for SolidStart. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic SolidStart project that uses the adaptor in `references/solidstart` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/solidstart` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference SolidStart where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Create a manual setup guide in the docs. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding
- [ ] Create a `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.solidstart` with the onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)


<sub>[TRI-1372](https://linear.app/triggerdotdev/issue/TRI-1372/add-a-framework-adaptor-for-solidstart-with-manual-setup-docs)</sub>",,
1927871223,566,[TRI-1368] chore: Upgrade to Prisma 5.4.1,"We're currently on prisma `4.16.0` and it would be great to upgrade to the newest Prisma [5.4.1 release](https://github.com/prisma/prisma/releases/tag/5.4.1).

To upgrade we'll need to upgrade the `@trigger.dev/database` package at `<root>/packages/database` as well as upgrade the version number in the Dockerfile here:

https://github.com/triggerdotdev/trigger.dev/blob/90f52de1478aee059d914ffdea95463d5732d999/docker/Dockerfile/#L35

## Important

To properly test this change, you should make sure to run the webapp locally and ensure that you can define jobs and run them. 

<sub>[TRI-1368](https://linear.app/triggerdotdev/issue/TRI-1368/chore-upgrade-to-prisma-541)</sub>",,
1927860453,565,[TRI-1367] feat: Allow cancelling all job runs for a given event ID,"### Is your feature request related to a problem? Please describe.

After #554 is done, we also need to support cancelling runs that were triggered via a specific event ID

### Describe the solution you'd like to see

We should add an instance method to `TriggerClient` called `cancelRunsForEvent` that accepts a single parameter that is an `eventID`, which will hit a new API endpoint `/api/v1/events/$eventId/cancel-runs` that will query for all cancellable runs and then call the `CancelRunService` for each one. A cancellable run is a JobRun with status of any of the following: 

```
PENDING
QUEUED
WAITING_ON_CONNECTIONS
PREPROCESSING
STARTED
```

The response body should be an array of all the cancelled run IDs.

### Describe alternate solutions

N/A

### Additional information

_No response_

<sub>[TRI-1367](https://linear.app/triggerdotdev/issue/TRI-1367/feat-allow-cancelling-all-job-runs-for-a-given-event-id)</sub>",,
1926426648,557,"[TRI-1366] fix: JobRun needs an internal boolean column, to reflect the value in Job","We use internal jobs for things like webhook registration, and those jobs have `internal = true` set in the database. We also need to add an `internal` column to JobRun that is set to `true` when the job it's associated with is `internal = true`. This is just denormalization, so when we do usage queries (in the new usage page) we can easily eliminate internal runs from the usage. The migration for this should upgrade existing runs to the correct `internal` value.

<sub>[TRI-1366](https://linear.app/triggerdotdev/issue/TRI-1366/fix-jobrun-needs-an-internal-boolean-column-to-reflect-the-value-in)</sub>",,
1926380127,555,[TRI-1364] feat: Switch to Sonner toasts,"We currently use toasts in our dashboard in a few places which are powered by ""react-hot-toast"". We should upgrade to Sonner toasts as they have some pretty cool features and look great:

https://github.com/emilkowalski/sonner

<sub>[TRI-1364](https://linear.app/triggerdotdev/issue/TRI-1364/feat-switch-to-sonner-toasts)</sub>",,
1926336362,554,[TRI-1363] feat: Allow cancelling job runs from the TriggerClient,"### Is your feature request related to a problem? Please describe.

There is currently no way to cancel a job run programmatically.

### Describe the solution you'd like to see

It would be great if there was an instance method exposed on `TriggerClient` that allowed cancelling a run:

```ts
await client.cancelRun(runId)
```

This will require a new endpoint `POST /api/v1/runs/$runId/cancel`.  It should use the `CancelRunService` which is used when cancelling a run from the dashboard. The response body should be the same response as the `GET /api/v1/runs/$runId` endpoint.

### Describe alternate solutions

N/A

### Additional information

_No response_

<sub>[TRI-1363](https://linear.app/triggerdotdev/issue/TRI-1363/feat-allow-cancelling-job-runs-from-the-triggerclient)</sub>",,
1926321783,553,[TRI-1362] docs: Add better documentation for how to use Task Callbacks,"We currently only have a small amount of documentation for task callbacks in the [io.runTask()](https://trigger.dev/docs/sdk/io/runtask) docs but it would be great to flesh out the documentation in more detail, especially usage with just `io.runTask` instead of `io.replicate.runTask`, e.g.:

```ts
await io.runTask(
  ""use-callback-url"",
  async (task) => {
    // task.callbackUrl is the URL to call when the task is done
    // The output of this task will be the body POSTed to this URL
  },
  {
    name: ""Use the callbackUrl to notify the caller when the task is done"",
    callback: {
      enabled: true,
      timeoutInSeconds: 300, // If task.callbackUrl is not called within 300 seconds, the task will fail
    },
  }
);
```

Things the doc should cover:

 - When it makes sense to use callback URLs (a callback from an external system). Would be great to find another example of this other than Replicate
 - How to correctly type runTask so the output type is correct
 - How the request to the task URL works (POST and the entire JSON body becomes the task output)
 - How the timeout works

I think this would probably best live in Documentation -> Guides -> Task Callbacks

<sub>[TRI-1362](https://linear.app/triggerdotdev/issue/TRI-1362/docs-add-better-documentation-for-how-to-use-task-callbacks)</sub>",,
1926277729,551,[TRI-1361] [TRI-1360] Allow deleting Endpoints in the UI,"## Problem

You can easily create a new endpoint by changing the id in the TriggerClient constructor. But there's currently no way to get rid of them.

## Solution

Add the ability to delete them in the UI. We need to warn users with information about the impact of their change before doing the delete. 

I imagine a panel a bit like the delete job panel but it would have a list of the Jobs that are associated with the endpoint. We could allow users to delete it if they type the name of the endpoint id into an input field, and then press the button.

<img width=""589"" alt=""CleanShot 2023-10-04 at 14 52 21@2x"" src=""https://github.com/triggerdotdev/trigger.dev/assets/10635986/b119322d-b5f1-4ccb-90cc-6c0fb5755450"">

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1360](https://linear.app/triggerdotdev/issue/TRI-1360/allow-deleting-endpoints-in-the-ui)</sub>",,
1926233215,549,[TRI-1359] Create Replicate integration,"

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1359](https://linear.app/triggerdotdev/issue/TRI-1359/create-replicate-integration)</sub>",,
1926099406,548,[TRI-1358] Upgrade Zod across all packages and webapp to 3.22.3,"Zod recently released a patch to fix a ReDoS vulnerability in email regex, and we should update all our packages that use zod to use the new version, as well as the webapp. This should be a `patch` update.

https://github.com/colinhacks/zod/pull/2824

<sub>[TRI-1358](https://linear.app/triggerdotdev/issue/TRI-1358/upgrade-zod-across-all-packages-and-webapp-to-3223)</sub>",,
1926046397,547,bug: useEventDetails Hook Returns 'Data is Undefined' Error for Valid Event ID,"### Provide environment information

  System:
    OS: Linux 6.1 Manjaro Linux
    CPU: (16) x64 Intel(R) Core(TM) i7-10870H CPU @ 2.20GHz
    Memory: 17.27 GB / 31.13 GB
    Container: Yes
    Shell: 5.1.16 - /bin/bash
  Binaries:
    Node: 20.5.1 - ~/.nvm/versions/node/v20.5.1/bin/node
    Yarn: 1.22.19 - ~/.nvm/versions/node/v20.5.1/bin/yarn
    npm: 9.8.0 - ~/.nvm/versions/node/v20.5.1/bin/npm

### Describe the bug

When using the useEventDetails hook that takes an event_id, I'm encountering an error message: `Error: [""triggerdotdev-event-01HBWY7FZB9S11VF2R87FCY623""] data is undefined.`

## Expected behavior:
The hook should return the details associated with the provided event_id without any errors.



### Reproduction repo

https://gist.github.com/Slyracoon23/7cbce69741cea76f3a6fe71ffda52ba3

### To reproduce

1. Use the useEventDetails hook from @trigger.dev/react.
2. Pass a valid event_id to the hook.
3. Observe the error message: `Error: [""triggerdotdev-event-01HBWY7FZB9S11VF2R87FCY623""] data is undefined.`

I know that EventID is valid because EventId using `await client.getEvent(""01HBWY7FZB9S11VF2R87FCY623"");`  returns

```
Event: {
  id: '01HBWY7FZB9S11VF2R87FCY623',
  name: 'discord.fetch.all.messages',
  createdAt: 2023-10-04T08:52:47.212Z,
  updatedAt: 2023-10-04T08:52:47.223Z,
  runs: [
    {
      id: 'clnbigffac9bnlv3n7mqgrs8a',
      status: 'CANCELED',
      startedAt: 2023-10-04T08:52:47.289Z,
      completedAt: 2023-10-04T09:19:42.719Z
    }
  ]
}
```

### Additional information

const { isLoading, isError, data, error } = eventId ? useEventDetails(eventId) : { isLoading: false, isError: false, data: null, error: null };

https://www.loom.com/share/ab1df1d29c724bc795ed0fe65d3867f3?sid=93273700-5f6b-4194-aa49-cb7bbfaa2497
",,
1925999381,545,"[TRI-1357] bug: On an integration page, the Jobs table doesn't show jobs that only use the integration for the trigger","### Describe the bug

The integration page has a table with the jobs associated with the integration. In that table only jobs that use the integration inside the run function appear. If you are just using the integration for a trigger, it won't appear in the table.

### To reproduce

1. Create this Job

```
//you'll need to import the client from whichever file you created it in
import { Github, events } from ""@trigger.dev/github"";

const github = new Github({ id: ""github"" });

// Sends a Slack message to a channel if a GitHub issue is left open for 24 hours
client.defineJob({
  id: ""github-new-issue-reminder"",
  name: ""GitHub: new issue reminder"",
  version: ""1.0.0"",
  trigger: github.triggers.repo({
    event: events.onIssueOpened,
    owner: ""<your-org-name>"",
    repo: ""<your-repo-name>"",
  }),
  run: async (payload, io, ctx) => {    
  },
});
```

1. Make sure this Job code is run, by importing into the jobs index file, or importing into the api/trigger route.
2. Run the site and the CLI dev command
3. Got to the integrations page and connect to the GitHub integration
4. Now click through from that page to the GItHub integration page, note how the Table doesn't show any Jobs.
![CleanShot_2023-10-04_at_12 57 17](https://github.com/triggerdotdev/trigger.dev/assets/10635986/d756c6c4-773a-47d6-b98c-929295758701)


<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1357](https://linear.app/triggerdotdev/issue/TRI-1357/bug-on-an-integration-page-the-jobs-table-doesnt-show-jobs-that-only)</sub>",,
1925980829,544,[TRI-1356] feat: Create a helm chart to improve self-hosting on Kubernetes,"### Is your feature request related to a problem? Please describe.

We currently supply a Docker image for self-hosters to use (see our [fly.io self-hosting docs](https://trigger.dev/docs/documentation/guides/self-hosting/flyio)). We'd like to also support self-hosters who use kubernetes  to be able to easy to deploy Trigger.dev.

### Describe the solution you'd like to see

We need a `helm-charts` directory at the root of the monorepo that includes all the helm chart artifacts. See how Infisical does it for reference:

https://github.com/Infisical/infisical/tree/main/helm-charts

The documentation for using this should also be included in the PR, something like the [infisical docs](https://infisical.com/docs/self-hosting/deployment-options/kubernetes-helm).

### Describe alternate solutions

N/A

### Additional information

Please only tackle this feature if you have experience with helm charts or Kubernetes

<sub>[TRI-1356](https://linear.app/triggerdotdev/issue/TRI-1356/feat-create-a-helm-chart-to-improve-self-hosting-on-kubernetes)</sub>",,
1925966126,543,[TRI-1355] bug: Requests to endpoints that respond with redirects are considering failing,"### Provide environment information

  System:
    OS: macOS 13.5.1
    CPU: (10) arm64 Apple M1 Max
    Memory: 101.13 MB / 32.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 18.12.1 - ~/.nvm/versions/node/v18.12.1/bin/node
    npm: 8.19.2 - ~/.nvm/versions/node/v18.12.1/bin/npm
    pnpm: 7.18.1 - ~/.nvm/versions/node/v18.12.1/bin/pnpm

### Describe the bug

When the server makes requests to endpoints and the endpoint responds with a redirect, the request is considered a failure. This causes issues with indexing endpoints, executing runs, and delivering webhook payloads. So basically nothing works if the endpoint responds with a redirect. For example, if the endpoint url was input as something like `""https://foo.com/api/trigger""` and when making a request to the endpoint the response is a 308 redirect to`""https://www.foo.com/api/trigger""`.

### Reproduction repo

N/A

### To reproduce

Setup a new Next.js project with a Trigger.dev integration, and setup an endpoint that will redirect to the actual `/api/trigger` endpoint. 

### Additional information

_No response_

<sub>[TRI-1355](https://linear.app/triggerdotdev/issue/TRI-1355/bug-requests-to-endpoints-that-respond-with-redirects-are-considering)</sub>",,
1923969383,534,[TRI-1352] Add documentation for eventTrigger() examples option,"### Is your feature request related to a problem? Please describe.

We support adding example payloads to eventTrigger() but haven't documented it. They will appear in the dashboard Test page:

![CleanShot 2023-10-02 at 14 20 16](https://github.com/triggerdotdev/trigger.dev/assets/10635986/a89321a0-8725-4c6c-b3d7-3f623e03167f)

The syntax is this:

```ts
eventTrigger({
  name: ""new.user"",
  schema: z.object({
    userId: z.string(),
    tier: z.union([z.literal(""free""), z.literal(""pro"")]),
  }),
  //⬇️ isn't documented
  examples: [
    {
      id: ""issue.opened"",
      name: ""Issue opened"",
      payload: {
        userId: ""1234"",
        tier: ""free""
      },
      //optional
      icon: ""github"",
    },
  ],
});
```

### Describe the solution you'd like to see

Add documentation to this page: https://trigger.dev/docs/sdk/eventtrigger

In the options parameters, like the others

Add to the sample code on the right-hand side, making it clear with a code comment that it's optional

This is the file in the code: https://github.com/triggerdotdev/trigger.dev/blob/main/docs/sdk/eventtrigger.mdx

Be sure that you have run the docs and tested that it works. It's very simple to run the docs: https://github.com/triggerdotdev/trigger.dev/blob/main/docs/README.md

<sub>[TRI-1352](https://linear.app/triggerdotdev/issue/TRI-1352/add-documentation-for-eventtrigger-examples-option)</sub>",,
1922350791,528,[TRI-1336] [TRI-721] Add remix-development-tools to the webapp,"The `remix-development-tools` package adds a lot of really useful tools for debugging Remix apps.

## Solution

* Install the package: [https://github.com/Code-Forge-Net/Remix-Dev-Tools/tree/v3.0.0#getting-started](https://github.com/Code-Forge-Net/Remix-Dev-Tools/tree/v3.0.0#getting-started)
* The standard installation method should work, this is our root file: [https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/root.tsx](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/root.tsx)
* Run the web app and check that the tools are working, provide a screenshot of them.
* You'll need to follow [the developing section of the Contribution guide](https://github.com/triggerdotdev/trigger.dev/blob/main/CONTRIBUTING.md) to run the webapp.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-721](https://linear.app/triggerdotdev/issue/TRI-721/add-remix-development-tools-to-the-webapp)</sub>

<sub>[TRI-1336](https://linear.app/triggerdotdev/issue/TRI-1336/[tri-721]-add-remix-development-tools-to-the-webapp)</sub>",,
1922345706,527,"[TRI-1329] Update all Docs ""Introduction"" or ""Overview"" page titles to be <Group>: Introduction/Overview","## Problem

A lot of pages in the docs are called ""Introduction"" and ""Overview"". They are the first page is a ""group"" in the sidebar.

This is a problem because the Open Graph images are terrible and they don't display well in search results.

## Solution

Keep the sidebar titles as they are. Update the page titles so they're in the format <Group name>: Introduction/Overview.
Examples:

* [This](https://trigger.dev/docs/documentation/guides/react-hooks) should be ""React hooks: Overview""
* [This](https://trigger.dev/docs/documentation/concepts/triggers/introduction) should be ""Triggers: Introduction""

The markdown frontmatter needs to be updated:

```
---
title: Introduction
//add this ⬇️
sidebarTitle: ""Triggers: Introduction""
description: ""A Trigger is what starts a Job Run. It can be a webhook, a schedule, or an event.""
---

We currently support three types of Triggers: Webhooks, Scheduled, and Events. You can use any of these to start a Job Run.
```

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1329](https://linear.app/triggerdotdev/issue/TRI-1329/update-all-docs-introduction-or-overview-page-titles-to-be-group)</sub>

<sub>[TRI-1335](https://linear.app/triggerdotdev/issue/TRI-1335/[tri-1329]-update-all-docs-introduction-or-overview-page-titles-to-be)</sub>",,
1922339463,526,[TRI-1334] [TRI-1331] CLI warning if using @trigger.dev/react package with Next.js pages directory,"## Problem

We add the `@trigger.dev/react` package when you run `npx @trigger.dev/cli@latest init` in a Next.js project. The Next.js pages directory has a known issue with ESM modules.

We currently have an open issue but this still isn't great: [https://github.com/triggerdotdev/trigger.dev/issues/331](https://github.com/triggerdotdev/trigger.dev/issues/331)

## Solution

Show a clear warning in our CLI init command that gives you instructions on what to do, if you're using Next.js + pages router. 

### If on Next.js >13.1, add this to next.config file:

```
const nextConfig = {
  transpilePackages: [""@trigger.dev/react""],
};

module.exports = nextConfig;
```

### If on Next.js <13.1, add this to next.config file:

1. Install next-transpile-modules package

```
const withTM = require('next-transpile-modules')(['@trigger.dev/react']); // pass the modules you would like to see transpiled

module.exports = withTM({
  //...existing config object
});
```

### How to

* It makes most sense to add this to [the post-install step](https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/packages/cli/src/frameworks/nextjs/index.ts#L91).
* There's already a function to check for pages directory that can be used

  ```
  const nextJsDir = await detectPagesOrAppDir(path);
  ```
* [Here's some code](https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/packages/cli/src/frameworks/nextjs/index.ts#L111) that could potentially be adapted to check the Next.js version. But be careful when checking versions because special characters are used in package.json files, like ""^"" and ""\*"". So either you should get the actual version installed (not using the package.json) or use a semver package to do the comparison.
* Drawing a box using `boxen` would be a nice way to highlight this information, see [this code](https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/packages/cli/src/frameworks/express/index.ts#L39) for an example.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1331](https://linear.app/triggerdotdev/issue/TRI-1331/cli-warning-if-using-triggerdevreact-package-with-nextjs-pages)</sub>

<sub>[TRI-1334](https://linear.app/triggerdotdev/issue/TRI-1334/[tri-1331]-cli-warning-if-using-triggerdevreact-package-with-nextjs)</sub>",,
1922336610,525,[TRI-1333] [TRI-1332] Upgrade all packages/* and use fetch instead of node-fetch,"## Problem

Our packages currently support Node 16–17. This means we can't use `fetch` and we can't support some modern deployment platforms like Cloudflare/Vercel edge functions.

Node v18 is now LTS and v16 has entered ""end-of-life"" with no official support.

## Solution

* Set the engines.node property in all of the packages/\*/package.json files.
* Upgrade all packages/\* to support Node v18. 
* Change fetch to node-fetch
* Fix any other issues
* Ensure that typechecking has no errors: `pnpm run --filter ""./packages/**"" typecheck`

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1332](https://linear.app/triggerdotdev/issue/TRI-1332/upgrade-all-packages-and-use-fetch-instead-of-node-fetch)</sub>

<sub>[TRI-1333](https://linear.app/triggerdotdev/issue/TRI-1333/[tri-1332]-upgrade-all-packages-and-use-fetch-instead-of-node-fetch)</sub>",,
1920181072,523,Bulk actions for Runs in Trigger UI,"### Is your feature request related to a problem? Please describe.

I will often run multiple Job executions at once. If I want to cancel, or retry a Run I have to do it one by one - it takes a lot of time.

### Describe the solution you'd like to see

We could have checkboxes for selecting multiple Runs and bulk actions (cancel, retry). 

### Describe alternate solutions

–

### Additional information

_No response_",,
1917935814,520,[TRI-1320] [TRI-1105] Ability to filter runs by status and environment,"### Problem

The runs list can get very long and there's no way to quickly find a run by status (success/fail/etc) and the environment (dev/staging/prod).

### Solution

Add filtering for

* Status
* Environment (include other users' dev environments in the list)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1105](https://linear.app/triggerdotdev/issue/TRI-1105/ability-to-filter-runs-by-status-and-environment)</sub>

<sub>[TRI-1320](https://linear.app/triggerdotdev/issue/TRI-1320/[tri-1105]-ability-to-filter-runs-by-status-and-environment)</sub>",,
1917650371,518,"[TRI-1314] CLI init: Next.js middleware checking can fail, we should try catch it","## Problem

This error was received during setup:
`TypeError: Unexpected MODIFIER at 0, expected END`

It looks like this error is to do with the underlying `path-to-regexp` package and wilcards: [https://github.com/serverless-nextjs/serverless-next.js/issues/2433](https://github.com/serverless-nextjs/serverless-next.js/issues/2433)

## Solution

* We should catch issues detecting middleware and show a generic message that links to our middleware docs
* Investigate what's causing this wildcard error and try and fix that (we should still do the above as well)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1314](https://linear.app/triggerdotdev/issue/TRI-1314/cli-init-nextjs-middleware-checking-can-fail-we-should-try-catch-it)</sub>",,
1917122842,515,[TRI-1310] Add a Deno adaptor,"This have a pre-requisite before it's possible:

\#252

### What needs to be done?

After the above issue is completed, the adaptor should be straight forward.

A new adaptor in `packages/deno` needs to be created. There are several to look at as inspiration, the simplest being Remix: [https://github.com/triggerdotdev/trigger.dev/blob/main/packages/remix/src/index.ts](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/remix/src/index.ts)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1310](https://linear.app/triggerdotdev/issue/TRI-1310/add-a-deno-adaptor)</sub>",,
1917113172,514,[TRI-1309] Trigger registration errors don't get displayed to the user,"### To reproduce

Add a job with an `intervalTrigger` with a very large value for the seconds (greater than `2_592_000`). The Job will silently fail to appear in the dashboard.

### Expected result

The error should get returned from the registration endpoint so it's shown in the user's local development console (where they run `npx @trigger.dev/cli@latest dev`). 

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1309](https://linear.app/triggerdotdev/issue/TRI-1309/trigger-registration-errors-dont-get-displayed-to-the-user)</sub>",,
1913820555,510,[TRI-1301] Add support for Deno,"This would require adding an adaptor, docs and CLI support.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1301](https://linear.app/triggerdotdev/issue/TRI-1301/add-support-for-deno)</sub>",,
1913245521,509,[TRI-1296] feat: CLI dev should work with injected environment variables,"### Is your feature request related to a problem? Please describe.

The CLI dev command fails if you don't use .env files – instead using something like 1Password to inject the values.

### Describe the solution you'd like to see

Make the @trigger.dev/cli first check if the TRIGGER_API_KEY is defined in the current process.

### Additional information

This is the relevant code: [https://github.com/triggerdotdev/trigger.dev/blob/main/packages/cli/src/utils/getTriggerApiDetails.ts#L36](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/cli/src/utils/getTriggerApiDetails.ts#L36)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1296](https://linear.app/triggerdotdev/issue/TRI-1296/feat-cli-dev-should-work-with-injected-environment-variables)</sub>",,
1913072909,504,[TRI-1295] CLI init fails to detect Next.js project,"### Provide environment information

-

### Describe the bug

When using next.config.mjs and next as a devDependency.

### Reproduction repo

-

### To reproduce

-

### Additional information

_No response_

<sub>[TRI-1295](https://linear.app/triggerdotdev/issue/TRI-1295/cli-init-fails-to-detect-nextjs-project)</sub>",,
1907680995,497,[TRI-1287] bug:  dynamic trigger registrations that don't succeed should disable the event dispatcher,"### Provide environment information

```
  System:
    OS: macOS 13.5.1
    CPU: (10) arm64 Apple M1 Max
    Memory: 769.42 MB / 32.00 GB
    Shell: 5.9 - /bin/zsh
  Binaries:
    Node: 18.12.1 - ~/.nvm/versions/node/v18.12.1/bin/node
    npm: 8.19.2 - ~/.nvm/versions/node/v18.12.1/bin/npm
    pnpm: 7.18.1 - ~/.nvm/versions/node/v18.12.1/bin/pnpm
```

### Describe the bug

When registering a dynamic trigger, if the registration job fails, the Event Dispatcher associated with that registration is still active. It needs to be disabled in the case  the registration job fails. This could cause duplicate runs.

### Reproduction repo

N/A

### To reproduce

```ts
import { Github, events } from ""@trigger.dev/github"";

const dynamicOnIssueOpenedTrigger = client.defineDynamicTrigger({
  id: ""github-issue-opened"",
  event: events.onIssueOpened,
  source: github.sources.repo,
});

const github = new Github({ id: ""github"", token: process.env.GITHUB_PAT! });

client.defineJob({
  id: ""register-issue-opened"",
  name: ""Register Issue Opened for Account"",
  version: ""0.0.1"",
  trigger: eventTrigger({
    name: ""register.issue.opened"",
  }),
  run: async (payload, io, ctx) => {
    await dynamicOnIssueOpenedTrigger.register(
      payload.id,
      {
        owner: payload.owner,
        repo: payload.repo,
      }
    );
  },
});

client.defineJob({
  id: ""dynamic-issue-opened"",
  name: ""Dynamic Issue Opened for Account"",
  version: ""0.0.1"",
  trigger: dynamicOnIssueOpenedTrigger,
  integrations: {
    github,
  },
  run: async (payload, io, ctx) => {
    await io.github.issues.createComment(""create-issue-comment"", {
      owner: payload.repository.owner.login,
      repo: payload.repository.name,
      issueNumber: payload.issue.number,
      body: `Hello there: \n\n\`\`\`json\n${JSON.stringify(
        payload,
        null,
        2
      )}\`\`\`\n\n\`\`\`json\n${JSON.stringify(ctx, null, 2)}\`\`\``,
    });
  },
});
```

Use the preceding code and make sure the GITHUB_PAT does not have webhook read&write scope.

1. Run the `register-issue-opened` job with the `id`, `owner`, and `repo` payload
2. Fix the GITHUB_PAT to be able to do webhook read&write
3. Make sure to restart
4. Run the `register-issue-opened` job with the same `id`, `owner`, and `repo` payload as Step 1
5. Create an issue on the repo
6. Notice that two runs have occurred

### Additional information

_No response_

<sub>[TRI-1287](https://linear.app/triggerdotdev/issue/TRI-1287/bug-dynamic-trigger-registrations-that-dont-succeed-should-disable-the)</sub>",,
1907595615,496,[TRI-1286] Create a Linear integration,"It would include

* Webhook support
* Common Tasks
* Support for OAuth and API Keys
* Added to the integration catalog
* Documentation

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1286](https://linear.app/triggerdotdev/issue/TRI-1286/create-a-linear-integration)</sub>",,
1905303239,489,bug: Images on docs missing,"### Provide environment information

https://trigger.dev/docs/documentation/quickstarts/supabase#run-and-test-the-job

<img width=""1102"" alt=""CleanShot 2023-09-20 at 17 59 25@2x"" src=""https://github.com/triggerdotdev/trigger.dev/assets/746429/3e1a6b93-2121-4371-8dfe-92b7827e4f25"">


### Describe the bug

see above

### Reproduction repo

https://trigger.dev/docs/documentation/quickstarts/supabase#run-and-test-the-job

### To reproduce

Scroll down on https://trigger.dev/docs/documentation/quickstarts/supabase#run-and-test-the-job

### Additional information

_No response_",,
1903132736,488,"bug: Run the CLI 'dev' command Error - ""Ngrok failed to create a tunnel""","### Provide environment information

  System:
    OS: Windows 10 10.0.19045
    CPU: (8) x64 Intel(R) Core(TM) i7-6700 CPU 
@ 3.40GHz
    Memory: 6.00 GB / 15.95 GB
  Binaries:
    Node: 18.16.1 - C:\Program Files\nodejs\node.EXE
    Yarn: 1.22.18 - ~\AppData\Roaming\npm\yarn.CMD
    npm: 8.4.0 - ~\AppData\Roaming\npm\npm.CMD 
    pnpm: 7.13.4 - ~\AppData\Roaming\npm\pnpm.CMD

### Describe the bug

![image](https://github.com/triggerdotdev/trigger.dev/assets/4971630/d5336a6d-cac5-4b5a-ad09-5acf0249b147)


![image](https://github.com/triggerdotdev/trigger.dev/assets/4971630/bdb5db20-a5b6-4c7b-961f-ef9e92f6ec5b)


### Reproduction repo

N/A

### To reproduce

```
npx @trigger.dev/cli@latest dev
```

### Additional information

I do have ngrok installed already, from previous projects",,
1900766921,487,bug: Type Instantiation is excessively deep Error when Defining a Job schema with `eventTrigger`,"### Provide environment information


  System:
    OS: Linux 6.1 Manjaro Linux
    CPU: (16) x64 Intel(R) Core(TM) i7-10870H CPU @ 2.20GHz
    Memory: 20.98 GB / 31.13 GB
    Container: Yes
    Shell: 5.1.16 - /bin/bash
  Binaries:
    Node: 20.5.1 - ~/.nvm/versions/node/v20.5.1/bin/node
    Yarn: 1.22.19 - ~/.nvm/versions/node/v20.5.1/bin/yarn
    npm: 9.8.0 - ~/.nvm/versions/node/v20.5.1/bin/npm


### Describe the bug

#### Description
While implementing a job that fetches and stores Discourse posts using the Trigger.dev SDK and Supabase, I encountered a TypeScript error: ""Type instantiation is excessively deep and possibly infinite (ts2589)"".

The error occurs when defining the `eventTrigger` as shown below:

```typescript
client.defineJob({
  id: ""discourse-example-job"",
  name: ""Fetch and Store Discourse Posts"",
  version: ""0.0.1"",
  trigger: eventTrigger({
    name: ""supabase.fetch-data"",
    schema: z.object({
      org_id: z.string(),
      base_discourse_url: z.string(),
    }),
  }),
  // ... (rest of the code)
});
```
Error Message

`Type instantiation is excessively deep and possibly infinite.ts(2589)`

### Reproduction repo

Private Repo

### To reproduce

### Steps to Reproduce
1. Define a job using client.defineJob
2. Inside the eventTrigger method, define a z.object schema with the properties as shown above.
3. Upon doing so, the TypeScript error appears.

### Expected Behavior
I expect to be able to define the job's trigger with eventTrigger and the z.object schema without encountering a TypeScript error.


### Additional information

### Additional Information

 ""@trigger.dev/nextjs"": ""^2.0.14"",
    ""@trigger.dev/react"": ""^2.1.0"",
    ""@trigger.dev/sdk"": ""^2.0.14"",
    ""@trigger.dev/supabase"": ""^2.0.14"",
    
  Node version: v20.5.1
",,
1899085737,484,[TRI-1281] feat: Add an optional `to` param to `@trigger.dev/cli init update`,"### Is your feature request related to a problem? Please describe.

When running `npx @trigger.dev/cli@latest update` we should allow you to pass in a `to` option which would set the version to upgrade to (instead of the default which is ""latest"".

### Describe the solution you'd like to see

* Add a `to` option to the update command, default to ""latest"": [https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/packages/cli/src/cli/index.ts#L98](https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/packages/cli/src/cli/index.ts#L98)
* If the `to` flag isn't ""latest"" then get ncu to do the change without spitting out the confirmation. There's a flag called `upgrade` that should work. This file is where edits need to happen: [https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/packages/cli/src/commands/update.ts#L35](https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/packages/cli/src/commands/update.ts#L35)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1281](https://linear.app/triggerdotdev/issue/TRI-1281/feat-add-an-optional-to-param-to-triggerdevcli-init-update)</sub>",,
1896229434,476,[TRI-1279] Add read replica support,"Prisma recently released an extension to support read replicas:

https://www.prisma.io/blog/read-replicas-prisma-client-extension-f66prwk56wow

We should try this out and use it to decrease load on the primary database, especially during reads from Dashboard loader routes, which means we should use it in a way that is ""opt-in"", like so:

https://x.com/ankur_datta_007/status/1702156301319729429?s=20

<sub>[TRI-1279](https://linear.app/triggerdotdev/issue/TRI-1279/add-read-replica-support)</sub>",,
1894364122,472,[TRI-1275] Add `io.waitForNextEvent` that resumes once a matching event is found,"It would be nice to support the following io task in a job run:

```ts
const event = await io.waitForNextEvent(""✋"", { name: ""opt-in"", filter: { userId: [payload.userId] })
```

We could also add a `continueAfter` parameter that would return `undefined` if the event isn't received in time:

```ts
const event = await io.waitForNextEvent(""✋"", {
  name: ""opt-in"",
  filter: { userId: [payload.userId] },
  continueAfter: 60 * 10,
});
```

## Type Safety

Currently the event payload type in `eventTrigger` is inferred via an optionally passed in schema:

```
eventTrigger({
    name: ""foo.event"",
    schema: z.object({
      userId: z.string(),
      delay: z.number(),
    }),
  })
```

We could add support for a schema to `waitForNextEvent` as well:

```
const event = await io.waitForNextEvent(""✋"", {
  name: ""opt-in"",
  filter: { userId: [payload.userId] },
  continueAfter: 60 * 10,
  schema: z.object({ userId: z.string() })
});
```

Once we add support for an Event Catalog (https://github.com/triggerdotdev/trigger.dev/issues/251) the event payload type would be automatically inferred based on it's name

<sub>[TRI-1275](https://linear.app/triggerdotdev/issue/TRI-1275/add-iowaitfornextevent-that-resumes-once-a-matching-event-is-found)</sub>",,
1894206748,471,[TRI-1274] Manual refreshing the Run page with a Task selected throws `Cannot read properties of undefined (reading 'length')`,"## To reproduce

On the Run page, click on a Task. Then manually refresh the page in your browser.

## Solution

I think this is to do with us using Suspense. The error points at accessing `properties.length`.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1274](https://linear.app/triggerdotdev/issue/TRI-1274/manual-refreshing-the-run-page-with-a-task-selected-throws-cannot-read)</sub>",,
1892893561,469,[TRI-1273] Create a function call example for OpenAI,"It would be great to create a function call example for OpenAI here: https://github.com/triggerdotdev/trigger.dev/blob/main/examples/job-catalog/src/openai.ts

Use these docs for how to do function calling: https://gpt.pomb.us/

<sub>[TRI-1273](https://linear.app/triggerdotdev/issue/TRI-1273/create-a-function-call-example-for-openai)</sub>",,
1888648300,459,[TRI-1260] Research moving to Bun,"Now that Bun has reached 1.0, we should look into switching our tooling and our docker image to using Bun instead of Node. This would mean:

- switching from pnpm to bun
- switching from esbuild & tsup to bun
- switching from node to bun in the webapp

This doesn't mean that our published packages will only work on bun. They should still work in Node and other JS platforms.

Other considerations:

- does Bun have a docker image?
- does Prisma work with bun?
- what about windows developers?

This tweet about switching Remix to bun could be useful: 

https://x.com/sergiodxa/status/1700277429414027732?s=46&t=1ddbpEADp3fME9hP7W6tsg

<sub>[TRI-1260](https://linear.app/triggerdotdev/issue/TRI-1260/research-moving-to-bun)</sub>",,
1888012402,455,[TRI-1258] [TRI-1247] Documentation for Creating integration Triggers (webhooks),"We have [documentation for creating integrations](https://trigger.dev/docs/integrations/create), except for adding Triggers to them.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1247](https://linear.app/triggerdotdev/issue/TRI-1247/documentation-for-creating-integration-triggers-webhooks)</sub>

<sub>[TRI-1258](https://linear.app/triggerdotdev/issue/TRI-1258/[tri-1247]-documentation-for-creating-integration-triggers-webhooks)</sub>",,
1888006651,454,[TRI-1247] Documentation for Creating integration Triggers (webhooks),"We have [documentation for creating integrations](https://trigger.dev/docs/integrations/create), except for adding Triggers to them.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1247](https://linear.app/triggerdotdev/issue/TRI-1247/documentation-for-creating-integration-triggers-webhooks)</sub>

<sub>[TRI-1257](https://linear.app/triggerdotdev/issue/TRI-1257/[tri-1247]-documentation-for-creating-integration-triggers-webhooks)</sub>",,
1887949656,453,[TRI-1256] Framework: support for SvelteKit,"# Build support for SvelteKit into Trigger.dev

**_Please make sure to use Typescript for all code_**

### Task 1 - SvelteKit Adaptor
- [ ] Create a new folder in `packages` called `svelteKit`
- [ ] Create the adaptor for SvelteKit. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic SvelteKit project that uses the adaptor in `examples/svelteKit` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/svelteKit` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference SvelteKit where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Locate the `manual-setup-svelteKit.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding
- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.svelteKit` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)

<sub>[TRI-1256](https://linear.app/triggerdotdev/issue/TRI-1256/framework-support-for-sveltekit)</sub>",,
1887945446,452,[TRI-1255] Framework: support for Astro,"# Build support for Astro into Trigger.dev

**_Please make sure to use Typescript for all code_**

### Task 1 - Astro Adaptor
- [ ] Create a new folder in `packages` called `astro`
- [ ] Create the adaptor for Astro. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic Astro project that uses the adaptor in `examples/astro` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/astro` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference Astro where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Locate the `manual-setup-astro.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding
- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.astro` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)

<sub>[TRI-1255](https://linear.app/triggerdotdev/issue/TRI-1255/framework-support-for-astro)</sub>",,
1887942893,451,[TRI-1254] Framework: support for Express,"# Build support for Express into Trigger.dev

**_Please make sure to use Typescript for all code_**

### Task 1 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/express` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference Express where needed, including updating the the URLs.

### Task 2 – Write the documentation
- [ ] Locate the `manual-setup-express.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 3 – Update the webapp onboarding
- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.express` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)

<sub>[TRI-1254](https://linear.app/triggerdotdev/issue/TRI-1254/framework-support-for-express)</sub>",,
1887941244,450,[TRI-1253] Framework: support for Fastify,"# Build support for Fastify into Trigger.dev

**_Please make sure to use Typescript for all code_**

### Task 1 - Fastify Adaptor
- [ ] Create a new folder in `packages` called `fastify`
- [ ] Create the adaptor for Fastify. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic Fastify project that uses the adaptor in `examples/fastify` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/fastify` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference Fastify where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Locate the `manual-setup-fastify.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding
- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.fastify` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)

<sub>[TRI-1253](https://linear.app/triggerdotdev/issue/TRI-1253/framework-support-for-fastify)</sub>",,
1887939147,449,[TRI-1252] Framework: support for Nest.js,"# Build support for Nest.js into Trigger.dev

**_Please make sure to use Typescript for all code_**

### Task 1 - Nest.js Adaptor
- [ ] Create a new folder in `packages` called `nestjs`
- [ ] Create the adaptor for Nest.js. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic Nest.js project that uses the adaptor in `examples/nestjs` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/nestjs` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference Nest.js where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Locate the `manual-setup-nestjs.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding
- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.nestjs` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)

<sub>[TRI-1252](https://linear.app/triggerdotdev/issue/TRI-1252/framework-support-for-nestjs)</sub>",,
1887936714,448,[TRI-1251] Framework: support for Redwood.js,"# Build support for Redwood into Trigger.dev

**_Please make sure to use Typescript for all code_**

### Task 1 - Redwood Adaptor
- [ ] Create a new folder in `packages` called `redwood`
- [ ] Create the adaptor for Redwood. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic Redwood project that uses the adaptor in `examples/redwood` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/redwood` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference Redwood where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Locate the `manual-setup-redwood.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding
- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.redwood` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)

<sub>[TRI-1251](https://linear.app/triggerdotdev/issue/TRI-1251/framework-support-for-redwoodjs)</sub>",,
1887861160,447,[TRI-1250] Framework: support for Nuxt,"# Build support for Nuxt into Trigger.dev

***Please make sure to use Typescript for all code***

### Task 1 - Nuxt Adaptor

- [ ] Create a new folder in `packages` called `nuxt`
- [ ] Create the adaptor for Nuxt. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic Nuxt project that uses the adaptor in `examples/nuxt` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a [README.md](http://README.md) file

- [ ] Create a new [README.md](http://README.md) file inside the `packages/nuxt` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference Nuxt where needed, including updating the the URLs.

### Task 3 – Write the documentation

- [ ] Locate the `manual-setup-nuxt.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding

- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.nuxt` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.

![](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/8994af96-bd76-4767-a1f1-0bea2cc98e2a/d235a893-1c57-4645-8651-432f7764357d?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC84OTk0YWY5Ni1iZDc2LTQ3NjctYTFmMS0wYmVhMmNjOThlMmEvZDIzNWE4OTMtMWM1Ny00NjQ1LTg2NTEtNDMyZjc3NjQzNTdkIiwiaWF0IjoxNzExNjM0MDYzLCJleHAiOjE3MTE3MjA0NjN9.lWJgPEDs19uLEJ9IKBe4fjK9lSnMGbInwng4SH6Fzj8)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1250](https://linear.app/triggerdotdev/issue/TRI-1250/framework-support-for-nuxt)</sub>",,
1887806623,445,[TRI-1249] Framework: Support for Remix,"# Build support for Remix into Trigger.dev

**_Please make sure to use Typescript for all code_**

### Task 1 - Remix Adaptor
- [ ] Create a new folder in `packages` called `remix`
- [ ] Create the adaptor for Remix. Use [this Next.js adaptor](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/nextjs/src/index.ts) code as reference when creating yours. Include all setup configurations to fully support the framework, e.g. Next.js requires adaptor support for both App and Pages routers.
- [ ] Create a basic Remix project that uses the adaptor in `examples/remix` folder. Include a basic Job in Trigger.dev, e.g. a simple Job that just does a delay inside it. Screen grab the full Run dashboard page showing it successfully worked. Here are examples of how to do cross-project references in [package.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/package.json#L14) and [tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/aae143d96e1cd3c2b2b2ccb5120f75651a4261d0/examples/nextjs-example/tsconfig.json#L31).
- [ ] Provide a screen grab of your terminal showing the Adaptor is working

### Task 2 – Add a README.md file
- [ ] Create a new README.md file inside the `packages/remix` folder and copy in the contents from `packages/nextjs/README.md`. Adjust the wording to reference Remix where needed, including updating the the URLs.

### Task 3 – Write the documentation
- [ ] Locate the `manual-setup-remix.mdx` folder in `/docs/_snippets/`. Use this file to write your documentation, overwriting any contents of that file. Follow the structure of [this Next.js example](https://trigger.dev/docs/documentation/guides/manual/nextjs) for reference when writing yours.
- [ ] Update the table at the bottom of the `client-adaptors.mdx` page with the framework you’ve worked on.

### Task 4 – Update the webapp onboarding
- [ ] In the `route.tsx` page located in `_app.orgs.$organizationSlug.projects.$projectParam.setup.remix` replace the `<FrameworkComingSoon/>` component with your new onboarding steps. Follow the same structure as the Next.js example when creating your own. Ignore the very top step for adding this framework to a new project, just focus on the steps to add it to an existing project (so don’t include the `<RadioGroup/>` toggle selector at the top). Make sure you also include the `useProjectSetupComplete();` hook at the top of the page – this triggers a particle effect when the new job is successfully created and redirects to the Jobs list 🥳 .
- [ ] In the `FrameworkSelector.tsx` file, add “supported” to the framework you’ve worked on.
![CleanShot 2023-09-07 at 16 42 14](https://github.com/triggerdotdev/trigger.dev/assets/7555566/e235930d-f99e-408f-bc72-e98ce3d18892)

<sub>[TRI-1249](https://linear.app/triggerdotdev/issue/TRI-1249/framework-support-for-remix)</sub>",,
1885670858,443,Request to Update Twitter Icon to X ,"### Bug Description
Twitter logo is updated recently and hasnt been updated on the site. I didnt find any issue related to this.

### ScreenShot
<img width=""960"" alt=""Screenshot 2023-09-07 163228"" src=""https://github.com/triggerdotdev/trigger.dev/assets/91591901/4c444d0d-f102-486b-955f-226b110673ce"">

### Expected Behavior
Change the old logo with the new one.

### Request
@ericallam 
I want to work on this issue please assign this to me.
",,
1885586027,442,[TRI-1243] Airtable webhooks,"This requires these changes first:

1\. Upgrade Graphile worker to 0.14.0 ([https://github.com/triggerdotdev/trigger.dev/issues/396)](https://github.com/triggerdotdev/trigger.dev/issues/396))

2\. Add batch event support ([https://github.com/triggerdotdev/trigger.dev/issues/348)](https://github.com/triggerdotdev/trigger.dev/issues/348))

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1243](https://linear.app/triggerdotdev/issue/TRI-1243/airtable-webhooks)</sub>",,
1882401344,436,"[TRI-1230] TypeScript ""Type instantiation is excessively deep and possibly infinite.ts(2589)"" error when using eventTrigger w/zod schema (different Zod versions)","When using the `eventTrigger` with zod to define the event schema TypeScript gives this error:

![](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/4bca3b0b-e32b-420d-8198-f5f3e52d8733/66f377c7-1a97-42ec-b5ad-8b4c4974672c?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC80YmNhM2IwYi1lMzJiLTQyMGQtODE5OC1mNWYzZTUyZDg3MzMvNjZmMzc3YzctMWE5Ny00MmVjLWI1YWQtOGI0YzQ5NzQ2NzJjIiwiaWF0IjoxNjkzOTMzMjU5LCJleHAiOjE2OTQwMTk2NTl9.f8-Cl_2WEvsRxv1wuGksLGbbDnPNRK2uvoC2R60AYSE)

This only seems to be happening in Next.js projects created with `create-t3-app`. I've reproduced it here:

[https://github.com/ericallam/t3-trigger-app/blob/bbade197052ae5d790c7b46509628a5c8d57ba94/src/jobs/examples.ts#L19](https://github.com/ericallam/t3-trigger-app/blob/bbade197052ae5d790c7b46509628a5c8d57ba94/src/jobs/examples.ts#L19)

We need to track down the issue and figure out how to fix it (or provide a workaround for t3-app)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1230](https://linear.app/triggerdotdev/issue/TRI-1230/typescript-possibly-infinite-error-when-using-eventtrigger-wzod-schema)</sub>",,
1882179161,435,[TRI-1226] Allow seeing teammates' dev runs,"When on the runs page for a job you currently only see runs associated with your personal Dev environment – you DO NOT see runs from your teammates Dev environment.

## Options

1. Keep it as-is, but add a filter dropdown where you can select environments. Teammate Dev environments would be unchecked by default when you load the page.
2. Show all Dev environments by default. Filters can be added later.

I think option 2 is the correct choice.

## Display style

Your own Dev environment would remain as-is: `[DEV]`.
Teammate's would appear like this: `[DEV: Amy]`.

## Changes required

* Add an optional name param on the `EnvironmentLabel`.
* Change the `RunListPresenter` so it doesn't filter the environments in the where clause. Get the name of the user for the environment.
* The RunTable would need to be adapted to pass in the name (note this only applies to DEV environments).
* On the Run page, update the environment badge

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1226](https://linear.app/triggerdotdev/issue/TRI-1226/allow-seeing-teammates-dev-runs)</sub>",,
1880171371,431,[TRI-1203] OpenAI background calls should use backgroundFetch without an extra subtask,"Currently there's a nested subtask that actually does the fetch call. This should be changed so it does just the backgroundFetch call.

Note, this cannot be done until the Airtable PR is merged #9.

<sub>[TRI-1203](https://linear.app/triggerdotdev/issue/TRI-1203/openai-background-calls-should-use-backgroundfetch-without-an-extra)</sub>",,
1878074143,427,[TRI-1201] Allow event ingestion from non-API sources,"Currently you can only send events to Trigger.dev via the `/api/v1/events` endpoint, which initiates the event ingestion process in the request/response cycle. To improve event ingestion reliability, we should allow self-hosters and the Trigger.dev cloud to be able to read off a queue (like AWS SQS). This will allow events to not be lost in the case of downtime. For example, we want to use this in the Trigger.dev cloud to stick a Cloudflare Worker to intercept the `/api/v1/events` path and push events into AWS SQS, totally transparently to the user. 

<sub>[TRI-1201](https://linear.app/triggerdotdev/issue/TRI-1201/allow-event-ingestion-from-non-api-sources)</sub>",,
1878016760,426,[TRI-1200] `@trigger.dev/stripe` triggers should not allow invalid events,"Currently we don't do any client-side filtering of events passed to triggers:

```
stripe.onPrice({ events: [""price.created"", ""this.is.invalid""] })
```

Other than TypeScript errors, nothing will stop the above trigger to attempt to register the `this.is.invalid` event, which will result in an error response from the Stripe API. We should filter these out (and print a warning) to prevent this issue.

<sub>[TRI-1200](https://linear.app/triggerdotdev/issue/TRI-1200/triggerdevstripe-triggers-should-not-allow-invalid-events)</sub>",,
1875267653,425,feature request: Supabase Management integration available to local supabase as well,"## Current issue
1. run supabase locally: `npx supabase start`
2. create a job using the Supabase Management SDK on local. 
3. the following error occurs and the integration is not created.

```
Error: Failed to run query: Unauthorized (401): invalid signature
    at SupabaseManagementAPI.createResponseError_fn (/workspaces/nextjs-supabase-triggerdev-test/node_modules/supabase-management-js/dist/index.js:1102:10)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async SupabaseManagementAPI.runQuery (/workspaces/nextjs-supabase-triggerdev-test/node_modules/supabase-management-js/dist/index.js:626:13)
    at async executeTask (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/sdk/dist/index.js:930:24)
    at async ioConnection.<computed> [as runQuery] (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/sdk/dist/index.js:506:18)
    at async Object.register (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/supabase/dist/index.js:540:28)
    at async ExternalSource.register (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/sdk/dist/index.js:1810:21)
    at async Object.run (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/sdk/dist/index.js:1497:25)
    at async #executeJob (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/sdk/dist/index.js:1600:20)
    at async TriggerClient.handleRequest (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/sdk/dist/index.js:1312:25)
    at async handler (/workspaces/nextjs-supabase-triggerdev-test/node_modules/@trigger.dev/nextjs/dist/index.js:32:22)
```

## Cause
The `supabase-management-js` used internally assumes the use of the cloud version. Therefore, it is not possible to issue a webhook to a locally hosted supabase.
Furthermore, there is no API to enable webhooks in local supabase.

## Suggestion for improvement
### case 1
1. when creating a Supabase Management class, the connection string to the supabase-db can be passed as an argument.
2. the argument of 1. is given, execute the query of `createTriggerQuery` directly.

### case 2
case 1 is preferable because it can be automated, but if SQL execution is not preferred, this option is also available.

1. when creating a Supabase Management class, you can pass an option to omit automatic webhook create as an argument.
2. the argument of 1. is given, instead of executed the query of `createTriggerQuery`, output it to the log (to be executed manually by the user)",,
1872163055,424,[TRI-1178] stripe.onAccountUpdated only works if you pass { connect: true },"`onAccountUpdated` is a Stripe Connect event, and only works when that's specified. We need to update our code so the default is true for connect.

If you're encountering this issue, you can fix it by doing this:

```
stripe.onAccountUpdated({ connect: true })
```

We need to fix it in the integration package so it's not required to pass that option.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1178](https://linear.app/triggerdotdev/issue/TRI-1178/stripeonaccountupdated-only-works-if-you-pass-connect-true)</sub>",,
1870588160,423,[TRI-1171] Add to docs: note about https://github.com/nextauthjs/next-auth/issues/7660,"Users on Next.js 13.4.4 will run into the error linked in the title, we should add this to the docs in the Next.js platform guide

<sub>[TRI-1171](https://linear.app/triggerdotdev/issue/TRI-1171/add-to-docs-note-about-httpsgithubcomnextauthjsnext-authissues7660)</sub>",,
1870563880,422,[TRI-1170] Ensure `@trigger.dev/openai` background tasks have retry configuration,"These backgroundFetch tasks need to have their retry configuration set:

- [`backgroundCreateCompletion`](https://github.com/triggerdotdev/trigger.dev/blob/4685b630d90f6b63db691759c15f2fd6aa433e80/integrations/openai/src/tasks.ts)
- [`backgroundCreateChatCompletion`](https://github.com/triggerdotdev/trigger.dev/blob/4685b630d90f6b63db691759c15f2fd6aa433e80/integrations/openai/src/tasks.ts)

View the docs on `backgroundFetch` retry here: https://trigger.dev/docs/sdk/io/backgroundfetch

And the OpenAI error codes here: https://platform.openai.com/docs/guides/error-codes

<sub>[TRI-1170](https://linear.app/triggerdotdev/issue/TRI-1170/ensure-triggerdevopenai-background-tasks-have-retry-configuration)</sub>",,
1870555163,421,[TRI-1169] Create a Vercel integration package,"Vercel have webhook events that we could be exposed through a `@trigger.dev/vercel` integration:

[https://vercel.com/docs/observability/webhooks-overview/webhooks-api](https://vercel.com/docs/observability/webhooks-overview/webhooks-api)

They also have an API for registering webhooks that we can use:

[https://vercel.com/docs/rest-api/endpoints#webhooks](https://vercel.com/docs/rest-api/endpoints#webhooks)

# Useful docs/code

* [Development guide](https://github.com/triggerdotdev/trigger.dev/blob/main/CONTRIBUTING.md)
* [Create integration guide](https://trigger.dev/docs/integrations/create)
* [Other integration packages](https://github.com/triggerdotdev/trigger.dev/tree/main/integrations), especially ones with webhooks like GitHub, Typeform, and Linear.

# Requirements

* Make sure that you have fully tested that each webhook works and comes through to your locally running dashboard
* Make sure you've implemented the best practice security in verifying the payloads. Vercel talk about this in their linked docs above.
* Make sure to add Vercel to the [integrationCatalog](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/services/externalApis/integrationCatalog.server.ts).

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1169](https://linear.app/triggerdotdev/issue/TRI-1169/create-a-vercel-integration-package)</sub>",,
1870538742,420,"[TRI-1168] When indexing Jobs, if they fail to parse the errors don't get sent back to users","To reproduce create a Job with an interval of less than 60 seconds, and reun `npx @trigger.dev/cli@latest dev`

```
client.defineJob({
  // This is the unique identifier for your Job, it must be unique across all Jobs in your project
  id: ""job-3"",
  name: ""Third job"",
  version: ""0.0.3"",
  // This is triggered by an event using eventTrigger. You can also trigger Jobs with webhooks, on schedules, and more: https://trigger.dev/docs/documentation/concepts/triggers/introduction
  trigger: intervalTrigger({
    seconds: 5,
  }),
  run: async (payload, io, ctx) => {
    await io.logger.info(""You console it! 🤦"");
  },
});
```

This will silently fail to appear in the dashboard and will stop all other Jobs from registering as well.

We need to change this code to use safeParse and to return an error with the details if it fails.

[https://github.com/triggerdotdev/trigger.dev/blob/1d7e5737a0234b5654a685b08f5c09720018fbb9/apps/webapp/app/services/endpointApi.server.ts#L131](https://github.com/triggerdotdev/trigger.dev/blob/1d7e5737a0234b5654a685b08f5c09720018fbb9/apps/webapp/app/services/endpointApi.server.ts#L131)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1168](https://linear.app/triggerdotdev/issue/TRI-1168/when-indexing-jobs-if-they-fail-to-parse-the-errors-dont-get-sent-back)</sub>",,
1869847550,419,[TRI-1167] Implement graphile worker heartbeat and recovery process for crashed jobs,"Graphile Worker is working on a way to better recover from crashed jobs from stopped workers:

[https://github.com/graphile/worker/issues/222](https://github.com/graphile/worker/issues/222)

There are some good ideas further down in the thread with how people deal with this now, we should take some of their ideas and implement them in Trigger.dev to more quickly recover from locked jobs:

[https://github.com/graphile/worker/issues/222#issuecomment-1347429067](https://github.com/graphile/worker/issues/222#issuecomment-1347429067)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1167](https://linear.app/triggerdotdev/issue/TRI-1167/implement-graphile-worker-heartbeat-and-recovery-process-for-crashed)</sub>",,
1869453677,416,[TRI-1166] Help text in job dashboard makes it seem like every job is a scheduled job,"For example, on a job that is triggered through a stripe webhook:

![](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/7cb5dc9f-c73c-4b4f-acbe-3c85fa7e5c9e/a5c0db9a-faa7-44b8-9119-7195e6ba64e4?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC83Y2I1ZGM5Zi1jNzNjLTRiNGYtYWNiZS0zYzg1ZmE3ZTVjOWUvYTVjMGRiOWEtZmFhNy00NGI4LTkxMTktNzE5NWU2YmE2NGU0IiwiaWF0IjoxNjkzMjE3NzEzLCJleHAiOjE2OTMzMDQxMTN9.4KkwsVXcTEkPE5YJPtWOnokUF__kPsHkiwkA5eHwEDg)

We should either

* Detect when a job is a scheduled job and only show that help text then
* Remove the help text to avoid confusion

This was first reported to me by a user in Discord so confident this confusion is happening ""in the wild""

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1166](https://linear.app/triggerdotdev/issue/TRI-1166/help-text-in-job-dashboard-makes-it-seem-like-every-job-is-a-scheduled)</sub>",,
1869419298,415,[TRI-1165] Update `init` CLI command to detect and automatically add and configure the `@trigger.dev/eslint-plugin`,"We should detect if eslint is being used in the project when the `init` command is run and automatically install and configure the eslint plugin. The only question is if we do detect eslint, should we prompt the user to confirm they want to use our eslint plugin?

<sub>[TRI-1165](https://linear.app/triggerdotdev/issue/TRI-1165/update-init-cli-command-to-detect-and-automatically-add-and-configure)</sub>",,
1868978196,413,"Extend Stripe Triggers Support for Payment Intents, Payouts, and Account Links","## Feature Request: Extend Stripe Triggers Support for Payment Intents, Payouts, and Account Links

I'd like to request Trigger.dev to extend Stripe trigger support for additional functionalities:

### [Payment Intents](https://stripe.com/docs/api/payment_intents)
- `onPaymentIntentCreated` (`stripe.paymentIntents.create`)
- `onPaymentIntentUpdated` (`stripe.paymentIntents.update`)
- `onPaymentIntentConfirmed` (`stripe.paymentIntents.confirm`)
- `onPaymentIntentCaptured` (`stripe.paymentIntents.capture`)
- `onPaymentIntentCanceled` (`stripe.paymentIntents.cancel`)

### [Payouts](https://stripe.com/docs/api/payouts)
- `onPayoutCreated` (`stripe.payouts.create`)
- `onPayoutUpdated` (`stripe.payouts.update`)
- `onPayoutCanceled` (`stripe.payouts.cancel`)
- `onPayoutReversed` (`stripe.payouts.reverse`)

### [Account Links](https://stripe.com/docs/api/account_links)
- `onAccountLinkCreated` (`stripe.accountLinks.create`)

These triggers are essential for building a comprehensive platform with Stripe Connect.

Thank you for considering this request.
",,
1868493255,409,[TRI-1164] Update changesets to automatically create Github releases and create clean changelogs,"Similar to how Remix does their changeset release creation

<sub>[TRI-1164](https://linear.app/triggerdotdev/issue/TRI-1164/update-changesets-to-automatically-create-github-releases-and-create)</sub>",,
1868048614,403,[TRI-1163] CLI dev command tunnel doesn't work if you're already running ngrok,"It just hangs on this, without providing an error message:

![CleanShot 2023-08-26 at 12.22.37.png](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/6057e96f-27e0-420a-8399-d57eaf0ef68b/00d85346-bdc1-42e8-a387-3e42404f00f2?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC82MDU3ZTk2Zi0yN2UwLTQyMGEtODM5OS1kNTdlYWYwZWY2OGIvMDBkODUzNDYtYmRjMS00MmU4LWEzODctM2U0MjQwNGYwMGYyIiwiaWF0IjoxNjkzMDQ5NTMyLCJleHAiOjE2OTMxMzU5MzJ9.DkB-daC3xX89yS1VWa6RlQ3dqMxKCYxgoHKJqwSrL30)

Is it possible to create a tunnel when there is already one running? Perhaps by using the options when creating it?

If not we should display a message to tell the user it won't work when they're already running ngrok.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1163](https://linear.app/triggerdotdev/issue/TRI-1163/cli-dev-command-tunnel-doesnt-work-if-youre-already-running-ngrok)</sub>",,
1866551475,396,[TRI-1152] chore: upgrade webapp to use graphile-worker `0.14.0-rc.0`,"We're currently on 0.13.0 but `0.14.0` comes with automatic queue management, so it will be easier to do #392 along with other things:

* New ""batch jobs"" feature for merging payloads with a job_key (see README)
* Significantly improved 'large jobs table' performance (e.g. when a large queue is locked, or there's a lot of jobs queued for task identifiers your worker instance doesn't support, or a lot of failed jobs). Around 20x improvement in this 'worst case' performance for real user workloads.
* Added new (experimental) much faster add_jobs batch API.
* Fix error handling of cron issues in 'run' method.
* CronItem.match can now accept either a pattern string or a matcher function
* Jobs that were locked more than 4 hours will be reattempted as before, however they are slightly de-prioritised by virtue of having their run_at updated, giving interim jobs a chance to be executed (and lessening the impact of queue stalling through hanging tasks).

The full release notes are here:

[https://github.com/graphile/worker/blob/main/RELEASE_NOTES.md#v0140](https://github.com/graphile/worker/blob/main/RELEASE_NOTES.md#v0140)

As mentioned in the release notes, this is a breaking change, meaning workers running `0.13` cannot run against the `0.14` schema. So we'll need to make this clear in any release notes for this feature.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1152](https://linear.app/triggerdotdev/issue/TRI-1152/chore-upgrade-webapp-to-use-graphile-worker-0140-rc0)</sub>",,
1865576522,393,[TRI-1151] Lower maxAttempts for specific tasks when those tasks call to development endpoints,"For the following worker tasks:

* performRunExecutionV2
* deliverHttpSourceRequest
* indexEndpoint

We currently are setting the maxAttempts statically to:

* performRunExecutionV2 to 12
* deliverHttpSourceRequest to 14
* indexEndpoint to 7

While those values make sense when they are hitting production endpoints, as we want to retry just in case production endpoints are temporary down for whatever reason, they really don't make sense for development endpoints, since development endpoints are usually either running or not, so maxAttempts should be set to 1.

This would greatly reduce the graphile worker load for these tasks.

So we should set the maxAttempts for these at `enqueue` time.

### performRunExecutionV2

This is enqueued from a single location:

[https://github.com/triggerdotdev/trigger.dev/blob/1fd1d267800647af8139851bc22876cbf4643d5f/apps/webapp/app/models/jobRunExecution.server.ts#L32](https://github.com/triggerdotdev/trigger.dev/blob/1fd1d267800647af8139851bc22876cbf4643d5f/apps/webapp/app/models/jobRunExecution.server.ts#L32)

We can add an option to

```
export type EnqueueRunExecutionV2Options = {
  runAt?: Date;
  resumeTaskId?: string;
  isRetry?: boolean;
  skipRetrying?: boolean;
};

export async function enqueueRunExecutionV2(
  run: JobRun,
  tx: PrismaClientOrTransaction,
  options: EnqueueRunExecutionV2Options = {}
) {
  const job = await executionWorker.enqueue(
    ""performRunExecutionV2"",
    {
      id: run.id,
      reason: run.status === ""PREPROCESSING"" ? ""PREPROCESS"" : ""EXECUTE_JOB"",
      resumeTaskId: options.resumeTaskId,
      isRetry: typeof options.isRetry === ""boolean"" ? options.isRetry : false,
    },
    {
      queueName: `job:${run.jobId}:env:${run.environmentId}`,
      tx,
      runAt: options.runAt,
      jobKey: `job_run:${run.id}`,
      maxAttempts: options.skipRetrying ? 1 : undefined
    }
  );
}
```

Then we'd just have to update the calls to `enqueueRunExecutionV2` to add `skipRetrying = true` in certain envs:

[https://github.com/triggerdotdev/trigger.dev/blob/1fd1d267800647af8139851bc22876cbf4643d5f/apps/webapp/app/services/runs/startRun.server.ts#L86](https://github.com/triggerdotdev/trigger.dev/blob/1fd1d267800647af8139851bc22876cbf4643d5f/apps/webapp/app/services/runs/startRun.server.ts#L86)

```
await enqueueRunExecutionV2(updatedRun, this.#prismaClient, {
   skipRetrying: run.environment.type === RuntimeEnvironmentType.DEVELOPMENT,
});
```

### deliverHttpSourceRequest

This is enqueued in one place:

[https://github.com/triggerdotdev/trigger.dev/blob/1fd1d267800647af8139851bc22876cbf4643d5f/apps/webapp/app/services/sources/handleHttpSource.server.ts#L50](https://github.com/triggerdotdev/trigger.dev/blob/1fd1d267800647af8139851bc22876cbf4643d5f/apps/webapp/app/services/sources/handleHttpSource.server.ts#L50)

The `TriggerSource` has an environment relation so can easily just use that to set the maxAttempts to 1 in dev.

### indexEndpoint

This is enqueued from multiple places, e.g.:

[https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier.ts/#L115](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/api.v1.endpoints.$environmentId.$endpointSlug.index.$indexHookIdentifier.ts/#L115)

The Endpoint itself has a relation to the environment so it should work similar to how indexEndpoint is enqueued.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1151](https://linear.app/triggerdotdev/issue/TRI-1151/lower-maxattempts-for-specific-tasks-when-those-tasks-call-to)</sub>",,
1865537583,392,[TRI-1150] Cleanup failed graphile worker tasks,"Currently we don't delete graphile worker tasks that have failed. (their attempts = maxAttempts). We should run a periodic process to delete worker tasks that have last run more than a week in the past and they will never be reattempted. We can use the recurring tasks functionality to run something every hour to do this:

https://github.com/triggerdotdev/trigger.dev/blob/1fd1d267800647af8139851bc22876cbf4643d5f/apps/webapp/app/services/worker.server.ts#L125

<sub>[TRI-1150](https://linear.app/triggerdotdev/issue/TRI-1150/cleanup-failed-graphile-worker-tasks)</sub>",,
1865327166,391,[TRI-1149] bug: Cannot get eslint-plugin working on a fresh Next.js project,"Here's the reproduction project:

https://github.com/ericallam/my-app

As you can see I've setup the eslint-plugin, but for some reason `npm run lint` isn't finding any errors in this code:

```ts
import { Job, eventTrigger } from ""@trigger.dev/sdk"";
import { client } from ""@/trigger"";

// your first job
new Job(client, {
  id: ""example-job"",
  name: ""Example Job"",
  version: ""0.0.1"",
  trigger: eventTrigger({
    name: ""example.event"",
  }),
  run: async (payload, io, ctx) => {
    await io.runTask(""example.task"", { name: ""Task 1"" }, async () => {});
    await io.runTask(""example.task"", { name: ""Task 2"" }, async () => {});
  },
});
```

cc: @ologbonowiwi

<sub>[TRI-1149](https://linear.app/triggerdotdev/issue/TRI-1149/bug-cannot-get-eslint-plugin-working-on-a-fresh-nextjs-project)</sub>",,
1863994718,388,[TRI-1135] Add job management API endpoints,"We need to flesh out our API to allow you to manage jobs and runs:

- Get a list of runs for a specific job (with filtering for status, environment, etc.)
- Get task data for a specific run
- Cancel a run
- Retry a run
- Resume a run
- Test a job

These would ideally all be exposed via the `TriggerClient` class and would require the Server API Key to access.

<sub>[TRI-1135](https://linear.app/triggerdotdev/issue/TRI-1135/add-job-management-api-endpoints)</sub>",,
1863971859,387,[TRI-1134] Missing doc: Trigger.dev tutorial,"I really like the way the Remix docs have a Quick Start guide:

[https://remix.run/docs/en/dev/start/quickstart](https://remix.run/docs/en/dev/start/quickstart)

And a longer tutorial:

[https://remix.run/docs/en/dev/start/tutorial](https://remix.run/docs/en/dev/start/tutorial)

Also, having the time in the sidebar is a nice touch:

![](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/eeab7c6a-6541-45c1-a9bb-d7486e2bc465/c010543e-e903-4d86-a4c0-44562e839dfa?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9lZWFiN2M2YS02NTQxLTQ1YzEtYTliYi1kNzQ4NmUyYmM0NjUvYzAxMDU0M2UtZTkwMy00ZDg2LWE0YzAtNDQ1NjJlODM5ZGZhIiwiaWF0IjoxNjkyODIyNzY3LCJleHAiOjE2OTI5MDkxNjd9.gkqV_GqgDcTtWixCgDTaSBO7CPrLk3leD30tO0ThuS8)

We should borrow/steal this idea and create our own 30m tutorial with a ""Full Stack"" example, covering more advanced concepts like:

* Event-driven architecture
* Database interaction
* Task error handling and retrying
* Using the React hooks for building UI
* Code reuse inside of job run functions (type helpers, etc.)
* Job organization
* Doing different wait times in dev/test vs prod

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1134](https://linear.app/triggerdotdev/issue/TRI-1134/missing-doc-triggerdev-tutorial)</sub>",,
1863944839,386,How to increase the queue limit ,"Today we face an issue where many of our task jobs are queued, how can increase the number of task jobs alive?


<img width=""1608"" alt=""Screen Shot 2023-08-23 at 3 09 28 PM"" src=""https://github.com/triggerdotdev/trigger.dev/assets/5241972/95fce766-8581-49ef-948d-8951d63b6428"">
",,
1863884753,385,[TRI-1133] The React hook useEventRunDetails should accept string | undefined,"It should work but the TypeScript type is incorrect in the params.

## Steps
1. Change the eventId type in `packages/react/src/events.ts` to be `string | undefined`. Do not use an optional as we want to force people to put a value here.
2. Test this by modifying the examples/nextjs-example to have an undefined when it uses the hook

<sub>[TRI-1133](https://linear.app/triggerdotdev/issue/TRI-1133/the-react-hook-useeventrundetails-should-accept-string-or-undefined)</sub>",,
1863736890,384,[TRI-1132] Add a deduplicationKey to Tasks,"## What is it?

Sometimes you only want a Task to run once across your entire Project/Job.

One example is sending non-recurring emails. This should only ever happen exactly once.

```
await io.resend.sendEmail(""welcome-email"", {
  to: user.email,
  subject: ""Welcome to Trigger.dev!"",
  react: <WelcomeEmail user={user} />,
  from: ""Trigger.dev <hello@email.trigger.dev>"",
}, {
  deduplicationKey: `welcome-email-${user.id}`,
  //optional and defaults to ""project"", but can be ""job"" or ""organization"" as well
  deduplicationScope: ""project""
});
```

It would be impossible to have another Task run with the same deduplicationKey inside a project in this case.

If you specified the scope to be ""job"" or ""organization"" it would deduplicate at that scope instead.

If it has already run a Task with the same dedupe key it would return the data, just like the key does.

## Implementation

1. Add a deduplicationKey column to the Task table which is a unique String, required, and defaults to a `cuid`. Migration needs to add unique ids to all existing Tasks.
2. Add SDK support to runTask
3. On the server it would prepend the `proj:${projectId}`, `org:${orgId}`, `job:${jobId}` to the key before it's saved to the database. Also on lookup it needs to do the same.
4. Roll out support to integrations

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1132](https://linear.app/triggerdotdev/issue/TRI-1132/add-a-deduplicationkey-to-tasks)</sub>",,
1860129504,379,[TRI-1127] Improvement: Add a `@trigger.dev/testing` package that allows for unit testing job runs,"Currently, we don't have a clean way of unit testing jobs, it would be nice to have a `@trigger.dev/testing` package that could be used to do test job runs with mocked `io` and make assertions:

```ts
const jobToTest = client.defineJob({
  id: ""stripe-example-1"",
  name: ""Stripe Example 1"",
  version: ""0.1.0"",
  trigger: eventTrigger({
    name: ""stripe.example"",
    schema: z.object({
      customerId: z.string(),
      source: z.string(),
    }),
  }),
  integrations: {
    stripe,
  },
  run: async (payload, io, ctx) => {
    await io.stripe.createCharge(""create-charge"", {
      amount: 100,
      currency: ""usd"",
      source: payload.source,
      customer: payload.customerId,
    });
  },
});

import { testJob } from ""@trigger.dev/testing"";

// Inside a test file
const testRun = testJob(jobToTest, {
  payload: {
    customerId: ""cus_123"",
    source: ""src_123"",
  },
});

expect(testRun).toHaveSucceeded();
// Test the stripe charge was called with the correct params
expect(testRun.io.stripe.createCharge).toHaveBeenCalledWith(""create-charge"", {
  amount: 100,
  currency: ""usd"",
  source: ""src_123"",
});
```

<sub>[TRI-1127](https://linear.app/triggerdotdev/issue/TRI-1127/improvement-add-a-triggerdevtesting-package-that-allows-for-unit)</sub>",,
1859709633,377,"[TRI-1126] We need to keep the `EventRecord.id` internal, and only ever communicate using the `EventRecord.eventId` through the API","Currently, when you hit the `POST /api/v1/events` endpoint, the JSON returned includes both the `EventRecord.id` and the `EventRecord.eventId`. Additionally, the `GET /api/v1/events/$eventId` endpoint expects the `EventRecord.id` value, and not the `EventRecord.eventId` value.

`EventRecord.id` is meant to be a globally unique identifier for the EventRecord table, and the `eventId` is meant to be the only identifier that is ever transmitted to and from the API.

So we need to:

- [ ] Stop returning `EventRecord.id` from any event API endpoints and instead return just the `EventRecord.eventId` as the `id` property (we probably need to also include the `eventId` for now for backwards compat reasons
- [ ] The `GET /api/v1/events/$eventId` endpoint should take the `EventRecord.eventId` value as the `$eventId` param and do a `findUnique` against the `eventId_environmentId` unique index.
- [ ] Update any docs related to any changes here.


<sub>[TRI-1126](https://linear.app/triggerdotdev/issue/TRI-1126/we-need-to-keep-the-eventrecordid-internal-and-only-ever-communicate)</sub>",,
1859567092,376,[TRI-1125] `@trigger.dev/cli init` reports the wrong file name for app dir and javascript projects,"I just ran `@trigger.dev/cli init` against a Next.js project using the App Dir and JavaScript and it output the following message:

```
✅ Created app route at src/app/api/trigger.ts
```

Even though the file was actually created at `src/app/api/trigger/route.js`

We should make sure that this output is correctly specified for different setups:

- [ ] App Dir w/ JS
- [ ] App Dir w/ TS
- [ ] Pages Dir w/ JS
- [ ] Pages Dir w/ TS


<sub>[TRI-1125](https://linear.app/triggerdotdev/issue/TRI-1125/triggerdevcli-init-reports-the-wrong-file-name-for-app-dir-and)</sub>",,
1859281382,373,[TRI-1124] Bug: `@trigger.dev/cli init` incorrectly misses detection of app dir usage in some cases,"See this tweet: https://twitter.com/arthurliebhardt/status/1693585989892026517

It seems in some cases the app dir isn't correctly being detected, and the pages dir is being incorrectly assumed.

<sub>[TRI-1124](https://linear.app/triggerdotdev/issue/TRI-1124/bug-triggerdevcli-init-incorrectly-misses-detection-of-app-dir-usage)</sub>",,
1858857270,372,[TRI-1118] indexEndpoint graphile task doesn't need to retry 25 times when indexing a dev endpoint,"null

<sub>[TRI-1118](https://linear.app/triggerdotdev/issue/TRI-1118/indexendpoint-graphile-task-doesnt-need-to-retry-25-times-when)</sub>",,
1857380240,368,Change from jest to vitest on `packages/cli`,"We recently set it up `jest` on [`packages/cli`](https://github.com/triggerdotdev/trigger.dev/tree/main/packages/cli), and I think that we should do the same for other sub-packages to have an easier way to create tests to new code.

I see that this would benefit the project, but I want your input on how to prioritize each packages we need to set it up first.",,
1857278667,367,[TRI-1117] Docs: Create a self-hosting guide for AWS ECS using the Stacktape,"It should include all the instructions required to deploy Trigger.dev, and any required code. Similar to what was done for [Fly.io](http://Fly.io): [https://trigger.dev/docs/documentation/guides/self-hosting/flyio](https://trigger.dev/docs/documentation/guides/self-hosting/flyio)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1117](https://linear.app/triggerdotdev/issue/TRI-1117/docs-create-a-self-hosting-guide-for-aws-ecs-using-the-stacktape)</sub>",,
1857278337,366,[TRI-1116] Docs: Create a self-hosting guide for AWS ECS using the CDK,"null

<sub>[TRI-1116](https://linear.app/triggerdotdev/issue/TRI-1116/docs-create-a-self-hosting-guide-for-aws-ecs-using-the-cdk)</sub>",,
1857266664,365,Improve the task retry exponential curve (resend),"<img width=""607"" alt=""CleanShot 2023-08-18 at 21 39 30@2x"" src=""https://github.com/triggerdotdev/trigger.dev/assets/534/e83fe82c-b3d0-436a-ad42-66c163b42fb3"">
",,
1856596456,364,[TRI-1107] Docs: add information about how to healthcheck on docker deployments,"The healthcheck endpoint is `/api/healthcheck`

<sub>[TRI-1107](https://linear.app/triggerdotdev/issue/TRI-1107/docs-add-information-about-how-to-healthcheck-on-docker-deployments)</sub>",,
1855301789,353,[TRI-1046] Airtable integration,"Create an Airtable integration that allows you to:

1. Make changes to your Airtable bases
2. Subscribe to webhooks

## Authentication

* OAuth
* Personal Access Tokens

We won't be supporting API keys as they're not supported from January 2024.

## Required changes

This will involves 4 Pull Requests

1\. Airtable with tasks, webhooks/triggers turned off for Airtable. Major update to all package numbers.

2\. Upgrade Graphile worker to 0.14.0 ([https://github.com/triggerdotdev/trigger.dev/issues/396)](https://github.com/triggerdotdev/trigger.dev/issues/396))

3\. Add batch event support ([https://github.com/triggerdotdev/trigger.dev/issues/348)](https://github.com/triggerdotdev/trigger.dev/issues/348))

4\. Airtable webhooks (using batching)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1046](https://linear.app/triggerdotdev/issue/TRI-1046/airtable-integration)</sub>",,
1855298460,352,[TRI-1092] Add the SendGrid integration to the catalog,"Integrations can be added to the catalog, which appears on the Integrations page in the app:

![CleanShot 2023-08-17 at 17.03.40@2x.png](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/d471bf96-12dc-41c4-a588-1fcd6df3c126/f7e7c8cf-f5c5-45eb-b811-870b84316f6c?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9kNDcxYmY5Ni0xMmRjLTQxYzQtYTU4OC0xZmNkNmRmM2MxMjYvZjdlN2M4Y2YtZjVjNS00NWViLWI4MTEtODcwYjg0MzE2ZjZjIiwiaWF0IjoxNjkyMjg4NTMxLCJleHAiOjE2OTIzNzQ5MzF9.xzCX64gvdQ7aB9N7arHsA4ZziKH0-m8v7u0Jcn7t_lY)

To do this:

1. A SendGrid integration file needs to be created, like this Resend one: [https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/services/externalApis/integrations/resend.ts](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/services/externalApis/integrations/resend.ts) 
2. It needs to be added to the catalog: [https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/services/externalApis/integrationCatalog.server.ts](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/services/externalApis/integrationCatalog.server.ts)

Please keep the integrations alphabetical (to help my OCD 😉 )

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1092](https://linear.app/triggerdotdev/issue/TRI-1092/add-the-sendgrid-integration-to-the-catalog)</sub>",,
1855298179,351,[TRI-1091] Create SendGrid integration 'Introduction' page in the docs and add a list of all the possible tasks to it.,"This can follow the same format as the Resend integration introduction page: [https://trigger.dev/docs/integrations/apis/resend](https://trigger.dev/docs/integrations/apis/resend))

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1091](https://linear.app/triggerdotdev/issue/TRI-1091/create-sendgrid-integration-introduction-page-in-the-docs-and-add-a)</sub>",,
1854755172,348,[TRI-1081] Feature idea: Batch Event Trigger,"It would be useful to have a ""batch"" event trigger, where you could set the frequency that the batched events would be flushed:

```ts
batchEventTrigger({ name: ""batched.event"", schema: z.object({ id: z.string() }), flushEvery: 60 })
```

Then whenever you sent an event with an ID, instead of immediately triggering runs with the payload it will get added to a batch. If more events with the same ID are sent within the 60 seconds of the first one, those payloads will get appended.

Then, when the run is triggered the payload in the run function becomes an array of all the event payloads.

<sub>[TRI-1081](https://linear.app/triggerdotdev/issue/TRI-1081/feature-idea-batch-event-trigger)</sub>",,
1853950981,347,[TRI-1080] Ability to archive an integration,"You can create an integration but there is no way to ""delete"" them. It's easy to accidentally create one by using OAuth or have an unconfigured one which you have referenced in your code.

There are two categories of integrations that are relevant for this issue.

1. Unconfigured integrations. These were referenced in code but haven't been setup in the dashboard. They are OAuth integrations.
2. Configured integrations.

## Unconfigured integrations

These can be deleted from the database as they aren't being used.

## Configured integrations

Deleting these can have an adverse impact if a Job is using them. Either we need to archive them using soft-delete with an `archived` database column. Or we need to delete them but carefully check and deal with consequences. TBD.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-1080](https://linear.app/triggerdotdev/issue/TRI-1080/ability-to-archive-an-integration)</sub>",,
1853940448,346,Dashboard Freezes When Clicking on Task with Large Output,"Hi there,

I've noticed a small bug when clicking on a task that has a big output inside a run. It seems like the cloud dashboard freezes.

Ps. Been loving the trigger platform btw! Great work!
",,
1853917891,345,Feat: do we fancy a native Astro integration?,"Hey folks!

Similar to the Express and Next.js packages, do we want to have a native Astro integration package as part of the officially provided packages from Trigger.dev?

See the following resources for more context:
- The Astro integration package: https://github.com/lirantal/triggerdev-astro-integration
- An example Astro project built with the above integration package: https://github.com/lirantal/trigger.dev-astro-example


Of course, that would be amazing! Here's everything I can think of at the moment that would be nice to do to get astro support in (this isn't to say you should do these, just that they should be done at some point):

```[tasklist]
### Tasks
- [x] #354 Add astro adapter package to packages in the monorepo as @trigger.dev/astro
- [ ] https://github.com/triggerdotdev/examples/pull/5 Add example Astro project to the examples repo: https://github.com/triggerdotdev/examples
- [x] Add a Quick start guide to the Trigger.dev/docs
- [x] Add support for astro in @trigger.dev/cli init
```
",,
1853701239,344,[TRI-1079] Upgrade openai package to newest openai SDK release,"https://x.com/officiallogank/status/1691875240647758123?s=46&t=1ddbpEADp3fME9hP7W6tsg

<sub>[TRI-1079](https://linear.app/triggerdotdev/issue/TRI-1079/upgrade-openai-package-to-newest-openai-sdk-release)</sub>",,
1851698290,339,Issue while deploying on fly io,"Path: /documentation/guides/self-hosting/flyio

not able to deploy this on fly io

2023-08-15T15:44:27.353 app[148ed6e1f7d248] mia [info] You may have to run ${S(""prisma generate"")} for your changes to take effect.`,this.config.clientVersion);return r}parseEngineResponse(r){if(!r)throw new oe(""Response from the Engine was empty"",{clientVersion:this.config.clientVersion});try{return JSON.parse(r)}catch{throw new oe(""Unable to JSON.parse response from engine"",{clientVersion:this.config.clientVersion})}}convertDatasources(r){let n=Object.create(null);for(let{name:i,url:o}of r)n[i]=o;return n}async loadEngine(){if(!this.engine){this.QueryEngineConstructor||(this.library=await this.libraryLoader.loadLibrary(),this.QueryEngineConstructor=this.library.QueryEngine);try{let r=new WeakRef(this);this.engine=new this.QueryEngineConstructor({datamodel:this.datamodel,env:process.env,logQueries:this.config.logQueries??!1,ignoreEnvVarErrors:!0,datasourceOverrides:this.datasourceOverrides,logLevel:this.logLevel,configDir:this.config.cwd,engineProtocol:this.engineProtocol},n=>{r.deref()?.logger(n)}),ca++}catch(r){let n=r,i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}}}logger(r){let n=this.parseEngineResponse(r);if(!!n){if(""span""in n){this.config.tracingHelper.createEngineSpan(n);return}n.level=n?.level.toLowerCase()??""unknown"",Bp(n)?this.logEmitter.emit(""query"",{timestamp:new Date,query:n.query,params:n.params,duration:Number(n.duration_ms),target:n.module_path}):Vp(n)?this.loggerRustPanic=new be(this.getErrorMessageWithLink(`${n.message}: ${n.reason} in ${n.file}:${n.line}:${n.column}`),this.config.clientVersion):this.logEmitter.emit(n.level,{timestamp:new Date,message:n.message,target:n.module_path})}}getErrorMessageWithLink(r){return sa({platform:this.platform,title:r,version:this.config.clientVersion,engineVersion:this.versionInfo?.commit,database:this.config.activeProvider,query:this.lastQuery})}parseInitError(r){try{return JSON.parse(r)}catch{}return r}parseRequestError(r){try{return JSON.parse(r)}catch{}return r}on(r,n){r===""beforeExit""?this.beforeExitListener=n:this.logEmitter.on(r,n)}async start(){if(await this.libraryInstantiationPromise,await this.libraryStoppingPromise,this.libraryStartingPromise)return qe(`library already starting, this.libraryStarted: ${this.libraryStarted}`),this.libraryStartingPromise;if(this.libraryStarted)return;let r=async()=>{qe(""library starting"");try{let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.connect(JSON.stringify(n)),this.libraryStarted=!0,qe(""library started"")}catch(n){let i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}finally{this.libraryStartingPromise=void 0}};return this.libraryStartingPromise=this.config.tracingHelper.runInChildSpan(""connect"",r),this.libraryStartingPromise}async stop(){if(await this.libraryStartingPromise,await this.executingQueryPromise,this.libraryStoppingPromise)return qe(""library is already stopping""),this.libraryStoppingPromise;if(!this.libraryStarted)return;let r=async()=>{await new Promise(i=>setTimeout(i,5)),qe(""library stopping"");let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.disconnect(JSON.stringify(n)),this.libraryStarted=!1,this.libraryStoppingPromise=void 0,qe(""library stopped"")};return this.libraryStoppingPromise=this.config.tracingHelper.runInChildSpan(""disconnect"",r),this.libraryStoppingPromise}async getDmmf(){await this.start();let r=this.config.tracingHelper.getTraceParent(),n=await this.engine.dmmf(JSON.stringify({traceparent:r}));return this.config.tracingHelper.runInChildSpan({name:""parseDmmf"",internal:!0},()=>JSON.parse(n))}version(){return this.versionInfo=this.library?.version(),this.versionInfo?.version??""unknown""}debugPanic(r){return this.library?.debugPanic(r)}async request(r,{traceparent:n,interactiveTransaction:i}){qe(`sending request, this.libraryStarted: ${this.libraryStarted}`);let o=JSON.stringify({traceparent:n}),s=JSON.stringify(r);try{await this.start(),this.executingQueryPromise=this.engine?.query(s,o,i?.id),this.lastQuery=s;let a=this.parseEngineResponse(await this.executingQueryPromise);if(a.errors)throw a.errors.length===1?this.buildQueryError(a.errors[0]):new oe(JSON.stringify(a.errors),{clientVersion:this.config.clientVersion});if(this.loggerRustPanic)throw this.loggerRustPanic;return{data:a,elapsed:0}}catch(a){if(a instanceof Q)throw a;if(a.code===""GenericFailure""&&a.message?.startsWith(""PANIC:""))throw new be(this.getErrorMessageWithLink(a.message),this.config.clientVersion);let l=this.parseRequestError(a.message);throw typeof l==""string""?a:new oe(`${l.message}

2023-08-15T15:44:27.353 app[148ed6e1f7d248] mia [info] ^

2023-08-15T15:44:27.353 app[148ed6e1f7d248] mia [info] PrismaClientInitializationError: Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:27.353 app[148ed6e1f7d248] mia [info] at r (/triggerdotdev/node_modules/.pnpm/@prisma+client@4.16.2_prisma@4.16.0/node_modules/@prisma/client/runtime/library.js:108:2574)

2023-08-15T15:44:27.400 app[148ed6e1f7d248] mia [info]  ELIFECYCLE  Command failed with exit code 1.

2023-08-15T15:44:27.718 app[148ed6e1f7d248] mia [info] INFO Main child exited normally with code: 1

2023-08-15T15:44:27.719 app[148ed6e1f7d248] mia [info] INFO Starting clean up.

2023-08-15T15:44:27.720 app[148ed6e1f7d248] mia [info] WARN hallpass exited, pid: 256, status: signal: 15 (SIGTERM)

2023-08-15T15:44:27.727 app[148ed6e1f7d248] mia [info] 2023/08/15 15:44:27 listening on [fdaa:2:4fd7:a7b:184:f397:2946:2]:22 (DNS: [fdaa::3]:53)

2023-08-15T15:44:28.720 app[148ed6e1f7d248] mia [info] [ 12.308936] reboot: Restarting system

2023-08-15T15:44:28.928 runner[148ed6e1f7d248] mia [info] machine did not have a restart policy, defaulting to restart

2023-08-15T15:44:36.497 app[148ed6e1f7d248] mia [info] [ 0.039871] PCI: Fatal: No config space access function found

2023-08-15T15:44:36.718 app[148ed6e1f7d248] mia [info] INFO Starting init (commit: b437b5b)...

2023-08-15T15:44:36.737 app[148ed6e1f7d248] mia [info] INFO Preparing to run: `docker-entrypoint.sh ./scripts/entrypoint.sh` as node

2023-08-15T15:44:36.745 app[148ed6e1f7d248] mia [info] INFO [fly api proxy] listening at /.fly/api

2023-08-15T15:44:36.752 app[148ed6e1f7d248] mia [info] 2023/08/15 15:44:36 listening on [fdaa:2:4fd7:a7b:184:f397:2946:2]:22 (DNS: [fdaa::3]:53)

2023-08-15T15:44:36.755 app[148ed6e1f7d248] mia [info] + [ -n ]

2023-08-15T15:44:36.755 app[148ed6e1f7d248] mia [info] + pnpm --filter @trigger.dev/database db:migrate:deploy

2023-08-15T15:44:38.170 app[148ed6e1f7d248] mia [info] > @trigger.dev/database@0.0.0 db:migrate:deploy /triggerdotdev/packages/database

2023-08-15T15:44:38.170 app[148ed6e1f7d248] mia [info] > prisma migrate deploy

2023-08-15T15:44:38.808 app[148ed6e1f7d248] mia [info] Prisma schema loaded from prisma/schema.prisma

2023-08-15T15:44:38.842 app[148ed6e1f7d248] mia [info] Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""wallofreviews-trigger-v2-fly-demo-db.flycast:5432""

2023-08-15T15:44:39.088 app[148ed6e1f7d248] mia [info] Error: P1011: Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:39.107 app[148ed6e1f7d248] mia [info] undefined

2023-08-15T15:44:39.109 app[148ed6e1f7d248] mia [info] /triggerdotdev/packages/database:

2023-08-15T15:44:39.109 app[148ed6e1f7d248] mia [info]  ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  @trigger.dev/database@0.0.0 db:migrate:deploy: `prisma migrate deploy`

2023-08-15T15:44:39.109 app[148ed6e1f7d248] mia [info] Exit status 1

2023-08-15T15:44:39.121 app[148ed6e1f7d248] mia [info] + cp packages/database/prisma/schema.prisma apps/webapp/prisma/

2023-08-15T15:44:39.126 app[148ed6e1f7d248] mia [info] + cp node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node apps/webapp/prisma/

2023-08-15T15:44:39.143 app[148ed6e1f7d248] mia [info] + pnpm --filter webapp db:seed

2023-08-15T15:44:39.656 app[148ed6e1f7d248] mia [info] > webapp@1.0.0 db:seed /triggerdotdev/apps/webapp

2023-08-15T15:44:39.656 app[148ed6e1f7d248] mia [info] > node prisma/seed.js

2023-08-15T15:44:39.734 app[148ed6e1f7d248] mia [info] 🔌 setting up prisma client to postgres://postgres@wallofreviews-trigger-v2-fly-demo-db.flycast:5432

2023-08-15T15:44:39.740 app[148ed6e1f7d248] mia [info] 🔌 prisma client connected

2023-08-15T15:44:39.749 app[148ed6e1f7d248] mia [info] prisma:info Starting a postgresql pool with 3 connections.

2023-08-15T15:44:39.933 app[148ed6e1f7d248] mia [info] prisma:error

2023-08-15T15:44:39.933 app[148ed6e1f7d248] mia [info] Invalid `prisma.integrationDefinition.upsert()` invocation:

2023-08-15T15:44:39.933 app[148ed6e1f7d248] mia [info] Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] PrismaClientInitializationError:

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] Invalid `prisma.integrationDefinition.upsert()` invocation:

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] at Rn.handleRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:174:7589)

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] at Rn.handleAndLogRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:174:6742)

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] at /triggerdotdev/apps/webapp/prisma/seed.js:177:3006

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] at async /triggerdotdev/apps/webapp/prisma/seed.js:177:3221

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] at async t._executeRequest (/triggerdotdev/apps/webapp/prisma/seed.js:177:11390)

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] at async fg (/triggerdotdev/apps/webapp/prisma/seed.js:519:60716)

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] at async pg (/triggerdotdev/apps/webapp/prisma/seed.js:519:61621) {

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] clientVersion: '4.16.0',

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] errorCode: undefined

2023-08-15T15:44:39.936 app[148ed6e1f7d248] mia [info] }

2023-08-15T15:44:39.943 app[148ed6e1f7d248] mia [info] undefined

2023-08-15T15:44:39.944 app[148ed6e1f7d248] mia [info] /triggerdotdev/apps/webapp:

2023-08-15T15:44:39.944 app[148ed6e1f7d248] mia [info]  ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  webapp@1.0.0 db:seed: `node prisma/seed.js`

2023-08-15T15:44:39.944 app[148ed6e1f7d248] mia [info] Exit status 1

2023-08-15T15:44:39.970 app[148ed6e1f7d248] mia [info] + cd /triggerdotdev/apps/webapp

2023-08-15T15:44:39.970 app[148ed6e1f7d248] mia [info] + exec dumb-init pnpm run start

2023-08-15T15:44:40.380 app[148ed6e1f7d248] mia [info] > webapp@1.0.0 start /triggerdotdev/apps/webapp

2023-08-15T15:44:40.380 app[148ed6e1f7d248] mia [info] > cross-env NODE_ENV=production node --max-old-space-size=8192 ./build/server.js

2023-08-15T15:44:41.676 app[148ed6e1f7d248] mia [info] 🔌 setting up prisma client to postgres://postgres@wallofreviews-trigger-v2-fly-demo-db.flycast:5432

2023-08-15T15:44:41.680 app[148ed6e1f7d248] mia [info] 🔌 prisma client connected

2023-08-15T15:44:41.925 app[148ed6e1f7d248] mia [info] {""runnerOptions"":{""connectionString"":""postgres://postgres:SGbxbMIWU8vqBjh@wallofreviews-trigger-v2-fly-demo-db.flycast:5432"",""concurrency"":5,""pollInterval"":1000,""noPreparedStatements"":false},""timestamp"":""2023-08-15T15:44:41.925Z"",""name"":""webapp"",""message"":""Initializing worker queue with options""}

2023-08-15T15:44:42.389 app[148ed6e1f7d248] mia [info] No PostHog API key, so analytics won't track

2023-08-15T15:44:44.301 app[148ed6e1f7d248] mia [info] ✅ app ready: http://localhost:3000

2023-08-15T15:44:45.939 app[148ed6e1f7d248] mia [info] prisma:info Starting a postgresql pool with 3 connections.

2023-08-15T15:44:46.355 app[148ed6e1f7d248] mia [info] /triggerdotdev/node_modules/.pnpm/@prisma+client@4.16.2_prisma@4.16.0/node_modules/@prisma/client/runtime/library.js:108

2023-08-15T15:44:46.355 app[148ed6e1f7d248] mia [info] You may have to run ${S(""prisma generate"")} for your changes to take effect.`,this.config.clientVersion);return r}parseEngineResponse(r){if(!r)throw new oe(""Response from the Engine was empty"",{clientVersion:this.config.clientVersion});try{return JSON.parse(r)}catch{throw new oe(""Unable to JSON.parse response from engine"",{clientVersion:this.config.clientVersion})}}convertDatasources(r){let n=Object.create(null);for(let{name:i,url:o}of r)n[i]=o;return n}async loadEngine(){if(!this.engine){this.QueryEngineConstructor||(this.library=await this.libraryLoader.loadLibrary(),this.QueryEngineConstructor=this.library.QueryEngine);try{let r=new WeakRef(this);this.engine=new this.QueryEngineConstructor({datamodel:this.datamodel,env:process.env,logQueries:this.config.logQueries??!1,ignoreEnvVarErrors:!0,datasourceOverrides:this.datasourceOverrides,logLevel:this.logLevel,configDir:this.config.cwd,engineProtocol:this.engineProtocol},n=>{r.deref()?.logger(n)}),ca++}catch(r){let n=r,i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}}}logger(r){let n=this.parseEngineResponse(r);if(!!n){if(""span""in n){this.config.tracingHelper.createEngineSpan(n);return}n.level=n?.level.toLowerCase()??""unknown"",Bp(n)?this.logEmitter.emit(""query"",{timestamp:new Date,query:n.query,params:n.params,duration:Number(n.duration_ms),target:n.module_path}):Vp(n)?this.loggerRustPanic=new be(this.getErrorMessageWithLink(`${n.message}: ${n.reason} in ${n.file}:${n.line}:${n.column}`),this.config.clientVersion):this.logEmitter.emit(n.level,{timestamp:new Date,message:n.message,target:n.module_path})}}getErrorMessageWithLink(r){return sa({platform:this.platform,title:r,version:this.config.clientVersion,engineVersion:this.versionInfo?.commit,database:this.config.activeProvider,query:this.lastQuery})}parseInitError(r){try{return JSON.parse(r)}catch{}return r}parseRequestError(r){try{return JSON.parse(r)}catch{}return r}on(r,n){r===""beforeExit""?this.beforeExitListener=n:this.logEmitter.on(r,n)}async start(){if(await this.libraryInstantiationPromise,await this.libraryStoppingPromise,this.libraryStartingPromise)return qe(`library already starting, this.libraryStarted: ${this.libraryStarted}`),this.libraryStartingPromise;if(this.libraryStarted)return;let r=async()=>{qe(""library starting"");try{let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.connect(JSON.stringify(n)),this.libraryStarted=!0,qe(""library started"")}catch(n){let i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}finally{this.libraryStartingPromise=void 0}};return this.libraryStartingPromise=this.config.tracingHelper.runInChildSpan(""connect"",r),this.libraryStartingPromise}async stop(){if(await this.libraryStartingPromise,await this.executingQueryPromise,this.libraryStoppingPromise)return qe(""library is already stopping""),this.libraryStoppingPromise;if(!this.libraryStarted)return;let r=async()=>{await new Promise(i=>setTimeout(i,5)),qe(""library stopping"");let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.disconnect(JSON.stringify(n)),this.libraryStarted=!1,this.libraryStoppingPromise=void 0,qe(""library stopped"")};return this.libraryStoppingPromise=this.config.tracingHelper.runInChildSpan(""disconnect"",r),this.libraryStoppingPromise}async getDmmf(){await this.start();let r=this.config.tracingHelper.getTraceParent(),n=await this.engine.dmmf(JSON.stringify({traceparent:r}));return this.config.tracingHelper.runInChildSpan({name:""parseDmmf"",internal:!0},()=>JSON.parse(n))}version(){return this.versionInfo=this.library?.version(),this.versionInfo?.version??""unknown""}debugPanic(r){return this.library?.debugPanic(r)}async request(r,{traceparent:n,interactiveTransaction:i}){qe(`sending request, this.libraryStarted: ${this.libraryStarted}`);let o=JSON.stringify({traceparent:n}),s=JSON.stringify(r);try{await this.start(),this.executingQueryPromise=this.engine?.query(s,o,i?.id),this.lastQuery=s;let a=this.parseEngineResponse(await this.executingQueryPromise);if(a.errors)throw a.errors.length===1?this.buildQueryError(a.errors[0]):new oe(JSON.stringify(a.errors),{clientVersion:this.config.clientVersion});if(this.loggerRustPanic)throw this.loggerRustPanic;return{data:a,elapsed:0}}catch(a){if(a instanceof Q)throw a;if(a.code===""GenericFailure""&&a.message?.startsWith(""PANIC:""))throw new be(this.getErrorMessageWithLink(a.message),this.config.clientVersion);let l=this.parseRequestError(a.message);throw typeof l==""string""?a:new oe(`${l.message}

2023-08-15T15:44:46.355 app[148ed6e1f7d248] mia [info] ^

2023-08-15T15:44:46.368 app[148ed6e1f7d248] mia [info] PrismaClientInitializationError: Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:46.368 app[148ed6e1f7d248] mia [info] at r (/triggerdotdev/node_modules/.pnpm/@prisma+client@4.16.2_prisma@4.16.0/node_modules/@prisma/client/runtime/library.js:108:2574)

2023-08-15T15:44:46.481 app[148ed6e1f7d248] mia [info]  ELIFECYCLE  Command failed with exit code 1.

2023-08-15T15:44:46.762 app[148ed6e1f7d248] mia [info] INFO Main child exited normally with code: 1

2023-08-15T15:44:46.763 app[148ed6e1f7d248] mia [info] INFO Starting clean up.

2023-08-15T15:44:46.764 app[148ed6e1f7d248] mia [info] WARN hallpass exited, pid: 256, status: signal: 15 (SIGTERM)

2023-08-15T15:44:46.771 app[148ed6e1f7d248] mia [info] 2023/08/15 15:44:46 listening on [fdaa:2:4fd7:a7b:184:f397:2946:2]:22 (DNS: [fdaa::3]:53)

2023-08-15T15:44:47.765 app[148ed6e1f7d248] mia [info] [ 11.304070] reboot: Restarting system

2023-08-15T15:44:47.960 runner[148ed6e1f7d248] mia [info] machine did not have a restart policy, defaulting to restart

2023-08-15T15:44:51.763 app[148ed6e1f7d248] mia [info] [ 0.040196] PCI: Fatal: No config space access function found

2023-08-15T15:44:51.988 app[148ed6e1f7d248] mia [info] INFO Starting init (commit: b437b5b)...

2023-08-15T15:44:52.008 app[148ed6e1f7d248] mia [info] INFO Preparing to run: `docker-entrypoint.sh ./scripts/entrypoint.sh` as node

2023-08-15T15:44:52.015 app[148ed6e1f7d248] mia [info] INFO [fly api proxy] listening at /.fly/api

2023-08-15T15:44:52.022 app[148ed6e1f7d248] mia [info] 2023/08/15 15:44:52 listening on [fdaa:2:4fd7:a7b:184:f397:2946:2]:22 (DNS: [fdaa::3]:53)

2023-08-15T15:44:52.025 app[148ed6e1f7d248] mia [info] + [ -n ]

2023-08-15T15:44:52.025 app[148ed6e1f7d248] mia [info] + pnpm --filter @trigger.dev/database db:migrate:deploy

2023-08-15T15:44:53.432 app[148ed6e1f7d248] mia [info] > @trigger.dev/database@0.0.0 db:migrate:deploy /triggerdotdev/packages/database

2023-08-15T15:44:53.432 app[148ed6e1f7d248] mia [info] > prisma migrate deploy

2023-08-15T15:44:54.060 app[148ed6e1f7d248] mia [info] Prisma schema loaded from prisma/schema.prisma

2023-08-15T15:44:54.093 app[148ed6e1f7d248] mia [info] Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""wallofreviews-trigger-v2-fly-demo-db.flycast:5432""

2023-08-15T15:44:54.334 app[148ed6e1f7d248] mia [info] Error: P1011: Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:54.352 app[148ed6e1f7d248] mia [info] undefined

2023-08-15T15:44:54.353 app[148ed6e1f7d248] mia [info] /triggerdotdev/packages/database:

2023-08-15T15:44:54.353 app[148ed6e1f7d248] mia [info]  ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  @trigger.dev/database@0.0.0 db:migrate:deploy: `prisma migrate deploy`

2023-08-15T15:44:54.353 app[148ed6e1f7d248] mia [info] Exit status 1

2023-08-15T15:44:54.365 app[148ed6e1f7d248] mia [info] + cp packages/database/prisma/schema.prisma apps/webapp/prisma/

2023-08-15T15:44:54.370 app[148ed6e1f7d248] mia [info] + cp node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node apps/webapp/prisma/

2023-08-15T15:44:54.387 app[148ed6e1f7d248] mia [info] + pnpm --filter webapp db:seed

2023-08-15T15:44:54.899 app[148ed6e1f7d248] mia [info] > webapp@1.0.0 db:seed /triggerdotdev/apps/webapp

2023-08-15T15:44:54.899 app[148ed6e1f7d248] mia [info] > node prisma/seed.js

2023-08-15T15:44:54.977 app[148ed6e1f7d248] mia [info] 🔌 setting up prisma client to postgres://postgres@wallofreviews-trigger-v2-fly-demo-db.flycast:5432

2023-08-15T15:44:54.982 app[148ed6e1f7d248] mia [info] 🔌 prisma client connected

2023-08-15T15:44:54.993 app[148ed6e1f7d248] mia [info] prisma:info Starting a postgresql pool with 3 connections.

2023-08-15T15:44:55.177 app[148ed6e1f7d248] mia [info] prisma:error

2023-08-15T15:44:55.177 app[148ed6e1f7d248] mia [info] Invalid `prisma.integrationDefinition.upsert()` invocation:

2023-08-15T15:44:55.177 app[148ed6e1f7d248] mia [info] Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] PrismaClientInitializationError:

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] Invalid `prisma.integrationDefinition.upsert()` invocation:

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] Error opening a TLS connection: unexpected EOF

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] at Rn.handleRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:174:7589)

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] at Rn.handleAndLogRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:174:6742)

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] at /triggerdotdev/apps/webapp/prisma/seed.js:177:3006

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] at async /triggerdotdev/apps/webapp/prisma/seed.js:177:3221

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] at async t._executeRequest (/triggerdotdev/apps/webapp/prisma/seed.js:177:11390)

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] at async fg (/triggerdotdev/apps/webapp/prisma/seed.js:519:60716)

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] at async pg (/triggerdotdev/apps/webapp/prisma/seed.js:519:61621) {

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] clientVersion: '4.16.0',

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] errorCode: undefined

2023-08-15T15:44:55.180 app[148ed6e1f7d248] mia [info] }

2023-08-15T15:44:55.187 app[148ed6e1f7d248] mia [info] undefined

2023-08-15T15:44:55.187 app[148ed6e1f7d248] mia [info] /triggerdotdev/apps/webapp:

2023-08-15T15:44:55.187 app[148ed6e1f7d248] mia [info]  ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  webapp@1.0.0 db:seed: `node prisma/seed.js`

2023-08-15T15:44:55.187 app[148ed6e1f7d248] mia [info] Exit status 1

2023-08-15T15:44:55.211 app[148ed6e1f7d248] mia [info] + cd /triggerdotdev/apps/webapp

2023-08-15T15:44:55.211 app[148ed6e1f7d248] mia [info] + exec dumb-init pnpm run start

2023-08-15T15:44:55.616 app[148ed6e1f7d248] mia [info] > webapp@1.0.0 start /triggerdotdev/apps/webapp

2023-08-15T15:44:55.616 app[148ed6e1f7d248] mia [info] > cross-env NODE_ENV=production node --max-old-space-size=8192 ./build/server.js

2023-08-15T15:44:56.877 app[148ed6e1f7d248] mia [info] 🔌 setting up prisma client to postgres://postgres@wallofreviews-trigger-v2-fly-demo-db.flycast:5432

2023-08-15T15:44:56.881 app[148ed6e1f7d248] mia [info] 🔌 prisma client connected

2023-08-15T15:44:57.122 app[148ed6e1f7d248] mia [info] {""runnerOptions"":{""connectionString"":""postgres://postgres:SGbxbMIWU8vqBjh@wallofreviews-trigger-v2-fly-demo-db.flycast:5432"",""concurrency"":5,""pollInterval"":1000,""noPreparedStatements"":false},""timestamp"":""2023-08-15T15:44:57.122Z"",""name"":""webapp"",""message"":""Initializing worker queue with options""}

2023-08-15T15:44:57.573 app[148ed6e1f7d248] mia [info] No PostHog API key, so analytics won't track

2023-08-15T15:44:58.686 app[148ed6e1f7d248] mia [info] ✅ app ready: http://localhost:3000

2023-08-15T15:44:59.788 app[148ed6e1f7d248] mia [info] prisma:info Starting a postgresql pool with 3 connections.

2023-08-15T15:45:00.143 app[148ed6e1f7d248] mia [info] /triggerdotdev/node_modules/.pnpm/@prisma+client@4.16.2_prisma@4.16.0/node_modules/@prisma/client/runtime/library.js:108

2023-08-15T15:45:00.143 app[148ed6e1f7d248] mia [info] You may have to run ${S(""prisma generate"")} for your changes to take effect.`,this.config.clientVersion);return r}parseEngineResponse(r){if(!r)throw new oe(""Response from the Engine was empty"",{clientVersion:this.config.clientVersion});try{return JSON.parse(r)}catch{throw new oe(""Unable to JSON.parse response from engine"",{clientVersion:this.config.clientVersion})}}convertDatasources(r){let n=Object.create(null);for(let{name:i,url:o}of r)n[i]=o;return n}async loadEngine(){if(!this.engine){this.QueryEngineConstructor||(this.library=await this.libraryLoader.loadLibrary(),this.QueryEngineConstructor=this.library.QueryEngine);try{let r=new WeakRef(this);this.engine=new this.QueryEngineConstructor({datamodel:this.datamodel,env:process.env,logQueries:this.config.logQueries??!1,ignoreEnvVarErrors:!0,datasourceOverrides:this.datasourceOverrides,logLevel:this.logLevel,configDir:this.config.cwd,engineProtocol:this.engineProtocol},n=>{r.deref()?.logger(n)}),ca++}catch(r){let n=r,i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}}}logger(r){let n=this.parseEngineResponse(r);if(!!n){if(""span""in n){this.config.tracingHelper.createEngineSpan(n);return}n.level=n?.level.toLowerCase()??""unknown"",Bp(n)?this.logEmitter.emit(""query"",{timestamp:new Date,query:n.query,params:n.params,duration:Number(n.duration_ms),target:n.module_path}):Vp(n)?this.loggerRustPanic=new be(this.getErrorMessageWithLink(`${n.message}: ${n.reason} in ${n.file}:${n.line}:${n.column}`),this.config.clientVersion):this.logEmitter.emit(n.level,{timestamp:new Date,message:n.message,target:n.module_path})}}getErrorMessageWithLink(r){return sa({platform:this.platform,title:r,version:this.config.clientVersion,engineVersion:this.versionInfo?.commit,database:this.config.activeProvider,query:this.lastQuery})}parseInitError(r){try{return JSON.parse(r)}catch{}return r}parseRequestError(r){try{return JSON.parse(r)}catch{}return r}on(r,n){r===""beforeExit""?this.beforeExitListener=n:this.logEmitter.on(r,n)}async start(){if(await this.libraryInstantiationPromise,await this.libraryStoppingPromise,this.libraryStartingPromise)return qe(`library already starting, this.libraryStarted: ${this.libraryStarted}`),this.libraryStartingPromise;if(this.libraryStarted)return;let r=async()=>{qe(""library starting"");try{let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.connect(JSON.stringify(n)),this.libraryStarted=!0,qe(""library started"")}catch(n){let i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}finally{this.libraryStartingPromise=void 0}};return this.libraryStartingPromise=this.config.tracingHelper.runInChildSpan(""connect"",r),this.libraryStartingPromise}async stop(){if(await this.libraryStartingPromise,await this.executingQueryPromise,this.libraryStoppingPromise)return qe(""library is already stopping""),this.libraryStoppingPromise;if(!this.libraryStarted)return;let r=async()=>{await new Promise(i=>setTimeout(i,5)),qe(""library stopping"");let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.disconnect(JSON.stringify(n)),this.libraryStarted=!1,this.libraryStoppingPromise=void 0,qe(""library stopped"")};return this.libraryStoppingPromise=this.config.tracingHelper.runInChildSpan(""disconnect"",r),this.libraryStoppingPromise}async getDmmf(){await this.start();let r=this.config.tracingHelper.getTraceParent(),n=await this.engine.dmmf(JSON.stringify({traceparent:r}));return this.config.tracingHelper.runInChildSpan({name:""parseDmmf"",internal:!0},()=>JSON.parse(n))}version(){return this.versionInfo=this.library?.version(),this.versionInfo?.version??""unknown""}debugPanic(r){return this.library?.debugPanic(r)}async request(r,{traceparent:n,interactiveTransaction:i}){qe(`sending request, this.libraryStarted: ${this.libraryStarted}`);let o=JSON.stringify({traceparent:n}),s=JSON.stringify(r);try{await this.start(),this.executingQueryPromise=this.engine?.query(s,o,i?.id),this.lastQuery=s;let a=this.parseEngineResponse(await this.executingQueryPromise);if(a.errors)throw a.errors.length===1?this.buildQueryError(a.errors[0]):new oe(JSON.stringify(a.errors),{clientVersion:this.config.clientVersion});if(this.loggerRustPanic)throw this.loggerRustPanic;return{data:a,elapsed:0}}catch(a){if(a instanceof Q)throw a;if(a.code===""GenericFailure""&&a.message?.startsWith(""PANIC:""))throw new be(this.getErrorMessageWithLink(a.message),this.config.clientVersion);let l=this.parseRequestError(a.message);throw typeof l==""string""?a:new oe(`${l.message}

2023-08-15T15:45:00.143 app[148ed6e1f7d248] mia [info] ^

2023-08-15T15:45:00.154 app[148ed6e1f7d248] mia [info] PrismaClientInitializationError: Error opening a TLS connection: unexpected EOF

2023-08-15T15:45:00.154 app[148ed6e1f7d248] mia [info] at r (/triggerdotdev/node_modules/.pnpm/@prisma+client@4.16.2_prisma@4.16.0/node_modules/@prisma/client/runtime/library.js:108:2574)

2023-08-15T15:45:00.258 app[148ed6e1f7d248] mia [info]  ELIFECYCLE  Command failed with exit code 1.

2023-08-15T15:45:01.033 app[148ed6e1f7d248] mia [info] INFO Main child exited normally with code: 1

2023-08-15T15:45:01.033 app[148ed6e1f7d248] mia [info] INFO Starting clean up.

2023-08-15T15:45:01.034 app[148ed6e1f7d248] mia [info] WARN hallpass exited, pid: 256, status: signal: 15 (SIGTERM)

2023-08-15T15:45:01.041 app[148ed6e1f7d248] mia [info] 2023/08/15 15:45:01 listening on [fdaa:2:4fd7:a7b:184:f397:2946:2]:22 (DNS: [fdaa::3]:53)

2023-08-15T15:45:02.034 app[148ed6e1f7d248] mia [info] [ 10.307405] reboot: Restarting system

2023-08-15T15:45:02.243 runner[148ed6e1f7d248] mia [info] machine did not have a restart policy, defaulting to restart

2023-08-15T15:45:24.474 app[148ed6e1f7d248] mia [info] [ 0.040617] PCI: Fatal: No config space access function found

2023-08-15T15:45:24.698 app[148ed6e1f7d248] mia [info] INFO Starting init (commit: b437b5b)...

2023-08-15T15:45:24.717 app[148ed6e1f7d248] mia [info] INFO Preparing to run: `docker-entrypoint.sh ./scripts/entrypoint.sh` as node

2023-08-15T15:45:24.725 app[148ed6e1f7d248] mia [info] INFO [fly api proxy] listening at /.fly/api

2023-08-15T15:45:24.732 app[148ed6e1f7d248] mia [info] 2023/08/15 15:45:24 listening on [fdaa:2:4fd7:a7b:184:f397:2946:2]:22 (DNS: [fdaa::3]:53)

2023-08-15T15:45:24.735 app[148ed6e1f7d248] mia [info] + [ -n ]

2023-08-15T15:45:24.735 app[148ed6e1f7d248] mia [info] + pnpm --filter @trigger.dev/database db:migrate:deploy

2023-08-15T15:45:26.501 app[148ed6e1f7d248] mia [info] > @trigger.dev/database@0.0.0 db:migrate:deploy /triggerdotdev/packages/database

2023-08-15T15:45:26.501 app[148ed6e1f7d248] mia [info] > prisma migrate deploy

2023-08-15T15:45:27.154 app[148ed6e1f7d248] mia [info] Prisma schema loaded from prisma/schema.prisma

2023-08-15T15:45:27.184 app[148ed6e1f7d248] mia [info] Datasource ""db"": PostgreSQL database ""postgres"", schema ""public"" at ""wallofreviews-trigger-v2-fly-demo-db.flycast:5432""

2023-08-15T15:45:27.444 app[148ed6e1f7d248] mia [info] Error: P1011: Error opening a TLS connection: unexpected EOF

2023-08-15T15:45:27.463 app[148ed6e1f7d248] mia [info] undefined

2023-08-15T15:45:27.464 app[148ed6e1f7d248] mia [info] /triggerdotdev/packages/database:

2023-08-15T15:45:27.464 app[148ed6e1f7d248] mia [info]  ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  @trigger.dev/database@0.0.0 db:migrate:deploy: `prisma migrate deploy`

2023-08-15T15:45:27.464 app[148ed6e1f7d248] mia [info] Exit status 1

2023-08-15T15:45:27.476 app[148ed6e1f7d248] mia [info] + cp packages/database/prisma/schema.prisma apps/webapp/prisma/

2023-08-15T15:45:27.481 app[148ed6e1f7d248] mia [info] + cp node_modules/@prisma/engines/libquery_engine-debian-openssl-1.1.x.so.node apps/webapp/prisma/

2023-08-15T15:45:27.497 app[148ed6e1f7d248] mia [info] + pnpm --filter webapp db:seed

2023-08-15T15:45:28.012 app[148ed6e1f7d248] mia [info] > webapp@1.0.0 db:seed /triggerdotdev/apps/webapp

2023-08-15T15:45:28.012 app[148ed6e1f7d248] mia [info] > node prisma/seed.js

2023-08-15T15:45:28.090 app[148ed6e1f7d248] mia [info] 🔌 setting up prisma client to postgres://postgres@wallofreviews-trigger-v2-fly-demo-db.flycast:5432

2023-08-15T15:45:28.094 app[148ed6e1f7d248] mia [info] 🔌 prisma client connected

2023-08-15T15:45:28.106 app[148ed6e1f7d248] mia [info] prisma:info Starting a postgresql pool with 3 connections.

2023-08-15T15:45:28.291 app[148ed6e1f7d248] mia [info] prisma:error

2023-08-15T15:45:28.291 app[148ed6e1f7d248] mia [info] Invalid `prisma.integrationDefinition.upsert()` invocation:

2023-08-15T15:45:28.291 app[148ed6e1f7d248] mia [info] Error opening a TLS connection: unexpected EOF

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] PrismaClientInitializationError:

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] Invalid `prisma.integrationDefinition.upsert()` invocation:

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] Error opening a TLS connection: unexpected EOF

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] at Rn.handleRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:174:7589)

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] at Rn.handleAndLogRequestError (/triggerdotdev/apps/webapp/prisma/seed.js:174:6742)

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] at /triggerdotdev/apps/webapp/prisma/seed.js:177:3006

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] at async /triggerdotdev/apps/webapp/prisma/seed.js:177:3221

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] at async t._executeRequest (/triggerdotdev/apps/webapp/prisma/seed.js:177:11390)

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] at async fg (/triggerdotdev/apps/webapp/prisma/seed.js:519:60716)

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] at async pg (/triggerdotdev/apps/webapp/prisma/seed.js:519:61621) {

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] clientVersion: '4.16.0',

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] errorCode: undefined

2023-08-15T15:45:28.294 app[148ed6e1f7d248] mia [info] }

2023-08-15T15:45:28.301 app[148ed6e1f7d248] mia [info] undefined

2023-08-15T15:45:28.302 app[148ed6e1f7d248] mia [info] /triggerdotdev/apps/webapp:

2023-08-15T15:45:28.302 app[148ed6e1f7d248] mia [info]  ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  webapp@1.0.0 db:seed: `node prisma/seed.js`

2023-08-15T15:45:28.302 app[148ed6e1f7d248] mia [info] Exit status 1

2023-08-15T15:45:28.324 app[148ed6e1f7d248] mia [info] + cd /triggerdotdev/apps/webapp

2023-08-15T15:45:28.324 app[148ed6e1f7d248] mia [info] + exec dumb-init pnpm run start

2023-08-15T15:45:28.731 app[148ed6e1f7d248] mia [info] > webapp@1.0.0 start /triggerdotdev/apps/webapp

2023-08-15T15:45:28.731 app[148ed6e1f7d248] mia [info] > cross-env NODE_ENV=production node --max-old-space-size=8192 ./build/server.js

2023-08-15T15:45:30.057 app[148ed6e1f7d248] mia [info] 🔌 setting up prisma client to postgres://postgres@wallofreviews-trigger-v2-fly-demo-db.flycast:5432

2023-08-15T15:45:30.064 app[148ed6e1f7d248] mia [info] 🔌 prisma client connected

2023-08-15T15:45:30.295 app[148ed6e1f7d248] mia [info] {""runnerOptions"":{""connectionString"":""postgres://postgres:SGbxbMIWU8vqBjh@wallofreviews-trigger-v2-fly-demo-db.flycast:5432"",""concurrency"":5,""pollInterval"":1000,""noPreparedStatements"":false},""timestamp"":""2023-08-15T15:45:30.295Z"",""name"":""webapp"",""message"":""Initializing worker queue with options""}

2023-08-15T15:45:30.730 app[148ed6e1f7d248] mia [info] No PostHog API key, so analytics won't track

2023-08-15T15:45:31.886 app[148ed6e1f7d248] mia [info] ✅ app ready: http://localhost:3000

2023-08-15T15:45:32.558 app[148ed6e1f7d248] mia [info] prisma:info Starting a postgresql pool with 3 connections.

2023-08-15T15:45:33.495 app[148ed6e1f7d248] mia [info] /triggerdotdev/node_modules/.pnpm/@prisma+client@4.16.2_prisma@4.16.0/node_modules/@prisma/client/runtime/library.js:108

2023-08-15T15:45:33.495 app[148ed6e1f7d248] mia [info] You may have to run ${S(""prisma generate"")} for your changes to take effect.`,this.config.clientVersion);return r}parseEngineResponse(r){if(!r)throw new oe(""Response from the Engine was empty"",{clientVersion:this.config.clientVersion});try{return JSON.parse(r)}catch{throw new oe(""Unable to JSON.parse response from engine"",{clientVersion:this.config.clientVersion})}}convertDatasources(r){let n=Object.create(null);for(let{name:i,url:o}of r)n[i]=o;return n}async loadEngine(){if(!this.engine){this.QueryEngineConstructor||(this.library=await this.libraryLoader.loadLibrary(),this.QueryEngineConstructor=this.library.QueryEngine);try{let r=new WeakRef(this);this.engine=new this.QueryEngineConstructor({datamodel:this.datamodel,env:process.env,logQueries:this.config.logQueries??!1,ignoreEnvVarErrors:!0,datasourceOverrides:this.datasourceOverrides,logLevel:this.logLevel,configDir:this.config.cwd,engineProtocol:this.engineProtocol},n=>{r.deref()?.logger(n)}),ca++}catch(r){let n=r,i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}}}logger(r){let n=this.parseEngineResponse(r);if(!!n){if(""span""in n){this.config.tracingHelper.createEngineSpan(n);return}n.level=n?.level.toLowerCase()??""unknown"",Bp(n)?this.logEmitter.emit(""query"",{timestamp:new Date,query:n.query,params:n.params,duration:Number(n.duration_ms),target:n.module_path}):Vp(n)?this.loggerRustPanic=new be(this.getErrorMessageWithLink(`${n.message}: ${n.reason} in ${n.file}:${n.line}:${n.column}`),this.config.clientVersion):this.logEmitter.emit(n.level,{timestamp:new Date,message:n.message,target:n.module_path})}}getErrorMessageWithLink(r){return sa({platform:this.platform,title:r,version:this.config.clientVersion,engineVersion:this.versionInfo?.commit,database:this.config.activeProvider,query:this.lastQuery})}parseInitError(r){try{return JSON.parse(r)}catch{}return r}parseRequestError(r){try{return JSON.parse(r)}catch{}return r}on(r,n){r===""beforeExit""?this.beforeExitListener=n:this.logEmitter.on(r,n)}async start(){if(await this.libraryInstantiationPromise,await this.libraryStoppingPromise,this.libraryStartingPromise)return qe(`library already starting, this.libraryStarted: ${this.libraryStarted}`),this.libraryStartingPromise;if(this.libraryStarted)return;let r=async()=>{qe(""library starting"");try{let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.connect(JSON.stringify(n)),this.libraryStarted=!0,qe(""library started"")}catch(n){let i=this.parseInitError(n.message);throw typeof i==""string""?n:new Q(i.message,this.config.clientVersion,i.error_code)}finally{this.libraryStartingPromise=void 0}};return this.libraryStartingPromise=this.config.tracingHelper.runInChildSpan(""connect"",r),this.libraryStartingPromise}async stop(){if(await this.libraryStartingPromise,await this.executingQueryPromise,this.libraryStoppingPromise)return qe(""library is already stopping""),this.libraryStoppingPromise;if(!this.libraryStarted)return;let r=async()=>{await new Promise(i=>setTimeout(i,5)),qe(""library stopping"");let n={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.disconnect(JSON.stringify(n)),this.libraryStarted=!1,this.libraryStoppingPromise=void 0,qe(""library stopped"")};return this.libraryStoppingPromise=this.config.tracingHelper.runInChildSpan(""disconnect"",r),this.libraryStoppingPromise}async getDmmf(){await this.start();let r=this.config.tracingHelper.getTraceParent(),n=await this.engine.dmmf(JSON.stringify({traceparent:r}));return this.config.tracingHelper.runInChildSpan({name:""parseDmmf"",internal:!0},()=>JSON.parse(n))}version(){return this.versionInfo=this.library?.version(),this.versionInfo?.version??""unknown""}debugPanic(r){return this.library?.debugPanic(r)}async request(r,{traceparent:n,interactiveTransaction:i}){qe(`sending request, this.libraryStarted: ${this.libraryStarted}`);let o=JSON.stringify({traceparent:n}),s=JSON.stringify(r);try{await this.start(),this.executingQueryPromise=this.engine?.query(s,o,i?.id),this.lastQuery=s;let a=this.parseEngineResponse(await this.executingQueryPromise);if(a.errors)throw a.errors.length===1?this.buildQueryError(a.errors[0]):new oe(JSON.stringify(a.errors),{clientVersion:this.config.clientVersion});if(this.loggerRustPanic)throw this.loggerRustPanic;return{data:a,elapsed:0}}catch(a){if(a instanceof Q)throw a;if(a.code===""GenericFailure""&&a.message?.startsWith(""PANIC:""))throw new be(this.getErrorMessageWithLink(a.message),this.config.clientVersion);let l=this.parseRequestError(a.message);throw typeof l==""string""?a:new oe(`${l.message}

2023-08-15T15:45:33.495 app[148ed6e1f7d248] mia [info] ^

2023-08-15T15:45:33.504 app[148ed6e1f7d248] mia [info] PrismaClientInitializationError: Error opening a TLS connection: unexpected EOF

2023-08-15T15:45:33.504 app[148ed6e1f7d248] mia [info] at r (/triggerdotdev/node_modules/.pnpm/@prisma+client@4.16.2_prisma@4.16.0/node_modules/@prisma/client/runtime/library.js:108:2574)

2023-08-15T15:45:33.567 app[148ed6e1f7d248] mia [info]  ELIFECYCLE  Command failed with exit code 1.

2023-08-15T15:45:33.739 app[148ed6e1f7d248] mia [info] INFO Main child exited normally with code: 1

2023-08-15T15:45:33.739 app[148ed6e1f7d248] mia [info] INFO Starting clean up.

2023-08-15T15:45:33.740 app[148ed6e1f7d248] mia [info] WARN hallpass exited, pid: 256, status: signal: 15 (SIGTERM)

2023-08-15T15:45:33.748 app[148ed6e1f7d248] mia [info] 2023/08/15 15:45:33 listening on [fdaa:2:4fd7:a7b:184:f397:2946:2]:22 (DNS: [fdaa::3]:53)

2023-08-15T15:45:34.741 app[148ed6e1f7d248] mia [info] [ 10.303148] reboot: Restarting system

2023-08-15T15:45:34.896 runner[148ed6e1f7d248] mia [info] machine has reached its max restart count (10)",,
1851512422,338,"[TRI-1068] Improve `io.runTask`: move callback to second arg and move ""task options"" to be an optional 3rd argument","Currently `io.runTask` looks like this:

```ts
await io.runTask(""key"", { name: ""Task 1"" }, async (task) => {});
```

Which is kind of ugly. We should make the second ""task options"" parameter by an optional 3rd argument so the above can be written like:

```ts
await io.runTask(""key"", async (task) => {});
```

And then if you want to specify task options:

```ts
await io.runTask(""key"", async (task) => {}, { name: ""Task 1"" });
```

<sub>[TRI-1068](https://linear.app/triggerdotdev/issue/TRI-1068/improve-ioruntask-move-callback-to-second-arg-and-move-task-options-to)</sub>",,
1851173335,337,[TRI-1065] Improvement: ability to configure job execution retry options and better docs on run retry workings,"Retrying job run executions is currently hardcoded but we should allow users to define (on the client level) different options for retrying, with certain limits. For example

```ts
new TriggerClient({
  // .. other options
  runs: {
    retries: 25,
    factor: 2,
    minTimeout: 1000,
    maxTimeout: 30000,
    randomize: true
  }
});
```

I think this belongs on the TriggerClient instead of the Job because this is a ""deployment"" factor, relating more to the characteristics of where the TriggerClient is running than anything about a specific job.

https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/services/runs/performRunExecution.server.ts

<sub>[TRI-1065](https://linear.app/triggerdotdev/issue/TRI-1065/improvement-ability-to-configure-job-execution-retry-options-and)</sub>",,
1850543749,335,[TRI-1050] Issue on docs: Running Jobs page needs more information,"Also, the ""Event Triggers"" link goes back to docs home

Path: /documentation/guides/running-jobs

<sub>[TRI-1050](https://linear.app/triggerdotdev/issue/TRI-1050/issue-on-docs-running-jobs-page-needs-more-information)</sub>",,
1849746711,331,[TRI-1029] `@trigger.dev/react` doesn't work out of the box with Next.js Page Router: Cannot use import statement outside a module Error,"When using `@trigger.dev/react` in Next.js Page Router, importing will cause an error because Page Router modules aren't automatically transpiled to CJS (whereas they are in App Router).

From Next 13.1 onwards, the fix is to the add `@trigger.dev/react` to the list of transpiled packages in the next.config.js file:

```js
const nextConfig = {
  transpilePackages: [""@trigger.dev/react""],
};

module.exports = nextConfig;
```

In Next versions below 13.1, the [next-transpile-modules](https://www.npmjs.com/package/next-transpile-modules) package should be used in `next.config.js`:

```js next.config.js
const withTM = require('next-transpile-modules')(['@trigger.dev/react']); // pass the modules you would like to see transpiled

module.exports = withTM({});
```

We should do the following:

- [ ] Look into why Next.js is using the ESM module exported by `@trigger.dev/react` instead of the CJS
- [ ] If nothing can be done about the above issue, then we should make sure `@trigger.dev/cli init` correctly handles this (whenever the `@trigger.dev/react` stuff is added to the `init` command (see https://github.com/triggerdotdev/trigger.dev/issues/330)
- [ ] Add to the React Hooks docs (and the Next.js quickstart) info about this

<sub>[TRI-1029](https://linear.app/triggerdotdev/issue/TRI-1029/triggerdevreact-doesnt-work-out-of-the-box-with-nextjs-page-router)</sub>",,
1849706086,330,[TRI-1018] Add the `@trigger.dev/react` package when doing `@trigger.dev/cli init`,"We should also add the a bit about setting up React hooks from [this guide](https://trigger.dev/docs/documentation/guides/react-hooks) to the Next.js quickstart guide

<sub>[TRI-1018](https://linear.app/triggerdotdev/issue/TRI-1018/add-the-triggerdevreact-package-when-doing-triggerdevcli-init)</sub>",,
1847308068,321,Native node support,Any plans for native node support?,,
1847289105,318,Incorrect URL for cloning the project on a windows machine,"While going through the Contribution.md file I found incorrect URL for cloning the project on a Windows machine
![image](https://github.com/triggerdotdev/trigger.dev/assets/61023134/f46f3964-f2ff-4aee-9cb4-f4cd7d775772)",,
1847041666,315,[TRI-1008] Add `io.waitUntil` function to allow a job run to wait for a dynamic condition,"This kind of thing would be really useful in jobs:

```ts
await io.waitUntil(""has used invite"", {
  condition: async () => {
    const user = await prisma.user.findUniqueOrThrow({
      where: {
        id: payload.userId,
      },
    });

    return user.invitationCodeId !== null;
  },
});
```

This would basically retry the condition function in an interval, and only continue once the condition function returned `true`.

The strategy for how frequent to call the condition function could be configurable:

- Set an interval frequency (minimum would be 60 seconds, max would be 1 day). Would also need some kind of timeout thing like ""exit if the condition doesn't return true within 30 days""
- Set an exponential backoff strategy (similar to our task retries) with a maximum of 25 retries

This can be achieved using only subtasks and `io.wait`, something like:

```ts
type WaitUntilOptions = {
  condition: () => Promise<boolean>;
  checkInterval?: number;
};

function waitUntil(
  key: string,
  io: IO,
  options: WaitUntilOptions
): Promise<void> {
  return io.runTask(
    key,
    {
      name: ""Wait until"",
    },
    async (task) => {
      const result = await options.condition();
      if (result) return;

      //if more than 14 days has passed then throw
      const startedAt = task.startedAt;
      if (!startedAt) return;
      const now = new Date();
      const diff = now.getTime() - startedAt.getTime();
      const days = diff / (1000 * 60 * 60 * 24);
      if (days > 14) {
        throw new Error(
          `Waited for 14 days for condition to be true but it never was.`
        );
      }

      await io.wait(
        `${key}:${new Date().toISOString()}`,
        options.checkInterval ? Math.max(options.checkInterval, 30) : 60 * 60
      );
    }
  );
}
```

But i'd prefer this not to produce a bunch of tasks that are only there for the interval. 



<sub>[TRI-1008](https://linear.app/triggerdotdev/issue/TRI-1008/add-iowaituntil-function-to-allow-a-job-run-to-wait-for-a-dynamic)</sub>",,
1847003212,314,AES-256 with 128 bits of entropy,"Is there a good reason to generate 16 byte instead of 32 byte keys?

I get that the length of the string matches the required size, but hex encoding is not a valid [KDF](https://en.wikipedia.org/wiki/Key_derivation_function).

Would recommend replacing `openssl rand -hex 16`

I'd either use `openssl rand -hex 32` or `openssl rand -base64 32` for shorter strings.

Then pass the key to `createCipheriv()` as a Buffer:

```js
Buffer.from(key, ""hex"")
// OR
Buffer.from(key, ""base64"")
```",,
1846782525,310,[TRI-1007] Better handle retrying rate-limited resend requests in `@trigger.dev/resend`,"Resend has a rate limit of 10 requests per second. They also send [Rate limit headers](https://resend.com/docs/api-reference/introduction#rate-limit) with every request, meaning we should be able to use the same method as we do in our GitHub integration to only retry a sendEmail task when it will actually succeed, instead of doing a backoff strategy.

The `sendEmail` task is defined here: 

https://github.com/triggerdotdev/trigger.dev/blob/main/integrations/resend/src/index.ts#L10

You can see how we schedule retries using rate limiting headers in our github integration here:

https://github.com/triggerdotdev/trigger.dev/blob/c246578a8123cdd53bed819bee33cb16c85df561/integrations/github/src/tasks.ts#L18

<sub>[TRI-1007](https://linear.app/triggerdotdev/issue/TRI-1007/better-handle-retrying-rate-limited-resend-requests-in)</sub>",,
1846728954,308,Bug: Express applications using own body parser middleware will crash ,"## Context

Express middleware usage per the example provided in the package/code is as follows:

```js
 * @example
 * ```ts
 * import express from ""express"";
 * import { TriggerClient } from ""@trigger.dev/sdk"";
 * import { createMiddleware } from ""@trigger.dev/express"";
 *
 * const client = new TriggerClient({
 *  id: ""my-client"",
 *  apiKey: process.env[""TRIGGER_API_KEY""]!,
 * });
 *
 * const app = express();
 *
 * const middleware = createMiddleware(client);
 *
 * app.use(middleware);
 *
 * app.listen(8080, () => {
 *  console.log(""Listening on port 8080"");
 * });
 * ```
 */
```

## Expected

It's a probable assumption that many Express applications make use of Express's built-in `bodyParser` in order to access HTTP requests JSON payload via `req.body`, such as:

```js
const express = require('express')
const app = express()
app.use(express.json())

// respond with ""hello world"" when a GET request is made to the homepage
app.post('/api/hello', (req, res) => {
  res.send('hello ', req.body.name)
})
```

Using Trigger.dev's Express integration should work fine.

## Actual

Due to the Express integration code here https://github.com/triggerdotdev/trigger.dev/blob/main/packages/express/src/index.ts#L93C1-L97 

The `body` object key isn't receiving a stream in the format it expects, and as such the middleware function throws an exception (which leads to a Node.js process crash, documented reasons via #306):

```sh
$ node server.js

Listening on port 8080
undefined:1

SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at Request.json (/Users/lirantal/projects/repos/trigger.dev/node_modules/.pnpm/@remix-run+web-fetch@4.3.5/node_modules/@remix-run/web-fetch/dist/lib.node.cjs:465:15)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async TriggerClient.handleRequest (/Users/lirantal/projects/repos/trigger.dev/packages/trigger-sdk/dist/index.js:1262:22)
    at async /Users/lirantal/projects/repos/trigger.dev/packages/express/dist/index.js:61:22
```

",,
1846693602,306,Bug: current async middleware doesn't catch exceptions,"## Context

Express middleware usage is:

```js
const middleware = createMiddleware(client);
app.use(middleware);
```

## Expected

If for any reason the code in this middleware throws an exception then the error shouldn't crash the Node.js process, and instead be forwarded to the next middleware via `next(error)`

## Actual

If any exceptions are thrown within the middleware code provided by `@trigger.dev/express`, it won't be caught and will crash the Node.js process as an 'uncaught exception' scenario.

This happens to Express lacking native support for promises and so any async promises code within middleware needs to be wrapped with a try/catch.",,
1846496643,305,[TRI-1006] New `@trigger.dev/cli` whoami command. ,"Run it in a configured project and it will print out information about who you currently are. It will use the env vars (similar to how the dev command does) and the `trigger.dev` config data in package.json to print out useful information about the current setup. Some prior art:

https://devcenter.heroku.com/articles/heroku-cli-commands#heroku-auth-whoami
https://vercel.com/docs/cli/whoami



<sub>[TRI-1006](https://linear.app/triggerdotdev/issue/TRI-1006/new-triggerdevcli-whoami-command)</sub>",,
1845809315,303,Removing the fetch fork from the Express package,"## Expected results

The Express package at `@trigger.dev/express` uses the remix fork of a fetch implementation which IMHO adds an unnecessary dependency that is yet one more thing to maintain and worry about, and unnecessarily adds more code handling and import that don't help with readability.

Is there a specific reason to rely on `@remix-run/web-fetch` ? Node.js natively supports fetch.

## Actual results

I'm in favor of keeping things simple and straight-forward and would want to propose a code update that refactors the dependency out and implements the headers copy for the trigger.dev handshake via vanilla Node.js / JS code.",,
1845796575,302,A new Express vanilla example?,"## Description

Would you folks be keen on me adding an Express example app?

## Proposed changes

Looks like this `examples/` directory would be a good contribution to land an example application:

<img width=""392"" alt=""image"" src=""https://github.com/triggerdotdev/trigger.dev/assets/316371/134a0b01-ec93-4d0a-ba07-d2a1f31da0e2"">

## Deliverables

Here's what I've had on my mind:

- [x] Minimal Express application
- [x] /api/trigger endpoint with `@trigger.dev/sdk` logic to handle trigger and jobs
- [x] A couple of endpoints: one to trigger an event from code, another to poll for data readiness
- [x] Example use-case builds on the OpenAI native Trigger.dev integration to keep it interesting
- [x] Frontend is kept to minimal and uses vanilla JavaScript to avoid complexity and frameworks fatigue",,
1845496813,301,[TRI-999] Surface job queues in the dashboard,"Currently job queues are not displayed anywhere in the dashboard. We should display a list of job queues and show how many concurrent jobs are running for each queue. There should be a queue list and a queue detail page. 

<sub>[TRI-999](https://linear.app/triggerdotdev/issue/TRI-999/surface-job-queues-in-the-dashboard)</sub>",,
1843349121,294,[TRI-970] Create documentation guide for EventFilter,"We need to create a full guide in the documentation that covers `EventFilter` and how to use it.

We [currently have a small section on the docs event page](https://trigger.dev/docs/documentation/concepts/triggers/events#event-filters), but this should be fleshed out and turned into a full separate page.

Check out this file for how it works:

[https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/test/eventFilterMatches.test.ts](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/core/test/eventFilterMatches.test.ts)

Should also cover how to use it in the context of `eventTrigger`:

[https://github.com/triggerdotdev/trigger.dev/blob/645643ea41430dd30145565f1deac2a5d483ab62/packages/trigger-sdk/src/triggers/eventTrigger.ts#L11](https://github.com/triggerdotdev/trigger.dev/blob/645643ea41430dd30145565f1deac2a5d483ab62/packages/trigger-sdk/src/triggers/eventTrigger.ts#L11)

Other types of Triggers also support `EventFilter`, such as stripe triggers:

[https://github.com/triggerdotdev/trigger.dev/blob/645643ea41430dd30145565f1deac2a5d483ab62/integrations/stripe/src/index.ts#L345](https://github.com/triggerdotdev/trigger.dev/blob/645643ea41430dd30145565f1deac2a5d483ab62/integrations/stripe/src/index.ts#L345)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-970](https://linear.app/triggerdotdev/issue/TRI-970/create-documentation-guide-for-eventfilter)</sub>",,
1843332483,293,[TRI-969] Add support for returning Blob from `io.runTask` callback,"Currently it's not possible to return a Blob from io.runTask. The types work but it doesn't work in practice, since we serialize/deserialize task outputs when they are saved to the database. Explicit support should be added to runTask to support this. For example, it's not currently possible to download a file using our supabase integration:

```ts
const data = await io.supabase.runTask(""download-file"", async (supa) => {
      const response = await supa.storage
        .from(payload.record.bucket_id!)
        .download(payload.record.name!);

      if (response.error) {
        throw response.error;
      }

      return response.data; // response.data is a Blob
    });
```

<sub>[TRI-969](https://linear.app/triggerdotdev/issue/TRI-969/add-support-for-returning-blob-from-ioruntask-callback)</sub>",,
1843009572,290,"[TRI-967] Some JobRunExecutions are getting stuck in ""STARTED"" state even though the graphile job has an error","The graphile job shows an error of Response: 404, but the JobRunExecution is stuck in STARTED state, even though it should have errored out and done the same to the run. This needs to be investigated.

<sub>[TRI-967](https://linear.app/triggerdotdev/issue/TRI-967/some-jobrunexecutions-are-getting-stuck-in-started-state-even-though)</sub>",,
1843000756,289,[TRI-966] Registration runs for triggers that use hosted (oauth) auth don't wait until the hosted auth connection exists,"null

<sub>[TRI-966](https://linear.app/triggerdotdev/issue/TRI-966/registration-runs-for-triggers-that-use-hosted-oauth-auth-dont-wait)</sub>",,
1842099498,284,[TRI-954] Bug: `@trigger.dev/cli dev` can fail to open an ngrok tunnel when there is an old configuration file found,"The ngrok error:

```sh
Error reading configuration file '/Users/foobar/.ngrok2/ngrok.yml': `version` property is required

If you are upgrading from an older version of ngrok, you can run:

     ngrok config upgrade

to upgrade to the new format and add the version number.
```

We need to investigate and ideally eliminate this error so ngrok tunnels can be created even if this required `version` property is missing from an existing configuration file.

<sub>[TRI-954](https://linear.app/triggerdotdev/issue/TRI-954/bug-triggerdevcli-dev-can-fail-to-open-an-ngrok-tunnel-when-there-is)</sub>",,
1841437108,282,[TRI-951] Remove resend dependency from the webapp and replace with nodemailer and smtp,"Now that Resend.com [supports sending email via SMTP](https://resend.com/blog/why-smtp-still-matters-today), we should convert the webapp to use a native SMTP mailer instead of the Resend SDK. We will need to replace the RESEND_API_KEY with SMTP_* environment variables (which should still be optional). When SMTP_* env vars are missing, we should continue to print the Magic Link login emails to the console how we are currently doing.

This will allow self-hosters to send email* without having to sign up to Resend.com and possibly use an existing email provider.

* Currently only used for Magic Link login

<sub>[TRI-951](https://linear.app/triggerdotdev/issue/TRI-951/remove-resend-dependency-from-the-webapp-and-replace-with-nodemailer)</sub>",,
1841310653,280,[TRI-950] `io.runTask` return type of the callback has TypeScript error when it includes an `unknown` type,"To recreate this issue:

```ts
await io.runTask(""foo"", { name: ""Foo"" }, async () => {
  return {
    foo: ""bar"",
  } as unknown;
});
```

That is because the return type of the callback is typed as required to extend `SerializedJson`:

https://github.com/triggerdotdev/trigger.dev/blob/fa942fc9f5aa1c2255efdb6304600be7f89cf20b/packages/trigger-sdk/src/io.ts#L434

We do this so the types of the return of `runTask` will match what is actually returned, since we run the results of the `runTask` callback through a JSON stringify/parsing as task output is stored in the database as JSON. Because of Resumability, this is a requirement, unless another solution can be identified.

I'm also now realizing that this SerializedJson might be incorrectly typed as well, as it can include `Date` and `Symbol`:

https://github.com/triggerdotdev/trigger.dev/blob/fa942fc9f5aa1c2255efdb6304600be7f89cf20b/packages/core/src/schemas/json.ts#L12

So this could cause issues when resuming a run and using the cached task output, where Date's would be symbols and the types would be wrong. It would be great to test this and possible change the required type to `DeserializedJson`. 

<sub>[TRI-950](https://linear.app/triggerdotdev/issue/TRI-950/ioruntask-return-type-of-the-callback-has-typescript-error-when-it)</sub>",,
1841222585,279,[TRI-949] Create a self-hosting guide powered by a Supabase database,"Since we use postgres under the hood, it would be very cool if it was possible to use an existing Supabase instance instead of having to spin up a different instance of postgres just for Trigger.dev. The first thing that will need to happen is to do some research to see if it's possible, and if it's not, propose any changes to the project to make it possible. One thing to note is that we make use of two different postgres [schemas](https://www.postgresql.org/docs/current/ddl-schemas.html), one for the main database tables and one for graphile worker (named `graphile_worker` by default). So you'll probably need to figure out a way to specify schemas names for both of those that don't conflict with Supabase built in ones. We also use prisma so you'll need to research to see if it's possible to use that with Supabase.

The guide should be created in the Self Hosting section of the docs:

![](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/916e3d8d-b816-4182-b1b1-7f7dcc793b09/ef6bccb3-41e2-49de-b5ce-3f8860e00bc6?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC85MTZlM2Q4ZC1iODE2LTQxODItYjFiMS03ZjdkY2M3OTNiMDkvZWY2YmNjYjMtNDFlMi00OWRlLWI1Y2UtM2Y4ODYwZTAwYmM2IiwiaWF0IjoxNjkxNDk3OTk3LCJleHAiOjE2OTE1ODQzOTd9.0zVxWNbYOMLxmRXwsqvoYbZi_N_SbowzphKGPR9lmlc)

The doc files are in this monorepo [here](https://github.com/triggerdotdev/trigger.dev/tree/main/docs/documentation/guides/self-hosting) and are written in MDX, powered by Mintlify.

Feel free to just run the docker container locally and not include instructions for how to deploy that to a production service, as that will be covered in other guides (or equally feel free to cover that as well).

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-949](https://linear.app/triggerdotdev/issue/TRI-949/create-a-self-hosting-guide-powered-by-a-supabase-database)</sub>",,
1841110165,278,"[TRI-948] Add properties param to logger.log, warn etc.","An extra optional param that would allow setting them. It would keep the existing log level one

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-948](https://linear.app/triggerdotdev/issue/TRI-948/add-properties-param-to-loggerlog-warn-etc)</sub>",,
1840994692,277,[TRI-945] Add a manual project setup guide to the docs,"We have a quickstart which uses the CLI init command. But we don't have a manual installation guide anywhere.

* The manual installation guide should live in the guides sidebar.
* It would have steps to install packages
* It would have steps to add/modify the correct files and folders (everything the init command does).

For inspiration, create-next-app have good manual installation steps here: [https://nextjs.org/docs/getting-started/installation#manual-installation](https://nextjs.org/docs/getting-started/installation#manual-installation)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-945](https://linear.app/triggerdotdev/issue/TRI-945/add-a-manual-project-setup-guide-to-the-docs)</sub>",,
1840888884,276,[TRI-937] CLI init doesn't work outside of a GIT repo,"

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-937](https://linear.app/triggerdotdev/issue/TRI-937/cli-init-doesnt-work-outside-of-a-git-repo)</sub>",,
1840853772,275,[TRI-936] `@trigger.dev/cli init` example job should use `client.defineJob`,"Currently it uses the `new Job` syntax but it should be migrated over to the `client.defineJob` syntax

<sub>[TRI-936](https://linear.app/triggerdotdev/issue/TRI-936/triggerdevcli-init-example-job-should-use-clientdefinejob)</sub>",,
1839842172,274,[TRI-931] CLI create-integration should scaffold a job-catalog file,"When calling the `create-integration` CLI command from inside the monorepo, it should add a job-catalog file. Instead of the NextJS examples stuff it does currently.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-931](https://linear.app/triggerdotdev/issue/TRI-931/cli-create-integration-should-scaffold-a-job-catalog-file)</sub>",,
1839829628,272,[TRI-929] Send a warning log when a duplicate key is encountered in a Run.,"It's important to have unique keys (see [Resumability guide](https://trigger.dev/docs/documentation/concepts/resumability)) for Tasks.

Inside a `run()` call we should keep a track of all the keys, using a Set. If a key already exists we should send a log warning to the server (using the existing log tasks, e.g. `io.logger.warn()`).

Ideally this would have some info to make it easy to fix. At the very least it should have the key name that is duplicated.

`You used the same key more than once: ""whatever-key-name""`

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-929](https://linear.app/triggerdotdev/issue/TRI-929/send-a-warning-log-when-a-duplicate-key-is-encountered-in-a-run)</sub>",,
1839681833,271,[TRI-927] Expand capabilities of EventFilter,"Currently event filters can only match on a set of possible values (if any of them match the filter passes). We should also support the following:

* String matchers (startsWith, endsWith, contains, etc)
* Array matchers (includes, does not include)
* Does not match
* Number matchers (gt,lt,gte, lte, in range, out of range)

We also need a dedicated documentation page for EventFilter and it should cover all the different matchers plus places where it can be used. We also need to audit our integrations and make sure to add configurable EventFilters were there aren't any on triggers.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-927](https://linear.app/triggerdotdev/issue/TRI-927/expand-capabilities-of-eventfilter)</sub>",,
1837946865,266,sveltekit support,sveltekit support or just native node support without a framework,,
1836910065,263,[TRI-887] Tests for the CLI,"### Tests that

* The CLI init command succeeds or fails as appropriate
  * The project is correctly detected
  * The correct files have been created and configured correctly
  * The project builds, i.e. no syntax errors
* The CLI dev command succeeds or fails as appropriate

### Test situations

A separate public GitHub repo which has lots of directories in the root, each one is a project (just Next.js for now but soon Express etc). The first step in the e2e test would be to download the repo and then iterate through the folders.

* Different package managers
* Next.js App and pages directories
* Next.js 12 and 13

### Inspiration

[https://github.com/gmrchk/cli-testing-library](https://github.com/gmrchk/cli-testing-library)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-887](https://linear.app/triggerdotdev/issue/TRI-887/tests-for-the-cli)</sub>",,
1836592665,260,[TRI-878] CLI init fails with Next.js projects that don't have a next.config.js,"It's not compulsory to have a `next.config.js` file. For example this repo: [https://github.com/rishi-raj-jain/lemonsqueezy-nextjs-poc](https://github.com/rishi-raj-jain/lemonsqueezy-nextjs-poc).

Instead we should look at the `package.json` for the `next` dependency: [https://github.com/rishi-raj-jain/lemonsqueezy-nextjs-poc/blob/997ef6cd4680ee8bd4fe9d466ede6dacad3b0d91/package.json#L16](https://github.com/rishi-raj-jain/lemonsqueezy-nextjs-poc/blob/997ef6cd4680ee8bd4fe9d466ede6dacad3b0d91/package.json#L16)

This file needs updating with improved logic, checking for the `next` key in the package.json dependencies object. [https://github.com/triggerdotdev/trigger.dev/blob/main/packages/cli/src/utils/detectNextJsProject.ts](https://github.com/triggerdotdev/trigger.dev/blob/main/packages/cli/src/utils/detectNextJsProject.ts)

It should be tested in a Next project – see the Contributions guide for how to test the CLI.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-878](https://linear.app/triggerdotdev/issue/TRI-878/cli-init-fails-with-nextjs-projects-that-dont-have-a-nextconfigjs)</sub>",,
1836502707,259,"[TRI-886] Update ""Create an integration"" docs for monorepo with tsconfig paths","When creating an integration inside the Trigger.dev monorepo (this repo) you need to add some paths to the tsconfig. Like this: [https://github.com/triggerdotdev/trigger.dev/blob/main/integrations/resend/tsconfig.json](https://github.com/triggerdotdev/trigger.dev/blob/main/integrations/resend/tsconfig.json)

We should add this to our docs page: [https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/create.mdx](https://github.com/triggerdotdev/trigger.dev/blob/main/docs/integrations/create.mdx)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-886](https://linear.app/triggerdotdev/issue/TRI-886/update-create-an-integration-docs-for-monorepo-with-tsconfig-paths)</sub>",,
1835754182,258,@trigger.dev/express throws Request with GET/HEAD method cannot have body,"Hey Folks,

Today while I'm doing a PoC with the trigger client with the express adapter, when I run 'trigger-cli dev' the express server just throws  `throws Request with GET/HEAD method cannot have body`

I followed the error and it seems an error in the `@trigger.dev/express` when it tries to convert to a standard request in specific to this line:

https://github.com/triggerdotdev/trigger.dev/blob/1b0973fbc12ab1442b6deb75b745c4ced7edf6fb/packages/express/src/index.ts#L97",,
1835679362,257,How to use Trigger.dev without Next.js,"Hey Folks, Thanks for such amazing project.

I wanted to start doing my long-lived jobs but we're not using next.js and we don't want to use it, is there a way to use the trigger.dev sdk without to have next.js? 

My bests,
S",,
1835325647,255,[TRI-879] Conditionally hide the help panel on the right when you have configured both PROD and DEV endpoints on the Environments & API Keys page,"Currently the Help panel on the Environments & API Keys page is default open. Instead, conditionally close the panel if both PROD and DEV endpoints are configured. The `<Help/>` component on this page takes `defaultOpen` which you should use to add the conditional logic. 

![CleanShot 2023-08-03 at 16.45.04.png](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/afdcb270-a2bd-4b59-a5a9-9f34ac51c322/ab335e1d-7168-4e4f-a358-8bf1d1840681?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9hZmRjYjI3MC1hMmJkLTRiNTktYTVhOS05ZjM0YWM1MWMzMjIvYWIzMzVlMWQtNzE2OC00ZTRmLWEzNTgtOGJmMWQxODQwNjgxIiwiaWF0IjoxNjkxMDc4MDE2LCJleHAiOjE2OTExNjQ0MTZ9.sEz7C4RMqI7GZeA8BQI3R2hGLk-JRa2kizqYBjJVoFw)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-879](https://linear.app/triggerdotdev/issue/TRI-879/conditionally-hide-the-help-panel-on-the-right-when-you-have)</sub>",,
1833877714,252,[TRI-863] Support Vercel edge functions and Cloudflare functions,"The way we currently fetch data isn't compatible (node-fetch).

More info here:

[https://vercel.com/guides/library-sdk-compatible-with-vercel-edge-runtime-and-functions](https://vercel.com/guides/library-sdk-compatible-with-vercel-edge-runtime-and-functions)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-863](https://linear.app/triggerdotdev/issue/TRI-863/support-vercel-edge-functions-and-cloudflare-functions)</sub>",,
1833741890,251,[TRI-563] Add an event catalog to TriggerClient and generic type inference to `sendEvent()`,"# Proposal

## Adding an event catalog to TriggerClient

```
new TriggerClient({ events: { ... } })
```

You can specify the possible events on the TriggerClient. Then they would be type checked when using sendEvent, and we can pull that information into the Dashboard to display and improve the test experience.

## Allow passing a generic argument to sendEvent

client.sendEvent and io.sendEvent can accept the event type. This would take precedence over the catalog.

```
const job = client.defineJob({
  id: ""test-background-fetch-retry"",
  name: ""Test background fetch retry"",
  version: ""0.0.1"",
  enabled,
  trigger: eventTrigger({
    name: ""test.background-fetch"",
    schema: z.object({
      url: z.string(),
    }),
  }),
  run: async (payload, io, ctx) => {
    
  },
});

//add the ability to have type inference on sendEvent
client.sendEvent<myEvent>({ name: ""test.background-fetch"", payload: { url: ""https://google.com"" }});
```

It would check/autocomplete the name of the event, as well as the payload.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-563](https://linear.app/triggerdotdev/issue/TRI-563/add-an-event-catalog-to-triggerclient-and-generic-type-inference-to)</sub>",,
1833631117,250,[Feature] I want my localhost dashboard...,"Something like `npx prisma studio` 

Features:

* List task
* Test with payload  the task by one click.",,
1833531740,249,[TRI-857] Record the setup experience and provide feedback,"We are looking for **10 people** to record themselves doing the setup experience of the product.

For each completed recording, we'll be giving a **$100 tip** using [Algora](https://console.algora.io/).

### Purpose

We are trying to make the initial experience better. That includes the CLI, in-app onboarding, and the quick start docs.

### Requirements

* You haven't used the product before.
* You do a continuous screen recording with your microphone turned on, ideally camera too but that's optional.
* Say aloud what you're thinking.

### What should go in the video

Try and do the following:

1. Create a Trigger.dev account: [https://cloud.trigger.dev](https://cloud.trigger.dev)
   1. Use the invite code: `continuous-delivery-862`
2. Go through the process of getting setup. Behave how you normally would trying to get it working.
3. Get the example Job running

If you get stuck or experience a bug, that's very useful. Don't cut this out of the video. Please share using the method below.

### Submission

Do not create a Pull Request.

1. Add a comment to this issue with the video attached.
2. (Optional but appreciated) Add any comments you have about how things could be better.
3. We will send you the £100 tip using Algora

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-857](https://linear.app/triggerdotdev/issue/TRI-857/record-the-setup-experience-and-provide-feedback)</sub>",,
1833233280,245,[TRI-861] Next.js warning - Module not found: Can't resolve encoding,"Using the `@trigger.dev/sdk` in a Next.js project produces the following warning:

```
- warn ./node_modules/node-fetch/lib/index.js
Module not found: Can't resolve 'encoding' in '/Users/eric/code/triggerdotdev/trigger.dev-examples/latest-packages/node_modules/node-fetch/lib'
```

It turns out this is a pretty widely experienced warning that doesn't actually effect anything in Next.js. See this supabase-js issue:

https://github.com/supabase/supabase-js/issues/612

`encoding` is an optional dependency of `node-fetch` and so there is no issue with it missing.

If you would like to get rid of this warning, just run:

```sh
npm add encoding -D
```

To add the `encoding` dependency to your dev deps. Of course this won't stop this warning from appearing from production builds, so you can also do:

```sh
npm add encoding
```

<sub>[TRI-861](https://linear.app/triggerdotdev/issue/TRI-861/nextjs-warning-module-not-found-cant-resolve-encoding)</sub>",,
1832752506,244,[TRI-650] Support long-running servers,"# The problem

Serverless requires using the request/response cycle. For long-running servers this doesn't work well.

## Solution

There's a detailed GitHub discussion about this here #430

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-650](https://linear.app/triggerdotdev/issue/TRI-650/support-long-running-servers)</sub>",,
1832717480,243,[TRI-853] chore: Upgrade to prisma 5.1.0,"The new Prisma [5.1.0](https://github.com/prisma/prisma/releases/tag/5.1.0) is out and includes some nice performance improvements, so we should upgrade as soon as possible.

<sub>[TRI-853](https://linear.app/triggerdotdev/issue/TRI-853/chore-upgrade-to-prisma-510)</sub>",,
1829627896,241,[TRI-831] The CLI asks for your project id twice if it isn't already in the package.json,"

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-831](https://linear.app/triggerdotdev/issue/TRI-831/the-cli-asks-for-your-project-id-twice-if-it-isnt-in-the-packagejson)</sub>",,
1829492756,239,[TRI-828] Connection scopes (for github at least) aren't being properly stored as an array of strings,"If you connect to github through OAuth, and then view the scopes in the IntegrationConnection table, you should notice that it is an array of scopes, but with a single string separated by commas. 

![CleanShot 2023-07-31 at 16.32.39@2x.png](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/63425761-3080-41f0-97d2-dd106fc5a425/0177fc67-abba-43b8-87ef-a58b125f8fc7?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC82MzQyNTc2MS0zMDgwLTQxZjAtOTdkMi1kZDEwNmZjNWE0MjUvMDE3N2ZjNjctYWJiYS00M2I4LTg3ZWYtYTU4YjEyNWY4ZmM3IiwiaWF0IjoxNjkwODE3NjkwLCJleHAiOjE2OTA5MDQwOTB9.OVjU04lFn4GKRWSJq_sVbi7PKM0aXP3dpoAPSIX2Xvc)

It seems like the convertToken ([https://github.com/triggerdotdev/trigger.dev/blob/463cbed7dfbd1ab5fca80efadfe8c61aad518c49/apps/webapp/app/services/externalApis/oauth2.server.ts#L249](https://github.com/triggerdotdev/trigger.dev/blob/463cbed7dfbd1ab5fca80efadfe8c61aad518c49/apps/webapp/app/services/externalApis/oauth2.server.ts#L249)) function isn't correctly splitting the scopes string, because the scopeSeparator for github is a space but as you can see from the screenshot above, the scopes are coming back comma separated. This might be a case where the scopes are space separated when constructing them to be sent to github but formatted in a different way when getting the scopes.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-828](https://linear.app/triggerdotdev/issue/TRI-828/connection-scopes-for-github-at-least-arent-being-properly-stored-as)</sub>",,
1827577930,236,[TRI-800] Add prettier settings that are applied across the repo,"Critical settings:

* Double quotes
* Semi colons on
* spaces not tabs

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-800](https://linear.app/triggerdotdev/issue/TRI-800/add-prettier-settings-that-are-applied-across-the-repo)</sub>",,
1824726359,230,Cancel scheduled events,"Currently, events can be scheduled like so:
```ts
await client.sendEvent({
  name: ""user.created"",
  payload: { name: ""John Doe"", email: ""john@doe.com"", paidPlan: true },
  deliverAt: new Date('2024'),
});
```

I want the ability to cancel them.

Either an identifier should be provided as an argument to the function or returned by it so that it can later be referenced when the scheduled event should be canceled.

Alternatively, there should be a completely separate API for scheduling events.",,
1823075025,224,[TRI-768] The CLI init command should generate a jobs/index file and jobs should be imported there.,"When `npx @trigger.dev/cli@latest init` is run it generates the Trigger API route, and an example job.

In the Trigger API route (`app/api/trigger.route.ts` for app router and `pages/api/trigger.ts` for pages router) it imports an individual example job:

```
import { createAppRoute } from ""@trigger.dev/nextjs"";
import { client } from ""@/trigger"";

// Replace this with your own jobs
import ""@/jobs/examples"";

//this route is used to send and receive data with Trigger.dev
export const { POST, dynamic } = createAppRoute(client);
```

Let's change it so we have an `index` file inside the `jobs` folder and just that is imported here.

In that `index` file we would import the `examples` file.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-768](https://linear.app/triggerdotdev/issue/TRI-768/the-cli-init-command-should-generate-a-jobsindex-file-and-jobs-should)</sub>",,
1820999060,217,Maige Usage,"Thanks for trying [Maige](https://maige.app).

Running GPT-based services is pricey. At this point, we ask you to add payment info to continue using Maige.

[Add payment info](https://checkout.stripe.com/c/pay/cs_live_a15gkUzqUrqmSrH7Yqq6f7II3d9JJjAOOizeitbP6splfUxn8mlHyUm6KF#fid1d2BpamRhQ2prcSc%2FJ0xrcWB3JyknZHVsTmB8Jz8ndW5aaWxzYFowNEtUcTZkTGQ8VmFwYTJjRmI0QWlDVmBhVXJtaGZMfGpca1RkQFw3N1Y1MTdLcEt1cFJUckB2RENNPWQ9UU5IUGtXZDA0VGp2VEozVEk2NnZ9SE41dF9kSTU1XHJhVVx8bGgnKSdjd2poVmB3c2B3Jz9xd3BgKSdpZHxqcHFRfHVgJz8ndmxrYmlgWmxxYGgnKSdga2RnaWBVaWRmYG1qaWFgd3YnP3F3cGB4JSUl)

Feel free to close this issue.",,
1820710890,216,[TRI-748] `context.run.isRetry` does not persist after subsequent job run executions,"The `JobRunExecution.isRetry` value, if true, needs to be persisted across JobRunExecutions. so the `isRetry` value doesn't flip from true to false after calling `io.wait`

<sub>[TRI-748](https://linear.app/triggerdotdev/issue/TRI-748/contextrunisretry-does-not-persist-after-subsequent-job-run-executions)</sub>",,
1820071663,211,[TRI-732] Replace `tsconfig` package with `tsconfck` in @trigger.dev/cli,"Currently we are using the [tsconfig](https://www.npmjs.com/package/tsconfig) package for parsing/resolving the tsconfig.json file, but unfortunately the tsconfig package does not support trailing commas (see [here](https://github.com/TypeStrong/tsconfig/issues/30)) (which tsconfig.json does for some reason). We should replace the tsconfig package with [tsconfck](https://www.npmjs.com/package/tsconfck) to better support the weird dialect of JSON that is tsconfig.json.

<sub>[TRI-732](https://linear.app/triggerdotdev/issue/TRI-732/replace-tsconfig-package-with-tsconfck-in-triggerdevcli)</sub>",,
1819871948,210,[TRI-728] @trigger.dev/cli dev command should actually detect if a Next.js project is running on the specified port before opening a tunnel,"Currently in the dev command we don't check if there is a server running locally on the specified port (by default port 3000) in the `dev` command, even though we say we are (see code here: https://github.com/triggerdotdev/trigger.dev/blob/09f906f7a193ade59fb65eaf8da936fe428f13b9/packages/cli/src/commands/dev.ts#L56)

If there is no server found running on the port, we should print an error message clearly explaining the issue and then exit the command.

The way to check if there is a server found running on the port is to perform a ""PING"" to the `endpointHandlerUrl`.  You can do that with the following code (which uses node-fetch)

```ts
const response = await fetch(endpointHandlerUrl, {
  method: ""HEAD"",
  headers: {
    ""x-trigger-api-key"": apiKey,
    ""x-trigger-action"": ""PING"",
    ""x-trigger-endpoint-id"": endpointId,
  },
});
```

<sub>[TRI-728](https://linear.app/triggerdotdev/issue/TRI-728/triggerdevcli-dev-command-should-actually-detect-if-a-nextjs-project)</sub>",,
1818624621,208,[TRI-726] Create support for polling triggers,"Some APIs don't have webhooks, e.g. Notion, Google Sheets.

We'll need to use polling to support these. To achieve this we'll need to store the previous data and see what (if anything) has changed. We should allow triggers to only subscribe to certain types of changes (by specifying a filter and create/delete/update as well probably).

We need to add support for this on the platform side and add helper functions to the main SDK that would make doing polling easier.

Similar to this: [https://nohooks.io/?ref=producthunt](https://nohooks.io/?ref=producthunt)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-726](https://linear.app/triggerdotdev/issue/TRI-726/create-support-for-polling-triggers)</sub>",,
1816794630,206,[TRI-712] Create an ESLint plugin to make sure task keys are unique inside a Job run function,"Accidentally using duplicate task keys inside an individual job can lead to unexpected results (see our docs for more info: https://trigger.dev/docs/documentation/concepts/resumability). It would be great to create an ESLint plugin that can detect this.

<sub>[TRI-712](https://linear.app/triggerdotdev/issue/TRI-712/create-an-eslint-plugin-to-make-sure-task-keys-are-unique-inside-a-job)</sub>",,
1816698388,205,[TRI-711] Add JavaScript support to the CLI init command,"Currently the init command generates TypeScript files:

* trigger.ts
* The API route (location and content varies for pages or app router)
* Example job file

If JavaScript is detected then we should generate JS files instead of TS.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-711](https://linear.app/triggerdotdev/issue/TRI-711/add-javascript-support-to-the-cli-init-command)</sub>",,
1815486409,202,[TRI-710] Create an initial end-to-end test harness,"We need to add an automated test suite that does end-to-end testing of the entire system. This issue covers creating an initial test harness that should do the following things:

- Run the Trigger.dev webapp backed by a fresh Postgres database using docker (maybe using the [dev-compose.yml](./docker/dev-compose.yml) file using `pnpm run dev:docker`)
- Using something like Playwright, create an account
- Retrieve a dev API key
- Use the API key in a test Next.js project that already includes some testing jobs
- Run the Next.js project and the `@trigger.dev/cli dev` command to connect to the running Trigger.dev webapp
- Using playwright, navigate to the jobs list and make sure the correct jobs have been created
- Stop the docker services running

This should all happen in some kind of test runner (maybe vitest?) that should be able to be run using the `pnpm run test:e2e` command. This should also be added to the github publish workflow. 

<sub>[TRI-710](https://linear.app/triggerdotdev/issue/TRI-710/create-an-initial-end-to-end-test-harness)</sub>",,
1815411930,201,[TRI-709] Add git database tasks to `@trigger.dev/github` integration,"The `@trigger.dev/github` integration currently only supports a limited number of tasks found here:

https://github.com/triggerdotdev/trigger.dev/blob/main/integrations/github/src/tasks.ts

We should add tasks for cover the entire ""git database"" collection of rest API endpoints, found here:

- [ ] Blobs: https://docs.github.com/en/rest/git/blobs?apiVersion=2022-11-28
- [ ] Commits: https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28
- [ ] References: https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28
- [ ] Tags: https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28
- [ ] Trees: https://docs.github.com/en/rest/git/trees?apiVersion=2022-11-28



<sub>[TRI-709](https://linear.app/triggerdotdev/issue/TRI-709/add-git-database-tasks-to-triggerdevgithub-integration)</sub>",,
1813645813,199,[TRI-707] Add multiple event name support to EventDispatcher,"Currently the EventDispatcher name column is a string and so cannot support multiple event names. It would be nice to be able to turn this into an array and allow a single EventDispatcher to work with a list of possible event names. We could also add support to `eventTrigger` to accept either a single `string` event name or an array of strings

<sub>[TRI-707](https://linear.app/triggerdotdev/issue/TRI-707/add-multiple-event-name-support-to-eventdispatcher)</sub>",,
1813269503,198,[TRI-703] Chore: update webapp to Remix 2.0.1,"We're already using most of Remix's v2 features, as future flags in our [remix.config.js](https://github.com/triggerdotdev/trigger.dev/blob/e350659e244e6976747f726984c83a780ba94882/apps/webapp/remix.config.js#L3).

## How to

1. Read Remix's recommendations in the [v2 release](https://github.com/remix-run/remix/releases/tag/remix%402.0.0)
2. They recommend upgrading to 1.19.3 first: `npx upgrade-remix 1.19.3`.
3. Upgrading to `v2_meta` and `v2_headers`. These should be trivial as I don't think we use the headers function anywhere, and every route on the site requires login so only the root.tsx meta function is being used right now.
4. Upgrade Remix to [v2.0.1](https://github.com/remix-run/remix/releases/tag/remix%402.0.1).
5. Run `pnpm run typecheck --filter webapp` to find and fix TypeScript errors.
6. Run the webapp and check it functions as expected

Please follow the [contribution guide](https://github.com/triggerdotdev/trigger.dev/blob/main/CONTRIBUTING.md) development section to setup and run the web app.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-703](https://linear.app/triggerdotdev/issue/TRI-703/chore-update-webapp-to-remix-201)</sub>",,
1812752193,193,[TRI-702] The Project job counts inside of the Orgs list is counting internal jobs,"Jobs where `internal: true` should not be counted towards jobs in the project.

<img width=""491"" alt=""CleanShot 2023-07-19 at 22 17 57@2x"" src=""https://github.com/triggerdotdev/trigger.dev/assets/534/68380b67-088d-4901-87ee-6c422d9eb4ed"">


<sub>[TRI-702](https://linear.app/triggerdotdev/issue/TRI-702/the-project-job-counts-inside-of-the-orgs-list-is-counting-internal)</sub>",,
1812749269,192,[TRI-701] Add job count pill to the Project drop down in breadcrumb,"Add the same job count pill found in the Organization list

<img width=""491"" alt=""CleanShot 2023-07-19 at 22 17 57@2x"" src=""https://github.com/triggerdotdev/trigger.dev/assets/534/0bf3a825-2b2e-41f4-8969-c8b25843519c"">

To the Project selector dropdown in the breadcrumbs:

<img width=""377"" alt=""CleanShot 2023-07-19 at 22 18 16@2x"" src=""https://github.com/triggerdotdev/trigger.dev/assets/534/a060a8b5-353c-4ea9-a3c7-ad3f4f259dad"">



<sub>[TRI-701](https://linear.app/triggerdotdev/issue/TRI-701/add-job-count-pill-to-the-project-drop-down-in-breadcrumb)</sub>",,
1812269807,191,[TRI-700] Figure out a better way to run migrations during docker container startup,"Currently in the Dockerfile, there is this comment:

![](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/6a20f03d-93be-411d-81b2-92639dceec21/1411fcb0-23f7-45d9-a003-12ad6c06a90a?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC82YTIwZjAzZC05M2JlLTQxMWQtODFiMi05MjYzOWRjZWVjMjEvMTQxMWZjYjAtMjNmNy00NWQ5LWEwMDMtMTJhZDZjMDZhOTBhIiwiaWF0IjoxNjg5NzgzMDU4LCJleHAiOjE2ODk4Njk0NTh9.zqn4k7NojzunGyyGT_fPWhcHZPd3PPbyXvnSEob9vjk)

We install those globally so in the `entrypoint.sh` script we can run the following commands:

![](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/aadad042-b0b3-4a60-8f8b-ecbfd435e871/e413e815-789f-488d-9993-2d6b2b8c53b8?signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiLzgwYTg4NGIxLWY4NGMtNDlkNi05MWRiLTA3YTM5MTY2M2QyMC9hYWRhZDA0Mi1iMGIzLTRhNjAtOGY4Yi1lY2JmZDQzNWU4NzEvZTQxM2U4MTUtNzg5Zi00ODhkLTk5OTMtMmQ2YjJiOGM1M2I4IiwiaWF0IjoxNjg5NzgzMDU4LCJleHAiOjE2ODk4Njk0NTh9.5X5Ps1yFJw4OPv_glMZxxh3_rIAKD4Pabv8jzOA6Lr0)

It would be great if we could figure out a better way to do this so we don't have to install those dependencies globally, but I'm not sure if there is an answer to this one.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-700](https://linear.app/triggerdotdev/issue/TRI-700/figure-out-a-better-way-to-run-migrations-during-docker-container)</sub>",,
1812223680,190,[TRI-699] The CLI init command fails on Windows because of file:// paths,"## Steps to reproduce
Running the init command on Windows results in this:

```bash
""√ Successfully added dependencies to package.json: @trigger.dev/sdk@2.0.0-next.18, @trigger.dev/nextjs@1.0.0-next.8
✅ Added TRIGGER_API_KEY=*** to .env.local
✅ Added TRIGGER_API_URL=https://cloud.trigger.dev/ to .env.local
Aborting installation...
Error [ERR_UNSUPPORTED_ESM_URL_SCHEME]: Only file and data URLs are supported by the default ESM loader. On Windows, absolute paths must be valid file:// URLs. Received protocol 'd:'""
```

<sub>[TRI-699](https://linear.app/triggerdotdev/issue/TRI-699/the-cli-init-command-fails-on-windows-because-of-file-paths)</sub>",,
1809828805,186,[TRI-689] Login through magic link not working in Safari when running on localhost:3030,"Safari version: Version 16.4.1 (17615.1.26.101.10, 17615)

To recreate, make sure you DON'T have the `RESEND_API_KEY` env var set, so the magic link is printed to the terminal instead of actually sent as an email (I can't recreate the problem when the magic link is sent through the email).

After navigating to the magic link (in Safari) you will get redirected back to the magic link page, instead of into the dashboard.

I'm thinking this might have something to do with the the cookie session storage (which you can find here: https://github.com/triggerdotdev/trigger.dev/blob/bca0df2692a9255d79a3858e8bb091cdfa883632/apps/webapp/app/services/sessionStorage.server.ts) but I'm not exactly sure what is causing it

<sub>[TRI-689](https://linear.app/triggerdotdev/issue/TRI-689/login-through-magic-link-not-working-in-safari-when-running-on)</sub>",,
1806309711,179,[TRI-662] Add instructions to the CONTRIBUTING.md file for adding and running migrations,"null

<sub>[TRI-662](https://linear.app/triggerdotdev/issue/TRI-662/add-instructions-to-the-contributingmd-file-for-adding-and-running)</sub>",,
1806308795,178,[TRI-661] We need to add instructions in CONTRIBUTING.md for adding changesets to PRs,"null

<sub>[TRI-661](https://linear.app/triggerdotdev/issue/TRI-661/we-need-to-add-instructions-in-contributingmd-for-adding-changesets-to)</sub>",,
1805179094,172,[TRI-660] Add steps to the contributing guide on getting some jobs running locally,"It would be really helpful I think to include very explicit instructions for how to get some example jobs running locally for contributors to this project. Currently we have the `nextjs-example` example inside the repo but it's got WAY too many jobs in it to be useful, especially for first time contributors.

So part of this issue would be to create a barebones nextjs example (maybe something called `examples/jobs-starter` or similar) that just has a few simple (scheduled and event triggers) jobs and then add instructions to the contributing guide for getting those into the local instance and running them

<sub>[TRI-660](https://linear.app/triggerdotdev/issue/TRI-660/add-steps-to-the-contributing-guide-on-getting-some-jobs-running)</sub>",,
1805000792,169,"[TRI-659] Add a ""Connect with X"" button to the integration details page","![Linear-hosted image](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/54898c9a-492a-4449-b961-d9fd1f0f8cb0/625e2972-c1d9-43ef-a051-72823dd9a964)
[Image source](https://uploads.linear.app/80a884b1-f84c-49d6-91db-07a391663d20/54898c9a-492a-4449-b961-d9fd1f0f8cb0/625e2972-c1d9-43ef-a051-72823dd9a964)
This should only exist for OAuth2 integrations where either

* It's a DEVELOPER integration and there are no connections yet
* It's an EXTERNAL integration

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-659](https://linear.app/triggerdotdev/issue/TRI-659/add-a-connect-with-x-button-to-the-integration-details-page)</sub>",,
1803597681,167,[TRI-655] The `@trigger.dev/cli dev` command should detect out-of-date packages,"It should check the npm registry for any of the `@trigger.dev/*` packages in the current project and output a warning, and also mention the `update` command (#166)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-655](https://linear.app/triggerdotdev/issue/TRI-655/the-triggerdevcli-dev-command-should-detect-out-of-date-packages)</sub>",,
1803593216,166,[TRI-654] Add an `update` sub-command the @trigger.dev/cli that updates all @trigger.dev/* packages,"It's annoying currently updated `@trigger.dev/*` packages to the latest ones so we should have a command that could be run like so:

```
$ npx @trigger.dev/cli update
```

This should find all the `@trigger.dev/*` packages in the package.json of the current project and use the NPM registry API to figure out if there are newer versions. It should display which ones are newer and ask for confirmation before updating the package.json and re-installing dependencies.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-654](https://linear.app/triggerdotdev/issue/TRI-654/add-an-update-sub-command-the-triggerdevcli-that-updates-all)</sub>",,
1803384558,165,"[TRI-583] CLI Init: If there's an endpoint ID in package.json, use it","

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-583](https://linear.app/triggerdotdev/issue/TRI-583/cli-init-if-theres-an-endpoint-id-in-packagejson-use-it)</sub>",,
1803384272,164,"[TRI-653] When a Job is canceled, and then retried, a canceled Delay doesn't change state in the UI to in-progress.","Steps to reproduce

1. Create a Job that has a delay in it (30 seconds or something short so you can press the cancel button but it doesn't take forever to test)
2. Run the Job
3. Cancel the Run while the delay is running
4. Then press ""Rerun"" and ""Retry""
5. The Delay task still says it is canceled and doesn't show the timer counting down (it is actually running)

To fix this the state of the Task needs resetting if it's canceled and rerun.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-653](https://linear.app/triggerdotdev/issue/TRI-653/when-a-job-is-canceled-and-then-retried-a-canceled-delay-doesnt-change)</sub>",,
1803375506,163,[TRI-214] Graphile queues can get into a permanently locked state if the server quits,"

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-214](https://linear.app/triggerdotdev/issue/TRI-214/graphile-queues-can-get-into-a-permanently-locked-state-if-the-server)</sub>",,
1803366647,162,[TRI-606] Add a TriggerClient#defineJob function that can be used instead of the Job constructor,"This would be exactly like defining a job with `new Job(client, options)` but would allow a possible nicer API (and one that would better match the mental model of producing a side-effect). For example:

```
const job = new Job(client, options)
```

Would be the same as:

```
const job = client.defineJob(options)
```

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-606](https://linear.app/triggerdotdev/issue/TRI-606/add-a-triggerclientdefinejob-function-that-can-be-used-instead-of-the)</sub>",,
1803319856,160,[TRI-445] Update Docker image to follow Node.js Docker guidelines,"[https://snyk.io/blog/10-best-practices-to-containerize-nodejs-web-applications-with-docker/](https://snyk.io/blog/10-best-practices-to-containerize-nodejs-web-applications-with-docker/)

We need to go through this entire post and make sure we are following their suggestion in our Dockerfile, specifically these are most relevant:

* Use explicit and deterministic Docker base image tags
* Don’t run containers as root
* Safely terminate Node.js Docker web applications
* Graceful shutdown for your Node.js web applications
* Keeping unnecessary files out of the image

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-445](https://linear.app/triggerdotdev/issue/TRI-445/update-docker-image-to-follow-nodejs-docker-guidelines)</sub>",,
1803318218,159,[TRI-321] Better handle errors bubbling up in subtasks,"Currently when viewing a failed task because a subtasks threw an error is not a great experience. We need to improve that

When a subtask fails (and all retries are done) the error doesn't bubble up to the parent task. Instead you get a very generic: ""Error: Task errored at IO.runTask"".

Instead, a failed subtask should bubble that error up to parent tasks (so the subtask error is duplicated onto the parent).

You can easily reproduce this by creating a task with subtask inside that throws a specific error.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-321](https://linear.app/triggerdotdev/issue/TRI-321/better-handle-errors-bubbling-up-in-subtasks)</sub>",,
1803316979,158,[TRI-651] @trigger.dev/typeform: Check that webhook has a matching url,"When registering a typeform webhook, we see if an existing webhook for the tag/form exists, and if it does we update the webhook and return. We also need to make sure that the url of the webhook matches that of the `httpSource.url`. If they don't match, then we need to take the ""create webhook"" path.

[https://github.com/triggerdotdev/trigger.dev/blob/main/integrations/typeform/src/index.ts#L189](https://github.com/triggerdotdev/trigger.dev/blob/main/integrations/typeform/src/index.ts#L189)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-651](https://linear.app/triggerdotdev/issue/TRI-651/triggerdevtypeform-check-that-webhook-has-a-matching-url)</sub>",,
1803182557,156,[TRI-409] Add live-refreshing to the Environments and API Keys page,"It's common to sit on this page when setting up a Next.js project. This should work in a similar way as how we do live-refreshing on the run page, using an `useEventSource` hook on the client:

[https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/\_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam/route.tsx#L75](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/\_app.orgs.$organizationSlug.projects.$projectParam.jobs.$jobParam.runs.$runParam/route.tsx#L75)

Which hits a loader that uses SSE:

[https://github.com/triggerdotdev/trigger.dev/blob/0b004fbcaf88ca80b7d8809964e02dffe264be58/apps/webapp/app/routes/\_app.orgs.%24organizationSlug.projects.%24projectParam.jobs.%24jobParam.runs.%24runParam.stream/route.tsx](https://github.com/triggerdotdev/trigger.dev/blob/0b004fbcaf88ca80b7d8809964e02dffe264be58/apps/webapp/app/routes/\_app.orgs.%24organizationSlug.projects.%24projectParam.jobs.%24jobParam.runs.%24runParam.stream/route.tsx)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-409](https://linear.app/triggerdotdev/issue/TRI-409/add-live-refreshing-to-the-environments-and-api-keys-page)</sub>",,
1803172357,155,[TRI-573] Move job loading to the jobs loader,"By fetching jobs too high up in the route hierarchy, navigating to the job list page does not pick up on new jobs created since the last time the jobs were fetched. This is because of how remix works and so we need to move all fetching logic to the correct places

Currently, jobs are fetched in the ProjectPresenter and should be moved to their own presenter (JobListPresenter). The route that currently fetches the jobs is here:

[https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/\_app.orgs.$organizationSlug.projects.$projectParam/route.tsx](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/\_app.orgs.$organizationSlug.projects.$projectParam/route.tsx)

But they should be moved to here:

[https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/\_app.orgs.$organizationSlug.projects.$projectParam.\_index/route.tsx](https://github.com/triggerdotdev/trigger.dev/blob/main/apps/webapp/app/routes/\_app.orgs.$organizationSlug.projects.$projectParam.\_index/route.tsx)

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-573](https://linear.app/triggerdotdev/issue/TRI-573/move-job-loading-to-the-jobs-loader)</sub>",,
1801273370,154,[TRI-644] On a Run retry add info to `context.run`,"When this button is pressed it retries the existing run.

![Linear-hosted image](https://github.com/triggerdotdev/trigger.dev/assets/10635986/8e7abfb8-a962-42a2-9387-30796b3142b5)
[Image source](https://github.com/triggerdotdev/trigger.dev/assets/10635986/8e7abfb8-a962-42a2-9387-30796b3142b5)


In this case, we should add some metadata to `context.run` so you can identify that it is a rerun and potentially how many attempts have been made as well.

<sub>From [SyncLinear.com](https://synclinear.com) | [TRI-644](https://linear.app/triggerdotdev/issue/TRI-644/on-a-run-retry-add-info-to-contextrun)</sub>",,
1794116096,146,Fix the link for discord to be the permanent link,"The link in the readme for the discord does not link the server as it expired.
This is the permanent link https://discord.gg/JtBAxBr2m3

",,
1794108154,145,"Error with setup ""pnpm dlx @trigger.dev/cli@latest init"" vs. ""npx @trigger.dev/cli@latest init -k tr_dev_*********** -t https://cloud.trigger.dev""","I was having a problem with setting up the initial init. I was following the tutorial from the jobs page and when I copy and paste the string with the params included from step 1 it fails. (See fig 1. and fig.2)

```Aborting installation...
TypeError [ERR_INVALID_URL]: Invalid URL
 ERROR  Command failed with exit code 1: cli init -k tr_dev_***********  -t https://cloud.trigger.dev

pnpm: Command failed with exit code 1: cli init -k tr_dev_*********** -t https://cloud.trigger.dev
    at makeError (/opt/homebrew/Cellar/pnpm/8.6.2/libexec/dist/pnpm.cjs:24241:17)
    at handlePromise (/opt/homebrew/Cellar/pnpm/8.6.2/libexec/dist/pnpm.cjs:24812:33)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async Object.handler [as dlx] (/opt/homebrew/Cellar/pnpm/8.6.2/libexec/dist/pnpm.cjs:207055:7)
    at async /opt/homebrew/Cellar/pnpm/8.6.2/libexec/dist/pnpm.cjs:216461:21
    at async main (/opt/homebrew/Cellar/pnpm/8.6.2/libexec/dist/pnpm.cjs:216428:34)
    at async runPnpm (/opt/homebrew/Cellar/pnpm/8.6.2/libexec/dist/pnpm.cjs:216683:5)
    at async /opt/homebrew/Cellar/pnpm/8.6.2/libexec/dist/pnpm.cjs:216675:7
```

<img width=""731"" alt=""Screenshot 2023-07-07 at 3 15 50 PM"" src=""https://github.com/triggerdotdev/trigger.dev/assets/43126781/fdd8a368-b5e0-46eb-ada2-4d6bf1cb2cf5""> fig 1.


<img width=""661"" alt=""Screenshot 2023-07-07 at 3 14 02 PM"" src=""https://github.com/triggerdotdev/trigger.dev/assets/43126781/74f2acfa-2d72-4432-96dd-119af1fb9c3b""> fig 2.

But if I follow the guide from https://trigger.dev/docs/documentation/quickstart and I don't pass the params and use the command line it works. (See fig 3.)

Works: ```pnpm dlx @trigger.dev/cli@latest init```
Does not work:  ```pnpm dlx @trigger.dev/cli@latest init -k tr_dev_********** -t https://cloud.trigger.dev```

<img width=""701"" alt=""Screenshot 2023-07-07 at 3 16 25 PM"" src=""https://github.com/triggerdotdev/trigger.dev/assets/43126781/50516275-d7c2-4c47-a342-6050c16e1fbf"">


",,
1791026122,140,Better display openai response errors,"When submitting an invalid request with the OpenAI package, this is what is shown in the dashboard:

<img width=""762"" alt=""CleanShot 2023-07-06 at 08 58 39@2x"" src=""https://github.com/triggerdotdev/trigger.dev/assets/534/7ee4c1e5-cff6-4077-82df-9ccfc15345e9"">

And here is the actual response body from OpenAI:

```json
{
  ""error"": {
    ""message"": ""Invalid schema for function 'createTypescriptFiles': schema must be a JSON Schema of 'type: \""object\""', got 'type: \""array\""'."",
    ""type"": ""invalid_request_error"",
    ""param"": null,
    ""code"": null
  }
}
```
",,
1671221382,121,Gmail events,Loving everything about trigger.dev so far! Only issue is that there are triggers from Zapier / Pipedream that I really rather not redo myself. Notably gmail new message / new labeled email events. Is there a roadmap for integrations?,,
1653402682,120,[TRI-36] Add connections to the SDK,"A connection is a new concept in the SDK. Connections can have the following functionality:

- [ ] A set of tasks
- [ ] Authentication information
- [ ] An exposed ""client"" that already has authentication but will still need to be wrapped in a task
- [ ] Events

<sub>[TRI-36](https://linear.app/triggerdotdev/issue/TRI-36/add-connections-to-the-sdk)</sub>",,
1649427531,119,Handle task errors and retrying,,,
1649414839,118,Implement Event Get/List API,,,
1649413999,117,Implement Task Get/List API,,,
1649412615,116,Implement Execution Get/List API,,,
1649371554,115,Re-implement KV using new Tasks API,,,
1649370138,114,Reimplement runOnce using the new Tasks API,,,
1649369019,113,Re-implement sendEvent using new Tasks API,,,
1641649992,111,Trigger executions using HTTP instead of websockets,"This is an initial tracer bullet issue to get Jobs executing over HTTP. Work that will need to be done:

- [ ] Create the new data models necessary (Jobs, Endpoints, etc.)
- [ ] Create a new API for registering endpoints
- [ ] Create the client side API for registering jobs
- [ ] Creating the job records when an endpoint is registered
- [ ] Sending a request to the client when a custom event is sent to ./api/v3/events
- [ ] API for creating executions from the client
- [ ] Run an execution over http",,
1639824893,110,Add SSE support for getting events from a specific execution,Developers should be able to directly invite a trigger and get an execution ID back,,
1639642336,109,Create @trigger.dev/nextjs adapter,"Create an adapter for using Trigger.dev in a next.js project. Something like this:

```ts
import { Trigger, EntryPoint, customEvent } from ""@trigger.dev/sdk"";
import { createHandler } from ""@trigger.dev/nextjs"";

const entryPoint = new EntryPoint({
  apiKey: process.env.TRIGGER_API_KEY,
});

new Trigger({
  id: ""my-workflow"",
  name: ""My workflow"",
  logLevel: ""debug"",
  on: customEvent({ name: ""user.created"" }),
  run: async (event, ctx) => {
    await ctx.logger.info(""Inside the smoke test workflow, received event"", {
      event,
      myDate: new Date(),
    });

    return { foo: ""bar"" };
  },
}).register(entryPoint);

const handler = createHandler(entryPoint);

export default handler;
```",,
1639442598,108,Self-hosting,Simplify the platform and make it much easier to self-host,,
1639432204,107,"Make the dashboard update ""Live""","Any page that makes sense to have auto-refreshing data, like the execution page",,
1639347543,106,Replace background-tasks in webapp with Graphile worker,,,
1639344692,105,Convert @trigger.dev/shopify to a modern client,,,
1639341830,104,Release deprecated versions of @trigger.dev/sdk and @trigger.dev/{integration},,,
1639339071,103,Convert @trigger.dev/airtable to modern client,,,
1639337459,102,Convert @trigger.dev/notion to modern client,,,
1639334720,101,Convert @trigger.dev/sendgrid to modern client,,,
1639334209,100,Convert @trigger.dev/resend to modern client,,,
1639333730,99,Convert @trigger.dev/slack to modern client,,,
1639333136,98,Convert @trigger.dev/github to modern client,,,
1639329273,97,Implement new CLI,,,
1639329051,96,EntryPoint publishing,"Since live deployments will no longer automatically connect to trigger.dev to self-register triggers, we'll need to allow developers to ""publish"" an entry point to live (and enter a hostname and path). During the publishing process, the trigger.dev platform will make an HTTP request to the live entry point and attempt to gather information about all the triggers associated with the entry point. It will then ""publish"" those triggers to live on the platform side, and do any setup required for each trigger to work. Once each trigger is published, then the version of the trigger found in the live entry point will be aliased to ""live"", and any new changes to the trigger will need to have a version number > the live version",,
1639328943,95,Trigger versioning,,,
1639328791,94,Teams,,,
1639328656,93,Add deprecation warnings to existing clients,,,
1639328524,92,Origin triggered events,Allow events to Trigger runs without first going through the platform,,
1639328399,91,Hydrate clients with connections/auth,,,
1639328257,90,Connections/Auth API,,,
1639328115,89,Convert legacy webhooks to Webhooks API,,,
1639327982,88,Convert legacy clients to Task API,,,
1639327856,87,Tunnel HTTP Trigger executions to localhost,,,
1639327643,86,Move request tasks to clients,,,
1639327496,85,New Webhook API,,,
1639327360,84,Serverless Trigger execution,,,
1639327202,83,New Task API,"Tasks are the new abstraction for a single unit of work, and can be completely configured and controlled via clients through the Task API. Tasks can also have subtasks, which allows for composable task hierarchies",,
1639324826,82,Platform simplification,"Remove services and 3rd party dependencies, including Apache Pulsar, in favor of solutions that use PostgreSQL (like Graphile Worker). This is will include removing services such as the integrations service and the websocket service.",,
1621738354,79,How to deploy to render.com?,"Hey Trigger team

I'm deploying to Render web service, and deploy to Render failed because it will do a health check (returns 2xx status for success) when deploying, since Trigger doesn't listen on any port, the check will always fail. You can read more [here](https://render.com/docs/deploys#zero-downtime-deploys) and you can't [disable the health check](https://community.render.com/t/how-can-i-disable-the-health-check-in-render/8526).

Thanks",,
1620438749,78,require esm error,"Follow the steps

1. npx create-trigger@latest blank-starter
1. yarn
2. yarn build
3. yarn start

And I got

```
Error [ERR_REQUIRE_ESM]: require() of ES Module node_modules/terminal-link/index.js from /node_modules/@trigger.dev/sdk/dist/index.js not supported.
```",,
1610934744,76,Create MailerSend triggers and actions,"Hello to the Trigger.dev team!
I'm Agathe Brusset, project manager of MailerSend, a solution to send transactional emails, SMS and verify emails addresses. We would love to connect MailerSend to Trigger.dev. Would you consider adding MailerSend as an email and SMS provider?

Please find more details on our website: [www.mailersend.com](http://www.mailersend.com/), [API documentation](http://www.developers.mailersend.com/) and our [NodeJS](https://github.com/mailersend/mailersend-nodejs) SDK.

Let us know when you create an account so we can allow you to test our features.

Regards,
Agathe Brusset",,
1594206406,67,Supabase Integration,"Hi, I see you guys have a example of using supabase trigger at your home page. Just wondering if you have a example code or  supabase integration coming? 

Thanks!",,
1584000260,59,Expose an API to access data about workflows and workflow runs,"Allow customers to be able to access workflow data through an API. Some potential API endpoints:

- GET Paginated list of workflows
- GET paginated list of workflows runs with status
- GET individual workflow run log
- Webhook for when a workflow run succeeds, fails",,
1580832061,58,runOnce doesn't get re-run on server restart,"If a runOnce task doesn't complete and your server goes down, it doesn't retry when the server is back up.

```js
run: async (event, ctx) => {
    const { videoId } = event;
    const result = await ctx.runOnce(videoId, async (idempotencyKey) => {
      await new Promise((r) => setTimeout(r, 10000));
      return ""finished"";
    });
    return { result };
  }
```

This does not restart if I kill the server mid-way. It just console.logs this when the server is back up:
 `[trigger.dev]  Run cldzype0* complete 🏃 [render-video]`",,
1572277087,48,Create self-hosting guide,"The guide should make it easy to host the project yourself.

Trigger.dev involves several services. 

Our current deployment system:
- The main web app and web socket services using Flight Control (see [flightcontrol.json].(https://github.com/triggerdotdev/trigger.dev/blob/bf57430b6663fa62fc4a395d3aeb05104eae0d1b/flightcontrol.json)
- The authentication service (which uses Nango) to fly.io.
- Apache Pulsar using [StreamNative](https://streamnative.io/product).",,
1570346059,43,BUG: Minor bug with OAuth Connection buttons,"This is not a major issue, but when you click on an Oauth Connection button on the API Integrations page and cancel the request and click on another OAuth button (or a nav button), it seems to retain the previous connection state resulting in the previous integration popup firing.

I haven't had a chance to dive into it, but seems to a be a issue with `ConnectOAuthButton` when it catches an error from a cancelled request -https://github.com/triggerdotdev/trigger.dev/blob/bf57430b6663fa62fc4a395d3aeb05104eae0d1b/apps/webapp/app/components/integrations/ConnectOAuthButton.tsx#L99-L107

See:

[Screencast from 2023-02-03 13-40-18.webm](https://user-images.githubusercontent.com/2868/216681824-a9d91be0-ac5d-4838-8657-9ffcf4a9aea5.webm)
",,
1569714221,42,Shopify New Order Webhook,Document: https://shopify.dev/api/admin-rest/2022-04/resources/webhook,,
1567934639,40,Create .net library/package,,,
1567132136,38,api/events/sendEvent section of docs is currently broken,"Following the link gives you an ""Oops, there's an error"" page.",,
1553605931,11,Another issue,,,
1553598567,10,Workflow test,,,
1531499807,5,Integrate pull request preview environments,"**Is your feature request related to a problem? Please describe.**
I would like to support trigger.dev by implementing [Uffizzi](https://github.com/UffizziCloud/uffizzi) preview environments.
Disclaimer: I work on [Uffizzi](https://github.com/UffizziCloud/uffizzi).

Uffizzi is a Open Source full stack previews engine and our platform is available completely free for trigger.dev (and all open source projects). This will provide maintainers with preview environments of every PR in the cloud, which enables faster iterations and reduces time to merge. You can see the open source repos which are currently using Uffizzi over [here](https://uffizzi.notion.site/)

Uffizzi is purpose-built for the task of previewing PRs and it integrates with your workflow to deploy preview environments in the background without any manual steps for maintainers or contributors.

We can go ahead and create an Initial PoC for you right away if you think there is value in this proposal.
",,
1525679997,4,Test issue 2 for webhook,This is some body text,,
1514714160,2,Test issue for webhook workflow,"This is the body text
`const name = ""Matt""`",,
1472753837,1,Testing creating a new issue,This is the issue body,,
